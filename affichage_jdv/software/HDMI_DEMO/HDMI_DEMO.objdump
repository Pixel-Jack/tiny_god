
HDMI_DEMO.elf:     file format elf32-littlenios2
HDMI_DEMO.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801e8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0001e884 memsz 0x0001e884 flags r-x
    LOAD off    0x0001f8a4 vaddr 0x0009e8a4 paddr 0x000a0720 align 2**12
         filesz 0x00001e7c memsz 0x00001e7c flags rw-
    LOAD off    0x0002259c vaddr 0x000a259c paddr 0x000a259c align 2**12
         filesz 0x00000000 memsz 0x000003f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001c8  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a6d8  000801e8  000801e8  000011e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003fe4  0009a8c0  0009a8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e7c  0009e8a4  000a0720  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f0  000a259c  000a259c  0002259c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00021720  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f18  00000000  00000000  00021748  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000018c0  00000000  00000000  00022660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002e77d  00000000  00000000  00023f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000999b  00000000  00000000  0005269d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001aab9  00000000  00000000  0005c038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002140  00000000  00000000  00076af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002878  00000000  00000000  00078c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d76c  00000000  00000000  0007b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00088c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ad8  00000000  00000000  00088c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008d2cb  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0008d2ce  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008d2d8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008d2d9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008d2da  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008d2de  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008d2e2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0008d2e6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008d2ef  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008d2f8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0008d301  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000055  00000000  00000000  0008d30a  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d6d  00000000  00000000  0008d35f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000606c6  00000000  00000000  000920cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801e8 l    d  .text	00000000 .text
0009a8c0 l    d  .rodata	00000000 .rodata
0009e8a4 l    d  .rwdata	00000000 .rwdata
000a259c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00080238 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 adv7513.c
0009e8a4 l     O .rwdata	000000f0 vic_table.3765
00080a0c l     F .text	0000008c adv7513_config_csc
00080a98 l     F .text	000000f8 adv7513_video_in_format
00080b90 l     F .text	00000150 adv7513_video_out_format
00080ce0 l     F .text	00000490 adv7513_avi_infoframe
00081170 l     F .text	00000198 adv7513_video_in_format_3d
00081308 l     F .text	00000534 adv7513_avi_infoframe_3d
0008183c l     F .text	00000054 adv7513_vendor_infoframe_3d
00081890 l     F .text	00000164 adv7513_video_out_format_3d
000819f4 l     F .text	000000dc adv7513_video_init
00081ad0 l     F .text	000000b4 adv7513_video_init_3d
00000000 l    df *ABS*	00000000 edid.c
0009e994 l     O .rwdata	000000f0 vic_table.4657
0009ea84 l     O .rwdata	00000040 sad_format.4642
000a06d8 l     O .rwdata	00000008 header.5200
00089574 l     F .text	000000b4 eb_establish_timing
00089404 l     F .text	000000b8 eb_establish_timing_i
000894bc l     F .text	000000b8 eb_establish_timing_rb
00000000 l    df *ABS*	00000000 encoder.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 main.c
0008be30 l     F .text	000002e4 bin_dump
0008c114 l     F .text	00000378 adv7513_int_handler
0008c48c l     F .text	00000064 adv7513_long_to_int_mask
0008c770 l     F .text	00000050 adv7513_int_mask_to_long
0008c7c0 l     F .text	000000b0 cmd_help
00000000 l    df *ABS*	00000000 fp-bit.c
0008cfc0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008d718 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
0008e024 l     F .text	00000058 std
0008e130 l     F .text	00000008 __fp_lock
0008e138 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0009eb38 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0008f148 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008f6a4 l     F .text	00000058 __sprint_r
0009e45c l     O .rodata	00000010 blanks.3452
0009e44c l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0009e570 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
000917f0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000a06f8 l     O .rwdata	00000004 charset
0009e710 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0009e858 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00096784 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00097bb4 l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00097c1c l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00097d2c l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00098150 l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00098240 l     F .text	00000074 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000983ac l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00098600 l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000a0714 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0009896c l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0009f674 l     O .rwdata	00001060 jtag_uart
00098a74 l     F .text	00000040 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00098ce4 l     F .text	00000230 altera_avalon_jtag_uart_irq
00098f14 l     F .text	000000b8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000995b8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00099a80 l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00099bf8 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00099d44 l     F .text	000000e4 alt_file_locked
00099fb8 l     F .text	00000068 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0009a698 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0009a84c l     F .text	00000048 alt_sim_halt
0008eeac g     F .text	0000001c putchar
000943a8 g     F .text	00000094 _mprec_log10
0008b3ec g     F .text	0000010c I2C_Read
00094494 g     F .text	00000088 __any_on
00095b88 g     F .text	00000070 _isatty_r
0009e830 g     O .rodata	00000028 __mprec_tinytens
00098414 g     F .text	00000074 alt_main
0008eed0 g     F .text	000000a0 _puts_r
000a26fc g     O .bss	00000100 alt_irq
00093cb0 g     F .text	00000078 _lseek_r
000a0720 g       *ABS*	00000000 __flash_rwdata_start
000972a4 g     F .text	00000088 __eqdf2
000a298c g       *ABS*	00000000 __alt_heap_start
0008ee34 g     F .text	00000044 printf
00080864 g     F .text	000000dc adv7513_edid_read
0008f1dc g     F .text	00000068 __sseek
0008e08c g     F .text	000000a4 __sinit
00095914 g     F .text	00000130 __swbuf_r
00093c10 g     F .text	00000084 _setlocale_r
0008e18c g     F .text	00000068 __sfmoreglue
000984b0 g     F .text	00000028 __malloc_unlock
0008d458 g     F .text	00000174 __divsf3
00093ebc g     F .text	000000e0 memmove
0008e17c g     F .text	00000010 _cleanup
0009451c g     F .text	000000bc _Balloc
00080378 g     F .text	00000150 adv7513_hpd_probe
000a25c8 g     O .bss	00000004 alt_exception_old_stack_limit
000973b4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0008023c g     F .text	0000013c adv7513_chip_identify
0008b76c g     F .text	0000012c i2c_write
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00095b14 g     F .text	00000074 _fstat_r
000a25a8 g     O .bss	00000004 errno
0008d6e0 g     F .text	00000038 __make_dp
000a25c0 g     O .bss	00000004 alt_argv
000a86d4 g       *ABS*	00000000 _gp
0009880c g     F .text	00000038 usleep
0008d1a4 g     F .text	00000070 __subsf3
0008e000 g     F .text	00000024 fgets
0009f374 g     O .rwdata	00000300 alt_fd_list
0008eec8 g     F .text	00000008 _putchar_r
0009a1fc g     F .text	0000009c alt_find_dev
0008ecfc g     F .text	000000a0 memcpy
00080710 g     F .text	0000007c adv7513_power_state
0008e170 g     F .text	0000000c _cleanup_r
0009754c g     F .text	000000f8 __floatsidf
00099cc4 g     F .text	00000080 alt_io_redirect
000974c4 g     F .text	00000088 __ltdf2
0009a8c0 g       *ABS*	00000000 __DTOR_END__
0008ef70 g     F .text	00000014 puts
000942f8 g     F .text	000000b0 __ratio
00099144 g     F .text	0000022c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0008ee78 g     F .text	00000034 _printf_r
0008d854 g     F .text	00000008 __udivsi3
00098088 g     F .text	000000c8 isatty
0009e740 g     O .rodata	000000c8 __mprec_tens
00093bec g     F .text	00000008 __locale_charset
0009a480 g     F .text	00000098 alt_icache_flush
0008b4f8 g     F .text	00000164 I2C_MultipleRead
000a259c g     O .bss	00000004 __malloc_top_pad
0008f680 g     F .text	00000024 strtoul
000a06f4 g     O .rwdata	00000004 __mb_cur_max
00093bf4 g     F .text	0000000c _localeconv_r
00094c14 g     F .text	0000003c __i2b
00093750 g     F .text	0000049c __sfvwrite_r
0009eac4 g     O .rwdata	00000074 encoder
0008f164 g     F .text	00000070 _sbrk_r
0009517c g     F .text	00000078 _read_r
0009f340 g     O .rwdata	0000000c __lc_ctype
000a070c g     O .rwdata	00000004 alt_max_fd
000978b0 g     F .text	00000138 __unpack_d
00092fbc g     F .text	00000110 _fclose_r
000932dc g     F .text	00000034 fflush
000a25a0 g     O .bss	00000004 __malloc_max_sbrked_mem
0008bb20 g     F .text	00000160 I2CL_Read
0008d5cc g     F .text	00000054 __extendsfdf2
000806b0 g     F .text	00000060 adv7513_do_hpd_powerdown
00096c14 g     F .text	00000074 __adddf3
000941d8 g     F .text	00000120 __b2d
000961d4 g     F .text	000005b0 __umoddi3
000982b4 g     F .text	000000f8 lseek
000a06e4 g     O .rwdata	00000004 _global_impure_ptr
000951f4 g     F .text	000005f4 _realloc_r
000cbaf0 g       *ABS*	00000000 __alt_exception_stack_pointer
000a298c g       *ABS*	00000000 __bss_end
00097f88 g     F .text	00000100 alt_iic_isr_register
0009a0c0 g     F .text	00000114 alt_tick
000804c8 g     F .text	00000188 adv7513_do_hpd_powerup
00084efc g     F .text	000000f8 edid_decode_extensions
00095bf8 g     F .text	000005dc __udivdi3
0009e808 g     O .rodata	00000028 __mprec_bigtens
00094e70 g     F .text	00000120 __s2b
0009771c g     F .text	00000194 __floatunsidf
000940f8 g     F .text	00000060 __mcmp
000a06f0 g     O .rwdata	00000004 __ctype_ptr
0008e158 g     F .text	00000018 __fp_lock_all
00097f38 g     F .text	00000050 alt_ic_irq_enabled
0008b30c g     F .text	000000e0 I2C_Write
000a25fc g     O .bss	00000100 edid
0009a020 g     F .text	000000a0 alt_alarm_stop
000a25b8 g     O .bss	00000004 alt_irq_active
00080118 g     F .exceptions	000000d0 alt_irq_handler
0009f34c g     O .rwdata	00000028 alt_dev_null
0008dadc g     F .text	000000c8 __unpack_f
0008b65c g     F .text	00000090 i2c_start
00099978 g     F .text	0000004c alt_dcache_flush_all
00093fc4 g     F .text	00000070 __hi0bits
00097644 g     F .text	000000d8 __fixdfsi
000a0720 g       *ABS*	00000000 __ram_rwdata_end
000a0704 g     O .rwdata	00000008 alt_dev_list
00098844 g     F .text	00000128 write
00095094 g     F .text	000000e8 _putc_r
0009e8a4 g       *ABS*	00000000 __ram_rodata_end
00097c50 g     F .text	000000dc fstat
00094d50 g     F .text	00000120 __pow5mult
000a25ac g     O .bss	00000004 __nlocale_changed
0008d85c g     F .text	00000008 __umodsi3
000a298c g       *ABS*	00000000 end
0008d97c g     F .text	00000160 __pack_f
00098c1c g     F .text	000000c8 altera_avalon_jtag_uart_init
0009a8bc g       *ABS*	00000000 __CTOR_LIST__
000caaf0 g       *ABS*	00000000 __alt_stack_pointer
00099630 g     F .text	00000098 alt_avalon_timer_sc_init
0008d8fc g     F .text	00000080 __clzsi2
00099370 g     F .text	00000248 altera_avalon_jtag_uart_write
0008e07c g     F .text	00000004 __sfp_lock_acquire
0008eba4 g     F .text	000000e4 memchr
0008f6fc g     F .text	00001eac ___vfprintf_internal_r
0009343c g     F .text	00000314 _free_r
00080940 g     F .text	000000cc adv7513_regmap_dump
0009a69c g     F .text	000001b0 __call_exitprocs
000a25b0 g     O .bss	00000004 __mlocale_changed
000a06ec g     O .rwdata	00000004 __malloc_sbrk_base
000801e8 g     F .text	00000054 _start
000a25cc g     O .bss	00000004 _alt_tick_rate
000948e0 g     F .text	0000014c __lshift
000a25d0 g     O .bss	00000004 _alt_nticks
000984d8 g     F .text	00000128 read
00098a10 g     F .text	00000064 alt_sys_init
0009a564 g     F .text	00000134 __register_exitproc
00083550 g     F .text	000019ac edid_print_cea
0008ae9c g     F .text	00000094 reg_read
00094a2c g     F .text	000001e8 __multiply
00098fcc g     F .text	0000007c altera_avalon_jtag_uart_close
0009e8a4 g       *ABS*	00000000 __ram_rwdata_start
0009a8c0 g       *ABS*	00000000 __ram_rodata_start
0008f394 g     F .text	000000bc strncpy
000a25d4 g     O .bss	00000028 __malloc_current_mallinfo
000945d8 g     F .text	0000017c __d2b
00098ab4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008f450 g     F .text	00000230 _strtoul_r
0009a3c0 g     F .text	000000c0 alt_get_fd
00099824 g     F .text	00000154 alt_busy_sleep
000979e8 g     F .text	000000c8 __fpcmp_parts_d
00091780 g     F .text	00000070 _close_r
0008ec88 g     F .text	00000074 memcmp
00098b74 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000a298c g       *ABS*	00000000 __alt_stack_base
00098bc4 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
00091644 g     F .text	0000013c __swsetup_r
0009704c g     F .text	00000258 __divdf3
0008e1f4 g     F .text	000000f0 __sfp
0009443c g     F .text	00000058 __copybits
0009ef38 g     O .rwdata	00000408 __malloc_av_
0008e088 g     F .text	00000004 __sinit_lock_release
0008b6ec g     F .text	00000080 i2c_stop
00096c88 g     F .text	000003c4 __muldf3
0008f2c0 g     F .text	00000060 __sread
0008078c g     F .text	000000d8 adv7513_mode_state
0009e2d4 g     O .rodata	00000010 __thenan_sf
0009a298 g     F .text	00000128 alt_find_file
000999c4 g     F .text	000000bc alt_dev_llist_insert
00098488 g     F .text	00000028 __malloc_lock
000986d0 g     F .text	0000013c sbrk
000930e0 g     F .text	000001fc _fflush_r
00095a60 g     F .text	000000b4 _calloc_r
000a259c g       *ABS*	00000000 __bss_start
0008ed9c g     F .text	00000098 memset
0008c870 g     F .text	00000750 main
000a25c4 g     O .bss	00000004 alt_envp
000a25a4 g     O .bss	00000004 __malloc_max_total_mem
00098b14 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008b898 g     F .text	00000154 i2c_read
00095a44 g     F .text	0000001c __swbuf
0008f1d4 g     F .text	00000008 __sclose
000caaf0 g       *ABS*	00000000 __alt_heap_limit
000930cc g     F .text	00000014 fclose
000a27fc g     O .bss	00000190 _atexit0
00091a08 g     F .text	000015b4 _dtoa_r
0008e464 g     F .text	00000740 _malloc_r
000a0710 g     O .rwdata	00000004 alt_errno
0008afc8 g     F .text	00000130 reg_update_bits
0008e3ac g     F .text	000000b8 _fwalk
000a298c g       *ABS*	00000000 __alt_stack_limit
0008deb8 g     F .text	00000148 _fgets_r
00094f90 g     F .text	00000104 putc
000cb2f0 g       *ABS*	00000000 __alt_exception_stack_limit
0008d794 g     F .text	00000060 __divsi3
0009e864 g     O .rodata	00000014 __thenan_df
00093310 g     F .text	0000012c _malloc_trim_r
0009a8c0 g       *ABS*	00000000 __CTOR_END__
0008d278 g     F .text	000001e0 __mulsf3
0008b200 g     F .text	0000010c reg_clear_bits
00095858 g     F .text	000000bc strcmp
0009a8c0 g       *ABS*	00000000 __flash_rodata_start
0009a8c0 g       *ABS*	00000000 __DTOR_LIST__
0009732c g     F .text	00000088 __nedf2
000989d4 g     F .text	0000003c alt_irq_init
00098668 g     F .text	00000068 alt_release_fd
0009e2e4 g     O .rodata	00000100 __clz_tab
000a25b4 g     O .bss	00000004 _PathLocale
0009a518 g     F .text	00000014 atexit
000915cc g     F .text	00000078 _write_r
00093c94 g     F .text	0000001c setlocale
000a06e0 g     O .rwdata	00000004 _impure_ptr
000a25bc g     O .bss	00000004 alt_argc
00099b54 g     F .text	0000006c _do_dtors
00081be0 g     F .text	0000005c adv7513_chip_init_3d
0008bc80 g     F .text	000001b0 I2CL_MultipleRead
0008ef84 g     F .text	000001c4 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
00094158 g     F .text	00000080 __ulp
000957e8 g     F .text	00000040 __isinfd
0008e140 g     F .text	00000018 __fp_unlock_all
000a06fc g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00093c00 g     F .text	00000010 localeconv
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00097d94 g     F .text	00000058 alt_ic_isr_register
000a06d4 g     O .rwdata	00000004 alt_stack_limit_value
00084ff4 g     F .text	00004410 edid_decode_v14
000a0720 g       *ABS*	00000000 _edata
000a298c g       *ABS*	00000000 _end
0008c4f0 g     F .text	00000280 adv7513_int_setup
000801e8 g       *ABS*	00000000 __ram_exceptions_end
00099048 g     F .text	000000fc altera_avalon_jtag_uart_ioctl
00097e90 g     F .text	000000a8 alt_ic_irq_disable
0008b0f8 g     F .text	00000108 reg_or_bits
0008f244 g     F .text	0000007c __swrite
000a06e8 g     O .rwdata	00000004 __malloc_trim_threshold
0009a1d4 g     F .text	00000028 altera_nios2_qsys_irq_init
0009a52c g     F .text	00000038 exit
0008e2e4 g     F .text	000000c8 _fwalk_reent
0008d620 g     F .text	000000c0 __floatunsisf
00094754 g     F .text	0000018c __mdiff
0008af30 g     F .text	00000098 reg_write
0008d7f4 g     F .text	00000060 __modsi3
000caaf0 g       *ABS*	00000000 __alt_data_end
00080650 g     F .text	00000060 adv7513_kick_up
00080020 g     F .exceptions	00000000 alt_exception
0008e080 g     F .text	00000004 __sfp_lock_release
0009e46c g     O .rodata	00000101 _ctype_
0009a894 g     F .text	00000028 _exit
00095828 g     F .text	00000030 __isnand
000996c8 g     F .text	0000015c alt_alarm_start
0008d864 g     F .text	00000098 __muldi3
00093d28 g     F .text	00000194 __smakebuf_r
0008f320 g     F .text	00000074 strlen
00099e28 g     F .text	00000190 open
0009743c g     F .text	00000088 __gedf2
00081c3c g     F .text	00001914 edid_decode_cea
00081b84 g     F .text	0000005c adv7513_chip_init
00089628 g     F .text	00001874 edid_print_v14
00099bc0 g     F .text	00000038 alt_icache_flush_all
00097dec g     F .text	000000a4 alt_ic_irq_enable
000915a8 g     F .text	00000024 __vfprintf_internal
00096b94 g     F .text	00000080 __subdf3
00094034 g     F .text	000000c4 __lo0bits
000a0718 g     O .rwdata	00000008 alt_alarm_list
00099ae8 g     F .text	0000006c _do_ctors
0008b9ec g     F .text	00000134 I2CL_Write
00097ab0 g     F .text	00000104 close
0008d214 g     F .text	00000064 __addsf3
000981b8 g     F .text	00000088 alt_load
0008dba4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0008e084 g     F .text	00000004 __sinit_lock_acquire
00094c50 g     F .text	00000100 __multadd
00093f9c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08407a14 	ori	at,at,488
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
        .section .exceptions.entry, "xa"

#ifdef ALT_EXCEPTION_STACK

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_exception_old_stack_limit)(gp)
   80020:	d627bd15 	stw	et,-24844(gp)
#endif

        movhi et, %hiadj(__alt_exception_stack_pointer - 80)
   80024:	06000374 	movhi	et,13
        addi  et, et, %lo(__alt_exception_stack_pointer - 80) 
   80028:	c62ea804 	addi	et,et,-17760
        stw   sp, 76(et)
   8002c:	c6c01315 	stw	sp,76(et)
        mov   sp, et
   80030:	c037883a 	mov	sp,et

#ifdef ALT_STACK_CHECK
        movhi et, %hiadj(__alt_exception_stack_limit)
   80034:	06000374 	movhi	et,13
        addi  et, et, %lo(__alt_exception_stack_limit) 
   80038:	c62cbc04 	addi	et,et,-19728
        stw   et, %gprel(alt_stack_limit_value)(gp)
   8003c:	d6200015 	stw	et,-32768(gp)

#endif

#endif

        stw   ra,  0(sp)
   80040:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80044:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   80048:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   8004c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80050:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80054:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   80058:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   8005c:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80060:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80064:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   80068:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   8006c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80070:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80074:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   80078:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   8007c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80080:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80084:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   80088:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   8008c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80090:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80094:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   80098:	10000326 	beq	r2,zero,800a8 <alt_exception+0x88>
        beq   r4, zero, .Lnot_irq
   8009c:	20000226 	beq	r4,zero,800a8 <alt_exception+0x88>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   800a0:	00801180 	call	80118 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   800a4:	00000306 	br	800b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   800a8:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   800ac:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   800b0:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800dc:	d9c00817 	ldw	r7,32(sp)

#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
   800e0:	d627bd17 	ldw	et,-24844(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800e4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800e8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800ec:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800f0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800f4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800f8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800fc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   80100:	dbc01017 	ldw	r15,64(sp)

#ifdef ALT_EXCEPTION_STACK

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
   80104:	d6200015 	stw	et,-32768(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
   80108:	d027bd15 	stw	zero,-24844(gp)
#endif

        ldw   sp,  76(sp)
   8010c:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
   80110:	ef80083a 	eret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
   80114:	003da0fa 	break	3

00080118 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   80118:	defff904 	addi	sp,sp,-28
   8011c:	de00012e 	bgeu	sp,et,80124 <alt_irq_handler+0xc>
   80120:	003da0fa 	break	3
   80124:	dfc00615 	stw	ra,24(sp)
   80128:	df000515 	stw	fp,20(sp)
   8012c:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80130:	0005313a 	rdctl	r2,ipending
   80134:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80138:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8013c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   80140:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80144:	00800044 	movi	r2,1
   80148:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8014c:	e0ffff17 	ldw	r3,-4(fp)
   80150:	e0bffe17 	ldw	r2,-8(fp)
   80154:	1884703a 	and	r2,r3,r2
   80158:	1005003a 	cmpeq	r2,r2,zero
   8015c:	1000161e 	bne	r2,zero,801b8 <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80160:	e0bffd17 	ldw	r2,-12(fp)
   80164:	00c002b4 	movhi	r3,10
   80168:	18c9bf04 	addi	r3,r3,9980
   8016c:	100490fa 	slli	r2,r2,3
   80170:	10c5883a 	add	r2,r2,r3
   80174:	11400017 	ldw	r5,0(r2)
   80178:	e0bffd17 	ldw	r2,-12(fp)
   8017c:	00c002b4 	movhi	r3,10
   80180:	18c9bf04 	addi	r3,r3,9980
   80184:	100490fa 	slli	r2,r2,3
   80188:	10c5883a 	add	r2,r2,r3
   8018c:	10800104 	addi	r2,r2,4
   80190:	11000017 	ldw	r4,0(r2)
   80194:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80198:	0005313a 	rdctl	r2,ipending
   8019c:	e0bffb15 	stw	r2,-20(fp)

  return active;
   801a0:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   801a4:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   801a8:	e0bfff17 	ldw	r2,-4(fp)
   801ac:	1004c03a 	cmpne	r2,r2,zero
   801b0:	103fe31e 	bne	r2,zero,80140 <alt_irq_handler+0x28>
   801b4:	00000706 	br	801d4 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   801b8:	e0bffe17 	ldw	r2,-8(fp)
   801bc:	1085883a 	add	r2,r2,r2
   801c0:	e0bffe15 	stw	r2,-8(fp)
      i++;
   801c4:	e0bffd17 	ldw	r2,-12(fp)
   801c8:	10800044 	addi	r2,r2,1
   801cc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801d0:	003fde06 	br	8014c <alt_irq_handler+0x34>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801d4:	e037883a 	mov	sp,fp
   801d8:	dfc00117 	ldw	ra,4(sp)
   801dc:	df000017 	ldw	fp,0(sp)
   801e0:	dec00204 	addi	sp,sp,8
   801e4:	f800283a 	ret

Disassembly of section .text:

000801e8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801e8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801ec:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801f0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   801f4:	00bffd16 	blt	zero,r2,801ec <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801f8:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   801fc:	deeabc14 	ori	sp,sp,43760

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   80200:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   80204:	d6a1b514 	ori	gp,gp,34516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80208:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   8020c:	10896714 	ori	r2,r2,9628

    movhi r3, %hi(__bss_end)
   80210:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   80214:	18ca6314 	ori	r3,r3,10636

    beq r2, r3, 1f
   80218:	10c00326 	beq	r2,r3,80228 <_start+0x40>

0:
    stw zero, (r2)
   8021c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80220:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80224:	10fffd36 	bltu	r2,r3,8021c <_start+0x34>
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
   80228:	0031883a 	mov	et,zero
#endif

    call alt_load
   8022c:	00981b80 	call	981b8 <alt_load>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
   80230:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80234:	00984140 	call	98414 <alt_main>

00080238 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80238:	003fff06 	br	80238 <alt_after_alt_main>

0008023c <adv7513_chip_identify>:
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
   8023c:	defffa04 	addi	sp,sp,-24
   80240:	de00012e 	bgeu	sp,et,80248 <adv7513_chip_identify+0xc>
   80244:	003da0fa 	break	3
   80248:	dfc00515 	stw	ra,20(sp)
   8024c:	df000415 	stw	fp,16(sp)
   80250:	df000404 	addi	fp,sp,16
   80254:	e13ffe15 	stw	r4,-8(fp)
	bool r = 0;
   80258:	e03ffd15 	stw	zero,-12(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_REVISION, &ec->chip_rev[0]);
   8025c:	e0bffe17 	ldw	r2,-8(fp)
   80260:	10800017 	ldw	r2,0(r2)
   80264:	11803fcc 	andi	r6,r2,255
   80268:	3180201c 	xori	r6,r6,128
   8026c:	31bfe004 	addi	r6,r6,-128
   80270:	e0bffe17 	ldw	r2,-8(fp)
   80274:	10800804 	addi	r2,r2,32
   80278:	d8800015 	stw	r2,0(sp)
   8027c:	01000434 	movhi	r4,16
   80280:	21041004 	addi	r4,r4,4160
   80284:	01400434 	movhi	r5,16
   80288:	29441404 	addi	r5,r5,4176
   8028c:	000f883a 	mov	r7,zero
   80290:	008b3ec0 	call	8b3ec <I2C_Read>
   80294:	e0bffd15 	stw	r2,-12(fp)
	if (!r)
   80298:	e0bffd17 	ldw	r2,-12(fp)
   8029c:	1004c03a 	cmpne	r2,r2,zero
   802a0:	1000031e 	bne	r2,zero,802b0 <adv7513_chip_identify+0x74>
		return -1;
   802a4:	00bfffc4 	movi	r2,-1
   802a8:	e0bfff15 	stw	r2,-4(fp)
   802ac:	00002c06 	br	80360 <adv7513_chip_identify+0x124>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_LOW, &ec->chip_id[0]);
   802b0:	e0bffe17 	ldw	r2,-8(fp)
   802b4:	10800017 	ldw	r2,0(r2)
   802b8:	11803fcc 	andi	r6,r2,255
   802bc:	3180201c 	xori	r6,r6,128
   802c0:	31bfe004 	addi	r6,r6,-128
   802c4:	e0bffe17 	ldw	r2,-8(fp)
   802c8:	10800704 	addi	r2,r2,28
   802cc:	d8800015 	stw	r2,0(sp)
   802d0:	01000434 	movhi	r4,16
   802d4:	21041004 	addi	r4,r4,4160
   802d8:	01400434 	movhi	r5,16
   802dc:	29441404 	addi	r5,r5,4176
   802e0:	01c03d84 	movi	r7,246
   802e4:	008b3ec0 	call	8b3ec <I2C_Read>
   802e8:	e0bffd15 	stw	r2,-12(fp)
	if (!r)
   802ec:	e0bffd17 	ldw	r2,-12(fp)
   802f0:	1004c03a 	cmpne	r2,r2,zero
   802f4:	1000031e 	bne	r2,zero,80304 <adv7513_chip_identify+0xc8>
		return -2;
   802f8:	00bfff84 	movi	r2,-2
   802fc:	e0bfff15 	stw	r2,-4(fp)
   80300:	00001706 	br	80360 <adv7513_chip_identify+0x124>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_HIGH, &ec->chip_id[1]);
   80304:	e0bffe17 	ldw	r2,-8(fp)
   80308:	10800017 	ldw	r2,0(r2)
   8030c:	11803fcc 	andi	r6,r2,255
   80310:	3180201c 	xori	r6,r6,128
   80314:	31bfe004 	addi	r6,r6,-128
   80318:	e0bffe17 	ldw	r2,-8(fp)
   8031c:	10800704 	addi	r2,r2,28
   80320:	10800044 	addi	r2,r2,1
   80324:	d8800015 	stw	r2,0(sp)
   80328:	01000434 	movhi	r4,16
   8032c:	21041004 	addi	r4,r4,4160
   80330:	01400434 	movhi	r5,16
   80334:	29441404 	addi	r5,r5,4176
   80338:	01c03d44 	movi	r7,245
   8033c:	008b3ec0 	call	8b3ec <I2C_Read>
   80340:	e0bffd15 	stw	r2,-12(fp)
	if (!r)
   80344:	e0bffd17 	ldw	r2,-12(fp)
   80348:	1004c03a 	cmpne	r2,r2,zero
   8034c:	1000031e 	bne	r2,zero,8035c <adv7513_chip_identify+0x120>
		return -3;
   80350:	00bfff44 	movi	r2,-3
   80354:	e0bfff15 	stw	r2,-4(fp)
   80358:	00000106 	br	80360 <adv7513_chip_identify+0x124>

	return 0;
   8035c:	e03fff15 	stw	zero,-4(fp)
   80360:	e0bfff17 	ldw	r2,-4(fp)
}
   80364:	e037883a 	mov	sp,fp
   80368:	dfc00117 	ldw	ra,4(sp)
   8036c:	df000017 	ldw	fp,0(sp)
   80370:	dec00204 	addi	sp,sp,8
   80374:	f800283a 	ret

00080378 <adv7513_hpd_probe>:

int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
   80378:	defffa04 	addi	sp,sp,-24
   8037c:	de00012e 	bgeu	sp,et,80384 <adv7513_hpd_probe+0xc>
   80380:	003da0fa 	break	3
   80384:	dfc00515 	stw	ra,20(sp)
   80388:	df000415 	stw	fp,16(sp)
   8038c:	df000404 	addi	fp,sp,16
   80390:	e13ffe15 	stw	r4,-8(fp)
	bool r = 0;
   80394:	e03ffc15 	stw	zero,-16(fp)
	alt_u8 regv = 0;
   80398:	e03ffd05 	stb	zero,-12(fp)

	ec->hpd_prev = ec->hpd_latest;
   8039c:	e0bffe17 	ldw	r2,-8(fp)
   803a0:	10c00317 	ldw	r3,12(r2)
   803a4:	e0bffe17 	ldw	r2,-8(fp)
   803a8:	10c00215 	stw	r3,8(r2)

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
   803ac:	e1bffd04 	addi	r6,fp,-12
   803b0:	e13ffe17 	ldw	r4,-8(fp)
   803b4:	01401084 	movi	r5,66
   803b8:	008ae9c0 	call	8ae9c <reg_read>
   803bc:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   803c0:	e0bffc17 	ldw	r2,-16(fp)
   803c4:	1005003a 	cmpeq	r2,r2,zero
   803c8:	1000031e 	bne	r2,zero,803d8 <adv7513_hpd_probe+0x60>
		return -1;
   803cc:	00bfffc4 	movi	r2,-1
   803d0:	e0bfff15 	stw	r2,-4(fp)
   803d4:	00003606 	br	804b0 <adv7513_hpd_probe+0x138>

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
   803d8:	e0bffd03 	ldbu	r2,-12(fp)
   803dc:	10803fcc 	andi	r2,r2,255
   803e0:	10c0180c 	andi	r3,r2,96
   803e4:	e0bffe17 	ldw	r2,-8(fp)
   803e8:	10c00315 	stw	r3,12(r2)
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
   803ec:	e0bffe17 	ldw	r2,-8(fp)
   803f0:	10c00317 	ldw	r3,12(r2)
   803f4:	e0bffe17 	ldw	r2,-8(fp)
   803f8:	10800217 	ldw	r2,8(r2)
   803fc:	1886f03a 	xor	r3,r3,r2
   80400:	e0bffe17 	ldw	r2,-8(fp)
   80404:	10c00415 	stw	r3,16(r2)

	ec->hpd = 0;
   80408:	e0bffe17 	ldw	r2,-8(fp)
   8040c:	10000515 	stw	zero,20(r2)

	if ((ec->hpd_event != 0) && ((ec->hpd_latest & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))) {
   80410:	e0bffe17 	ldw	r2,-8(fp)
   80414:	10800417 	ldw	r2,16(r2)
   80418:	1005003a 	cmpeq	r2,r2,zero
   8041c:	1000091e 	bne	r2,zero,80444 <adv7513_hpd_probe+0xcc>
   80420:	e0bffe17 	ldw	r2,-8(fp)
   80424:	10800317 	ldw	r2,12(r2)
   80428:	1080180c 	andi	r2,r2,96
   8042c:	10801818 	cmpnei	r2,r2,96
   80430:	1000041e 	bne	r2,zero,80444 <adv7513_hpd_probe+0xcc>
		// if hot-plug state changed and both HPD and monitor-sense are asserted
		ec->hpd = 1;
   80434:	e0fffe17 	ldw	r3,-8(fp)
   80438:	00800044 	movi	r2,1
   8043c:	18800515 	stw	r2,20(r3)
	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;

	ec->hpd = 0;

	if ((ec->hpd_event != 0) && ((ec->hpd_latest & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))) {
   80440:	00001a06 	br	804ac <adv7513_hpd_probe+0x134>
		// if hot-plug state changed and both HPD and monitor-sense are asserted
		ec->hpd = 1;
	} else {
		if ((ec->hpd_event & (ADV7513_STATUS_HPD)) && ((ec->hpd_latest & (ADV7513_STATUS_HPD)) == 0)) {
   80444:	e0bffe17 	ldw	r2,-8(fp)
   80448:	10800417 	ldw	r2,16(r2)
   8044c:	1080100c 	andi	r2,r2,64
   80450:	1005003a 	cmpeq	r2,r2,zero
   80454:	1000081e 	bne	r2,zero,80478 <adv7513_hpd_probe+0x100>
   80458:	e0bffe17 	ldw	r2,-8(fp)
   8045c:	10800317 	ldw	r2,12(r2)
   80460:	1080100c 	andi	r2,r2,64
   80464:	1004c03a 	cmpne	r2,r2,zero
   80468:	1000031e 	bne	r2,zero,80478 <adv7513_hpd_probe+0x100>
			// if HPD state changed and HPD was de-asserted
			ec->hpd = -1;
   8046c:	e0fffe17 	ldw	r3,-8(fp)
   80470:	00bfffc4 	movi	r2,-1
   80474:	18800515 	stw	r2,20(r3)
		}

		if ((ec->hpd_event & (ADV7513_STATUS_MONITOR_SENSE)) && ((ec->hpd_latest & (ADV7513_STATUS_MONITOR_SENSE)) == 0)) {
   80478:	e0bffe17 	ldw	r2,-8(fp)
   8047c:	10800417 	ldw	r2,16(r2)
   80480:	1080080c 	andi	r2,r2,32
   80484:	1005003a 	cmpeq	r2,r2,zero
   80488:	1000081e 	bne	r2,zero,804ac <adv7513_hpd_probe+0x134>
   8048c:	e0bffe17 	ldw	r2,-8(fp)
   80490:	10800317 	ldw	r2,12(r2)
   80494:	1080080c 	andi	r2,r2,32
   80498:	1004c03a 	cmpne	r2,r2,zero
   8049c:	1000031e 	bne	r2,zero,804ac <adv7513_hpd_probe+0x134>
			// if monitor-sense state changed and monitor-sense was de-asserted
			ec->hpd = -1;
   804a0:	e0fffe17 	ldw	r3,-8(fp)
   804a4:	00bfffc4 	movi	r2,-1
   804a8:	18800515 	stw	r2,20(r3)
	// 0xd6[7:6] <- (2 << 6) (HPD from HPD only) & 0xc0
	//r = reg_update_bits(ec, 0xd6, 0xc0 ,0x02 << 6);
	//if (r != 0)
	//	return -1;

	return 0;
   804ac:	e03fff15 	stw	zero,-4(fp)
   804b0:	e0bfff17 	ldw	r2,-4(fp)
}
   804b4:	e037883a 	mov	sp,fp
   804b8:	dfc00117 	ldw	ra,4(sp)
   804bc:	df000017 	ldw	fp,0(sp)
   804c0:	dec00204 	addi	sp,sp,8
   804c4:	f800283a 	ret

000804c8 <adv7513_do_hpd_powerup>:

int adv7513_do_hpd_powerup(struct hdmi_encoder *ec)
{
   804c8:	defffc04 	addi	sp,sp,-16
   804cc:	de00012e 	bgeu	sp,et,804d4 <adv7513_do_hpd_powerup+0xc>
   804d0:	003da0fa 	break	3
   804d4:	dfc00315 	stw	ra,12(sp)
   804d8:	df000215 	stw	fp,8(sp)
   804dc:	df000204 	addi	fp,sp,8
   804e0:	e13ffe15 	stw	r4,-8(fp)
	//printf("adv7513_do_hpd_powerup()\n");

	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   804e4:	e13ffe17 	ldw	r4,-8(fp)
   804e8:	01401044 	movi	r5,65
   804ec:	01801004 	movi	r6,64
   804f0:	000f883a 	mov	r7,zero
   804f4:	008afc80 	call	8afc8 <reg_update_bits>
   804f8:	1005003a 	cmpeq	r2,r2,zero
   804fc:	1000031e 	bne	r2,zero,8050c <adv7513_do_hpd_powerup+0x44>
		return -1;
   80500:	00bfffc4 	movi	r2,-1
   80504:	e0bfff15 	stw	r2,-4(fp)
   80508:	00004b06 	br	80638 <adv7513_do_hpd_powerup+0x170>

	//usleep(150000);

	// table 14 -- fixed registers must be set after power up
	if (reg_write(ec, 0x98, 0x03) != 0)
   8050c:	e13ffe17 	ldw	r4,-8(fp)
   80510:	01402604 	movi	r5,152
   80514:	018000c4 	movi	r6,3
   80518:	008af300 	call	8af30 <reg_write>
   8051c:	1005003a 	cmpeq	r2,r2,zero
   80520:	1000031e 	bne	r2,zero,80530 <adv7513_do_hpd_powerup+0x68>
		return -1;
   80524:	00bfffc4 	movi	r2,-1
   80528:	e0bfff15 	stw	r2,-4(fp)
   8052c:	00004206 	br	80638 <adv7513_do_hpd_powerup+0x170>
	if (reg_update_bits(ec, 0x9a, 0xe0, 0x7 << 5) != 0)
   80530:	e13ffe17 	ldw	r4,-8(fp)
   80534:	01402684 	movi	r5,154
   80538:	01803804 	movi	r6,224
   8053c:	01c03804 	movi	r7,224
   80540:	008afc80 	call	8afc8 <reg_update_bits>
   80544:	1005003a 	cmpeq	r2,r2,zero
   80548:	1000031e 	bne	r2,zero,80558 <adv7513_do_hpd_powerup+0x90>
		return -1;
   8054c:	00bfffc4 	movi	r2,-1
   80550:	e0bfff15 	stw	r2,-4(fp)
   80554:	00003806 	br	80638 <adv7513_do_hpd_powerup+0x170>
	if (reg_write(ec, 0x9c, 0x30) != 0)
   80558:	e13ffe17 	ldw	r4,-8(fp)
   8055c:	01402704 	movi	r5,156
   80560:	01800c04 	movi	r6,48
   80564:	008af300 	call	8af30 <reg_write>
   80568:	1005003a 	cmpeq	r2,r2,zero
   8056c:	1000031e 	bne	r2,zero,8057c <adv7513_do_hpd_powerup+0xb4>
		return -1;
   80570:	00bfffc4 	movi	r2,-1
   80574:	e0bfff15 	stw	r2,-4(fp)
   80578:	00002f06 	br	80638 <adv7513_do_hpd_powerup+0x170>
	if (reg_update_bits(ec, 0x9d, 0x03, 0x01) != 0)
   8057c:	e13ffe17 	ldw	r4,-8(fp)
   80580:	01402744 	movi	r5,157
   80584:	018000c4 	movi	r6,3
   80588:	01c00044 	movi	r7,1
   8058c:	008afc80 	call	8afc8 <reg_update_bits>
   80590:	1005003a 	cmpeq	r2,r2,zero
   80594:	1000031e 	bne	r2,zero,805a4 <adv7513_do_hpd_powerup+0xdc>
		return -1;
   80598:	00bfffc4 	movi	r2,-1
   8059c:	e0bfff15 	stw	r2,-4(fp)
   805a0:	00002506 	br	80638 <adv7513_do_hpd_powerup+0x170>
	if (reg_write(ec, 0xa2, 0xa4) != 0)
   805a4:	e13ffe17 	ldw	r4,-8(fp)
   805a8:	01402884 	movi	r5,162
   805ac:	01802904 	movi	r6,164
   805b0:	008af300 	call	8af30 <reg_write>
   805b4:	1005003a 	cmpeq	r2,r2,zero
   805b8:	1000031e 	bne	r2,zero,805c8 <adv7513_do_hpd_powerup+0x100>
		return -1;
   805bc:	00bfffc4 	movi	r2,-1
   805c0:	e0bfff15 	stw	r2,-4(fp)
   805c4:	00001c06 	br	80638 <adv7513_do_hpd_powerup+0x170>
	if (reg_write(ec, 0xa3, 0xa4) != 0)
   805c8:	e13ffe17 	ldw	r4,-8(fp)
   805cc:	014028c4 	movi	r5,163
   805d0:	01802904 	movi	r6,164
   805d4:	008af300 	call	8af30 <reg_write>
   805d8:	1005003a 	cmpeq	r2,r2,zero
   805dc:	1000031e 	bne	r2,zero,805ec <adv7513_do_hpd_powerup+0x124>
		return -1;
   805e0:	00bfffc4 	movi	r2,-1
   805e4:	e0bfff15 	stw	r2,-4(fp)
   805e8:	00001306 	br	80638 <adv7513_do_hpd_powerup+0x170>
	if (reg_write(ec, 0xe0, 0xd0) != 0)
   805ec:	e13ffe17 	ldw	r4,-8(fp)
   805f0:	01403804 	movi	r5,224
   805f4:	01803404 	movi	r6,208
   805f8:	008af300 	call	8af30 <reg_write>
   805fc:	1005003a 	cmpeq	r2,r2,zero
   80600:	1000031e 	bne	r2,zero,80610 <adv7513_do_hpd_powerup+0x148>
		return -1;
   80604:	00bfffc4 	movi	r2,-1
   80608:	e0bfff15 	stw	r2,-4(fp)
   8060c:	00000a06 	br	80638 <adv7513_do_hpd_powerup+0x170>
	//if (reg_write(ec, 0xf9, 0x00) != 0)  // set to a non-conflicting i2c address (suggested addr: 0x00)
	//	return -1;

	// clear hpd interrupts
	// 0x96[7:6] <- 0xc0 & 0xc0
	if (reg_write(ec, 0x96, 0xff) != 0)
   80610:	e13ffe17 	ldw	r4,-8(fp)
   80614:	01402584 	movi	r5,150
   80618:	01803fc4 	movi	r6,255
   8061c:	008af300 	call	8af30 <reg_write>
   80620:	1005003a 	cmpeq	r2,r2,zero
   80624:	1000031e 	bne	r2,zero,80634 <adv7513_do_hpd_powerup+0x16c>
		return -1;
   80628:	00bfffc4 	movi	r2,-1
   8062c:	e0bfff15 	stw	r2,-4(fp)
   80630:	00000106 	br	80638 <adv7513_do_hpd_powerup+0x170>

	return 0;
   80634:	e03fff15 	stw	zero,-4(fp)
   80638:	e0bfff17 	ldw	r2,-4(fp)
}
   8063c:	e037883a 	mov	sp,fp
   80640:	dfc00117 	ldw	ra,4(sp)
   80644:	df000017 	ldw	fp,0(sp)
   80648:	dec00204 	addi	sp,sp,8
   8064c:	f800283a 	ret

00080650 <adv7513_kick_up>:
// interrupt if the monitor is in sleep mode and the cable is connected before downloading
// the program to the fpga board. It is verified that kick-off the encoder chip facilitates
// the encoder to detect monitor-sense signal at the program initialization process
//
extern int adv7513_kick_up(struct hdmi_encoder *ec)
{
   80650:	defffc04 	addi	sp,sp,-16
   80654:	de00012e 	bgeu	sp,et,8065c <adv7513_kick_up+0xc>
   80658:	003da0fa 	break	3
   8065c:	dfc00315 	stw	ra,12(sp)
   80660:	df000215 	stw	fp,8(sp)
   80664:	df000204 	addi	fp,sp,8
   80668:	e13ffe15 	stw	r4,-8(fp)
	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   8066c:	e13ffe17 	ldw	r4,-8(fp)
   80670:	01401044 	movi	r5,65
   80674:	01801004 	movi	r6,64
   80678:	000f883a 	mov	r7,zero
   8067c:	008afc80 	call	8afc8 <reg_update_bits>
   80680:	1005003a 	cmpeq	r2,r2,zero
   80684:	1000031e 	bne	r2,zero,80694 <adv7513_kick_up+0x44>
		return -1;
   80688:	00bfffc4 	movi	r2,-1
   8068c:	e0bfff15 	stw	r2,-4(fp)
   80690:	00000106 	br	80698 <adv7513_kick_up+0x48>
	return 0;
   80694:	e03fff15 	stw	zero,-4(fp)
   80698:	e0bfff17 	ldw	r2,-4(fp)
}
   8069c:	e037883a 	mov	sp,fp
   806a0:	dfc00117 	ldw	ra,4(sp)
   806a4:	df000017 	ldw	fp,0(sp)
   806a8:	dec00204 	addi	sp,sp,8
   806ac:	f800283a 	ret

000806b0 <adv7513_do_hpd_powerdown>:

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
   806b0:	defffc04 	addi	sp,sp,-16
   806b4:	de00012e 	bgeu	sp,et,806bc <adv7513_do_hpd_powerdown+0xc>
   806b8:	003da0fa 	break	3
   806bc:	dfc00315 	stw	ra,12(sp)
   806c0:	df000215 	stw	fp,8(sp)
   806c4:	df000204 	addi	fp,sp,8
   806c8:	e13ffe15 	stw	r4,-8(fp)
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
   806cc:	e13ffe17 	ldw	r4,-8(fp)
   806d0:	01401044 	movi	r5,65
   806d4:	01801004 	movi	r6,64
   806d8:	01c01004 	movi	r7,64
   806dc:	008afc80 	call	8afc8 <reg_update_bits>
   806e0:	1005003a 	cmpeq	r2,r2,zero
   806e4:	1000031e 	bne	r2,zero,806f4 <adv7513_do_hpd_powerdown+0x44>
		return -1;
   806e8:	00bfffc4 	movi	r2,-1
   806ec:	e0bfff15 	stw	r2,-4(fp)
   806f0:	00000106 	br	806f8 <adv7513_do_hpd_powerdown+0x48>

	return 0;
   806f4:	e03fff15 	stw	zero,-4(fp)
   806f8:	e0bfff17 	ldw	r2,-4(fp)
}
   806fc:	e037883a 	mov	sp,fp
   80700:	dfc00117 	ldw	ra,4(sp)
   80704:	df000017 	ldw	fp,0(sp)
   80708:	dec00204 	addi	sp,sp,8
   8070c:	f800283a 	ret

00080710 <adv7513_power_state>:

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
   80710:	defff904 	addi	sp,sp,-28
   80714:	de00012e 	bgeu	sp,et,8071c <adv7513_power_state+0xc>
   80718:	003da0fa 	break	3
   8071c:	dfc00615 	stw	ra,24(sp)
   80720:	df000515 	stw	fp,20(sp)
   80724:	df000504 	addi	fp,sp,20
   80728:	e13ffd15 	stw	r4,-12(fp)
   8072c:	e17ffe15 	stw	r5,-8(fp)
	bool r = 0;
   80730:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 regv = 0;
   80734:	e03ffc05 	stb	zero,-16(fp)

	r = reg_read(ec, 0x41, &regv);
   80738:	e1bffc04 	addi	r6,fp,-16
   8073c:	e13ffd17 	ldw	r4,-12(fp)
   80740:	01401044 	movi	r5,65
   80744:	008ae9c0 	call	8ae9c <reg_read>
   80748:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   8074c:	e0bffb17 	ldw	r2,-20(fp)
   80750:	1005003a 	cmpeq	r2,r2,zero
   80754:	1000031e 	bne	r2,zero,80764 <adv7513_power_state+0x54>
		return -1;
   80758:	00bfffc4 	movi	r2,-1
   8075c:	e0bfff15 	stw	r2,-4(fp)
   80760:	00000406 	br	80774 <adv7513_power_state+0x64>

	if ((regv & 0x40) == 1)
		*state = 0;
	else
		*state = 1;
   80764:	e0fffe17 	ldw	r3,-8(fp)
   80768:	00800044 	movi	r2,1
   8076c:	18800015 	stw	r2,0(r3)

	return 0;
   80770:	e03fff15 	stw	zero,-4(fp)
   80774:	e0bfff17 	ldw	r2,-4(fp)
}
   80778:	e037883a 	mov	sp,fp
   8077c:	dfc00117 	ldw	ra,4(sp)
   80780:	df000017 	ldw	fp,0(sp)
   80784:	dec00204 	addi	sp,sp,8
   80788:	f800283a 	ret

0008078c <adv7513_mode_state>:

int adv7513_mode_state(struct hdmi_encoder *ec, int *vic, const char **mode)
{
   8078c:	defff804 	addi	sp,sp,-32
   80790:	de00012e 	bgeu	sp,et,80798 <adv7513_mode_state+0xc>
   80794:	003da0fa 	break	3
   80798:	dfc00715 	stw	ra,28(sp)
   8079c:	df000615 	stw	fp,24(sp)
   807a0:	df000604 	addi	fp,sp,24
   807a4:	e13ffc15 	stw	r4,-16(fp)
   807a8:	e17ffd15 	stw	r5,-12(fp)
   807ac:	e1bffe15 	stw	r6,-8(fp)
		"720x480p @239.76/240 Hz (16:9)",
		"720(1440)x480i @239.76/240 Hz (4:3)",
		"720(1440)x480i @239.76/240 Hz (16:9)",
	};

	bool r = 0;
   807b0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 regv = 0;
   807b4:	e03ffb05 	stb	zero,-20(fp)

	r = reg_read(ec, 0x3d, &regv);
   807b8:	e1bffb04 	addi	r6,fp,-20
   807bc:	e13ffc17 	ldw	r4,-16(fp)
   807c0:	01400f44 	movi	r5,61
   807c4:	008ae9c0 	call	8ae9c <reg_read>
   807c8:	e0bffa15 	stw	r2,-24(fp)
	if (r != 0)
   807cc:	e0bffa17 	ldw	r2,-24(fp)
   807d0:	1005003a 	cmpeq	r2,r2,zero
   807d4:	1000031e 	bne	r2,zero,807e4 <adv7513_mode_state+0x58>
		return -1;
   807d8:	00bfffc4 	movi	r2,-1
   807dc:	e0bfff15 	stw	r2,-4(fp)
   807e0:	00001a06 	br	8084c <adv7513_mode_state+0xc0>

	*vic = regv & 0x1f;
   807e4:	e0bffb03 	ldbu	r2,-20(fp)
   807e8:	10803fcc 	andi	r2,r2,255
   807ec:	10c007cc 	andi	r3,r2,31
   807f0:	e0bffd17 	ldw	r2,-12(fp)
   807f4:	10c00015 	stw	r3,0(r2)

	if (*vic < 60) {
   807f8:	e0bffd17 	ldw	r2,-12(fp)
   807fc:	10800017 	ldw	r2,0(r2)
   80800:	10800f08 	cmpgei	r2,r2,60
   80804:	10000b1e 	bne	r2,zero,80834 <adv7513_mode_state+0xa8>
		*mode = vic_table[*vic];
   80808:	e0bffd17 	ldw	r2,-12(fp)
   8080c:	10800017 	ldw	r2,0(r2)
   80810:	00c002b4 	movhi	r3,10
   80814:	18fa2904 	addi	r3,r3,-5980
   80818:	1085883a 	add	r2,r2,r2
   8081c:	1085883a 	add	r2,r2,r2
   80820:	10c5883a 	add	r2,r2,r3
   80824:	10c00017 	ldw	r3,0(r2)
   80828:	e0bffe17 	ldw	r2,-8(fp)
   8082c:	10c00015 	stw	r3,0(r2)
   80830:	00000506 	br	80848 <adv7513_mode_state+0xbc>
	} else {
		*mode = vic_table[0];
   80834:	008002b4 	movhi	r2,10
   80838:	10ba2904 	addi	r2,r2,-5980
   8083c:	10c00017 	ldw	r3,0(r2)
   80840:	e0bffe17 	ldw	r2,-8(fp)
   80844:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   80848:	e03fff15 	stw	zero,-4(fp)
   8084c:	e0bfff17 	ldw	r2,-4(fp)
}
   80850:	e037883a 	mov	sp,fp
   80854:	dfc00117 	ldw	ra,4(sp)
   80858:	df000017 	ldw	fp,0(sp)
   8085c:	dec00204 	addi	sp,sp,8
   80860:	f800283a 	ret

00080864 <adv7513_edid_read>:

int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
   80864:	defff604 	addi	sp,sp,-40
   80868:	de00012e 	bgeu	sp,et,80870 <adv7513_edid_read+0xc>
   8086c:	003da0fa 	break	3
   80870:	dfc00915 	stw	ra,36(sp)
   80874:	df000815 	stw	fp,32(sp)
   80878:	df000804 	addi	fp,sp,32
   8087c:	e13ffc15 	stw	r4,-16(fp)
   80880:	e17ffd15 	stw	r5,-12(fp)
   80884:	e1bffe15 	stw	r6,-8(fp)
	bool r = 0;
   80888:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 *regv = (alt_u8 *)edid;
   8088c:	e0bffd17 	ldw	r2,-12(fp)
   80890:	e0bffa15 	stw	r2,-24(fp)
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
   80894:	e0bffe17 	ldw	r2,-8(fp)
   80898:	1004923a 	slli	r2,r2,8
   8089c:	e0bff915 	stw	r2,-28(fp)
   808a0:	00001b06 	br	80910 <adv7513_edid_read+0xac>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->edid_addr, i, regv);
   808a4:	e0bffc17 	ldw	r2,-16(fp)
   808a8:	10800117 	ldw	r2,4(r2)
   808ac:	11803fcc 	andi	r6,r2,255
   808b0:	3180201c 	xori	r6,r6,128
   808b4:	31bfe004 	addi	r6,r6,-128
   808b8:	e0bff917 	ldw	r2,-28(fp)
   808bc:	11c03fcc 	andi	r7,r2,255
   808c0:	e0bffa17 	ldw	r2,-24(fp)
   808c4:	d8800015 	stw	r2,0(sp)
   808c8:	01000434 	movhi	r4,16
   808cc:	21041004 	addi	r4,r4,4160
   808d0:	01400434 	movhi	r5,16
   808d4:	29441404 	addi	r5,r5,4176
   808d8:	008b3ec0 	call	8b3ec <I2C_Read>
   808dc:	e0bffb15 	stw	r2,-20(fp)
		if (!r)
   808e0:	e0bffb17 	ldw	r2,-20(fp)
   808e4:	1004c03a 	cmpne	r2,r2,zero
   808e8:	1000031e 	bne	r2,zero,808f8 <adv7513_edid_read+0x94>
			return -1;
   808ec:	00bfffc4 	movi	r2,-1
   808f0:	e0bfff15 	stw	r2,-4(fp)
   808f4:	00000c06 	br	80928 <adv7513_edid_read+0xc4>
{
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
   808f8:	e0bff917 	ldw	r2,-28(fp)
   808fc:	10800044 	addi	r2,r2,1
   80900:	e0bff915 	stw	r2,-28(fp)
   80904:	e0bffa17 	ldw	r2,-24(fp)
   80908:	10800044 	addi	r2,r2,1
   8090c:	e0bffa15 	stw	r2,-24(fp)
   80910:	e0bffe17 	ldw	r2,-8(fp)
   80914:	1004923a 	slli	r2,r2,8
   80918:	10c04004 	addi	r3,r2,256
   8091c:	e0bff917 	ldw	r2,-28(fp)
   80920:	10ffe016 	blt	r2,r3,808a4 <adv7513_edid_read+0x40>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->edid_addr, i, regv);
		if (!r)
			return -1;
	}

	return 0;
   80924:	e03fff15 	stw	zero,-4(fp)
   80928:	e0bfff17 	ldw	r2,-4(fp)
}
   8092c:	e037883a 	mov	sp,fp
   80930:	dfc00117 	ldw	ra,4(sp)
   80934:	df000017 	ldw	fp,0(sp)
   80938:	dec00204 	addi	sp,sp,8
   8093c:	f800283a 	ret

00080940 <adv7513_regmap_dump>:

int adv7513_regmap_dump(struct hdmi_encoder *ec, void *data, int offset)
{
   80940:	defff604 	addi	sp,sp,-40
   80944:	de00012e 	bgeu	sp,et,8094c <adv7513_regmap_dump+0xc>
   80948:	003da0fa 	break	3
   8094c:	dfc00915 	stw	ra,36(sp)
   80950:	df000815 	stw	fp,32(sp)
   80954:	df000804 	addi	fp,sp,32
   80958:	e13ffc15 	stw	r4,-16(fp)
   8095c:	e17ffd15 	stw	r5,-12(fp)
   80960:	e1bffe15 	stw	r6,-8(fp)
	bool r = 0;
   80964:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 *regv = (alt_u8 *)data;
   80968:	e0bffd17 	ldw	r2,-12(fp)
   8096c:	e0bffa15 	stw	r2,-24(fp)
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
   80970:	e03ff915 	stw	zero,-28(fp)
   80974:	00001b06 	br	809e4 <adv7513_regmap_dump+0xa4>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, i, regv);
   80978:	e0bffc17 	ldw	r2,-16(fp)
   8097c:	10800017 	ldw	r2,0(r2)
   80980:	11803fcc 	andi	r6,r2,255
   80984:	3180201c 	xori	r6,r6,128
   80988:	31bfe004 	addi	r6,r6,-128
   8098c:	e0bff917 	ldw	r2,-28(fp)
   80990:	11c03fcc 	andi	r7,r2,255
   80994:	e0bffa17 	ldw	r2,-24(fp)
   80998:	d8800015 	stw	r2,0(sp)
   8099c:	01000434 	movhi	r4,16
   809a0:	21041004 	addi	r4,r4,4160
   809a4:	01400434 	movhi	r5,16
   809a8:	29441404 	addi	r5,r5,4176
   809ac:	008b3ec0 	call	8b3ec <I2C_Read>
   809b0:	e0bffb15 	stw	r2,-20(fp)
		if (!r)
   809b4:	e0bffb17 	ldw	r2,-20(fp)
   809b8:	1004c03a 	cmpne	r2,r2,zero
   809bc:	1000031e 	bne	r2,zero,809cc <adv7513_regmap_dump+0x8c>
			return -1;
   809c0:	00bfffc4 	movi	r2,-1
   809c4:	e0bfff15 	stw	r2,-4(fp)
   809c8:	00000a06 	br	809f4 <adv7513_regmap_dump+0xb4>
{
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
   809cc:	e0bff917 	ldw	r2,-28(fp)
   809d0:	10800044 	addi	r2,r2,1
   809d4:	e0bff915 	stw	r2,-28(fp)
   809d8:	e0bffa17 	ldw	r2,-24(fp)
   809dc:	10800044 	addi	r2,r2,1
   809e0:	e0bffa15 	stw	r2,-24(fp)
   809e4:	e0bff917 	ldw	r2,-28(fp)
   809e8:	10804010 	cmplti	r2,r2,256
   809ec:	103fe21e 	bne	r2,zero,80978 <adv7513_regmap_dump+0x38>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, i, regv);
		if (!r)
			return -1;
	}

	return 0;
   809f0:	e03fff15 	stw	zero,-4(fp)
   809f4:	e0bfff17 	ldw	r2,-4(fp)
}
   809f8:	e037883a 	mov	sp,fp
   809fc:	dfc00117 	ldw	ra,4(sp)
   80a00:	df000017 	ldw	fp,0(sp)
   80a04:	dec00204 	addi	sp,sp,8
   80a08:	f800283a 	ret

00080a0c <adv7513_config_csc>:

// color space converter (section 4.3.8)
static int adv7513_config_csc(struct hdmi_encoder *ec, int enable, void *config)
{
   80a0c:	defff804 	addi	sp,sp,-32
   80a10:	de00012e 	bgeu	sp,et,80a18 <adv7513_config_csc+0xc>
   80a14:	003da0fa 	break	3
   80a18:	dfc00715 	stw	ra,28(sp)
   80a1c:	df000615 	stw	fp,24(sp)
   80a20:	df000604 	addi	fp,sp,24
   80a24:	e13ffb15 	stw	r4,-20(fp)
   80a28:	e17ffc15 	stw	r5,-16(fp)
   80a2c:	e1bffd15 	stw	r6,-12(fp)
	//printf("adv7513_config_csc()\n");

	// 0x18[7] <- enable
	// 0x18[6:5] <- scaling
	// 0x18[4:0] <- csc_a1[4:0]
	int regv = (enable ? 1 : 0) << 7;
   80a30:	e0bffc17 	ldw	r2,-16(fp)
   80a34:	1005003a 	cmpeq	r2,r2,zero
   80a38:	1000031e 	bne	r2,zero,80a48 <adv7513_config_csc+0x3c>
   80a3c:	00802004 	movi	r2,128
   80a40:	e0bfff15 	stw	r2,-4(fp)
   80a44:	00000106 	br	80a4c <adv7513_config_csc+0x40>
   80a48:	e03fff15 	stw	zero,-4(fp)
   80a4c:	e0bfff17 	ldw	r2,-4(fp)
   80a50:	e0bffa15 	stw	r2,-24(fp)
	if (reg_update_bits(ec, 0x18, 0x80, regv) != 0)
   80a54:	e13ffb17 	ldw	r4,-20(fp)
   80a58:	01400604 	movi	r5,24
   80a5c:	01802004 	movi	r6,128
   80a60:	e1fffa17 	ldw	r7,-24(fp)
   80a64:	008afc80 	call	8afc8 <reg_update_bits>
   80a68:	1005003a 	cmpeq	r2,r2,zero
   80a6c:	1000031e 	bne	r2,zero,80a7c <adv7513_config_csc+0x70>
		return -1;
   80a70:	00bfffc4 	movi	r2,-1
   80a74:	e0bffe15 	stw	r2,-8(fp)
   80a78:	00000106 	br	80a80 <adv7513_config_csc+0x74>
	// 0x2d[7:0] <- csc_c3[12:5]

	// 0x2e[4:0] <- csc_c4[4:0]
	// 0x2f[7:0] <- csc_c4[12:5]

	return 0;
   80a7c:	e03ffe15 	stw	zero,-8(fp)
   80a80:	e0bffe17 	ldw	r2,-8(fp)
}
   80a84:	e037883a 	mov	sp,fp
   80a88:	dfc00117 	ldw	ra,4(sp)
   80a8c:	df000017 	ldw	fp,0(sp)
   80a90:	dec00204 	addi	sp,sp,8
   80a94:	f800283a 	ret

00080a98 <adv7513_video_in_format>:
// depth       - adv7513_input_color_depth
// color_space - adv7513_input_color_space
// aspect      - adv7513_input_aspect_ratio
// style       - adv7513_input_style
static int adv7513_video_in_format(struct hdmi_encoder *ec, int id, int depth, int color_space, int aspect, int style)
{
   80a98:	defff804 	addi	sp,sp,-32
   80a9c:	de00012e 	bgeu	sp,et,80aa4 <adv7513_video_in_format+0xc>
   80aa0:	003da0fa 	break	3
   80aa4:	dfc00715 	stw	ra,28(sp)
   80aa8:	df000615 	stw	fp,24(sp)
   80aac:	df000604 	addi	fp,sp,24
   80ab0:	e13ffb15 	stw	r4,-20(fp)
   80ab4:	e17ffc15 	stw	r5,-16(fp)
   80ab8:	e1bffd15 	stw	r6,-12(fp)
   80abc:	e1fffe15 	stw	r7,-8(fp)
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   80ac0:	e13ffb17 	ldw	r4,-20(fp)
   80ac4:	01400544 	movi	r5,21
   80ac8:	018003c4 	movi	r6,15
   80acc:	e1fffc17 	ldw	r7,-16(fp)
   80ad0:	008afc80 	call	8afc8 <reg_update_bits>
   80ad4:	1005003a 	cmpeq	r2,r2,zero
   80ad8:	1000031e 	bne	r2,zero,80ae8 <adv7513_video_in_format+0x50>
		return -1;
   80adc:	00bfffc4 	movi	r2,-1
   80ae0:	e0bfff15 	stw	r2,-4(fp)
   80ae4:	00002406 	br	80b78 <adv7513_video_in_format+0xe0>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
   80ae8:	e0bffd17 	ldw	r2,-12(fp)
   80aec:	108000cc 	andi	r2,r2,3
   80af0:	1006913a 	slli	r3,r2,4
   80af4:	e0800317 	ldw	r2,12(fp)
   80af8:	108000cc 	andi	r2,r2,3
   80afc:	1085883a 	add	r2,r2,r2
   80b00:	1085883a 	add	r2,r2,r2
   80b04:	1886b03a 	or	r3,r3,r2
   80b08:	e0bffe17 	ldw	r2,-8(fp)
   80b0c:	1080004c 	andi	r2,r2,1
   80b10:	1884b03a 	or	r2,r3,r2
   80b14:	e0bffa15 	stw	r2,-24(fp)
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
   80b18:	e13ffb17 	ldw	r4,-20(fp)
   80b1c:	01400584 	movi	r5,22
   80b20:	01800f44 	movi	r6,61
   80b24:	e1fffa17 	ldw	r7,-24(fp)
   80b28:	008afc80 	call	8afc8 <reg_update_bits>
   80b2c:	1005003a 	cmpeq	r2,r2,zero
   80b30:	1000031e 	bne	r2,zero,80b40 <adv7513_video_in_format+0xa8>
		return -1;
   80b34:	00bfffc4 	movi	r2,-1
   80b38:	e0bfff15 	stw	r2,-4(fp)
   80b3c:	00000e06 	br	80b78 <adv7513_video_in_format+0xe0>

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
   80b40:	e0800217 	ldw	r2,8(fp)
   80b44:	1080004c 	andi	r2,r2,1
   80b48:	1085883a 	add	r2,r2,r2
   80b4c:	100f883a 	mov	r7,r2
   80b50:	e13ffb17 	ldw	r4,-20(fp)
   80b54:	014005c4 	movi	r5,23
   80b58:	01800084 	movi	r6,2
   80b5c:	008afc80 	call	8afc8 <reg_update_bits>
   80b60:	1005003a 	cmpeq	r2,r2,zero
   80b64:	1000031e 	bne	r2,zero,80b74 <adv7513_video_in_format+0xdc>
		return -1;
   80b68:	00bfffc4 	movi	r2,-1
   80b6c:	e0bfff15 	stw	r2,-4(fp)
   80b70:	00000106 	br	80b78 <adv7513_video_in_format+0xe0>

	return 0;
   80b74:	e03fff15 	stw	zero,-4(fp)
   80b78:	e0bfff17 	ldw	r2,-4(fp)
}
   80b7c:	e037883a 	mov	sp,fp
   80b80:	dfc00117 	ldw	ra,4(sp)
   80b84:	df000017 	ldw	fp,0(sp)
   80b88:	dec00204 	addi	sp,sp,8
   80b8c:	f800283a 	ret

00080b90 <adv7513_video_out_format>:
// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
{
   80b90:	defff904 	addi	sp,sp,-28
   80b94:	de00012e 	bgeu	sp,et,80b9c <adv7513_video_out_format+0xc>
   80b98:	003da0fa 	break	3
   80b9c:	dfc00615 	stw	ra,24(sp)
   80ba0:	df000515 	stw	fp,20(sp)
   80ba4:	df000504 	addi	fp,sp,20
   80ba8:	e13ffc15 	stw	r4,-16(fp)
   80bac:	e17ffd15 	stw	r5,-12(fp)
   80bb0:	e1bffe15 	stw	r6,-8(fp)
	int regv;

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
   80bb4:	e0bffd17 	ldw	r2,-12(fp)
   80bb8:	1080004c 	andi	r2,r2,1
   80bbc:	100491fa 	slli	r2,r2,7
   80bc0:	e0bffb15 	stw	r2,-20(fp)
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   80bc4:	e13ffc17 	ldw	r4,-16(fp)
   80bc8:	01400584 	movi	r5,22
   80bcc:	01802004 	movi	r6,128
   80bd0:	e1fffb17 	ldw	r7,-20(fp)
   80bd4:	008afc80 	call	8afc8 <reg_update_bits>
   80bd8:	1005003a 	cmpeq	r2,r2,zero
   80bdc:	1000031e 	bne	r2,zero,80bec <adv7513_video_out_format+0x5c>
		return -1;
   80be0:	00bfffc4 	movi	r2,-1
   80be4:	e0bfff15 	stw	r2,-4(fp)
   80be8:	00003706 	br	80cc8 <adv7513_video_out_format+0x138>

	// 0x18 ~ 0x2f
	if (adv7513_config_csc(ec, 0, 0) != 0) {
   80bec:	e13ffc17 	ldw	r4,-16(fp)
   80bf0:	000b883a 	mov	r5,zero
   80bf4:	000d883a 	mov	r6,zero
   80bf8:	0080a0c0 	call	80a0c <adv7513_config_csc>
   80bfc:	1005003a 	cmpeq	r2,r2,zero
   80c00:	1000031e 	bne	r2,zero,80c10 <adv7513_video_out_format+0x80>
		return -1;
   80c04:	00bfffc4 	movi	r2,-1
   80c08:	e0bfff15 	stw	r2,-4(fp)
   80c0c:	00002e06 	br	80cc8 <adv7513_video_out_format+0x138>
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- dvi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (dvi & 0x01) << 1) != 0)
   80c10:	e0bffe17 	ldw	r2,-8(fp)
   80c14:	1080004c 	andi	r2,r2,1
   80c18:	1085883a 	add	r2,r2,r2
   80c1c:	100f883a 	mov	r7,r2
   80c20:	e13ffc17 	ldw	r4,-16(fp)
   80c24:	01402bc4 	movi	r5,175
   80c28:	01802084 	movi	r6,130
   80c2c:	008afc80 	call	8afc8 <reg_update_bits>
   80c30:	1005003a 	cmpeq	r2,r2,zero
   80c34:	1000031e 	bne	r2,zero,80c44 <adv7513_video_out_format+0xb4>
		return -1;
   80c38:	00bfffc4 	movi	r2,-1
   80c3c:	e0bfff15 	stw	r2,-4(fp)
   80c40:	00002106 	br	80cc8 <adv7513_video_out_format+0x138>

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (dvi == ADV7513_MODE_HDMI) {
   80c44:	e0bffe17 	ldw	r2,-8(fp)
   80c48:	10800058 	cmpnei	r2,r2,1
   80c4c:	10000a1e 	bne	r2,zero,80c78 <adv7513_video_out_format+0xe8>
		if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
   80c50:	e13ffc17 	ldw	r4,-16(fp)
   80c54:	01401004 	movi	r5,64
   80c58:	01802004 	movi	r6,128
   80c5c:	01c02004 	movi	r7,128
   80c60:	008afc80 	call	8afc8 <reg_update_bits>
   80c64:	1005003a 	cmpeq	r2,r2,zero
   80c68:	10000c1e 	bne	r2,zero,80c9c <adv7513_video_out_format+0x10c>
			return -1;
   80c6c:	00bfffc4 	movi	r2,-1
   80c70:	e0bfff15 	stw	r2,-4(fp)
   80c74:	00001406 	br	80cc8 <adv7513_video_out_format+0x138>
	} else {
		if (reg_clear_bits(ec, 0x40, 0x80) != 0)
   80c78:	e13ffc17 	ldw	r4,-16(fp)
   80c7c:	01401004 	movi	r5,64
   80c80:	01802004 	movi	r6,128
   80c84:	008b2000 	call	8b200 <reg_clear_bits>
   80c88:	1005003a 	cmpeq	r2,r2,zero
   80c8c:	1000031e 	bne	r2,zero,80c9c <adv7513_video_out_format+0x10c>
			return -1;
   80c90:	00bfffc4 	movi	r2,-1
   80c94:	e0bfff15 	stw	r2,-4(fp)
   80c98:	00000b06 	br	80cc8 <adv7513_video_out_format+0x138>
	}

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
   80c9c:	e13ffc17 	ldw	r4,-16(fp)
   80ca0:	01401304 	movi	r5,76
   80ca4:	018003c4 	movi	r6,15
   80ca8:	01c00104 	movi	r7,4
   80cac:	008afc80 	call	8afc8 <reg_update_bits>
   80cb0:	1005003a 	cmpeq	r2,r2,zero
   80cb4:	1000031e 	bne	r2,zero,80cc4 <adv7513_video_out_format+0x134>
		return -1;
   80cb8:	00bfffc4 	movi	r2,-1
   80cbc:	e0bfff15 	stw	r2,-4(fp)
   80cc0:	00000106 	br	80cc8 <adv7513_video_out_format+0x138>
	// VIC <- vga 4:3
	// 0x3c[5:0] <- 0x01 & 0x3f
	//if (reg_update_bits(ec, 0x3c, 0x3f, 0x01) != 0)
	//	return -1;

	return 0;
   80cc4:	e03fff15 	stw	zero,-4(fp)
   80cc8:	e0bfff17 	ldw	r2,-4(fp)
}
   80ccc:	e037883a 	mov	sp,fp
   80cd0:	dfc00117 	ldw	ra,4(sp)
   80cd4:	df000017 	ldw	fp,0(sp)
   80cd8:	dec00204 	addi	sp,sp,8
   80cdc:	f800283a 	ret

00080ce0 <adv7513_avi_infoframe>:
//   CEA-861-D --section 6.2
//   ADV7513 programmer's manual -- section 4.3.9.1
//
// 0x52 ~ 0x71
static int adv7513_avi_infoframe(struct hdmi_encoder *ec)
{
   80ce0:	defffa04 	addi	sp,sp,-24
   80ce4:	de00012e 	bgeu	sp,et,80cec <adv7513_avi_infoframe+0xc>
   80ce8:	003da0fa 	break	3
   80cec:	dfc00515 	stw	ra,20(sp)
   80cf0:	df000415 	stw	fp,16(sp)
   80cf4:	df000404 	addi	fp,sp,16
   80cf8:	e13ffe15 	stw	r4,-8(fp)
	struct avi_infoframe *avi = &ec->avi_if;
   80cfc:	e0bffe17 	ldw	r2,-8(fp)
   80d00:	10800904 	addi	r2,r2,36
   80d04:	e0bffd15 	stw	r2,-12(fp)
	int regv;

	//printf("adv7513_avi_infoframe()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
   80d08:	e0fffd17 	ldw	r3,-12(fp)
   80d0c:	00800084 	movi	r2,2
   80d10:	18800015 	stw	r2,0(r3)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
   80d14:	e0bffd17 	ldw	r2,-12(fp)
   80d18:	10000315 	stw	zero,12(r2)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   80d1c:	e0fffd17 	ldw	r3,-12(fp)
   80d20:	00800044 	movi	r2,1
   80d24:	18800215 	stw	r2,8(r3)
	avi->active_fmt_ar = 8;		// active format aspect ratio
   80d28:	e0fffd17 	ldw	r3,-12(fp)
   80d2c:	00800204 	movi	r2,8
   80d30:	18800415 	stw	r2,16(r3)
	avi->pict_ar = 1;			// picture aspect ratio
   80d34:	e0fffd17 	ldw	r3,-12(fp)
   80d38:	00800044 	movi	r2,1
   80d3c:	18800515 	stw	r2,20(r3)
	avi->colorimetry = 0;		// colorimetry
   80d40:	e0bffd17 	ldw	r2,-12(fp)
   80d44:	10000615 	stw	zero,24(r2)
	avi->colorimetry_ext = 0;	// extended colorimetry
   80d48:	e0bffd17 	ldw	r2,-12(fp)
   80d4c:	10000915 	stw	zero,36(r2)
	avi->scaling = 0;			// non-uniform scaling
   80d50:	e0bffd17 	ldw	r2,-12(fp)
   80d54:	10000715 	stw	zero,28(r2)
	avi->quant = 0;				// rgb quantization range
   80d58:	e0bffd17 	ldw	r2,-12(fp)
   80d5c:	10000815 	stw	zero,32(r2)
	avi->itc = 0;				// it content
   80d60:	e0bffd17 	ldw	r2,-12(fp)
   80d64:	10000a15 	stw	zero,40(r2)
	avi->pr = 0;				// pixel repetition factor
   80d68:	e0bffd17 	ldw	r2,-12(fp)
   80d6c:	10000c15 	stw	zero,48(r2)
	avi->vic = 1;				// video identification code
   80d70:	e0fffd17 	ldw	r3,-12(fp)
   80d74:	00800044 	movi	r2,1
   80d78:	18800b15 	stw	r2,44(r3)
	avi->yq1yq0 = 0;			// ??
   80d7c:	e0bffd17 	ldw	r2,-12(fp)
   80d80:	10000d15 	stw	zero,52(r2)

	avi->bar_info = 1;  		// bar fields valid
   80d84:	e0fffd17 	ldw	r3,-12(fp)
   80d88:	00800044 	movi	r2,1
   80d8c:	18800115 	stw	r2,4(r3)
	avi->bar.top_e = 0;
   80d90:	e0bffd17 	ldw	r2,-12(fp)
   80d94:	10000e15 	stw	zero,56(r2)
	avi->bar.bottom_s = 0;
   80d98:	e0bffd17 	ldw	r2,-12(fp)
   80d9c:	10000f15 	stw	zero,60(r2)
	avi->bar.left_e = 0;
   80da0:	e0bffd17 	ldw	r2,-12(fp)
   80da4:	10001015 	stw	zero,64(r2)
	avi->bar.right_s = 0;
   80da8:	e0bffd17 	ldw	r2,-12(fp)
   80dac:	10001115 	stw	zero,68(r2)
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
   80db0:	e13ffe17 	ldw	r4,-8(fp)
   80db4:	01401104 	movi	r5,68
   80db8:	01800404 	movi	r6,16
   80dbc:	01c00404 	movi	r7,16
   80dc0:	008afc80 	call	8afc8 <reg_update_bits>
   80dc4:	1005003a 	cmpeq	r2,r2,zero
   80dc8:	1000031e 	bne	r2,zero,80dd8 <adv7513_avi_infoframe+0xf8>
		return -1;
   80dcc:	00bfffc4 	movi	r2,-1
   80dd0:	e0bfff15 	stw	r2,-4(fp)
   80dd4:	0000e006 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
   80dd8:	e13ffe17 	ldw	r4,-8(fp)
   80ddc:	01401284 	movi	r5,74
   80de0:	01803004 	movi	r6,192
   80de4:	01c03004 	movi	r7,192
   80de8:	008afc80 	call	8afc8 <reg_update_bits>
   80dec:	1005003a 	cmpeq	r2,r2,zero
   80df0:	1000031e 	bne	r2,zero,80e00 <adv7513_avi_infoframe+0x120>
		return -1;
   80df4:	00bfffc4 	movi	r2,-1
   80df8:	e0bfff15 	stw	r2,-4(fp)
   80dfc:	0000d606 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   80e00:	e0bffd17 	ldw	r2,-12(fp)
   80e04:	10800317 	ldw	r2,12(r2)
   80e08:	108000cc 	andi	r2,r2,3
   80e0c:	1006917a 	slli	r3,r2,5
   80e10:	e0bffd17 	ldw	r2,-12(fp)
   80e14:	10800217 	ldw	r2,8(r2)
   80e18:	1080004c 	andi	r2,r2,1
   80e1c:	1004913a 	slli	r2,r2,4
   80e20:	1886b03a 	or	r3,r3,r2
   80e24:	e0bffd17 	ldw	r2,-12(fp)
   80e28:	10800117 	ldw	r2,4(r2)
   80e2c:	108000cc 	andi	r2,r2,3
   80e30:	1085883a 	add	r2,r2,r2
   80e34:	1085883a 	add	r2,r2,r2
   80e38:	1886b03a 	or	r3,r3,r2
   80e3c:	e0bffd17 	ldw	r2,-12(fp)
   80e40:	10800017 	ldw	r2,0(r2)
   80e44:	108000cc 	andi	r2,r2,3
   80e48:	1884b03a 	or	r2,r3,r2
   80e4c:	e0bffc15 	stw	r2,-16(fp)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   80e50:	e13ffe17 	ldw	r4,-8(fp)
   80e54:	01401544 	movi	r5,85
   80e58:	01801c04 	movi	r6,112
   80e5c:	e1fffc17 	ldw	r7,-16(fp)
   80e60:	008afc80 	call	8afc8 <reg_update_bits>
   80e64:	1005003a 	cmpeq	r2,r2,zero
   80e68:	1000031e 	bne	r2,zero,80e78 <adv7513_avi_infoframe+0x198>
		return -1;
   80e6c:	00bfffc4 	movi	r2,-1
   80e70:	e0bfff15 	stw	r2,-4(fp)
   80e74:	0000b806 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   80e78:	e0bffd17 	ldw	r2,-12(fp)
   80e7c:	10800617 	ldw	r2,24(r2)
   80e80:	108000cc 	andi	r2,r2,3
   80e84:	100691ba 	slli	r3,r2,6
   80e88:	e0bffd17 	ldw	r2,-12(fp)
   80e8c:	10800517 	ldw	r2,20(r2)
   80e90:	108000cc 	andi	r2,r2,3
   80e94:	1004913a 	slli	r2,r2,4
   80e98:	1886b03a 	or	r3,r3,r2
   80e9c:	e0bffd17 	ldw	r2,-12(fp)
   80ea0:	10800417 	ldw	r2,16(r2)
   80ea4:	108003cc 	andi	r2,r2,15
   80ea8:	1884b03a 	or	r2,r3,r2
   80eac:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x56, regv) != 0)
   80eb0:	e13ffe17 	ldw	r4,-8(fp)
   80eb4:	01401584 	movi	r5,86
   80eb8:	e1bffc17 	ldw	r6,-16(fp)
   80ebc:	008af300 	call	8af30 <reg_write>
   80ec0:	1005003a 	cmpeq	r2,r2,zero
   80ec4:	1000031e 	bne	r2,zero,80ed4 <adv7513_avi_infoframe+0x1f4>
		return -1;
   80ec8:	00bfffc4 	movi	r2,-1
   80ecc:	e0bfff15 	stw	r2,-4(fp)
   80ed0:	0000a106 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   80ed4:	e0bffd17 	ldw	r2,-12(fp)
   80ed8:	10800a17 	ldw	r2,40(r2)
   80edc:	1080004c 	andi	r2,r2,1
   80ee0:	100691fa 	slli	r3,r2,7
   80ee4:	e0bffd17 	ldw	r2,-12(fp)
   80ee8:	10800917 	ldw	r2,36(r2)
   80eec:	108001cc 	andi	r2,r2,7
   80ef0:	1004913a 	slli	r2,r2,4
   80ef4:	1886b03a 	or	r3,r3,r2
   80ef8:	e0bffd17 	ldw	r2,-12(fp)
   80efc:	10800817 	ldw	r2,32(r2)
   80f00:	108000cc 	andi	r2,r2,3
   80f04:	1085883a 	add	r2,r2,r2
   80f08:	1085883a 	add	r2,r2,r2
   80f0c:	1886b03a 	or	r3,r3,r2
   80f10:	e0bffd17 	ldw	r2,-12(fp)
   80f14:	10800717 	ldw	r2,28(r2)
   80f18:	108000cc 	andi	r2,r2,3
   80f1c:	1884b03a 	or	r2,r3,r2
   80f20:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x57, regv) != 0)
   80f24:	e13ffe17 	ldw	r4,-8(fp)
   80f28:	014015c4 	movi	r5,87
   80f2c:	e1bffc17 	ldw	r6,-16(fp)
   80f30:	008af300 	call	8af30 <reg_write>
   80f34:	1005003a 	cmpeq	r2,r2,zero
   80f38:	1000031e 	bne	r2,zero,80f48 <adv7513_avi_infoframe+0x268>
		return -1;
   80f3c:	00bfffc4 	movi	r2,-1
   80f40:	e0bfff15 	stw	r2,-4(fp)
   80f44:	00008406 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   80f48:	e0bffd17 	ldw	r2,-12(fp)
   80f4c:	10800d17 	ldw	r2,52(r2)
   80f50:	108003cc 	andi	r2,r2,15
   80f54:	1004913a 	slli	r2,r2,4
   80f58:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x59, regv) != 0)
   80f5c:	e13ffe17 	ldw	r4,-8(fp)
   80f60:	01401644 	movi	r5,89
   80f64:	e1bffc17 	ldw	r6,-16(fp)
   80f68:	008af300 	call	8af30 <reg_write>
   80f6c:	1005003a 	cmpeq	r2,r2,zero
   80f70:	1000031e 	bne	r2,zero,80f80 <adv7513_avi_infoframe+0x2a0>
		return -1;
   80f74:	00bfffc4 	movi	r2,-1
   80f78:	e0bfff15 	stw	r2,-4(fp)
   80f7c:	00007606 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
   80f80:	e0bffd17 	ldw	r2,-12(fp)
   80f84:	10800e17 	ldw	r2,56(r2)
   80f88:	10803fcc 	andi	r2,r2,255
   80f8c:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x5a, regv) != 0)
   80f90:	e13ffe17 	ldw	r4,-8(fp)
   80f94:	01401684 	movi	r5,90
   80f98:	e1bffc17 	ldw	r6,-16(fp)
   80f9c:	008af300 	call	8af30 <reg_write>
   80fa0:	1005003a 	cmpeq	r2,r2,zero
   80fa4:	1000031e 	bne	r2,zero,80fb4 <adv7513_avi_infoframe+0x2d4>
		return -1;
   80fa8:	00bfffc4 	movi	r2,-1
   80fac:	e0bfff15 	stw	r2,-4(fp)
   80fb0:	00006906 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
   80fb4:	e0bffd17 	ldw	r2,-12(fp)
   80fb8:	10800e17 	ldw	r2,56(r2)
   80fbc:	1005d23a 	srai	r2,r2,8
   80fc0:	10803fcc 	andi	r2,r2,255
   80fc4:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x5b, regv) != 0)
   80fc8:	e13ffe17 	ldw	r4,-8(fp)
   80fcc:	014016c4 	movi	r5,91
   80fd0:	e1bffc17 	ldw	r6,-16(fp)
   80fd4:	008af300 	call	8af30 <reg_write>
   80fd8:	1005003a 	cmpeq	r2,r2,zero
   80fdc:	1000031e 	bne	r2,zero,80fec <adv7513_avi_infoframe+0x30c>
		return -1;
   80fe0:	00bfffc4 	movi	r2,-1
   80fe4:	e0bfff15 	stw	r2,-4(fp)
   80fe8:	00005b06 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
   80fec:	e0bffd17 	ldw	r2,-12(fp)
   80ff0:	10800f17 	ldw	r2,60(r2)
   80ff4:	10803fcc 	andi	r2,r2,255
   80ff8:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x5c, regv) != 0)
   80ffc:	e13ffe17 	ldw	r4,-8(fp)
   81000:	01401704 	movi	r5,92
   81004:	e1bffc17 	ldw	r6,-16(fp)
   81008:	008af300 	call	8af30 <reg_write>
   8100c:	1005003a 	cmpeq	r2,r2,zero
   81010:	1000031e 	bne	r2,zero,81020 <adv7513_avi_infoframe+0x340>
		return -1;
   81014:	00bfffc4 	movi	r2,-1
   81018:	e0bfff15 	stw	r2,-4(fp)
   8101c:	00004e06 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
   81020:	e0bffd17 	ldw	r2,-12(fp)
   81024:	10800f17 	ldw	r2,60(r2)
   81028:	1005d23a 	srai	r2,r2,8
   8102c:	10803fcc 	andi	r2,r2,255
   81030:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x5d, regv) != 0)
   81034:	e13ffe17 	ldw	r4,-8(fp)
   81038:	01401744 	movi	r5,93
   8103c:	e1bffc17 	ldw	r6,-16(fp)
   81040:	008af300 	call	8af30 <reg_write>
   81044:	1005003a 	cmpeq	r2,r2,zero
   81048:	1000031e 	bne	r2,zero,81058 <adv7513_avi_infoframe+0x378>
		return -1;
   8104c:	00bfffc4 	movi	r2,-1
   81050:	e0bfff15 	stw	r2,-4(fp)
   81054:	00004006 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
   81058:	e0bffd17 	ldw	r2,-12(fp)
   8105c:	10801017 	ldw	r2,64(r2)
   81060:	10803fcc 	andi	r2,r2,255
   81064:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x5e, regv) != 0)
   81068:	e13ffe17 	ldw	r4,-8(fp)
   8106c:	01401784 	movi	r5,94
   81070:	e1bffc17 	ldw	r6,-16(fp)
   81074:	008af300 	call	8af30 <reg_write>
   81078:	1005003a 	cmpeq	r2,r2,zero
   8107c:	1000031e 	bne	r2,zero,8108c <adv7513_avi_infoframe+0x3ac>
		return -1;
   81080:	00bfffc4 	movi	r2,-1
   81084:	e0bfff15 	stw	r2,-4(fp)
   81088:	00003306 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
   8108c:	e0bffd17 	ldw	r2,-12(fp)
   81090:	10801017 	ldw	r2,64(r2)
   81094:	1005d23a 	srai	r2,r2,8
   81098:	10803fcc 	andi	r2,r2,255
   8109c:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x5f, regv) != 0)
   810a0:	e13ffe17 	ldw	r4,-8(fp)
   810a4:	014017c4 	movi	r5,95
   810a8:	e1bffc17 	ldw	r6,-16(fp)
   810ac:	008af300 	call	8af30 <reg_write>
   810b0:	1005003a 	cmpeq	r2,r2,zero
   810b4:	1000031e 	bne	r2,zero,810c4 <adv7513_avi_infoframe+0x3e4>
		return -1;
   810b8:	00bfffc4 	movi	r2,-1
   810bc:	e0bfff15 	stw	r2,-4(fp)
   810c0:	00002506 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
   810c4:	e0bffd17 	ldw	r2,-12(fp)
   810c8:	10801117 	ldw	r2,68(r2)
   810cc:	10803fcc 	andi	r2,r2,255
   810d0:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x60, regv) != 0)
   810d4:	e13ffe17 	ldw	r4,-8(fp)
   810d8:	01401804 	movi	r5,96
   810dc:	e1bffc17 	ldw	r6,-16(fp)
   810e0:	008af300 	call	8af30 <reg_write>
   810e4:	1005003a 	cmpeq	r2,r2,zero
   810e8:	1000031e 	bne	r2,zero,810f8 <adv7513_avi_infoframe+0x418>
		return -1;
   810ec:	00bfffc4 	movi	r2,-1
   810f0:	e0bfff15 	stw	r2,-4(fp)
   810f4:	00001806 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
   810f8:	e0bffd17 	ldw	r2,-12(fp)
   810fc:	10801117 	ldw	r2,68(r2)
   81100:	1005d23a 	srai	r2,r2,8
   81104:	10803fcc 	andi	r2,r2,255
   81108:	e0bffc15 	stw	r2,-16(fp)
	if (reg_write(ec, 0x61, regv) != 0)
   8110c:	e13ffe17 	ldw	r4,-8(fp)
   81110:	01401844 	movi	r5,97
   81114:	e1bffc17 	ldw	r6,-16(fp)
   81118:	008af300 	call	8af30 <reg_write>
   8111c:	1005003a 	cmpeq	r2,r2,zero
   81120:	1000031e 	bne	r2,zero,81130 <adv7513_avi_infoframe+0x450>
		return -1;
   81124:	00bfffc4 	movi	r2,-1
   81128:	e0bfff15 	stw	r2,-4(fp)
   8112c:	00000a06 	br	81158 <adv7513_avi_infoframe+0x478>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
   81130:	e13ffe17 	ldw	r4,-8(fp)
   81134:	01401284 	movi	r5,74
   81138:	01801004 	movi	r6,64
   8113c:	008b2000 	call	8b200 <reg_clear_bits>
   81140:	1005003a 	cmpeq	r2,r2,zero
   81144:	1000031e 	bne	r2,zero,81154 <adv7513_avi_infoframe+0x474>
		return -1;
   81148:	00bfffc4 	movi	r2,-1
   8114c:	e0bfff15 	stw	r2,-4(fp)
   81150:	00000106 	br	81158 <adv7513_avi_infoframe+0x478>

	return 0;
   81154:	e03fff15 	stw	zero,-4(fp)
   81158:	e0bfff17 	ldw	r2,-4(fp)
}
   8115c:	e037883a 	mov	sp,fp
   81160:	dfc00117 	ldw	ra,4(sp)
   81164:	df000017 	ldw	fp,0(sp)
   81168:	dec00204 	addi	sp,sp,8
   8116c:	f800283a 	ret

00081170 <adv7513_video_in_format_3d>:
// depth       - adv7513_input_color_depth
// color_space - adv7513_input_color_space
// style       - adv7513_input_style
// vic		   - adv7513_vic
static int adv7513_video_in_format_3d(struct hdmi_encoder *ec, int id, int depth, int color_space, int style, int vic)
{
   81170:	defff704 	addi	sp,sp,-36
   81174:	de00012e 	bgeu	sp,et,8117c <adv7513_video_in_format_3d+0xc>
   81178:	003da0fa 	break	3
   8117c:	dfc00815 	stw	ra,32(sp)
   81180:	df000715 	stw	fp,28(sp)
   81184:	df000704 	addi	fp,sp,28
   81188:	e13ffb15 	stw	r4,-20(fp)
   8118c:	e17ffc15 	stw	r5,-16(fp)
   81190:	e1bffd15 	stw	r6,-12(fp)
   81194:	e1fffe15 	stw	r7,-8(fp)
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   81198:	e13ffb17 	ldw	r4,-20(fp)
   8119c:	01400544 	movi	r5,21
   811a0:	018003c4 	movi	r6,15
   811a4:	e1fffc17 	ldw	r7,-16(fp)
   811a8:	008afc80 	call	8afc8 <reg_update_bits>
   811ac:	1005003a 	cmpeq	r2,r2,zero
   811b0:	1000031e 	bne	r2,zero,811c0 <adv7513_video_in_format_3d+0x50>
		return -1;
   811b4:	00bfffc4 	movi	r2,-1
   811b8:	e0bfff15 	stw	r2,-4(fp)
   811bc:	00004c06 	br	812f0 <adv7513_video_in_format_3d+0x180>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
   811c0:	e0bffd17 	ldw	r2,-12(fp)
   811c4:	108000cc 	andi	r2,r2,3
   811c8:	1006913a 	slli	r3,r2,4
   811cc:	e0800217 	ldw	r2,8(fp)
   811d0:	108000cc 	andi	r2,r2,3
   811d4:	1085883a 	add	r2,r2,r2
   811d8:	1085883a 	add	r2,r2,r2
   811dc:	1886b03a 	or	r3,r3,r2
   811e0:	e0bffe17 	ldw	r2,-8(fp)
   811e4:	1080004c 	andi	r2,r2,1
   811e8:	1884b03a 	or	r2,r3,r2
   811ec:	e0bffa15 	stw	r2,-24(fp)
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
   811f0:	e13ffb17 	ldw	r4,-20(fp)
   811f4:	01400584 	movi	r5,22
   811f8:	01800f44 	movi	r6,61
   811fc:	e1fffa17 	ldw	r7,-24(fp)
   81200:	008afc80 	call	8afc8 <reg_update_bits>
   81204:	1005003a 	cmpeq	r2,r2,zero
   81208:	1000031e 	bne	r2,zero,81218 <adv7513_video_in_format_3d+0xa8>
		return -1;
   8120c:	00bfffc4 	movi	r2,-1
   81210:	e0bfff15 	stw	r2,-4(fp)
   81214:	00003606 	br	812f0 <adv7513_video_in_format_3d+0x180>

	switch (vic) {
   81218:	e0800317 	ldw	r2,12(fp)
   8121c:	10800668 	cmpgeui	r2,r2,25
   81220:	1000251e 	bne	r2,zero,812b8 <adv7513_video_in_format_3d+0x148>
   81224:	e0800317 	ldw	r2,12(fp)
   81228:	1085883a 	add	r2,r2,r2
   8122c:	1087883a 	add	r3,r2,r2
   81230:	00800234 	movhi	r2,8
   81234:	10849104 	addi	r2,r2,4676
   81238:	1885883a 	add	r2,r3,r2
   8123c:	10800017 	ldw	r2,0(r2)
   81240:	1000683a 	jmp	r2
   81244:	000812b8 	rdprs	zero,zero,8266
   81248:	000812a8 	cmpgeui	zero,zero,8266
   8124c:	000812a8 	cmpgeui	zero,zero,8266
   81250:	000812b0 	cmpltui	zero,zero,8266
   81254:	000812b0 	cmpltui	zero,zero,8266
   81258:	000812b0 	cmpltui	zero,zero,8266
   8125c:	000812a8 	cmpgeui	zero,zero,8266
   81260:	000812b0 	cmpltui	zero,zero,8266
   81264:	000812a8 	cmpgeui	zero,zero,8266
   81268:	000812b0 	cmpltui	zero,zero,8266
   8126c:	000812a8 	cmpgeui	zero,zero,8266
   81270:	000812b0 	cmpltui	zero,zero,8266
   81274:	000812a8 	cmpgeui	zero,zero,8266
   81278:	000812b0 	cmpltui	zero,zero,8266
   8127c:	000812a8 	cmpgeui	zero,zero,8266
   81280:	000812b0 	cmpltui	zero,zero,8266
   81284:	000812b0 	cmpltui	zero,zero,8266
   81288:	000812a8 	cmpgeui	zero,zero,8266
   8128c:	000812b0 	cmpltui	zero,zero,8266
   81290:	000812b0 	cmpltui	zero,zero,8266
   81294:	000812b0 	cmpltui	zero,zero,8266
   81298:	000812a8 	cmpgeui	zero,zero,8266
   8129c:	000812b0 	cmpltui	zero,zero,8266
   812a0:	000812a8 	cmpgeui	zero,zero,8266
   812a4:	000812b0 	cmpltui	zero,zero,8266
	case ADV7513_VIC_240p60x8_4_3:	// (2880)x240p 60Hz
	case ADV7513_VIC_480p60x2_4_3:	// 1440x480p 60Hz
	case ADV7513_VIC_576p50_4_3:	// 720x576p 50Hz
	case ADV7513_VIC_576i50x2_4_3:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_4_3:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_4V3;
   812a8:	e03ff915 	stw	zero,-28(fp)
		break;
   812ac:	00000206 	br	812b8 <adv7513_video_in_format_3d+0x148>
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_16V9;
   812b0:	00800044 	movi	r2,1
   812b4:	e0bff915 	stw	r2,-28(fp)
		break;
	}

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
   812b8:	e0bff917 	ldw	r2,-28(fp)
   812bc:	1080004c 	andi	r2,r2,1
   812c0:	1085883a 	add	r2,r2,r2
   812c4:	100f883a 	mov	r7,r2
   812c8:	e13ffb17 	ldw	r4,-20(fp)
   812cc:	014005c4 	movi	r5,23
   812d0:	01800084 	movi	r6,2
   812d4:	008afc80 	call	8afc8 <reg_update_bits>
   812d8:	1005003a 	cmpeq	r2,r2,zero
   812dc:	1000031e 	bne	r2,zero,812ec <adv7513_video_in_format_3d+0x17c>
		return -1;
   812e0:	00bfffc4 	movi	r2,-1
   812e4:	e0bfff15 	stw	r2,-4(fp)
   812e8:	00000106 	br	812f0 <adv7513_video_in_format_3d+0x180>

	return 0;
   812ec:	e03fff15 	stw	zero,-4(fp)
   812f0:	e0bfff17 	ldw	r2,-4(fp)
}
   812f4:	e037883a 	mov	sp,fp
   812f8:	dfc00117 	ldw	ra,4(sp)
   812fc:	df000017 	ldw	fp,0(sp)
   81300:	dec00204 	addi	sp,sp,8
   81304:	f800283a 	ret

00081308 <adv7513_avi_infoframe_3d>:
//
// vic		   - adv7513_vic
//
// 0x52 ~ 0x71
static int adv7513_avi_infoframe_3d(struct hdmi_encoder *ec, int vic)
{
   81308:	defff904 	addi	sp,sp,-28
   8130c:	de00012e 	bgeu	sp,et,81314 <adv7513_avi_infoframe_3d+0xc>
   81310:	003da0fa 	break	3
   81314:	dfc00615 	stw	ra,24(sp)
   81318:	df000515 	stw	fp,20(sp)
   8131c:	df000504 	addi	fp,sp,20
   81320:	e13ffd15 	stw	r4,-12(fp)
   81324:	e17ffe15 	stw	r5,-8(fp)
	struct avi_infoframe *avi = &ec->avi_if;
   81328:	e0bffd17 	ldw	r2,-12(fp)
   8132c:	10800904 	addi	r2,r2,36
   81330:	e0bffc15 	stw	r2,-16(fp)
	int regv;

	//printf("adv7513_avi_infoframe_3d()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
   81334:	e0fffc17 	ldw	r3,-16(fp)
   81338:	00800084 	movi	r2,2
   8133c:	18800015 	stw	r2,0(r3)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
   81340:	e0bffc17 	ldw	r2,-16(fp)
   81344:	10000315 	stw	zero,12(r2)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   81348:	e0fffc17 	ldw	r3,-16(fp)
   8134c:	00800044 	movi	r2,1
   81350:	18800215 	stw	r2,8(r3)

	avi->colorimetry = 0;		// colorimetry
   81354:	e0bffc17 	ldw	r2,-16(fp)
   81358:	10000615 	stw	zero,24(r2)
	avi->colorimetry_ext = 0;	// extended colorimetry
   8135c:	e0bffc17 	ldw	r2,-16(fp)
   81360:	10000915 	stw	zero,36(r2)
	avi->scaling = 0;			// non-uniform scaling
   81364:	e0bffc17 	ldw	r2,-16(fp)
   81368:	10000715 	stw	zero,28(r2)
	avi->quant = 0;				// rgb quantization range
   8136c:	e0bffc17 	ldw	r2,-16(fp)
   81370:	10000815 	stw	zero,32(r2)
	avi->itc = 0;				// it content
   81374:	e0bffc17 	ldw	r2,-16(fp)
   81378:	10000a15 	stw	zero,40(r2)
	avi->pr = 1;				// pixel repetition factor 0)no 1)2x 2)3x 3)4x ...
   8137c:	e0fffc17 	ldw	r3,-16(fp)
   81380:	00800044 	movi	r2,1
   81384:	18800c15 	stw	r2,48(r3)
	avi->vic = vic;				// video identification code
   81388:	e0fffc17 	ldw	r3,-16(fp)
   8138c:	e0bffe17 	ldw	r2,-8(fp)
   81390:	18800b15 	stw	r2,44(r3)
	avi->yq1yq0 = 0;			// ??
   81394:	e0bffc17 	ldw	r2,-16(fp)
   81398:	10000d15 	stw	zero,52(r2)

	avi->bar_info = 0;  		// bar fields valid
   8139c:	e0bffc17 	ldw	r2,-16(fp)
   813a0:	10000115 	stw	zero,4(r2)
	avi->bar.top_e = 0;
   813a4:	e0bffc17 	ldw	r2,-16(fp)
   813a8:	10000e15 	stw	zero,56(r2)
	avi->bar.bottom_s = 0;
   813ac:	e0bffc17 	ldw	r2,-16(fp)
   813b0:	10000f15 	stw	zero,60(r2)
	avi->bar.left_e = 0;
   813b4:	e0bffc17 	ldw	r2,-16(fp)
   813b8:	10001015 	stw	zero,64(r2)
	avi->bar.right_s = 0;
   813bc:	e0bffc17 	ldw	r2,-16(fp)
   813c0:	10001115 	stw	zero,68(r2)

	avi->active_fmt_ar = 8;		// active format aspect ratio (same as pict_ar)
   813c4:	e0fffc17 	ldw	r3,-16(fp)
   813c8:	00800204 	movi	r2,8
   813cc:	18800415 	stw	r2,16(r3)

	switch (vic) {
   813d0:	e0bffe17 	ldw	r2,-8(fp)
   813d4:	10800668 	cmpgeui	r2,r2,25
   813d8:	1000281e 	bne	r2,zero,8147c <adv7513_avi_infoframe_3d+0x174>
   813dc:	e0bffe17 	ldw	r2,-8(fp)
   813e0:	1085883a 	add	r2,r2,r2
   813e4:	1087883a 	add	r3,r2,r2
   813e8:	00800234 	movhi	r2,8
   813ec:	1084ff04 	addi	r2,r2,5116
   813f0:	1885883a 	add	r2,r3,r2
   813f4:	10800017 	ldw	r2,0(r2)
   813f8:	1000683a 	jmp	r2
   813fc:	0008147c 	xorhi	zero,zero,8273
   81400:	00081460 	cmpeqi	zero,zero,8273
   81404:	00081460 	cmpeqi	zero,zero,8273
   81408:	00081470 	cmpltui	zero,zero,8273
   8140c:	00081470 	cmpltui	zero,zero,8273
   81410:	00081470 	cmpltui	zero,zero,8273
   81414:	00081460 	cmpeqi	zero,zero,8273
   81418:	00081470 	cmpltui	zero,zero,8273
   8141c:	00081460 	cmpeqi	zero,zero,8273
   81420:	00081470 	cmpltui	zero,zero,8273
   81424:	00081460 	cmpeqi	zero,zero,8273
   81428:	00081470 	cmpltui	zero,zero,8273
   8142c:	00081460 	cmpeqi	zero,zero,8273
   81430:	00081470 	cmpltui	zero,zero,8273
   81434:	00081460 	cmpeqi	zero,zero,8273
   81438:	00081470 	cmpltui	zero,zero,8273
   8143c:	00081470 	cmpltui	zero,zero,8273
   81440:	00081460 	cmpeqi	zero,zero,8273
   81444:	00081470 	cmpltui	zero,zero,8273
   81448:	00081470 	cmpltui	zero,zero,8273
   8144c:	00081470 	cmpltui	zero,zero,8273
   81450:	00081460 	cmpeqi	zero,zero,8273
   81454:	00081470 	cmpltui	zero,zero,8273
   81458:	00081460 	cmpeqi	zero,zero,8273
   8145c:	00081470 	cmpltui	zero,zero,8273
	case ADV7513_VIC_240p60x8_4_3:	// (2880)x240p 60Hz
	case ADV7513_VIC_480p60x2_4_3:	// 1440x480p 60Hz
	case ADV7513_VIC_576p50_4_3:	// 720x576p 50Hz
	case ADV7513_VIC_576i50x2_4_3:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_4_3:	// 720(1440)x288p 50Hz
		avi->pict_ar = 1;			// picture aspect ratio (4:3)
   81460:	e0fffc17 	ldw	r3,-16(fp)
   81464:	00800044 	movi	r2,1
   81468:	18800515 	stw	r2,20(r3)
		break;
   8146c:	00000306 	br	8147c <adv7513_avi_infoframe_3d+0x174>
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		avi->pict_ar = 2;			// picture aspect ratio (16:9)
   81470:	e0fffc17 	ldw	r3,-16(fp)
   81474:	00800084 	movi	r2,2
   81478:	18800515 	stw	r2,20(r3)
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
   8147c:	e13ffd17 	ldw	r4,-12(fp)
   81480:	01401104 	movi	r5,68
   81484:	01800404 	movi	r6,16
   81488:	01c00404 	movi	r7,16
   8148c:	008afc80 	call	8afc8 <reg_update_bits>
   81490:	1005003a 	cmpeq	r2,r2,zero
   81494:	1000031e 	bne	r2,zero,814a4 <adv7513_avi_infoframe_3d+0x19c>
		return -1;
   81498:	00bfffc4 	movi	r2,-1
   8149c:	e0bfff15 	stw	r2,-4(fp)
   814a0:	0000e006 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
   814a4:	e13ffd17 	ldw	r4,-12(fp)
   814a8:	01401284 	movi	r5,74
   814ac:	01803004 	movi	r6,192
   814b0:	01c03004 	movi	r7,192
   814b4:	008afc80 	call	8afc8 <reg_update_bits>
   814b8:	1005003a 	cmpeq	r2,r2,zero
   814bc:	1000031e 	bne	r2,zero,814cc <adv7513_avi_infoframe_3d+0x1c4>
		return -1;
   814c0:	00bfffc4 	movi	r2,-1
   814c4:	e0bfff15 	stw	r2,-4(fp)
   814c8:	0000d606 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   814cc:	e0bffc17 	ldw	r2,-16(fp)
   814d0:	10800317 	ldw	r2,12(r2)
   814d4:	108000cc 	andi	r2,r2,3
   814d8:	1006917a 	slli	r3,r2,5
   814dc:	e0bffc17 	ldw	r2,-16(fp)
   814e0:	10800217 	ldw	r2,8(r2)
   814e4:	1080004c 	andi	r2,r2,1
   814e8:	1004913a 	slli	r2,r2,4
   814ec:	1886b03a 	or	r3,r3,r2
   814f0:	e0bffc17 	ldw	r2,-16(fp)
   814f4:	10800117 	ldw	r2,4(r2)
   814f8:	108000cc 	andi	r2,r2,3
   814fc:	1085883a 	add	r2,r2,r2
   81500:	1085883a 	add	r2,r2,r2
   81504:	1886b03a 	or	r3,r3,r2
   81508:	e0bffc17 	ldw	r2,-16(fp)
   8150c:	10800017 	ldw	r2,0(r2)
   81510:	108000cc 	andi	r2,r2,3
   81514:	1884b03a 	or	r2,r3,r2
   81518:	e0bffb15 	stw	r2,-20(fp)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   8151c:	e13ffd17 	ldw	r4,-12(fp)
   81520:	01401544 	movi	r5,85
   81524:	01801c04 	movi	r6,112
   81528:	e1fffb17 	ldw	r7,-20(fp)
   8152c:	008afc80 	call	8afc8 <reg_update_bits>
   81530:	1005003a 	cmpeq	r2,r2,zero
   81534:	1000031e 	bne	r2,zero,81544 <adv7513_avi_infoframe_3d+0x23c>
		return -1;
   81538:	00bfffc4 	movi	r2,-1
   8153c:	e0bfff15 	stw	r2,-4(fp)
   81540:	0000b806 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   81544:	e0bffc17 	ldw	r2,-16(fp)
   81548:	10800617 	ldw	r2,24(r2)
   8154c:	108000cc 	andi	r2,r2,3
   81550:	100691ba 	slli	r3,r2,6
   81554:	e0bffc17 	ldw	r2,-16(fp)
   81558:	10800517 	ldw	r2,20(r2)
   8155c:	108000cc 	andi	r2,r2,3
   81560:	1004913a 	slli	r2,r2,4
   81564:	1886b03a 	or	r3,r3,r2
   81568:	e0bffc17 	ldw	r2,-16(fp)
   8156c:	10800417 	ldw	r2,16(r2)
   81570:	108003cc 	andi	r2,r2,15
   81574:	1884b03a 	or	r2,r3,r2
   81578:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x56, regv) != 0)
   8157c:	e13ffd17 	ldw	r4,-12(fp)
   81580:	01401584 	movi	r5,86
   81584:	e1bffb17 	ldw	r6,-20(fp)
   81588:	008af300 	call	8af30 <reg_write>
   8158c:	1005003a 	cmpeq	r2,r2,zero
   81590:	1000031e 	bne	r2,zero,815a0 <adv7513_avi_infoframe_3d+0x298>
		return -1;
   81594:	00bfffc4 	movi	r2,-1
   81598:	e0bfff15 	stw	r2,-4(fp)
   8159c:	0000a106 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   815a0:	e0bffc17 	ldw	r2,-16(fp)
   815a4:	10800a17 	ldw	r2,40(r2)
   815a8:	1080004c 	andi	r2,r2,1
   815ac:	100691fa 	slli	r3,r2,7
   815b0:	e0bffc17 	ldw	r2,-16(fp)
   815b4:	10800917 	ldw	r2,36(r2)
   815b8:	108001cc 	andi	r2,r2,7
   815bc:	1004913a 	slli	r2,r2,4
   815c0:	1886b03a 	or	r3,r3,r2
   815c4:	e0bffc17 	ldw	r2,-16(fp)
   815c8:	10800817 	ldw	r2,32(r2)
   815cc:	108000cc 	andi	r2,r2,3
   815d0:	1085883a 	add	r2,r2,r2
   815d4:	1085883a 	add	r2,r2,r2
   815d8:	1886b03a 	or	r3,r3,r2
   815dc:	e0bffc17 	ldw	r2,-16(fp)
   815e0:	10800717 	ldw	r2,28(r2)
   815e4:	108000cc 	andi	r2,r2,3
   815e8:	1884b03a 	or	r2,r3,r2
   815ec:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x57, regv) != 0)
   815f0:	e13ffd17 	ldw	r4,-12(fp)
   815f4:	014015c4 	movi	r5,87
   815f8:	e1bffb17 	ldw	r6,-20(fp)
   815fc:	008af300 	call	8af30 <reg_write>
   81600:	1005003a 	cmpeq	r2,r2,zero
   81604:	1000031e 	bne	r2,zero,81614 <adv7513_avi_infoframe_3d+0x30c>
		return -1;
   81608:	00bfffc4 	movi	r2,-1
   8160c:	e0bfff15 	stw	r2,-4(fp)
   81610:	00008406 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   81614:	e0bffc17 	ldw	r2,-16(fp)
   81618:	10800d17 	ldw	r2,52(r2)
   8161c:	108003cc 	andi	r2,r2,15
   81620:	1004913a 	slli	r2,r2,4
   81624:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x59, regv) != 0)
   81628:	e13ffd17 	ldw	r4,-12(fp)
   8162c:	01401644 	movi	r5,89
   81630:	e1bffb17 	ldw	r6,-20(fp)
   81634:	008af300 	call	8af30 <reg_write>
   81638:	1005003a 	cmpeq	r2,r2,zero
   8163c:	1000031e 	bne	r2,zero,8164c <adv7513_avi_infoframe_3d+0x344>
		return -1;
   81640:	00bfffc4 	movi	r2,-1
   81644:	e0bfff15 	stw	r2,-4(fp)
   81648:	00007606 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
   8164c:	e0bffc17 	ldw	r2,-16(fp)
   81650:	10800e17 	ldw	r2,56(r2)
   81654:	10803fcc 	andi	r2,r2,255
   81658:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x5a, regv) != 0)
   8165c:	e13ffd17 	ldw	r4,-12(fp)
   81660:	01401684 	movi	r5,90
   81664:	e1bffb17 	ldw	r6,-20(fp)
   81668:	008af300 	call	8af30 <reg_write>
   8166c:	1005003a 	cmpeq	r2,r2,zero
   81670:	1000031e 	bne	r2,zero,81680 <adv7513_avi_infoframe_3d+0x378>
		return -1;
   81674:	00bfffc4 	movi	r2,-1
   81678:	e0bfff15 	stw	r2,-4(fp)
   8167c:	00006906 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
   81680:	e0bffc17 	ldw	r2,-16(fp)
   81684:	10800e17 	ldw	r2,56(r2)
   81688:	1005d23a 	srai	r2,r2,8
   8168c:	10803fcc 	andi	r2,r2,255
   81690:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x5b, regv) != 0)
   81694:	e13ffd17 	ldw	r4,-12(fp)
   81698:	014016c4 	movi	r5,91
   8169c:	e1bffb17 	ldw	r6,-20(fp)
   816a0:	008af300 	call	8af30 <reg_write>
   816a4:	1005003a 	cmpeq	r2,r2,zero
   816a8:	1000031e 	bne	r2,zero,816b8 <adv7513_avi_infoframe_3d+0x3b0>
		return -1;
   816ac:	00bfffc4 	movi	r2,-1
   816b0:	e0bfff15 	stw	r2,-4(fp)
   816b4:	00005b06 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
   816b8:	e0bffc17 	ldw	r2,-16(fp)
   816bc:	10800f17 	ldw	r2,60(r2)
   816c0:	10803fcc 	andi	r2,r2,255
   816c4:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x5c, regv) != 0)
   816c8:	e13ffd17 	ldw	r4,-12(fp)
   816cc:	01401704 	movi	r5,92
   816d0:	e1bffb17 	ldw	r6,-20(fp)
   816d4:	008af300 	call	8af30 <reg_write>
   816d8:	1005003a 	cmpeq	r2,r2,zero
   816dc:	1000031e 	bne	r2,zero,816ec <adv7513_avi_infoframe_3d+0x3e4>
		return -1;
   816e0:	00bfffc4 	movi	r2,-1
   816e4:	e0bfff15 	stw	r2,-4(fp)
   816e8:	00004e06 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
   816ec:	e0bffc17 	ldw	r2,-16(fp)
   816f0:	10800f17 	ldw	r2,60(r2)
   816f4:	1005d23a 	srai	r2,r2,8
   816f8:	10803fcc 	andi	r2,r2,255
   816fc:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x5d, regv) != 0)
   81700:	e13ffd17 	ldw	r4,-12(fp)
   81704:	01401744 	movi	r5,93
   81708:	e1bffb17 	ldw	r6,-20(fp)
   8170c:	008af300 	call	8af30 <reg_write>
   81710:	1005003a 	cmpeq	r2,r2,zero
   81714:	1000031e 	bne	r2,zero,81724 <adv7513_avi_infoframe_3d+0x41c>
		return -1;
   81718:	00bfffc4 	movi	r2,-1
   8171c:	e0bfff15 	stw	r2,-4(fp)
   81720:	00004006 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
   81724:	e0bffc17 	ldw	r2,-16(fp)
   81728:	10801017 	ldw	r2,64(r2)
   8172c:	10803fcc 	andi	r2,r2,255
   81730:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x5e, regv) != 0)
   81734:	e13ffd17 	ldw	r4,-12(fp)
   81738:	01401784 	movi	r5,94
   8173c:	e1bffb17 	ldw	r6,-20(fp)
   81740:	008af300 	call	8af30 <reg_write>
   81744:	1005003a 	cmpeq	r2,r2,zero
   81748:	1000031e 	bne	r2,zero,81758 <adv7513_avi_infoframe_3d+0x450>
		return -1;
   8174c:	00bfffc4 	movi	r2,-1
   81750:	e0bfff15 	stw	r2,-4(fp)
   81754:	00003306 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
   81758:	e0bffc17 	ldw	r2,-16(fp)
   8175c:	10801017 	ldw	r2,64(r2)
   81760:	1005d23a 	srai	r2,r2,8
   81764:	10803fcc 	andi	r2,r2,255
   81768:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x5f, regv) != 0)
   8176c:	e13ffd17 	ldw	r4,-12(fp)
   81770:	014017c4 	movi	r5,95
   81774:	e1bffb17 	ldw	r6,-20(fp)
   81778:	008af300 	call	8af30 <reg_write>
   8177c:	1005003a 	cmpeq	r2,r2,zero
   81780:	1000031e 	bne	r2,zero,81790 <adv7513_avi_infoframe_3d+0x488>
		return -1;
   81784:	00bfffc4 	movi	r2,-1
   81788:	e0bfff15 	stw	r2,-4(fp)
   8178c:	00002506 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
   81790:	e0bffc17 	ldw	r2,-16(fp)
   81794:	10801117 	ldw	r2,68(r2)
   81798:	10803fcc 	andi	r2,r2,255
   8179c:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x60, regv) != 0)
   817a0:	e13ffd17 	ldw	r4,-12(fp)
   817a4:	01401804 	movi	r5,96
   817a8:	e1bffb17 	ldw	r6,-20(fp)
   817ac:	008af300 	call	8af30 <reg_write>
   817b0:	1005003a 	cmpeq	r2,r2,zero
   817b4:	1000031e 	bne	r2,zero,817c4 <adv7513_avi_infoframe_3d+0x4bc>
		return -1;
   817b8:	00bfffc4 	movi	r2,-1
   817bc:	e0bfff15 	stw	r2,-4(fp)
   817c0:	00001806 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
   817c4:	e0bffc17 	ldw	r2,-16(fp)
   817c8:	10801117 	ldw	r2,68(r2)
   817cc:	1005d23a 	srai	r2,r2,8
   817d0:	10803fcc 	andi	r2,r2,255
   817d4:	e0bffb15 	stw	r2,-20(fp)
	if (reg_write(ec, 0x61, regv) != 0)
   817d8:	e13ffd17 	ldw	r4,-12(fp)
   817dc:	01401844 	movi	r5,97
   817e0:	e1bffb17 	ldw	r6,-20(fp)
   817e4:	008af300 	call	8af30 <reg_write>
   817e8:	1005003a 	cmpeq	r2,r2,zero
   817ec:	1000031e 	bne	r2,zero,817fc <adv7513_avi_infoframe_3d+0x4f4>
		return -1;
   817f0:	00bfffc4 	movi	r2,-1
   817f4:	e0bfff15 	stw	r2,-4(fp)
   817f8:	00000a06 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
   817fc:	e13ffd17 	ldw	r4,-12(fp)
   81800:	01401284 	movi	r5,74
   81804:	01801004 	movi	r6,64
   81808:	008b2000 	call	8b200 <reg_clear_bits>
   8180c:	1005003a 	cmpeq	r2,r2,zero
   81810:	1000031e 	bne	r2,zero,81820 <adv7513_avi_infoframe_3d+0x518>
		return -1;
   81814:	00bfffc4 	movi	r2,-1
   81818:	e0bfff15 	stw	r2,-4(fp)
   8181c:	00000106 	br	81824 <adv7513_avi_infoframe_3d+0x51c>

	return 0;
   81820:	e03fff15 	stw	zero,-4(fp)
   81824:	e0bfff17 	ldw	r2,-4(fp)
}
   81828:	e037883a 	mov	sp,fp
   8182c:	dfc00117 	ldw	ra,4(sp)
   81830:	df000017 	ldw	fp,0(sp)
   81834:	dec00204 	addi	sp,sp,8
   81838:	f800283a 	ret

0008183c <adv7513_vendor_infoframe_3d>:
//
// vic		   - adv7513_vic
//
// 0x52 ~ 0x71
static int adv7513_vendor_infoframe_3d(struct hdmi_encoder *ec, int vic)
{
   8183c:	defffb04 	addi	sp,sp,-20
   81840:	de00012e 	bgeu	sp,et,81848 <adv7513_vendor_infoframe_3d+0xc>
   81844:	003da0fa 	break	3
   81848:	df000415 	stw	fp,16(sp)
   8184c:	df000404 	addi	fp,sp,16
   81850:	e13ffe15 	stw	r4,-8(fp)
   81854:	e17fff15 	stw	r5,-4(fp)
	struct vendor_infoframe *vsi = &ec->vendor_if;
   81858:	e0bffe17 	ldw	r2,-8(fp)
   8185c:	10801b04 	addi	r2,r2,108
   81860:	e0bffd15 	stw	r2,-12(fp)
	int regv;

	//printf("adv7513_vendor_infoframe_3d()\n");

#if 1  // local development defaults
	vsi->struct_3d = 8;		// 0)frame_packing 6)top-bottom 8)side-by-side
   81864:	e0fffd17 	ldw	r3,-12(fp)
   81868:	00800204 	movi	r2,8
   8186c:	18800015 	stw	r2,0(r3)
	vsi->ext_data_3d = 1;	// valid for side-by-side 0b0000 ~ 0b0011
   81870:	e0fffd17 	ldw	r3,-12(fp)
   81874:	00800044 	movi	r2,1
   81878:	18800115 	stw	r2,4(r3)

#endif


	return 0;
   8187c:	0005883a 	mov	r2,zero
}
   81880:	e037883a 	mov	sp,fp
   81884:	df000017 	ldw	fp,0(sp)
   81888:	dec00104 	addi	sp,sp,4
   8188c:	f800283a 	ret

00081890 <adv7513_video_out_format_3d>:
// out video format
//
// format   - adv7513_output_format
// vic		- adv7513_vic
static int adv7513_video_out_format_3d(struct hdmi_encoder *ec, int format, int vic)
{
   81890:	defff904 	addi	sp,sp,-28
   81894:	de00012e 	bgeu	sp,et,8189c <adv7513_video_out_format_3d+0xc>
   81898:	003da0fa 	break	3
   8189c:	dfc00615 	stw	ra,24(sp)
   818a0:	df000515 	stw	fp,20(sp)
   818a4:	df000504 	addi	fp,sp,20
   818a8:	e13ffc15 	stw	r4,-16(fp)
   818ac:	e17ffd15 	stw	r5,-12(fp)
   818b0:	e1bffe15 	stw	r6,-8(fp)
	int regv;

	//printf("adv7513_video_out_format_3d()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
   818b4:	e0bffd17 	ldw	r2,-12(fp)
   818b8:	1080004c 	andi	r2,r2,1
   818bc:	100491fa 	slli	r2,r2,7
   818c0:	e0bffb15 	stw	r2,-20(fp)
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   818c4:	e13ffc17 	ldw	r4,-16(fp)
   818c8:	01400584 	movi	r5,22
   818cc:	01802004 	movi	r6,128
   818d0:	e1fffb17 	ldw	r7,-20(fp)
   818d4:	008afc80 	call	8afc8 <reg_update_bits>
   818d8:	1005003a 	cmpeq	r2,r2,zero
   818dc:	1000031e 	bne	r2,zero,818ec <adv7513_video_out_format_3d+0x5c>
		return -1;
   818e0:	00bfffc4 	movi	r2,-1
   818e4:	e0bfff15 	stw	r2,-4(fp)
   818e8:	00003c06 	br	819dc <adv7513_video_out_format_3d+0x14c>

	// 0x18 ~ 0x2f
	if (adv7513_config_csc(ec, 0, 0) != 0) {
   818ec:	e13ffc17 	ldw	r4,-16(fp)
   818f0:	000b883a 	mov	r5,zero
   818f4:	000d883a 	mov	r6,zero
   818f8:	0080a0c0 	call	80a0c <adv7513_config_csc>
   818fc:	1005003a 	cmpeq	r2,r2,zero
   81900:	1000031e 	bne	r2,zero,81910 <adv7513_video_out_format_3d+0x80>
		return -1;
   81904:	00bfffc4 	movi	r2,-1
   81908:	e0bfff15 	stw	r2,-4(fp)
   8190c:	00003306 	br	819dc <adv7513_video_out_format_3d+0x14c>
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- 0)dvi 1)hdmi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (1 & 0x01) << 1) != 0)
   81910:	e13ffc17 	ldw	r4,-16(fp)
   81914:	01402bc4 	movi	r5,175
   81918:	01802084 	movi	r6,130
   8191c:	01c00084 	movi	r7,2
   81920:	008afc80 	call	8afc8 <reg_update_bits>
   81924:	1005003a 	cmpeq	r2,r2,zero
   81928:	1000031e 	bne	r2,zero,81938 <adv7513_video_out_format_3d+0xa8>
		return -1;
   8192c:	00bfffc4 	movi	r2,-1
   81930:	e0bfff15 	stw	r2,-4(fp)
   81934:	00002906 	br	819dc <adv7513_video_out_format_3d+0x14c>

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
   81938:	e13ffc17 	ldw	r4,-16(fp)
   8193c:	01401004 	movi	r5,64
   81940:	01802004 	movi	r6,128
   81944:	01c02004 	movi	r7,128
   81948:	008afc80 	call	8afc8 <reg_update_bits>
   8194c:	1005003a 	cmpeq	r2,r2,zero
   81950:	1000031e 	bne	r2,zero,81960 <adv7513_video_out_format_3d+0xd0>
		return -1;
   81954:	00bfffc4 	movi	r2,-1
   81958:	e0bfff15 	stw	r2,-4(fp)
   8195c:	00001f06 	br	819dc <adv7513_video_out_format_3d+0x14c>

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
   81960:	e13ffc17 	ldw	r4,-16(fp)
   81964:	01401304 	movi	r5,76
   81968:	018003c4 	movi	r6,15
   8196c:	01c00104 	movi	r7,4
   81970:	008afc80 	call	8afc8 <reg_update_bits>
   81974:	1005003a 	cmpeq	r2,r2,zero
   81978:	1000031e 	bne	r2,zero,81988 <adv7513_video_out_format_3d+0xf8>
		return -1;
   8197c:	00bfffc4 	movi	r2,-1
   81980:	e0bfff15 	stw	r2,-4(fp)
   81984:	00001506 	br	819dc <adv7513_video_out_format_3d+0x14c>

	// pixel repetition
	// 0x3b[6:5] <- pr mode 0)auto 1)max 2)manual 3)manual
	// 0x3b[4:3] <- pr pll (x input) 0)x1 1)x2 2)x4 3)x4
	// 0x3b[2:1] <- pr pll (sent) 0)x1 1)x2 2)x4 3)x4
	if (reg_update_bits(ec, 0x3b, 0x7e, (2 << 5) | (0 << 3) | (0 << 1)) != 0)
   81988:	e13ffc17 	ldw	r4,-16(fp)
   8198c:	01400ec4 	movi	r5,59
   81990:	01801f84 	movi	r6,126
   81994:	01c01004 	movi	r7,64
   81998:	008afc80 	call	8afc8 <reg_update_bits>
   8199c:	1005003a 	cmpeq	r2,r2,zero
   819a0:	1000031e 	bne	r2,zero,819b0 <adv7513_video_out_format_3d+0x120>
		return -1;
   819a4:	00bfffc4 	movi	r2,-1
   819a8:	e0bfff15 	stw	r2,-4(fp)
   819ac:	00000b06 	br	819dc <adv7513_video_out_format_3d+0x14c>

	// manual VIC
	// 0x3c[5:0] <- 0x01 & 0x3f
	if (reg_update_bits(ec, 0x3c, 0x3f, vic) != 0)
   819b0:	e13ffc17 	ldw	r4,-16(fp)
   819b4:	01400f04 	movi	r5,60
   819b8:	01800fc4 	movi	r6,63
   819bc:	e1fffe17 	ldw	r7,-8(fp)
   819c0:	008afc80 	call	8afc8 <reg_update_bits>
   819c4:	1005003a 	cmpeq	r2,r2,zero
   819c8:	1000031e 	bne	r2,zero,819d8 <adv7513_video_out_format_3d+0x148>
		return -1;
   819cc:	00bfffc4 	movi	r2,-1
   819d0:	e0bfff15 	stw	r2,-4(fp)
   819d4:	00000106 	br	819dc <adv7513_video_out_format_3d+0x14c>

	return 0;
   819d8:	e03fff15 	stw	zero,-4(fp)
   819dc:	e0bfff17 	ldw	r2,-4(fp)
}
   819e0:	e037883a 	mov	sp,fp
   819e4:	dfc00117 	ldw	ra,4(sp)
   819e8:	df000017 	ldw	fp,0(sp)
   819ec:	dec00204 	addi	sp,sp,8
   819f0:	f800283a 	ret

000819f4 <adv7513_video_init>:
	return 0;
}
#endif

static int adv7513_video_init(struct hdmi_encoder *ec, int dvi)
{
   819f4:	defff904 	addi	sp,sp,-28
   819f8:	de00012e 	bgeu	sp,et,81a00 <adv7513_video_init+0xc>
   819fc:	003da0fa 	break	3
   81a00:	dfc00615 	stw	ra,24(sp)
   81a04:	df000515 	stw	fp,20(sp)
   81a08:	df000504 	addi	fp,sp,20
   81a0c:	e13ffd15 	stw	r4,-12(fp)
   81a10:	e17ffe15 	stw	r5,-8(fp)
	//	if (adv7513_video_misc_config(ec) != 0)
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_ASPECT_4V3, ADV7513_INPUT_INVALID) != 0)
   81a14:	d8000015 	stw	zero,0(sp)
   81a18:	d8000115 	stw	zero,4(sp)
   81a1c:	e13ffd17 	ldw	r4,-12(fp)
   81a20:	000b883a 	mov	r5,zero
   81a24:	018000c4 	movi	r6,3
   81a28:	000f883a 	mov	r7,zero
   81a2c:	0080a980 	call	80a98 <adv7513_video_in_format>
   81a30:	1005003a 	cmpeq	r2,r2,zero
   81a34:	1000031e 	bne	r2,zero,81a44 <adv7513_video_init+0x50>
		return -1;
   81a38:	00bfffc4 	movi	r2,-1
   81a3c:	e0bfff15 	stw	r2,-4(fp)
   81a40:	00001d06 	br	81ab8 <adv7513_video_init+0xc4>

	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (dvi != 0) {
   81a44:	e0bffe17 	ldw	r2,-8(fp)
   81a48:	1005003a 	cmpeq	r2,r2,zero
   81a4c:	1000091e 	bne	r2,zero,81a74 <adv7513_video_init+0x80>
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_DVI) != 0)
   81a50:	e13ffd17 	ldw	r4,-12(fp)
   81a54:	000b883a 	mov	r5,zero
   81a58:	000d883a 	mov	r6,zero
   81a5c:	0080b900 	call	80b90 <adv7513_video_out_format>
   81a60:	1005003a 	cmpeq	r2,r2,zero
   81a64:	10000c1e 	bne	r2,zero,81a98 <adv7513_video_init+0xa4>
			return -1;
   81a68:	00bfffc4 	movi	r2,-1
   81a6c:	e0bfff15 	stw	r2,-4(fp)
   81a70:	00001106 	br	81ab8 <adv7513_video_init+0xc4>
	} else {
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_HDMI) != 0)
   81a74:	e13ffd17 	ldw	r4,-12(fp)
   81a78:	000b883a 	mov	r5,zero
   81a7c:	01800044 	movi	r6,1
   81a80:	0080b900 	call	80b90 <adv7513_video_out_format>
   81a84:	1005003a 	cmpeq	r2,r2,zero
   81a88:	1000031e 	bne	r2,zero,81a98 <adv7513_video_init+0xa4>
			return -1;
   81a8c:	00bfffc4 	movi	r2,-1
   81a90:	e0bfff15 	stw	r2,-4(fp)
   81a94:	00000806 	br	81ab8 <adv7513_video_init+0xc4>
	//	return -1;

	//if (adv7513_de_gen(ec, 0, 40 + 48 + 40, 640, 13 + 3 + 29, 480, 0) != 0)
	//	return -1;

	if (adv7513_avi_infoframe(ec) != 0)
   81a98:	e13ffd17 	ldw	r4,-12(fp)
   81a9c:	0080ce00 	call	80ce0 <adv7513_avi_infoframe>
   81aa0:	1005003a 	cmpeq	r2,r2,zero
   81aa4:	1000031e 	bne	r2,zero,81ab4 <adv7513_video_init+0xc0>
		return -1;
   81aa8:	00bfffc4 	movi	r2,-1
   81aac:	e0bfff15 	stw	r2,-4(fp)
   81ab0:	00000106 	br	81ab8 <adv7513_video_init+0xc4>

	return 0;
   81ab4:	e03fff15 	stw	zero,-4(fp)
   81ab8:	e0bfff17 	ldw	r2,-4(fp)
}
   81abc:	e037883a 	mov	sp,fp
   81ac0:	dfc00117 	ldw	ra,4(sp)
   81ac4:	df000017 	ldw	fp,0(sp)
   81ac8:	dec00204 	addi	sp,sp,8
   81acc:	f800283a 	ret

00081ad0 <adv7513_video_init_3d>:

static int adv7513_video_init_3d(struct hdmi_encoder *ec, int vic)
{
   81ad0:	defff904 	addi	sp,sp,-28
   81ad4:	de00012e 	bgeu	sp,et,81adc <adv7513_video_init_3d+0xc>
   81ad8:	003da0fa 	break	3
   81adc:	dfc00615 	stw	ra,24(sp)
   81ae0:	df000515 	stw	fp,20(sp)
   81ae4:	df000504 	addi	fp,sp,20
   81ae8:	e13ffd15 	stw	r4,-12(fp)
   81aec:	e17ffe15 	stw	r5,-8(fp)
	//	if (adv7513_video_misc_config(ec) != 0)
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format_3d(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_INVALID, vic) != 0)
   81af0:	d8000015 	stw	zero,0(sp)
   81af4:	e0bffe17 	ldw	r2,-8(fp)
   81af8:	d8800115 	stw	r2,4(sp)
   81afc:	e13ffd17 	ldw	r4,-12(fp)
   81b00:	000b883a 	mov	r5,zero
   81b04:	018000c4 	movi	r6,3
   81b08:	000f883a 	mov	r7,zero
   81b0c:	00811700 	call	81170 <adv7513_video_in_format_3d>
   81b10:	1005003a 	cmpeq	r2,r2,zero
   81b14:	1000031e 	bne	r2,zero,81b24 <adv7513_video_init_3d+0x54>
		return -1;
   81b18:	00bfffc4 	movi	r2,-1
   81b1c:	e0bfff15 	stw	r2,-4(fp)
   81b20:	00001206 	br	81b6c <adv7513_video_init_3d+0x9c>

	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (adv7513_video_out_format_3d(ec, ADV7513_OUTPUT_444, vic) != 0)
   81b24:	e13ffd17 	ldw	r4,-12(fp)
   81b28:	000b883a 	mov	r5,zero
   81b2c:	e1bffe17 	ldw	r6,-8(fp)
   81b30:	00818900 	call	81890 <adv7513_video_out_format_3d>
   81b34:	1005003a 	cmpeq	r2,r2,zero
   81b38:	1000031e 	bne	r2,zero,81b48 <adv7513_video_init_3d+0x78>
		return -1;
   81b3c:	00bfffc4 	movi	r2,-1
   81b40:	e0bfff15 	stw	r2,-4(fp)
   81b44:	00000906 	br	81b6c <adv7513_video_init_3d+0x9c>
	//	return -1;

	//if (adv7513_de_gen(ec, 0, 40 + 48 + 40, 640, 13 + 3 + 29, 480, 0) != 0)
	//	return -1;

	if (adv7513_avi_infoframe_3d(ec, vic) != 0)
   81b48:	e13ffd17 	ldw	r4,-12(fp)
   81b4c:	e17ffe17 	ldw	r5,-8(fp)
   81b50:	00813080 	call	81308 <adv7513_avi_infoframe_3d>
   81b54:	1005003a 	cmpeq	r2,r2,zero
   81b58:	1000031e 	bne	r2,zero,81b68 <adv7513_video_init_3d+0x98>
		return -1;
   81b5c:	00bfffc4 	movi	r2,-1
   81b60:	e0bfff15 	stw	r2,-4(fp)
   81b64:	00000106 	br	81b6c <adv7513_video_init_3d+0x9c>

	return 0;
   81b68:	e03fff15 	stw	zero,-4(fp)
   81b6c:	e0bfff17 	ldw	r2,-4(fp)
}
   81b70:	e037883a 	mov	sp,fp
   81b74:	dfc00117 	ldw	ra,4(sp)
   81b78:	df000017 	ldw	fp,0(sp)
   81b7c:	dec00204 	addi	sp,sp,8
   81b80:	f800283a 	ret

00081b84 <adv7513_chip_init>:
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
   81b84:	defffb04 	addi	sp,sp,-20
   81b88:	de00012e 	bgeu	sp,et,81b90 <adv7513_chip_init+0xc>
   81b8c:	003da0fa 	break	3
   81b90:	dfc00415 	stw	ra,16(sp)
   81b94:	df000315 	stw	fp,12(sp)
   81b98:	df000304 	addi	fp,sp,12
   81b9c:	e13ffd15 	stw	r4,-12(fp)
   81ba0:	e17ffe15 	stw	r5,-8(fp)
	if (adv7513_video_init(ec, dvi) != 0)
   81ba4:	e13ffd17 	ldw	r4,-12(fp)
   81ba8:	e17ffe17 	ldw	r5,-8(fp)
   81bac:	00819f40 	call	819f4 <adv7513_video_init>
   81bb0:	1005003a 	cmpeq	r2,r2,zero
   81bb4:	1000031e 	bne	r2,zero,81bc4 <adv7513_chip_init+0x40>
		return -1;
   81bb8:	00bfffc4 	movi	r2,-1
   81bbc:	e0bfff15 	stw	r2,-4(fp)
   81bc0:	00000106 	br	81bc8 <adv7513_chip_init+0x44>

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
   81bc4:	e03fff15 	stw	zero,-4(fp)
   81bc8:	e0bfff17 	ldw	r2,-4(fp)
}
   81bcc:	e037883a 	mov	sp,fp
   81bd0:	dfc00117 	ldw	ra,4(sp)
   81bd4:	df000017 	ldw	fp,0(sp)
   81bd8:	dec00204 	addi	sp,sp,8
   81bdc:	f800283a 	ret

00081be0 <adv7513_chip_init_3d>:

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
   81be0:	defffb04 	addi	sp,sp,-20
   81be4:	de00012e 	bgeu	sp,et,81bec <adv7513_chip_init_3d+0xc>
   81be8:	003da0fa 	break	3
   81bec:	dfc00415 	stw	ra,16(sp)
   81bf0:	df000315 	stw	fp,12(sp)
   81bf4:	df000304 	addi	fp,sp,12
   81bf8:	e13ffd15 	stw	r4,-12(fp)
   81bfc:	e17ffe15 	stw	r5,-8(fp)
	if (adv7513_video_init_3d(ec, vic) != 0)
   81c00:	e13ffd17 	ldw	r4,-12(fp)
   81c04:	e17ffe17 	ldw	r5,-8(fp)
   81c08:	0081ad00 	call	81ad0 <adv7513_video_init_3d>
   81c0c:	1005003a 	cmpeq	r2,r2,zero
   81c10:	1000031e 	bne	r2,zero,81c20 <adv7513_chip_init_3d+0x40>
		return -1;
   81c14:	00bfffc4 	movi	r2,-1
   81c18:	e0bfff15 	stw	r2,-4(fp)
   81c1c:	00000106 	br	81c24 <adv7513_chip_init_3d+0x44>

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
   81c20:	e03fff15 	stw	zero,-4(fp)
   81c24:	e0bfff17 	ldw	r2,-4(fp)
}
   81c28:	e037883a 	mov	sp,fp
   81c2c:	dfc00117 	ldw	ra,4(sp)
   81c30:	df000017 	ldw	fp,0(sp)
   81c34:	dec00204 	addi	sp,sp,8
   81c38:	f800283a 	ret

00081c3c <edid_decode_cea>:
    return v;
}
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
   81c3c:	deffec04 	addi	sp,sp,-80
   81c40:	de00012e 	bgeu	sp,et,81c48 <edid_decode_cea+0xc>
   81c44:	003da0fa 	break	3
   81c48:	dfc01315 	stw	ra,76(sp)
   81c4c:	df001215 	stw	fp,72(sp)
   81c50:	df001204 	addi	fp,sp,72
   81c54:	e13ffa15 	stw	r4,-24(fp)
   81c58:	e17ffb15 	stw	r5,-20(fp)
   81c5c:	e1bffc15 	stw	r6,-16(fp)
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
   81c60:	e0bffc17 	ldw	r2,-16(fp)
   81c64:	100491fa 	slli	r2,r2,7
   81c68:	1007883a 	mov	r3,r2
   81c6c:	e0bffb17 	ldw	r2,-20(fp)
   81c70:	1885883a 	add	r2,r3,r2
   81c74:	10802004 	addi	r2,r2,128
   81c78:	e0bff915 	stw	r2,-28(fp)
	u8 *c, *hv, *dtd = 0;
   81c7c:	e03ff615 	stw	zero,-40(fp)
	int i;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
   81c80:	e0bffa17 	ldw	r2,-24(fp)
   81c84:	10c60b04 	addi	r3,r2,6188
   81c88:	e0bffc17 	ldw	r2,-16(fp)
   81c8c:	10816f24 	muli	r2,r2,1468
   81c90:	1885883a 	add	r2,r3,r2
   81c94:	e0bff415 	stw	r2,-48(fp)
	struct edid_cea *cea = &ext_data->cea_ext;
   81c98:	e0bff417 	ldw	r2,-48(fp)
   81c9c:	10800104 	addi	r2,r2,4
   81ca0:	e0bff315 	stw	r2,-52(fp)

	c = &ext_bin[1];
   81ca4:	e0bff917 	ldw	r2,-28(fp)
   81ca8:	10800044 	addi	r2,r2,1
   81cac:	e0bff815 	stw	r2,-32(fp)

	// version
	if (*c != 0x03)
   81cb0:	e0bff817 	ldw	r2,-32(fp)
   81cb4:	10800003 	ldbu	r2,0(r2)
   81cb8:	10803fcc 	andi	r2,r2,255
   81cbc:	108000e0 	cmpeqi	r2,r2,3
   81cc0:	1000031e 	bne	r2,zero,81cd0 <edid_decode_cea+0x94>
		return -1;	// todo: support v1 / v2
   81cc4:	00bfffc4 	movi	r2,-1
   81cc8:	e0bfff15 	stw	r2,-4(fp)
   81ccc:	00061a06 	br	83538 <edid_decode_cea+0x18fc>

	ext_data->ext_tag = EDID_EXT_TAG_CEA;
   81cd0:	e0fff417 	ldw	r3,-48(fp)
   81cd4:	00800084 	movi	r2,2
   81cd8:	18800015 	stw	r2,0(r3)
	cea->rev = *c;
   81cdc:	e0bff817 	ldw	r2,-32(fp)
   81ce0:	10800003 	ldbu	r2,0(r2)
   81ce4:	10c03fcc 	andi	r3,r2,255
   81ce8:	e0bff317 	ldw	r2,-52(fp)
   81cec:	10c00015 	stw	r3,0(r2)

	// obtain offset to detail timing descriptor
	c = &ext_bin[2];
   81cf0:	e0bff917 	ldw	r2,-28(fp)
   81cf4:	10800084 	addi	r2,r2,2
   81cf8:	e0bff815 	stw	r2,-32(fp)
	if (*c > 4)
   81cfc:	e0bff817 	ldw	r2,-32(fp)
   81d00:	10800003 	ldbu	r2,0(r2)
   81d04:	10803fcc 	andi	r2,r2,255
   81d08:	10800170 	cmpltui	r2,r2,5
   81d0c:	1000071e 	bne	r2,zero,81d2c <edid_decode_cea+0xf0>
		dtd = &ext_bin[*c];
   81d10:	e0bff817 	ldw	r2,-32(fp)
   81d14:	10800003 	ldbu	r2,0(r2)
   81d18:	10803fcc 	andi	r2,r2,255
   81d1c:	1007883a 	mov	r3,r2
   81d20:	e0bff917 	ldw	r2,-28(fp)
   81d24:	1885883a 	add	r2,r3,r2
   81d28:	e0bff615 	stw	r2,-40(fp)

	cea->off_dtd = c[0];
   81d2c:	e0bff817 	ldw	r2,-32(fp)
   81d30:	10800003 	ldbu	r2,0(r2)
   81d34:	10c03fcc 	andi	r3,r2,255
   81d38:	e0bff317 	ldw	r2,-52(fp)
   81d3c:	10c00515 	stw	r3,20(r2)
	cea->nr_dtd = c[1] & 0x0f;
   81d40:	e0bff817 	ldw	r2,-32(fp)
   81d44:	10800044 	addi	r2,r2,1
   81d48:	10800003 	ldbu	r2,0(r2)
   81d4c:	10803fcc 	andi	r2,r2,255
   81d50:	10c003cc 	andi	r3,r2,15
   81d54:	e0bff317 	ldw	r2,-52(fp)
   81d58:	10c00615 	stw	r3,24(r2)

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
   81d5c:	e0bff817 	ldw	r2,-32(fp)
   81d60:	10800044 	addi	r2,r2,1
   81d64:	10800003 	ldbu	r2,0(r2)
   81d68:	10803fcc 	andi	r2,r2,255
   81d6c:	1080200c 	andi	r2,r2,128
   81d70:	10c00048 	cmpgei	r3,r2,1
   81d74:	e0bff317 	ldw	r2,-52(fp)
   81d78:	10c00115 	stw	r3,4(r2)
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
   81d7c:	e0bff817 	ldw	r2,-32(fp)
   81d80:	10800044 	addi	r2,r2,1
   81d84:	10800003 	ldbu	r2,0(r2)
   81d88:	10803fcc 	andi	r2,r2,255
   81d8c:	1080100c 	andi	r2,r2,64
   81d90:	10c00048 	cmpgei	r3,r2,1
   81d94:	e0bff317 	ldw	r2,-52(fp)
   81d98:	10c00215 	stw	r3,8(r2)
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
   81d9c:	e0bff817 	ldw	r2,-32(fp)
   81da0:	10800044 	addi	r2,r2,1
   81da4:	10800003 	ldbu	r2,0(r2)
   81da8:	10803fcc 	andi	r2,r2,255
   81dac:	1080080c 	andi	r2,r2,32
   81db0:	10c00048 	cmpgei	r3,r2,1
   81db4:	e0bff317 	ldw	r2,-52(fp)
   81db8:	10c00315 	stw	r3,12(r2)
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;
   81dbc:	e0bff817 	ldw	r2,-32(fp)
   81dc0:	10800044 	addi	r2,r2,1
   81dc4:	10800003 	ldbu	r2,0(r2)
   81dc8:	10803fcc 	andi	r2,r2,255
   81dcc:	1080040c 	andi	r2,r2,16
   81dd0:	10c00048 	cmpgei	r3,r2,1
   81dd4:	e0bff317 	ldw	r2,-52(fp)
   81dd8:	10c00415 	stw	r3,16(r2)

	// data block collection
	c = &ext_bin[4];
   81ddc:	e0bff917 	ldw	r2,-28(fp)
   81de0:	10800104 	addi	r2,r2,4
   81de4:	e0bff815 	stw	r2,-32(fp)

	cea->nr_dbcs = 0;
   81de8:	e0bff317 	ldw	r2,-52(fp)
   81dec:	10000715 	stw	zero,28(r2)
	while (c < dtd) {
   81df0:	00039c06 	br	82c64 <edid_decode_cea+0x1028>
		switch (*c >> 5) {
   81df4:	e0bff817 	ldw	r2,-32(fp)
   81df8:	10800003 	ldbu	r2,0(r2)
   81dfc:	10803fcc 	andi	r2,r2,255
   81e00:	1004d17a 	srli	r2,r2,5
   81e04:	10803fcc 	andi	r2,r2,255
   81e08:	e0bffe15 	stw	r2,-8(fp)
   81e0c:	e0fffe17 	ldw	r3,-8(fp)
   81e10:	18800228 	cmpgeui	r2,r3,8
   81e14:	1003911e 	bne	r2,zero,82c5c <edid_decode_cea+0x1020>
   81e18:	e13ffe17 	ldw	r4,-8(fp)
   81e1c:	e13ffe17 	ldw	r4,-8(fp)
   81e20:	2105883a 	add	r2,r4,r4
   81e24:	1087883a 	add	r3,r2,r2
   81e28:	00800234 	movhi	r2,8
   81e2c:	10878f04 	addi	r2,r2,7740
   81e30:	1885883a 	add	r2,r3,r2
   81e34:	10800017 	ldw	r2,0(r2)
   81e38:	1000683a 	jmp	r2
   81e3c:	00082c5c 	xori	zero,zero,8369
   81e40:	00081e5c 	xori	zero,zero,8313
   81e44:	0008205c 	xori	zero,zero,8321
   81e48:	00082158 	cmpnei	zero,zero,8325
   81e4c:	000828ec 	andhi	zero,zero,8355
   81e50:	00082958 	cmpnei	zero,zero,8357
   81e54:	00082c5c 	xori	zero,zero,8369
   81e58:	000829a8 	cmpgeui	zero,zero,8358
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
   81e5c:	e0bff317 	ldw	r2,-52(fp)
   81e60:	11000717 	ldw	r4,28(r2)
   81e64:	e0bff317 	ldw	r2,-52(fp)
   81e68:	2085883a 	add	r2,r4,r2
   81e6c:	10c00804 	addi	r3,r2,32
   81e70:	00800044 	movi	r2,1
   81e74:	18800005 	stb	r2,0(r3)
   81e78:	20c00044 	addi	r3,r4,1
   81e7c:	e0bff317 	ldw	r2,-52(fp)
   81e80:	10c00715 	stw	r3,28(r2)
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
   81e84:	e0bff817 	ldw	r2,-32(fp)
   81e88:	10800003 	ldbu	r2,0(r2)
   81e8c:	10803fcc 	andi	r2,r2,255
   81e90:	110007cc 	andi	r4,r2,31
   81e94:	014000c4 	movi	r5,3
   81e98:	008d7940 	call	8d794 <__divsi3>
   81e9c:	1007883a 	mov	r3,r2
   81ea0:	e0bff317 	ldw	r2,-52(fp)
   81ea4:	10c06815 	stw	r3,416(r2)
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   81ea8:	e03ff515 	stw	zero,-44(fp)
   81eac:	00005d06 	br	82024 <edid_decode_cea+0x3e8>
				u8 *sad_bin = &c[1+3*i];
   81eb0:	e0fff517 	ldw	r3,-44(fp)
   81eb4:	1805883a 	mov	r2,r3
   81eb8:	1085883a 	add	r2,r2,r2
   81ebc:	10c5883a 	add	r2,r2,r3
   81ec0:	1007883a 	mov	r3,r2
   81ec4:	e0bff817 	ldw	r2,-32(fp)
   81ec8:	1885883a 	add	r2,r3,r2
   81ecc:	10800044 	addi	r2,r2,1
   81ed0:	e0bff215 	stw	r2,-56(fp)
				cea->db_audio.sad[i].format = (int)((*sad_bin >> 3) & 0xf);
   81ed4:	e17ff517 	ldw	r5,-44(fp)
   81ed8:	e0bff217 	ldw	r2,-56(fp)
   81edc:	10800003 	ldbu	r2,0(r2)
   81ee0:	10803fcc 	andi	r2,r2,255
   81ee4:	1004d0fa 	srli	r2,r2,3
   81ee8:	10803fcc 	andi	r2,r2,255
   81eec:	110003cc 	andi	r4,r2,15
   81ef0:	e0fff317 	ldw	r3,-52(fp)
   81ef4:	28800524 	muli	r2,r5,20
   81ef8:	10c5883a 	add	r2,r2,r3
   81efc:	10806904 	addi	r2,r2,420
   81f00:	11000015 	stw	r4,0(r2)
				cea->db_audio.sad[i].channels = (int)(*sad_bin & 0x7) + 1;
   81f04:	e17ff517 	ldw	r5,-44(fp)
   81f08:	e0bff217 	ldw	r2,-56(fp)
   81f0c:	10800003 	ldbu	r2,0(r2)
   81f10:	10803fcc 	andi	r2,r2,255
   81f14:	108001cc 	andi	r2,r2,7
   81f18:	11000044 	addi	r4,r2,1
   81f1c:	e0fff317 	ldw	r3,-52(fp)
   81f20:	28800524 	muli	r2,r5,20
   81f24:	10c5883a 	add	r2,r2,r3
   81f28:	10806a04 	addi	r2,r2,424
   81f2c:	11000015 	stw	r4,0(r2)
				cea->db_audio.sad[i].freq = (int)(sad_bin[1] & 0x7f);
   81f30:	e17ff517 	ldw	r5,-44(fp)
   81f34:	e0bff217 	ldw	r2,-56(fp)
   81f38:	10800044 	addi	r2,r2,1
   81f3c:	10800003 	ldbu	r2,0(r2)
   81f40:	10803fcc 	andi	r2,r2,255
   81f44:	11001fcc 	andi	r4,r2,127
   81f48:	e0fff317 	ldw	r3,-52(fp)
   81f4c:	28800524 	muli	r2,r5,20
   81f50:	10c5883a 	add	r2,r2,r3
   81f54:	10806b04 	addi	r2,r2,428
   81f58:	11000015 	stw	r4,0(r2)

				if (cea->db_audio.sad[i].format == CEA_SAD_FMT_LPCM) {
   81f5c:	e0bff517 	ldw	r2,-44(fp)
   81f60:	e0fff317 	ldw	r3,-52(fp)
   81f64:	10800524 	muli	r2,r2,20
   81f68:	10c5883a 	add	r2,r2,r3
   81f6c:	10806904 	addi	r2,r2,420
   81f70:	10800017 	ldw	r2,0(r2)
   81f74:	10800058 	cmpnei	r2,r2,1
   81f78:	10000c1e 	bne	r2,zero,81fac <edid_decode_cea+0x370>
					cea->db_audio.sad[i].resolution = (int)(sad_bin[2] & 0x07);
   81f7c:	e17ff517 	ldw	r5,-44(fp)
   81f80:	e0bff217 	ldw	r2,-56(fp)
   81f84:	10800084 	addi	r2,r2,2
   81f88:	10800003 	ldbu	r2,0(r2)
   81f8c:	10803fcc 	andi	r2,r2,255
   81f90:	110001cc 	andi	r4,r2,7
   81f94:	e0fff317 	ldw	r3,-52(fp)
   81f98:	28800524 	muli	r2,r5,20
   81f9c:	10c5883a 	add	r2,r2,r3
   81fa0:	10806c04 	addi	r2,r2,432
   81fa4:	11000015 	stw	r4,0(r2)
   81fa8:	00001b06 	br	82018 <edid_decode_cea+0x3dc>
				} else if (cea->db_audio.sad[i].format != 0) {
   81fac:	e0bff517 	ldw	r2,-44(fp)
   81fb0:	e0fff317 	ldw	r3,-52(fp)
   81fb4:	10800524 	muli	r2,r2,20
   81fb8:	10c5883a 	add	r2,r2,r3
   81fbc:	10806904 	addi	r2,r2,420
   81fc0:	10800017 	ldw	r2,0(r2)
   81fc4:	1005003a 	cmpeq	r2,r2,zero
   81fc8:	1000131e 	bne	r2,zero,82018 <edid_decode_cea+0x3dc>
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
   81fcc:	e0bff517 	ldw	r2,-44(fp)
   81fd0:	e0fff317 	ldw	r3,-52(fp)
   81fd4:	10800524 	muli	r2,r2,20
   81fd8:	10c5883a 	add	r2,r2,r3
   81fdc:	10806904 	addi	r2,r2,420
   81fe0:	10800017 	ldw	r2,0(r2)
   81fe4:	10800248 	cmpgei	r2,r2,9
   81fe8:	10000b1e 	bne	r2,zero,82018 <edid_decode_cea+0x3dc>
						cea->db_audio.sad[i].bitrate = (int)sad_bin[2] * 8;
   81fec:	e17ff517 	ldw	r5,-44(fp)
   81ff0:	e0bff217 	ldw	r2,-56(fp)
   81ff4:	10800084 	addi	r2,r2,2
   81ff8:	10800003 	ldbu	r2,0(r2)
   81ffc:	10803fcc 	andi	r2,r2,255
   82000:	100890fa 	slli	r4,r2,3
   82004:	e0fff317 	ldw	r3,-52(fp)
   82008:	28800524 	muli	r2,r5,20
   8200c:	10c5883a 	add	r2,r2,r3
   82010:	10806d04 	addi	r2,r2,436
   82014:	11000015 	stw	r4,0(r2)
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   82018:	e0bff517 	ldw	r2,-44(fp)
   8201c:	10800044 	addi	r2,r2,1
   82020:	e0bff515 	stw	r2,-44(fp)
   82024:	e0bff317 	ldw	r2,-52(fp)
   82028:	10c06817 	ldw	r3,416(r2)
   8202c:	e0bff517 	ldw	r2,-44(fp)
   82030:	10ff9f16 	blt	r2,r3,81eb0 <edid_decode_cea+0x274>
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
						cea->db_audio.sad[i].bitrate = (int)sad_bin[2] * 8;
					}
				}
			}
			c += (*c & 0x1f) + 1;
   82034:	e0bff817 	ldw	r2,-32(fp)
   82038:	10800003 	ldbu	r2,0(r2)
   8203c:	10803fcc 	andi	r2,r2,255
   82040:	108007cc 	andi	r2,r2,31
   82044:	1007883a 	mov	r3,r2
   82048:	e0bff817 	ldw	r2,-32(fp)
   8204c:	1885883a 	add	r2,r3,r2
   82050:	10800044 	addi	r2,r2,1
   82054:	e0bff815 	stw	r2,-32(fp)
			break;
   82058:	00030206 	br	82c64 <edid_decode_cea+0x1028>

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
   8205c:	e0bff317 	ldw	r2,-52(fp)
   82060:	11000717 	ldw	r4,28(r2)
   82064:	e0bff317 	ldw	r2,-52(fp)
   82068:	2085883a 	add	r2,r4,r2
   8206c:	10c00804 	addi	r3,r2,32
   82070:	00800084 	movi	r2,2
   82074:	18800005 	stb	r2,0(r3)
   82078:	20c00044 	addi	r3,r4,1
   8207c:	e0bff317 	ldw	r2,-52(fp)
   82080:	10c00715 	stw	r3,28(r2)
			cea->db_video.nr_svd = (int)(*c & 0x1f);
   82084:	e0bff817 	ldw	r2,-32(fp)
   82088:	10800003 	ldbu	r2,0(r2)
   8208c:	10803fcc 	andi	r2,r2,255
   82090:	10c007cc 	andi	r3,r2,31
   82094:	e0bff317 	ldw	r2,-52(fp)
   82098:	10c02715 	stw	r3,156(r2)
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   8209c:	e03ff515 	stw	zero,-44(fp)
   820a0:	00001f06 	br	82120 <edid_decode_cea+0x4e4>
				cea->db_video.svd[i].native = c[1 + i] & 0x80 ? 1 : 0;
   820a4:	e17ff517 	ldw	r5,-44(fp)
   820a8:	e0fff517 	ldw	r3,-44(fp)
   820ac:	e0bff817 	ldw	r2,-32(fp)
   820b0:	1885883a 	add	r2,r3,r2
   820b4:	10800044 	addi	r2,r2,1
   820b8:	10800003 	ldbu	r2,0(r2)
   820bc:	10803fcc 	andi	r2,r2,255
   820c0:	1080201c 	xori	r2,r2,128
   820c4:	10bfe004 	addi	r2,r2,-128
   820c8:	1008d7fa 	srli	r4,r2,31
   820cc:	e0fff317 	ldw	r3,-52(fp)
   820d0:	280490fa 	slli	r2,r5,3
   820d4:	10c5883a 	add	r2,r2,r3
   820d8:	10802804 	addi	r2,r2,160
   820dc:	11000015 	stw	r4,0(r2)
				cea->db_video.svd[i].vic = (int)(c[1 + i] & 0x7f);
   820e0:	e17ff517 	ldw	r5,-44(fp)
   820e4:	e0fff517 	ldw	r3,-44(fp)
   820e8:	e0bff817 	ldw	r2,-32(fp)
   820ec:	1885883a 	add	r2,r3,r2
   820f0:	10800044 	addi	r2,r2,1
   820f4:	10800003 	ldbu	r2,0(r2)
   820f8:	10803fcc 	andi	r2,r2,255
   820fc:	11001fcc 	andi	r4,r2,127
   82100:	e0fff317 	ldw	r3,-52(fp)
   82104:	280490fa 	slli	r2,r5,3
   82108:	10c5883a 	add	r2,r2,r3
   8210c:	10802904 	addi	r2,r2,164
   82110:	11000015 	stw	r4,0(r2)
			break;

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
			cea->db_video.nr_svd = (int)(*c & 0x1f);
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   82114:	e0bff517 	ldw	r2,-44(fp)
   82118:	10800044 	addi	r2,r2,1
   8211c:	e0bff515 	stw	r2,-44(fp)
   82120:	e0bff317 	ldw	r2,-52(fp)
   82124:	10c02717 	ldw	r3,156(r2)
   82128:	e0bff517 	ldw	r2,-44(fp)
   8212c:	10ffdd16 	blt	r2,r3,820a4 <edid_decode_cea+0x468>
				cea->db_video.svd[i].native = c[1 + i] & 0x80 ? 1 : 0;
				cea->db_video.svd[i].vic = (int)(c[1 + i] & 0x7f);
			}
			c += (*c & 0x1f) + 1;
   82130:	e0bff817 	ldw	r2,-32(fp)
   82134:	10800003 	ldbu	r2,0(r2)
   82138:	10803fcc 	andi	r2,r2,255
   8213c:	108007cc 	andi	r2,r2,31
   82140:	1007883a 	mov	r3,r2
   82144:	e0bff817 	ldw	r2,-32(fp)
   82148:	1885883a 	add	r2,r3,r2
   8214c:	10800044 	addi	r2,r2,1
   82150:	e0bff815 	stw	r2,-32(fp)
			break;
   82154:	0002c306 	br	82c64 <edid_decode_cea+0x1028>

		case CEA_DB_VENDOR:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VENDOR;
   82158:	e0bff317 	ldw	r2,-52(fp)
   8215c:	11000717 	ldw	r4,28(r2)
   82160:	e0bff317 	ldw	r2,-52(fp)
   82164:	2085883a 	add	r2,r4,r2
   82168:	10c00804 	addi	r3,r2,32
   8216c:	008000c4 	movi	r2,3
   82170:	18800005 	stb	r2,0(r3)
   82174:	20c00044 	addi	r3,r4,1
   82178:	e0bff317 	ldw	r2,-52(fp)
   8217c:	10c00715 	stw	r3,28(r2)

			if ((c[1] != 0x03) || (c[2] != 0x0c) || (c[3] != 0x00)) {
   82180:	e0bff817 	ldw	r2,-32(fp)
   82184:	10800044 	addi	r2,r2,1
   82188:	10800003 	ldbu	r2,0(r2)
   8218c:	10803fcc 	andi	r2,r2,255
   82190:	108000d8 	cmpnei	r2,r2,3
   82194:	10000c1e 	bne	r2,zero,821c8 <edid_decode_cea+0x58c>
   82198:	e0bff817 	ldw	r2,-32(fp)
   8219c:	10800084 	addi	r2,r2,2
   821a0:	10800003 	ldbu	r2,0(r2)
   821a4:	10803fcc 	andi	r2,r2,255
   821a8:	10800318 	cmpnei	r2,r2,12
   821ac:	1000061e 	bne	r2,zero,821c8 <edid_decode_cea+0x58c>
   821b0:	e0bff817 	ldw	r2,-32(fp)
   821b4:	108000c4 	addi	r2,r2,3
   821b8:	10800003 	ldbu	r2,0(r2)
   821bc:	10803fcc 	andi	r2,r2,255
   821c0:	1005003a 	cmpeq	r2,r2,zero
   821c4:	10000c1e 	bne	r2,zero,821f8 <edid_decode_cea+0x5bc>
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
   821c8:	e0bff317 	ldw	r2,-52(fp)
   821cc:	10009d15 	stw	zero,628(r2)
				c += (*c & 0x1f) + 1;
   821d0:	e0bff817 	ldw	r2,-32(fp)
   821d4:	10800003 	ldbu	r2,0(r2)
   821d8:	10803fcc 	andi	r2,r2,255
   821dc:	108007cc 	andi	r2,r2,31
   821e0:	1007883a 	mov	r3,r2
   821e4:	e0bff817 	ldw	r2,-32(fp)
   821e8:	1885883a 	add	r2,r3,r2
   821ec:	10800044 	addi	r2,r2,1
   821f0:	e0bff815 	stw	r2,-32(fp)
				break;
   821f4:	00029b06 	br	82c64 <edid_decode_cea+0x1028>
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
   821f8:	e0bff817 	ldw	r2,-32(fp)
   821fc:	10800003 	ldbu	r2,0(r2)
   82200:	10803fcc 	andi	r2,r2,255
   82204:	10c007cc 	andi	r3,r2,31
   82208:	e0bff317 	ldw	r2,-52(fp)
   8220c:	10c09c15 	stw	r3,624(r2)
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
   82210:	e0bff817 	ldw	r2,-32(fp)
   82214:	108000c4 	addi	r2,r2,3
   82218:	10800003 	ldbu	r2,0(r2)
   8221c:	10803fcc 	andi	r2,r2,255
   82220:	1006943a 	slli	r3,r2,16
   82224:	e0bff817 	ldw	r2,-32(fp)
   82228:	10800084 	addi	r2,r2,2
   8222c:	10800003 	ldbu	r2,0(r2)
   82230:	10803fcc 	andi	r2,r2,255
   82234:	1004923a 	slli	r2,r2,8
   82238:	1886b03a 	or	r3,r3,r2
   8223c:	e0bff817 	ldw	r2,-32(fp)
   82240:	10800044 	addi	r2,r2,1
   82244:	10800003 	ldbu	r2,0(r2)
   82248:	10803fcc 	andi	r2,r2,255
   8224c:	1886b03a 	or	r3,r3,r2
   82250:	e0bff317 	ldw	r2,-52(fp)
   82254:	10c09d15 	stw	r3,628(r2)

			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
   82258:	e0bff817 	ldw	r2,-32(fp)
   8225c:	10800104 	addi	r2,r2,4
   82260:	10800003 	ldbu	r2,0(r2)
   82264:	10803fcc 	andi	r2,r2,255
   82268:	1004d13a 	srli	r2,r2,4
   8226c:	10c03fcc 	andi	r3,r2,255
   82270:	e0bff317 	ldw	r2,-52(fp)
   82274:	10c09e15 	stw	r3,632(r2)
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
   82278:	e0bff817 	ldw	r2,-32(fp)
   8227c:	10800104 	addi	r2,r2,4
   82280:	10800003 	ldbu	r2,0(r2)
   82284:	10803fcc 	andi	r2,r2,255
   82288:	10c003cc 	andi	r3,r2,15
   8228c:	e0bff317 	ldw	r2,-52(fp)
   82290:	10c09f15 	stw	r3,636(r2)
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
   82294:	e0bff817 	ldw	r2,-32(fp)
   82298:	10800144 	addi	r2,r2,5
   8229c:	10800003 	ldbu	r2,0(r2)
   822a0:	10803fcc 	andi	r2,r2,255
   822a4:	1004d13a 	srli	r2,r2,4
   822a8:	10c03fcc 	andi	r3,r2,255
   822ac:	e0bff317 	ldw	r2,-52(fp)
   822b0:	10c0a015 	stw	r3,640(r2)
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);
   822b4:	e0bff817 	ldw	r2,-32(fp)
   822b8:	10800144 	addi	r2,r2,5
   822bc:	10800003 	ldbu	r2,0(r2)
   822c0:	10803fcc 	andi	r2,r2,255
   822c4:	10c003cc 	andi	r3,r2,15
   822c8:	e0bff317 	ldw	r2,-52(fp)
   822cc:	10c0a115 	stw	r3,644(r2)

			if ((*c & 0x1f) >= 6) {
   822d0:	e0bff817 	ldw	r2,-32(fp)
   822d4:	10800003 	ldbu	r2,0(r2)
   822d8:	10803fcc 	andi	r2,r2,255
   822dc:	108007cc 	andi	r2,r2,31
   822e0:	10800190 	cmplti	r2,r2,6
   822e4:	1000311e 	bne	r2,zero,823ac <edid_decode_cea+0x770>
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
   822e8:	e0bff817 	ldw	r2,-32(fp)
   822ec:	10800184 	addi	r2,r2,6
   822f0:	10800003 	ldbu	r2,0(r2)
   822f4:	10803fcc 	andi	r2,r2,255
   822f8:	1080201c 	xori	r2,r2,128
   822fc:	10bfe004 	addi	r2,r2,-128
   82300:	1006d7fa 	srli	r3,r2,31
   82304:	e0bff317 	ldw	r2,-52(fp)
   82308:	10c0a215 	stw	r3,648(r2)
				cea->db_vsdb_hdmi.bpp48 = (c[6] & 0x40) ? 1 : 0;
   8230c:	e0bff817 	ldw	r2,-32(fp)
   82310:	10800184 	addi	r2,r2,6
   82314:	10800003 	ldbu	r2,0(r2)
   82318:	10803fcc 	andi	r2,r2,255
   8231c:	1080100c 	andi	r2,r2,64
   82320:	1006c03a 	cmpne	r3,r2,zero
   82324:	e0bff317 	ldw	r2,-52(fp)
   82328:	10c0a515 	stw	r3,660(r2)
				cea->db_vsdb_hdmi.bpp36 = (c[6] & 0x20) ? 1 : 0;
   8232c:	e0bff817 	ldw	r2,-32(fp)
   82330:	10800184 	addi	r2,r2,6
   82334:	10800003 	ldbu	r2,0(r2)
   82338:	10803fcc 	andi	r2,r2,255
   8233c:	1080080c 	andi	r2,r2,32
   82340:	1006c03a 	cmpne	r3,r2,zero
   82344:	e0bff317 	ldw	r2,-52(fp)
   82348:	10c0a415 	stw	r3,656(r2)
				cea->db_vsdb_hdmi.bpp30 = (c[6] & 0x10) ? 1 : 0;
   8234c:	e0bff817 	ldw	r2,-32(fp)
   82350:	10800184 	addi	r2,r2,6
   82354:	10800003 	ldbu	r2,0(r2)
   82358:	10803fcc 	andi	r2,r2,255
   8235c:	1080040c 	andi	r2,r2,16
   82360:	1006c03a 	cmpne	r3,r2,zero
   82364:	e0bff317 	ldw	r2,-52(fp)
   82368:	10c0a315 	stw	r3,652(r2)
				cea->db_vsdb_hdmi.ycbcr444 = (c[6] & 0x08) ? 1 : 0;
   8236c:	e0bff817 	ldw	r2,-32(fp)
   82370:	10800184 	addi	r2,r2,6
   82374:	10800003 	ldbu	r2,0(r2)
   82378:	10803fcc 	andi	r2,r2,255
   8237c:	1080020c 	andi	r2,r2,8
   82380:	1006c03a 	cmpne	r3,r2,zero
   82384:	e0bff317 	ldw	r2,-52(fp)
   82388:	10c0a615 	stw	r3,664(r2)
				cea->db_vsdb_hdmi.dvi_dual = (c[6] & 0x01) ? 1 : 0;
   8238c:	e0bff817 	ldw	r2,-32(fp)
   82390:	10800184 	addi	r2,r2,6
   82394:	10800003 	ldbu	r2,0(r2)
   82398:	10803fcc 	andi	r2,r2,255
   8239c:	10c0004c 	andi	r3,r2,1
   823a0:	e0bff317 	ldw	r2,-52(fp)
   823a4:	10c0a715 	stw	r3,668(r2)
   823a8:	00000c06 	br	823dc <edid_decode_cea+0x7a0>
			} else {
				cea->db_vsdb_hdmi.ai = 0;
   823ac:	e0bff317 	ldw	r2,-52(fp)
   823b0:	1000a215 	stw	zero,648(r2)
				cea->db_vsdb_hdmi.bpp48 = 0;
   823b4:	e0bff317 	ldw	r2,-52(fp)
   823b8:	1000a515 	stw	zero,660(r2)
				cea->db_vsdb_hdmi.bpp36 = 0;
   823bc:	e0bff317 	ldw	r2,-52(fp)
   823c0:	1000a415 	stw	zero,656(r2)
				cea->db_vsdb_hdmi.bpp30 = 0;
   823c4:	e0bff317 	ldw	r2,-52(fp)
   823c8:	1000a315 	stw	zero,652(r2)
				cea->db_vsdb_hdmi.ycbcr444 = 0;
   823cc:	e0bff317 	ldw	r2,-52(fp)
   823d0:	1000a615 	stw	zero,664(r2)
				cea->db_vsdb_hdmi.dvi_dual = 0;
   823d4:	e0bff317 	ldw	r2,-52(fp)
   823d8:	1000a715 	stw	zero,668(r2)
			}

			if ((*c & 0x1f) >= 7) {
   823dc:	e0bff817 	ldw	r2,-32(fp)
   823e0:	10800003 	ldbu	r2,0(r2)
   823e4:	10803fcc 	andi	r2,r2,255
   823e8:	108007cc 	andi	r2,r2,31
   823ec:	108001d0 	cmplti	r2,r2,7
   823f0:	1000081e 	bne	r2,zero,82414 <edid_decode_cea+0x7d8>
				cea->db_vsdb_hdmi.max_tmds_clk = c[7] * 5;
   823f4:	e0bff817 	ldw	r2,-32(fp)
   823f8:	108001c4 	addi	r2,r2,7
   823fc:	10800003 	ldbu	r2,0(r2)
   82400:	10803fcc 	andi	r2,r2,255
   82404:	10c00164 	muli	r3,r2,5
   82408:	e0bff317 	ldw	r2,-52(fp)
   8240c:	10c0ab15 	stw	r3,684(r2)
   82410:	00000206 	br	8241c <edid_decode_cea+0x7e0>
			} else {
				cea->db_vsdb_hdmi.max_tmds_clk = 0;
   82414:	e0bff317 	ldw	r2,-52(fp)
   82418:	1000ab15 	stw	zero,684(r2)
			}

			cea->db_vsdb_hdmi.p_latency = 0;
   8241c:	e0bff317 	ldw	r2,-52(fp)
   82420:	1000a815 	stw	zero,672(r2)
			cea->db_vsdb_hdmi.i_latency = 0;
   82424:	e0bff317 	ldw	r2,-52(fp)
   82428:	1000a915 	stw	zero,676(r2)
			cea->db_vsdb_hdmi.hdmi_video = 0;
   8242c:	e0bff317 	ldw	r2,-52(fp)
   82430:	1000aa15 	stw	zero,680(r2)

			cea->db_vsdb_hdmi.vid_latency_p = 0;
   82434:	e0bff317 	ldw	r2,-52(fp)
   82438:	1000ac15 	stw	zero,688(r2)
			cea->db_vsdb_hdmi.aud_latency_p = 0;
   8243c:	e0bff317 	ldw	r2,-52(fp)
   82440:	1000ad15 	stw	zero,692(r2)
			cea->db_vsdb_hdmi.vid_latency_i = 0;
   82444:	e0bff317 	ldw	r2,-52(fp)
   82448:	1000ae15 	stw	zero,696(r2)
			cea->db_vsdb_hdmi.aud_latency_i = 0;
   8244c:	e0bff317 	ldw	r2,-52(fp)
   82450:	1000af15 	stw	zero,700(r2)

			if ((*c & 0x1f) >= 8) {
   82454:	e0bff817 	ldw	r2,-32(fp)
   82458:	10800003 	ldbu	r2,0(r2)
   8245c:	10803fcc 	andi	r2,r2,255
   82460:	108007cc 	andi	r2,r2,31
   82464:	10800210 	cmplti	r2,r2,8
   82468:	1000421e 	bne	r2,zero,82574 <edid_decode_cea+0x938>
				u8 c8 = c[8];
   8246c:	e0bff817 	ldw	r2,-32(fp)
   82470:	10800204 	addi	r2,r2,8
   82474:	10800003 	ldbu	r2,0(r2)
   82478:	e0bff105 	stb	r2,-60(fp)
				hv = &c[9];
   8247c:	e0bff817 	ldw	r2,-32(fp)
   82480:	10800244 	addi	r2,r2,9
   82484:	e0bff715 	stw	r2,-36(fp)
				if (c8 & 0x80) {
   82488:	e0bff103 	ldbu	r2,-60(fp)
   8248c:	10803fcc 	andi	r2,r2,255
   82490:	1080201c 	xori	r2,r2,128
   82494:	10bfe004 	addi	r2,r2,-128
   82498:	1004403a 	cmpge	r2,r2,zero
   8249c:	1000151e 	bne	r2,zero,824f4 <edid_decode_cea+0x8b8>
					cea->db_vsdb_hdmi.p_latency = 1;
   824a0:	e0fff317 	ldw	r3,-52(fp)
   824a4:	00800044 	movi	r2,1
   824a8:	1880a815 	stw	r2,672(r3)
					cea->db_vsdb_hdmi.vid_latency_p = (hv[0] - 1) * 2;  // (ms)
   824ac:	e0bff717 	ldw	r2,-36(fp)
   824b0:	10800003 	ldbu	r2,0(r2)
   824b4:	10803fcc 	andi	r2,r2,255
   824b8:	1085883a 	add	r2,r2,r2
   824bc:	10ffff84 	addi	r3,r2,-2
   824c0:	e0bff317 	ldw	r2,-52(fp)
   824c4:	10c0ac15 	stw	r3,688(r2)
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
   824c8:	e0bff717 	ldw	r2,-36(fp)
   824cc:	10800044 	addi	r2,r2,1
   824d0:	10800003 	ldbu	r2,0(r2)
   824d4:	10803fcc 	andi	r2,r2,255
   824d8:	1085883a 	add	r2,r2,r2
   824dc:	10ffff84 	addi	r3,r2,-2
   824e0:	e0bff317 	ldw	r2,-52(fp)
   824e4:	10c0ad15 	stw	r3,692(r2)
					hv += 2;
   824e8:	e0bff717 	ldw	r2,-36(fp)
   824ec:	10800084 	addi	r2,r2,2
   824f0:	e0bff715 	stw	r2,-36(fp)
				}
				if (c8 & 0x40) {
   824f4:	e0bff103 	ldbu	r2,-60(fp)
   824f8:	1080100c 	andi	r2,r2,64
   824fc:	1005003a 	cmpeq	r2,r2,zero
   82500:	1000151e 	bne	r2,zero,82558 <edid_decode_cea+0x91c>
					cea->db_vsdb_hdmi.i_latency = 1;
   82504:	e0fff317 	ldw	r3,-52(fp)
   82508:	00800044 	movi	r2,1
   8250c:	1880a915 	stw	r2,676(r3)
					cea->db_vsdb_hdmi.vid_latency_i = (hv[0] - 1) * 2;  // (ms)
   82510:	e0bff717 	ldw	r2,-36(fp)
   82514:	10800003 	ldbu	r2,0(r2)
   82518:	10803fcc 	andi	r2,r2,255
   8251c:	1085883a 	add	r2,r2,r2
   82520:	10ffff84 	addi	r3,r2,-2
   82524:	e0bff317 	ldw	r2,-52(fp)
   82528:	10c0ae15 	stw	r3,696(r2)
					cea->db_vsdb_hdmi.aud_latency_i = (hv[1] - 1) * 2;  // (ms)
   8252c:	e0bff717 	ldw	r2,-36(fp)
   82530:	10800044 	addi	r2,r2,1
   82534:	10800003 	ldbu	r2,0(r2)
   82538:	10803fcc 	andi	r2,r2,255
   8253c:	1085883a 	add	r2,r2,r2
   82540:	10ffff84 	addi	r3,r2,-2
   82544:	e0bff317 	ldw	r2,-52(fp)
   82548:	10c0af15 	stw	r3,700(r2)
					hv += 2;
   8254c:	e0bff717 	ldw	r2,-36(fp)
   82550:	10800084 	addi	r2,r2,2
   82554:	e0bff715 	stw	r2,-36(fp)
				}
				if (c8 & 0x20) {
   82558:	e0bff103 	ldbu	r2,-60(fp)
   8255c:	1080080c 	andi	r2,r2,32
   82560:	1005003a 	cmpeq	r2,r2,zero
   82564:	1000031e 	bne	r2,zero,82574 <edid_decode_cea+0x938>
					cea->db_vsdb_hdmi.hdmi_video = 1;
   82568:	e0fff317 	ldw	r3,-52(fp)
   8256c:	00800044 	movi	r2,1
   82570:	1880aa15 	stw	r2,680(r3)
				}
			}

			if (cea->db_vsdb_hdmi.hdmi_video > 0) {
   82574:	e0bff317 	ldw	r2,-52(fp)
   82578:	1080aa17 	ldw	r2,680(r2)
   8257c:	10800050 	cmplti	r2,r2,1
   82580:	1000281e 	bne	r2,zero,82624 <edid_decode_cea+0x9e8>
				cea->db_vsdb_hdmi.present_3d = hv[0] & 0x80 ? 1 : 0;
   82584:	e0bff717 	ldw	r2,-36(fp)
   82588:	10800003 	ldbu	r2,0(r2)
   8258c:	10803fcc 	andi	r2,r2,255
   82590:	1080201c 	xori	r2,r2,128
   82594:	10bfe004 	addi	r2,r2,-128
   82598:	1006d7fa 	srli	r3,r2,31
   8259c:	e0bff317 	ldw	r2,-52(fp)
   825a0:	10c0b015 	stw	r3,704(r2)
				cea->db_vsdb_hdmi.multi_3d = (hv[0] >> 5) & 0x03;
   825a4:	e0bff717 	ldw	r2,-36(fp)
   825a8:	10800003 	ldbu	r2,0(r2)
   825ac:	10803fcc 	andi	r2,r2,255
   825b0:	1004d17a 	srli	r2,r2,5
   825b4:	10803fcc 	andi	r2,r2,255
   825b8:	10c000cc 	andi	r3,r2,3
   825bc:	e0bff317 	ldw	r2,-52(fp)
   825c0:	10c0b115 	stw	r3,708(r2)
				cea->db_vsdb_hdmi.image_size = (hv[0] >> 3) & 0x03;
   825c4:	e0bff717 	ldw	r2,-36(fp)
   825c8:	10800003 	ldbu	r2,0(r2)
   825cc:	10803fcc 	andi	r2,r2,255
   825d0:	1004d0fa 	srli	r2,r2,3
   825d4:	10803fcc 	andi	r2,r2,255
   825d8:	10c000cc 	andi	r3,r2,3
   825dc:	e0bff317 	ldw	r2,-52(fp)
   825e0:	10c0b215 	stw	r3,712(r2)
				cea->db_vsdb_hdmi.hdmi_xx_len = hv[1] >> 5;
   825e4:	e0bff717 	ldw	r2,-36(fp)
   825e8:	10800044 	addi	r2,r2,1
   825ec:	10800003 	ldbu	r2,0(r2)
   825f0:	10803fcc 	andi	r2,r2,255
   825f4:	1004d17a 	srli	r2,r2,5
   825f8:	10c03fcc 	andi	r3,r2,255
   825fc:	e0bff317 	ldw	r2,-52(fp)
   82600:	10c0b315 	stw	r3,716(r2)
				cea->db_vsdb_hdmi.hdmi_3d_len = hv[1] & 0x1f;
   82604:	e0bff717 	ldw	r2,-36(fp)
   82608:	10800044 	addi	r2,r2,1
   8260c:	10800003 	ldbu	r2,0(r2)
   82610:	10803fcc 	andi	r2,r2,255
   82614:	10c007cc 	andi	r3,r2,31
   82618:	e0bff317 	ldw	r2,-52(fp)
   8261c:	10c0b415 	stw	r3,720(r2)
   82620:	00000a06 	br	8264c <edid_decode_cea+0xa10>
			} else {
				cea->db_vsdb_hdmi.present_3d = 0;
   82624:	e0bff317 	ldw	r2,-52(fp)
   82628:	1000b015 	stw	zero,704(r2)
				cea->db_vsdb_hdmi.multi_3d = 0;
   8262c:	e0bff317 	ldw	r2,-52(fp)
   82630:	1000b115 	stw	zero,708(r2)
				cea->db_vsdb_hdmi.image_size = 0;
   82634:	e0bff317 	ldw	r2,-52(fp)
   82638:	1000b215 	stw	zero,712(r2)
				cea->db_vsdb_hdmi.hdmi_xx_len = 0;
   8263c:	e0bff317 	ldw	r2,-52(fp)
   82640:	1000b315 	stw	zero,716(r2)
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
   82644:	e0bff317 	ldw	r2,-52(fp)
   82648:	1000b415 	stw	zero,720(r2)
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
   8264c:	e0bff317 	ldw	r2,-52(fp)
   82650:	1080b417 	ldw	r2,720(r2)
   82654:	10800050 	cmplti	r2,r2,1
   82658:	1000961e 	bne	r2,zero,828b4 <edid_decode_cea+0xc78>
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
   8265c:	e0bff317 	ldw	r2,-52(fp)
   82660:	1080b317 	ldw	r2,716(r2)
   82664:	1007883a 	mov	r3,r2
   82668:	e0bff717 	ldw	r2,-36(fp)
   8266c:	1885883a 	add	r2,r3,r2
   82670:	10800084 	addi	r2,r2,2
   82674:	e0bff015 	stw	r2,-64(fp)
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
   82678:	e03fef15 	stw	zero,-68(fp)
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1
   8267c:	e03fee15 	stw	zero,-72(fp)

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
   82680:	e0bff317 	ldw	r2,-52(fp)
   82684:	1080b117 	ldw	r2,708(r2)
   82688:	10800098 	cmpnei	r2,r2,2
   8268c:	10001f1e 	bne	r2,zero,8270c <edid_decode_cea+0xad0>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   82690:	e0bff017 	ldw	r2,-64(fp)
   82694:	10800003 	ldbu	r2,0(r2)
   82698:	10803fcc 	andi	r2,r2,255
   8269c:	1006923a 	slli	r3,r2,8
   826a0:	e0bff017 	ldw	r2,-64(fp)
   826a4:	10800044 	addi	r2,r2,1
   826a8:	10800003 	ldbu	r2,0(r2)
   826ac:	10803fcc 	andi	r2,r2,255
   826b0:	1886b03a 	or	r3,r3,r2
   826b4:	e0bff317 	ldw	r2,-52(fp)
   826b8:	10c0b515 	stw	r3,724(r2)
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
   826bc:	e0bff017 	ldw	r2,-64(fp)
   826c0:	10800084 	addi	r2,r2,2
   826c4:	10800003 	ldbu	r2,0(r2)
   826c8:	10803fcc 	andi	r2,r2,255
   826cc:	1006923a 	slli	r3,r2,8
   826d0:	e0bff017 	ldw	r2,-64(fp)
   826d4:	108000c4 	addi	r2,r2,3
   826d8:	10800003 	ldbu	r2,0(r2)
   826dc:	10803fcc 	andi	r2,r2,255
   826e0:	1886b03a 	or	r3,r3,r2
   826e4:	e0bff317 	ldw	r2,-52(fp)
   826e8:	10c0b615 	stw	r3,728(r2)
					vic = &d[4];
   826ec:	e0bff017 	ldw	r2,-64(fp)
   826f0:	10800104 	addi	r2,r2,4
   826f4:	e0bfef15 	stw	r2,-68(fp)
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
   826f8:	e0bff317 	ldw	r2,-52(fp)
   826fc:	1080b417 	ldw	r2,720(r2)
   82700:	10bfff04 	addi	r2,r2,-4
   82704:	e0bfee15 	stw	r2,-72(fp)
   82708:	00001d06 	br	82780 <edid_decode_cea+0xb44>
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
   8270c:	e0bff317 	ldw	r2,-52(fp)
   82710:	1080b117 	ldw	r2,708(r2)
   82714:	10800058 	cmpnei	r2,r2,1
   82718:	1000151e 	bne	r2,zero,82770 <edid_decode_cea+0xb34>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   8271c:	e0bff017 	ldw	r2,-64(fp)
   82720:	10800003 	ldbu	r2,0(r2)
   82724:	10803fcc 	andi	r2,r2,255
   82728:	1006923a 	slli	r3,r2,8
   8272c:	e0bff017 	ldw	r2,-64(fp)
   82730:	10800044 	addi	r2,r2,1
   82734:	10800003 	ldbu	r2,0(r2)
   82738:	10803fcc 	andi	r2,r2,255
   8273c:	1886b03a 	or	r3,r3,r2
   82740:	e0bff317 	ldw	r2,-52(fp)
   82744:	10c0b515 	stw	r3,724(r2)
					cea->db_vsdb_hdmi.mask_3d = 0;
   82748:	e0bff317 	ldw	r2,-52(fp)
   8274c:	1000b615 	stw	zero,728(r2)
					vic = &d[2];
   82750:	e0bff017 	ldw	r2,-64(fp)
   82754:	10800084 	addi	r2,r2,2
   82758:	e0bfef15 	stw	r2,-68(fp)
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 2;
   8275c:	e0bff317 	ldw	r2,-52(fp)
   82760:	1080b417 	ldw	r2,720(r2)
   82764:	10bfff84 	addi	r2,r2,-2
   82768:	e0bfee15 	stw	r2,-72(fp)
   8276c:	00000406 	br	82780 <edid_decode_cea+0xb44>
				} else {
					cea->db_vsdb_hdmi.struct_all_3d = 0;
   82770:	e0bff317 	ldw	r2,-52(fp)
   82774:	1000b515 	stw	zero,724(r2)
					cea->db_vsdb_hdmi.mask_3d = 0;
   82778:	e0bff317 	ldw	r2,-52(fp)
   8277c:	1000b615 	stw	zero,728(r2)
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
   82780:	e0bff317 	ldw	r2,-52(fp)
   82784:	1000b715 	stw	zero,732(r2)
				while (vic_l > 0) {
   82788:	00004606 	br	828a4 <edid_decode_cea+0xc68>
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
   8278c:	e0bff317 	ldw	r2,-52(fp)
   82790:	1140b717 	ldw	r5,732(r2)
   82794:	e0bfef17 	ldw	r2,-68(fp)
   82798:	10800003 	ldbu	r2,0(r2)
   8279c:	10803fcc 	andi	r2,r2,255
   827a0:	1004d13a 	srli	r2,r2,4
   827a4:	11003fcc 	andi	r4,r2,255
   827a8:	e0fff317 	ldw	r3,-52(fp)
   827ac:	28800324 	muli	r2,r5,12
   827b0:	10c5883a 	add	r2,r2,r3
   827b4:	1080b804 	addi	r2,r2,736
   827b8:	11000015 	stw	r4,0(r2)
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
   827bc:	e0bff317 	ldw	r2,-52(fp)
   827c0:	1140b717 	ldw	r5,732(r2)
   827c4:	e0bfef17 	ldw	r2,-68(fp)
   827c8:	10800003 	ldbu	r2,0(r2)
   827cc:	10803fcc 	andi	r2,r2,255
   827d0:	110003cc 	andi	r4,r2,15
   827d4:	e0fff317 	ldw	r3,-52(fp)
   827d8:	28800324 	muli	r2,r5,12
   827dc:	10c5883a 	add	r2,r2,r3
   827e0:	1080b904 	addi	r2,r2,740
   827e4:	11000015 	stw	r4,0(r2)
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
   827e8:	e0bff317 	ldw	r2,-52(fp)
   827ec:	1080b717 	ldw	r2,732(r2)
   827f0:	e0fff317 	ldw	r3,-52(fp)
   827f4:	10800324 	muli	r2,r2,12
   827f8:	10c5883a 	add	r2,r2,r3
   827fc:	1080b904 	addi	r2,r2,740
   82800:	10800017 	ldw	r2,0(r2)
   82804:	10800210 	cmplti	r2,r2,8
   82808:	1000141e 	bne	r2,zero,8285c <edid_decode_cea+0xc20>
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = vic[1] >> 4;
   8280c:	e0bff317 	ldw	r2,-52(fp)
   82810:	1140b717 	ldw	r5,732(r2)
   82814:	e0bfef17 	ldw	r2,-68(fp)
   82818:	10800044 	addi	r2,r2,1
   8281c:	10800003 	ldbu	r2,0(r2)
   82820:	10803fcc 	andi	r2,r2,255
   82824:	1004d13a 	srli	r2,r2,4
   82828:	11003fcc 	andi	r4,r2,255
   8282c:	e0fff317 	ldw	r3,-52(fp)
   82830:	28800324 	muli	r2,r5,12
   82834:	10c5883a 	add	r2,r2,r3
   82838:	1080ba04 	addi	r2,r2,744
   8283c:	11000015 	stw	r4,0(r2)
						vic += 2;
   82840:	e0bfef17 	ldw	r2,-68(fp)
   82844:	10800084 	addi	r2,r2,2
   82848:	e0bfef15 	stw	r2,-68(fp)
						vic_l -= 2;
   8284c:	e0bfee17 	ldw	r2,-72(fp)
   82850:	10bfff84 	addi	r2,r2,-2
   82854:	e0bfee15 	stw	r2,-72(fp)
   82858:	00000d06 	br	82890 <edid_decode_cea+0xc54>
					} else {
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = 0;
   8285c:	e0bff317 	ldw	r2,-52(fp)
   82860:	1080b717 	ldw	r2,732(r2)
   82864:	e0fff317 	ldw	r3,-52(fp)
   82868:	10800324 	muli	r2,r2,12
   8286c:	10c5883a 	add	r2,r2,r3
   82870:	1080ba04 	addi	r2,r2,744
   82874:	10000015 	stw	zero,0(r2)
						++vic;
   82878:	e0bfef17 	ldw	r2,-68(fp)
   8287c:	10800044 	addi	r2,r2,1
   82880:	e0bfef15 	stw	r2,-68(fp)
						--vic_l;
   82884:	e0bfee17 	ldw	r2,-72(fp)
   82888:	10bfffc4 	addi	r2,r2,-1
   8288c:	e0bfee15 	stw	r2,-72(fp)
					}
					++cea->db_vsdb_hdmi.nr_vic_3d;
   82890:	e0bff317 	ldw	r2,-52(fp)
   82894:	1080b717 	ldw	r2,732(r2)
   82898:	10c00044 	addi	r3,r2,1
   8289c:	e0bff317 	ldw	r2,-52(fp)
   828a0:	10c0b715 	stw	r3,732(r2)
					cea->db_vsdb_hdmi.struct_all_3d = 0;
					cea->db_vsdb_hdmi.mask_3d = 0;
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
				while (vic_l > 0) {
   828a4:	e0bfee17 	ldw	r2,-72(fp)
   828a8:	10800048 	cmpgei	r2,r2,1
   828ac:	103fb71e 	bne	r2,zero,8278c <edid_decode_cea+0xb50>
   828b0:	00000406 	br	828c4 <edid_decode_cea+0xc88>
						--vic_l;
					}
					++cea->db_vsdb_hdmi.nr_vic_3d;
				}
			} else {
				cea->db_vsdb_hdmi.struct_all_3d = 0;
   828b4:	e0bff317 	ldw	r2,-52(fp)
   828b8:	1000b515 	stw	zero,724(r2)
				cea->db_vsdb_hdmi.mask_3d = 0;
   828bc:	e0bff317 	ldw	r2,-52(fp)
   828c0:	1000b615 	stw	zero,728(r2)
			}

			c += (*c & 0x1f) + 1;
   828c4:	e0bff817 	ldw	r2,-32(fp)
   828c8:	10800003 	ldbu	r2,0(r2)
   828cc:	10803fcc 	andi	r2,r2,255
   828d0:	108007cc 	andi	r2,r2,31
   828d4:	1007883a 	mov	r3,r2
   828d8:	e0bff817 	ldw	r2,-32(fp)
   828dc:	1885883a 	add	r2,r3,r2
   828e0:	10800044 	addi	r2,r2,1
   828e4:	e0bff815 	stw	r2,-32(fp)
			break;
   828e8:	0000de06 	br	82c64 <edid_decode_cea+0x1028>

		case CEA_DB_SPEAKER:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_SPEAKER;
   828ec:	e0bff317 	ldw	r2,-52(fp)
   828f0:	11000717 	ldw	r4,28(r2)
   828f4:	e0bff317 	ldw	r2,-52(fp)
   828f8:	2085883a 	add	r2,r4,r2
   828fc:	10c00804 	addi	r3,r2,32
   82900:	00800104 	movi	r2,4
   82904:	18800005 	stb	r2,0(r3)
   82908:	20c00044 	addi	r3,r4,1
   8290c:	e0bff317 	ldw	r2,-52(fp)
   82910:	10c00715 	stw	r3,28(r2)
			cea->db_speaker.designation = (int)(c[1] & 0x7f);
   82914:	e0bff817 	ldw	r2,-32(fp)
   82918:	10800044 	addi	r2,r2,1
   8291c:	10800003 	ldbu	r2,0(r2)
   82920:	10803fcc 	andi	r2,r2,255
   82924:	10c01fcc 	andi	r3,r2,127
   82928:	e0bff317 	ldw	r2,-52(fp)
   8292c:	10c09b15 	stw	r3,620(r2)
			c += (*c & 0x1f) + 1;
   82930:	e0bff817 	ldw	r2,-32(fp)
   82934:	10800003 	ldbu	r2,0(r2)
   82938:	10803fcc 	andi	r2,r2,255
   8293c:	108007cc 	andi	r2,r2,31
   82940:	1007883a 	mov	r3,r2
   82944:	e0bff817 	ldw	r2,-32(fp)
   82948:	1885883a 	add	r2,r3,r2
   8294c:	10800044 	addi	r2,r2,1
   82950:	e0bff815 	stw	r2,-32(fp)
			break;
   82954:	0000c306 	br	82c64 <edid_decode_cea+0x1028>

		case CEA_DB_DTC:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_DTC;
   82958:	e0bff317 	ldw	r2,-52(fp)
   8295c:	11000717 	ldw	r4,28(r2)
   82960:	e0bff317 	ldw	r2,-52(fp)
   82964:	2085883a 	add	r2,r4,r2
   82968:	10c00804 	addi	r3,r2,32
   8296c:	00800144 	movi	r2,5
   82970:	18800005 	stb	r2,0(r3)
   82974:	20c00044 	addi	r3,r4,1
   82978:	e0bff317 	ldw	r2,-52(fp)
   8297c:	10c00715 	stw	r3,28(r2)
			c += (*c & 0x1f) + 1;
   82980:	e0bff817 	ldw	r2,-32(fp)
   82984:	10800003 	ldbu	r2,0(r2)
   82988:	10803fcc 	andi	r2,r2,255
   8298c:	108007cc 	andi	r2,r2,31
   82990:	1007883a 	mov	r3,r2
   82994:	e0bff817 	ldw	r2,-32(fp)
   82998:	1885883a 	add	r2,r3,r2
   8299c:	10800044 	addi	r2,r2,1
   829a0:	e0bff815 	stw	r2,-32(fp)
			break;
   829a4:	0000af06 	br	82c64 <edid_decode_cea+0x1028>

		case CEA_DB_EXTENDED:
			switch (c[1]) {
   829a8:	e0bff817 	ldw	r2,-32(fp)
   829ac:	10800044 	addi	r2,r2,1
   829b0:	10800003 	ldbu	r2,0(r2)
   829b4:	10803fcc 	andi	r2,r2,255
   829b8:	e0bffd15 	stw	r2,-12(fp)
   829bc:	e0fffd17 	ldw	r3,-12(fp)
   829c0:	188004e8 	cmpgeui	r2,r3,19
   829c4:	1000911e 	bne	r2,zero,82c0c <edid_decode_cea+0xfd0>
   829c8:	e13ffd17 	ldw	r4,-12(fp)
   829cc:	e13ffd17 	ldw	r4,-12(fp)
   829d0:	2105883a 	add	r2,r4,r4
   829d4:	1087883a 	add	r3,r2,r2
   829d8:	00800234 	movhi	r2,8
   829dc:	108a7b04 	addi	r2,r2,10732
   829e0:	1885883a 	add	r2,r3,r2
   829e4:	10800017 	ldw	r2,0(r2)
   829e8:	1000683a 	jmp	r2
   829ec:	00082a38 	rdprs	zero,zero,8360
   829f0:	00082ad8 	cmpnei	zero,zero,8363
   829f4:	00082af8 	rdprs	zero,zero,8363
   829f8:	00082b18 	cmpnei	zero,zero,8364
   829fc:	00082b38 	rdprs	zero,zero,8364
   82a00:	00082b58 	cmpnei	zero,zero,8365
   82a04:	00082c0c 	andi	zero,zero,8368
   82a08:	00082c0c 	andi	zero,zero,8368
   82a0c:	00082c0c 	andi	zero,zero,8368
   82a10:	00082c0c 	andi	zero,zero,8368
   82a14:	00082c0c 	andi	zero,zero,8368
   82a18:	00082c0c 	andi	zero,zero,8368
   82a1c:	00082c0c 	andi	zero,zero,8368
   82a20:	00082c0c 	andi	zero,zero,8368
   82a24:	00082c0c 	andi	zero,zero,8368
   82a28:	00082c0c 	andi	zero,zero,8368
   82a2c:	00082bb0 	cmpltui	zero,zero,8366
   82a30:	00082bd0 	cmplti	zero,zero,8367
   82a34:	00082bf0 	cmpltui	zero,zero,8367
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
   82a38:	e0bff317 	ldw	r2,-52(fp)
   82a3c:	10c00717 	ldw	r3,28(r2)
   82a40:	e0bff317 	ldw	r2,-52(fp)
   82a44:	1885883a 	add	r2,r3,r2
   82a48:	10801704 	addi	r2,r2,92
   82a4c:	10000085 	stb	zero,2(r2)
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
   82a50:	e0bff817 	ldw	r2,-32(fp)
   82a54:	10800084 	addi	r2,r2,2
   82a58:	10800003 	ldbu	r2,0(r2)
   82a5c:	10803fcc 	andi	r2,r2,255
   82a60:	1080100c 	andi	r2,r2,64
   82a64:	1006c03a 	cmpne	r3,r2,zero
   82a68:	e0bff317 	ldw	r2,-52(fp)
   82a6c:	10c0ea15 	stw	r3,936(r2)
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
   82a70:	e0bff817 	ldw	r2,-32(fp)
   82a74:	10800084 	addi	r2,r2,2
   82a78:	10800003 	ldbu	r2,0(r2)
   82a7c:	10803fcc 	andi	r2,r2,255
   82a80:	1004d13a 	srli	r2,r2,4
   82a84:	10803fcc 	andi	r2,r2,255
   82a88:	10c000cc 	andi	r3,r2,3
   82a8c:	e0bff317 	ldw	r2,-52(fp)
   82a90:	10c0eb15 	stw	r3,940(r2)
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
   82a94:	e0bff817 	ldw	r2,-32(fp)
   82a98:	10800084 	addi	r2,r2,2
   82a9c:	10800003 	ldbu	r2,0(r2)
   82aa0:	10803fcc 	andi	r2,r2,255
   82aa4:	1004d0ba 	srli	r2,r2,2
   82aa8:	10803fcc 	andi	r2,r2,255
   82aac:	10c000cc 	andi	r3,r2,3
   82ab0:	e0bff317 	ldw	r2,-52(fp)
   82ab4:	10c0ec15 	stw	r3,944(r2)
				cea->db_vcdb.ce_scan_behavior = (int)(c[2] & 0x03);
   82ab8:	e0bff817 	ldw	r2,-32(fp)
   82abc:	10800084 	addi	r2,r2,2
   82ac0:	10800003 	ldbu	r2,0(r2)
   82ac4:	10803fcc 	andi	r2,r2,255
   82ac8:	10c000cc 	andi	r3,r2,3
   82acc:	e0bff317 	ldw	r2,-52(fp)
   82ad0:	10c0ed15 	stw	r3,948(r2)
				break;
   82ad4:	00004d06 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_VIDEO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VENDOR;
   82ad8:	e0bff317 	ldw	r2,-52(fp)
   82adc:	10c00717 	ldw	r3,28(r2)
   82ae0:	e0bff317 	ldw	r2,-52(fp)
   82ae4:	1885883a 	add	r2,r3,r2
   82ae8:	10c01704 	addi	r3,r2,92
   82aec:	00800044 	movi	r2,1
   82af0:	18800085 	stb	r2,2(r3)
				break;
   82af4:	00004506 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_VIDEO_DDI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_DDI;
   82af8:	e0bff317 	ldw	r2,-52(fp)
   82afc:	10c00717 	ldw	r3,28(r2)
   82b00:	e0bff317 	ldw	r2,-52(fp)
   82b04:	1885883a 	add	r2,r3,r2
   82b08:	10c01704 	addi	r3,r2,92
   82b0c:	00800084 	movi	r2,2
   82b10:	18800085 	stb	r2,2(r3)
				break;
   82b14:	00003d06 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_VIDEO_VESA:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VESA;
   82b18:	e0bff317 	ldw	r2,-52(fp)
   82b1c:	10c00717 	ldw	r3,28(r2)
   82b20:	e0bff317 	ldw	r2,-52(fp)
   82b24:	1885883a 	add	r2,r3,r2
   82b28:	10c01704 	addi	r3,r2,92
   82b2c:	008000c4 	movi	r2,3
   82b30:	18800085 	stb	r2,2(r3)
				break;
   82b34:	00003506 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_VIDEO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
   82b38:	e0bff317 	ldw	r2,-52(fp)
   82b3c:	10c00717 	ldw	r3,28(r2)
   82b40:	e0bff317 	ldw	r2,-52(fp)
   82b44:	1885883a 	add	r2,r3,r2
   82b48:	10c01704 	addi	r3,r2,92
   82b4c:	00800104 	movi	r2,4
   82b50:	18800085 	stb	r2,2(r3)
				break;
   82b54:	00002d06 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
   82b58:	e0bff317 	ldw	r2,-52(fp)
   82b5c:	10c00717 	ldw	r3,28(r2)
   82b60:	e0bff317 	ldw	r2,-52(fp)
   82b64:	1885883a 	add	r2,r3,r2
   82b68:	10c01704 	addi	r3,r2,92
   82b6c:	00800144 	movi	r2,5
   82b70:	18800085 	stb	r2,2(r3)
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   82b74:	e0bff817 	ldw	r2,-32(fp)
   82b78:	10800084 	addi	r2,r2,2
   82b7c:	10800003 	ldbu	r2,0(r2)
   82b80:	10803fcc 	andi	r2,r2,255
   82b84:	10c000cc 	andi	r3,r2,3
   82b88:	e0bff317 	ldw	r2,-52(fp)
   82b8c:	10c0e815 	stw	r3,928(r2)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   82b90:	e0bff817 	ldw	r2,-32(fp)
   82b94:	108000c4 	addi	r2,r2,3
   82b98:	10800003 	ldbu	r2,0(r2)
   82b9c:	10803fcc 	andi	r2,r2,255
   82ba0:	10c001cc 	andi	r3,r2,7
   82ba4:	e0bff317 	ldw	r2,-52(fp)
   82ba8:	10c0e915 	stw	r3,932(r2)
				break;
   82bac:	00001706 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_AUDIO_MISC:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_MISC;
   82bb0:	e0bff317 	ldw	r2,-52(fp)
   82bb4:	10c00717 	ldw	r3,28(r2)
   82bb8:	e0bff317 	ldw	r2,-52(fp)
   82bbc:	1885883a 	add	r2,r3,r2
   82bc0:	10c01704 	addi	r3,r2,92
   82bc4:	00800404 	movi	r2,16
   82bc8:	18800085 	stb	r2,2(r3)
				break;
   82bcc:	00000f06 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_AUDIO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_VENDOR;
   82bd0:	e0bff317 	ldw	r2,-52(fp)
   82bd4:	10c00717 	ldw	r3,28(r2)
   82bd8:	e0bff317 	ldw	r2,-52(fp)
   82bdc:	1885883a 	add	r2,r3,r2
   82be0:	10c01704 	addi	r3,r2,92
   82be4:	00800444 	movi	r2,17
   82be8:	18800085 	stb	r2,2(r3)
				break;
   82bec:	00000706 	br	82c0c <edid_decode_cea+0xfd0>
			case CEA_DBE_AUDIO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_HDMI;
   82bf0:	e0bff317 	ldw	r2,-52(fp)
   82bf4:	10c00717 	ldw	r3,28(r2)
   82bf8:	e0bff317 	ldw	r2,-52(fp)
   82bfc:	1885883a 	add	r2,r3,r2
   82c00:	10c01704 	addi	r3,r2,92
   82c04:	00800484 	movi	r2,18
   82c08:	18800085 	stb	r2,2(r3)
				break;
			}

			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_EXTENDED;
   82c0c:	e0bff317 	ldw	r2,-52(fp)
   82c10:	11000717 	ldw	r4,28(r2)
   82c14:	e0bff317 	ldw	r2,-52(fp)
   82c18:	2085883a 	add	r2,r4,r2
   82c1c:	10c00804 	addi	r3,r2,32
   82c20:	008001c4 	movi	r2,7
   82c24:	18800005 	stb	r2,0(r3)
   82c28:	20c00044 	addi	r3,r4,1
   82c2c:	e0bff317 	ldw	r2,-52(fp)
   82c30:	10c00715 	stw	r3,28(r2)

			c += (*c & 0x1f) + 1;
   82c34:	e0bff817 	ldw	r2,-32(fp)
   82c38:	10800003 	ldbu	r2,0(r2)
   82c3c:	10803fcc 	andi	r2,r2,255
   82c40:	108007cc 	andi	r2,r2,31
   82c44:	1007883a 	mov	r3,r2
   82c48:	e0bff817 	ldw	r2,-32(fp)
   82c4c:	1885883a 	add	r2,r3,r2
   82c50:	10800044 	addi	r2,r2,1
   82c54:	e0bff815 	stw	r2,-32(fp)
			break;
   82c58:	00000206 	br	82c64 <edid_decode_cea+0x1028>

		default:
			c = dtd;
   82c5c:	e0bff617 	ldw	r2,-40(fp)
   82c60:	e0bff815 	stw	r2,-32(fp)

	// data block collection
	c = &ext_bin[4];

	cea->nr_dbcs = 0;
	while (c < dtd) {
   82c64:	e0fff817 	ldw	r3,-32(fp)
   82c68:	e0bff617 	ldw	r2,-40(fp)
   82c6c:	18bc6136 	bltu	r3,r2,81df4 <edid_decode_cea+0x1b8>
			break;
		}
	}

	// detail timing descriptor
	if (dtd == 0)
   82c70:	e0bff617 	ldw	r2,-40(fp)
   82c74:	1004c03a 	cmpne	r2,r2,zero
   82c78:	1000021e 	bne	r2,zero,82c84 <edid_decode_cea+0x1048>
		return 0;
   82c7c:	e03fff15 	stw	zero,-4(fp)
   82c80:	00022d06 	br	83538 <edid_decode_cea+0x18fc>

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   82c84:	e03ff515 	stw	zero,-44(fp)
   82c88:	00022606 	br	83524 <edid_decode_cea+0x18e8>
		c = &dtd[18 * i];
   82c8c:	e0bff517 	ldw	r2,-44(fp)
   82c90:	108004a4 	muli	r2,r2,18
   82c94:	1007883a 	mov	r3,r2
   82c98:	e0bff617 	ldw	r2,-40(fp)
   82c9c:	1885883a 	add	r2,r3,r2
   82ca0:	e0bff815 	stw	r2,-32(fp)

        cea->detailed_timing[i].pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
   82ca4:	e17ff517 	ldw	r5,-44(fp)
   82ca8:	e0bff817 	ldw	r2,-32(fp)
   82cac:	10800044 	addi	r2,r2,1
   82cb0:	10800003 	ldbu	r2,0(r2)
   82cb4:	10803fcc 	andi	r2,r2,255
   82cb8:	1006923a 	slli	r3,r2,8
   82cbc:	e0bff817 	ldw	r2,-32(fp)
   82cc0:	10800003 	ldbu	r2,0(r2)
   82cc4:	10803fcc 	andi	r2,r2,255
   82cc8:	1884b03a 	or	r2,r3,r2
   82ccc:	1109c424 	muli	r4,r2,10000
   82cd0:	e0fff317 	ldw	r3,-52(fp)
   82cd4:	280491ba 	slli	r2,r5,6
   82cd8:	10c5883a 	add	r2,r2,r3
   82cdc:	1080ee04 	addi	r2,r2,952
   82ce0:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
   82ce4:	e17ff517 	ldw	r5,-44(fp)
   82ce8:	e0bff817 	ldw	r2,-32(fp)
   82cec:	10800104 	addi	r2,r2,4
   82cf0:	10800003 	ldbu	r2,0(r2)
   82cf4:	10803fcc 	andi	r2,r2,255
   82cf8:	1004913a 	slli	r2,r2,4
   82cfc:	10c3c00c 	andi	r3,r2,3840
   82d00:	e0bff817 	ldw	r2,-32(fp)
   82d04:	10800084 	addi	r2,r2,2
   82d08:	10800003 	ldbu	r2,0(r2)
   82d0c:	10803fcc 	andi	r2,r2,255
   82d10:	1888b03a 	or	r4,r3,r2
   82d14:	e0fff317 	ldw	r3,-52(fp)
   82d18:	280491ba 	slli	r2,r5,6
   82d1c:	10c5883a 	add	r2,r2,r3
   82d20:	1080ef04 	addi	r2,r2,956
   82d24:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
   82d28:	e17ff517 	ldw	r5,-44(fp)
   82d2c:	e0bff817 	ldw	r2,-32(fp)
   82d30:	108001c4 	addi	r2,r2,7
   82d34:	10800003 	ldbu	r2,0(r2)
   82d38:	10803fcc 	andi	r2,r2,255
   82d3c:	1004913a 	slli	r2,r2,4
   82d40:	10c3c00c 	andi	r3,r2,3840
   82d44:	e0bff817 	ldw	r2,-32(fp)
   82d48:	10800144 	addi	r2,r2,5
   82d4c:	10800003 	ldbu	r2,0(r2)
   82d50:	10803fcc 	andi	r2,r2,255
   82d54:	1888b03a 	or	r4,r3,r2
   82d58:	e0fff317 	ldw	r3,-52(fp)
   82d5c:	280491ba 	slli	r2,r5,6
   82d60:	10c5883a 	add	r2,r2,r3
   82d64:	1080f004 	addi	r2,r2,960
   82d68:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
   82d6c:	e17ff517 	ldw	r5,-44(fp)
   82d70:	e0bff817 	ldw	r2,-32(fp)
   82d74:	10800104 	addi	r2,r2,4
   82d78:	10800003 	ldbu	r2,0(r2)
   82d7c:	10803fcc 	andi	r2,r2,255
   82d80:	1004923a 	slli	r2,r2,8
   82d84:	10c3c00c 	andi	r3,r2,3840
   82d88:	e0bff817 	ldw	r2,-32(fp)
   82d8c:	108000c4 	addi	r2,r2,3
   82d90:	10800003 	ldbu	r2,0(r2)
   82d94:	10803fcc 	andi	r2,r2,255
   82d98:	1888b03a 	or	r4,r3,r2
   82d9c:	e0fff317 	ldw	r3,-52(fp)
   82da0:	280491ba 	slli	r2,r5,6
   82da4:	10c5883a 	add	r2,r2,r3
   82da8:	1080f104 	addi	r2,r2,964
   82dac:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
   82db0:	e17ff517 	ldw	r5,-44(fp)
   82db4:	e0bff817 	ldw	r2,-32(fp)
   82db8:	108001c4 	addi	r2,r2,7
   82dbc:	10800003 	ldbu	r2,0(r2)
   82dc0:	10803fcc 	andi	r2,r2,255
   82dc4:	1004923a 	slli	r2,r2,8
   82dc8:	10c3c00c 	andi	r3,r2,3840
   82dcc:	e0bff817 	ldw	r2,-32(fp)
   82dd0:	10800184 	addi	r2,r2,6
   82dd4:	10800003 	ldbu	r2,0(r2)
   82dd8:	10803fcc 	andi	r2,r2,255
   82ddc:	1888b03a 	or	r4,r3,r2
   82de0:	e0fff317 	ldw	r3,-52(fp)
   82de4:	280491ba 	slli	r2,r5,6
   82de8:	10c5883a 	add	r2,r2,r3
   82dec:	1080f204 	addi	r2,r2,968
   82df0:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
   82df4:	e17ff517 	ldw	r5,-44(fp)
   82df8:	e0bff817 	ldw	r2,-32(fp)
   82dfc:	108002c4 	addi	r2,r2,11
   82e00:	10800003 	ldbu	r2,0(r2)
   82e04:	10803fcc 	andi	r2,r2,255
   82e08:	1085883a 	add	r2,r2,r2
   82e0c:	1085883a 	add	r2,r2,r2
   82e10:	10c0c00c 	andi	r3,r2,768
   82e14:	e0bff817 	ldw	r2,-32(fp)
   82e18:	10800204 	addi	r2,r2,8
   82e1c:	10800003 	ldbu	r2,0(r2)
   82e20:	10803fcc 	andi	r2,r2,255
   82e24:	1888b03a 	or	r4,r3,r2
   82e28:	e0fff317 	ldw	r3,-52(fp)
   82e2c:	280491ba 	slli	r2,r5,6
   82e30:	10c5883a 	add	r2,r2,r3
   82e34:	1080f304 	addi	r2,r2,972
   82e38:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
   82e3c:	e17ff517 	ldw	r5,-44(fp)
   82e40:	e0bff817 	ldw	r2,-32(fp)
   82e44:	108002c4 	addi	r2,r2,11
   82e48:	10800003 	ldbu	r2,0(r2)
   82e4c:	10803fcc 	andi	r2,r2,255
   82e50:	1085883a 	add	r2,r2,r2
   82e54:	1085883a 	add	r2,r2,r2
   82e58:	10c00c0c 	andi	r3,r2,48
   82e5c:	e0bff817 	ldw	r2,-32(fp)
   82e60:	10800284 	addi	r2,r2,10
   82e64:	10800003 	ldbu	r2,0(r2)
   82e68:	10803fcc 	andi	r2,r2,255
   82e6c:	1004d13a 	srli	r2,r2,4
   82e70:	10803fcc 	andi	r2,r2,255
   82e74:	1888b03a 	or	r4,r3,r2
   82e78:	e0fff317 	ldw	r3,-52(fp)
   82e7c:	280491ba 	slli	r2,r5,6
   82e80:	10c5883a 	add	r2,r2,r3
   82e84:	1080f404 	addi	r2,r2,976
   82e88:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
   82e8c:	e17ff517 	ldw	r5,-44(fp)
   82e90:	e0bff817 	ldw	r2,-32(fp)
   82e94:	108002c4 	addi	r2,r2,11
   82e98:	10800003 	ldbu	r2,0(r2)
   82e9c:	10803fcc 	andi	r2,r2,255
   82ea0:	1004913a 	slli	r2,r2,4
   82ea4:	10c0c00c 	andi	r3,r2,768
   82ea8:	e0bff817 	ldw	r2,-32(fp)
   82eac:	10800244 	addi	r2,r2,9
   82eb0:	10800003 	ldbu	r2,0(r2)
   82eb4:	10803fcc 	andi	r2,r2,255
   82eb8:	1888b03a 	or	r4,r3,r2
   82ebc:	e0fff317 	ldw	r3,-52(fp)
   82ec0:	280491ba 	slli	r2,r5,6
   82ec4:	10c5883a 	add	r2,r2,r3
   82ec8:	1080f504 	addi	r2,r2,980
   82ecc:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
   82ed0:	e17ff517 	ldw	r5,-44(fp)
   82ed4:	e0bff817 	ldw	r2,-32(fp)
   82ed8:	108002c4 	addi	r2,r2,11
   82edc:	10800003 	ldbu	r2,0(r2)
   82ee0:	10803fcc 	andi	r2,r2,255
   82ee4:	1004913a 	slli	r2,r2,4
   82ee8:	10c00c0c 	andi	r3,r2,48
   82eec:	e0bff817 	ldw	r2,-32(fp)
   82ef0:	10800284 	addi	r2,r2,10
   82ef4:	10800003 	ldbu	r2,0(r2)
   82ef8:	10803fcc 	andi	r2,r2,255
   82efc:	108003cc 	andi	r2,r2,15
   82f00:	1888b03a 	or	r4,r3,r2
   82f04:	e0fff317 	ldw	r3,-52(fp)
   82f08:	280491ba 	slli	r2,r5,6
   82f0c:	10c5883a 	add	r2,r2,r3
   82f10:	1080f604 	addi	r2,r2,984
   82f14:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
   82f18:	e17ff517 	ldw	r5,-44(fp)
   82f1c:	e0bff817 	ldw	r2,-32(fp)
   82f20:	10800384 	addi	r2,r2,14
   82f24:	10800003 	ldbu	r2,0(r2)
   82f28:	10803fcc 	andi	r2,r2,255
   82f2c:	1004913a 	slli	r2,r2,4
   82f30:	10c3c00c 	andi	r3,r2,3840
   82f34:	e0bff817 	ldw	r2,-32(fp)
   82f38:	10800304 	addi	r2,r2,12
   82f3c:	10800003 	ldbu	r2,0(r2)
   82f40:	10803fcc 	andi	r2,r2,255
   82f44:	1888b03a 	or	r4,r3,r2
   82f48:	e0fff317 	ldw	r3,-52(fp)
   82f4c:	280491ba 	slli	r2,r5,6
   82f50:	10c5883a 	add	r2,r2,r3
   82f54:	1080f704 	addi	r2,r2,988
   82f58:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
   82f5c:	e17ff517 	ldw	r5,-44(fp)
   82f60:	e0bff817 	ldw	r2,-32(fp)
   82f64:	10800384 	addi	r2,r2,14
   82f68:	10800003 	ldbu	r2,0(r2)
   82f6c:	10803fcc 	andi	r2,r2,255
   82f70:	1004923a 	slli	r2,r2,8
   82f74:	10c3c00c 	andi	r3,r2,3840
   82f78:	e0bff817 	ldw	r2,-32(fp)
   82f7c:	10800344 	addi	r2,r2,13
   82f80:	10800003 	ldbu	r2,0(r2)
   82f84:	10803fcc 	andi	r2,r2,255
   82f88:	1888b03a 	or	r4,r3,r2
   82f8c:	e0fff317 	ldw	r3,-52(fp)
   82f90:	280491ba 	slli	r2,r5,6
   82f94:	10c5883a 	add	r2,r2,r3
   82f98:	1080f804 	addi	r2,r2,992
   82f9c:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].border_lr = (int)c[15];
   82fa0:	e17ff517 	ldw	r5,-44(fp)
   82fa4:	e0bff817 	ldw	r2,-32(fp)
   82fa8:	108003c4 	addi	r2,r2,15
   82fac:	10800003 	ldbu	r2,0(r2)
   82fb0:	11003fcc 	andi	r4,r2,255
   82fb4:	e0fff317 	ldw	r3,-52(fp)
   82fb8:	280491ba 	slli	r2,r5,6
   82fbc:	10c5883a 	add	r2,r2,r3
   82fc0:	1080f904 	addi	r2,r2,996
   82fc4:	11000015 	stw	r4,0(r2)
        cea->detailed_timing[i].border_tb = (int)c[16];
   82fc8:	e17ff517 	ldw	r5,-44(fp)
   82fcc:	e0bff817 	ldw	r2,-32(fp)
   82fd0:	10800404 	addi	r2,r2,16
   82fd4:	10800003 	ldbu	r2,0(r2)
   82fd8:	11003fcc 	andi	r4,r2,255
   82fdc:	e0fff317 	ldw	r3,-52(fp)
   82fe0:	280491ba 	slli	r2,r5,6
   82fe4:	10c5883a 	add	r2,r2,r3
   82fe8:	1080fa04 	addi	r2,r2,1000
   82fec:	11000015 	stw	r4,0(r2)

        cea->detailed_timing[i].interlaced = (c[17] & 0x80) ? 1 : 0;
   82ff0:	e17ff517 	ldw	r5,-44(fp)
   82ff4:	e0bff817 	ldw	r2,-32(fp)
   82ff8:	10800444 	addi	r2,r2,17
   82ffc:	10800003 	ldbu	r2,0(r2)
   83000:	10803fcc 	andi	r2,r2,255
   83004:	1080201c 	xori	r2,r2,128
   83008:	10bfe004 	addi	r2,r2,-128
   8300c:	1008d7fa 	srli	r4,r2,31
   83010:	e0fff317 	ldw	r3,-52(fp)
   83014:	280491ba 	slli	r2,r5,6
   83018:	10c5883a 	add	r2,r2,r3
   8301c:	1080fb04 	addi	r2,r2,1004
   83020:	11000015 	stw	r4,0(r2)

        cea->detailed_timing[i].stereo = STEREO_NONE;
   83024:	e0bff517 	ldw	r2,-44(fp)
   83028:	e0fff317 	ldw	r3,-52(fp)
   8302c:	100491ba 	slli	r2,r2,6
   83030:	10c5883a 	add	r2,r2,r3
   83034:	1080fc04 	addi	r2,r2,1008
   83038:	10000015 	stw	zero,0(r2)
		if ((c[17] & 0x61) == 0x20)
   8303c:	e0bff817 	ldw	r2,-32(fp)
   83040:	10800444 	addi	r2,r2,17
   83044:	10800003 	ldbu	r2,0(r2)
   83048:	10803fcc 	andi	r2,r2,255
   8304c:	1080184c 	andi	r2,r2,97
   83050:	10800818 	cmpnei	r2,r2,32
   83054:	10000d1e 	bne	r2,zero,8308c <edid_decode_cea+0x1450>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
   83058:	e17ff517 	ldw	r5,-44(fp)
   8305c:	e0bff517 	ldw	r2,-44(fp)
   83060:	e0fff317 	ldw	r3,-52(fp)
   83064:	100491ba 	slli	r2,r2,6
   83068:	10c5883a 	add	r2,r2,r3
   8306c:	1080fc04 	addi	r2,r2,1008
   83070:	10800017 	ldw	r2,0(r2)
   83074:	11000094 	ori	r4,r2,2
   83078:	e0fff317 	ldw	r3,-52(fp)
   8307c:	280491ba 	slli	r2,r5,6
   83080:	10c5883a 	add	r2,r2,r3
   83084:	1080fc04 	addi	r2,r2,1008
   83088:	11000015 	stw	r4,0(r2)
		if ((c[17] & 0x61) == 0x40)
   8308c:	e0bff817 	ldw	r2,-32(fp)
   83090:	10800444 	addi	r2,r2,17
   83094:	10800003 	ldbu	r2,0(r2)
   83098:	10803fcc 	andi	r2,r2,255
   8309c:	1080184c 	andi	r2,r2,97
   830a0:	10801018 	cmpnei	r2,r2,64
   830a4:	10000d1e 	bne	r2,zero,830dc <edid_decode_cea+0x14a0>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
   830a8:	e17ff517 	ldw	r5,-44(fp)
   830ac:	e0bff517 	ldw	r2,-44(fp)
   830b0:	e0fff317 	ldw	r3,-52(fp)
   830b4:	100491ba 	slli	r2,r2,6
   830b8:	10c5883a 	add	r2,r2,r3
   830bc:	1080fc04 	addi	r2,r2,1008
   830c0:	10800017 	ldw	r2,0(r2)
   830c4:	11000114 	ori	r4,r2,4
   830c8:	e0fff317 	ldw	r3,-52(fp)
   830cc:	280491ba 	slli	r2,r5,6
   830d0:	10c5883a 	add	r2,r2,r3
   830d4:	1080fc04 	addi	r2,r2,1008
   830d8:	11000015 	stw	r4,0(r2)
		if ((c[17] & 0x61) == 0x21)
   830dc:	e0bff817 	ldw	r2,-32(fp)
   830e0:	10800444 	addi	r2,r2,17
   830e4:	10800003 	ldbu	r2,0(r2)
   830e8:	10803fcc 	andi	r2,r2,255
   830ec:	1080184c 	andi	r2,r2,97
   830f0:	10800858 	cmpnei	r2,r2,33
   830f4:	10000d1e 	bne	r2,zero,8312c <edid_decode_cea+0x14f0>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
   830f8:	e17ff517 	ldw	r5,-44(fp)
   830fc:	e0bff517 	ldw	r2,-44(fp)
   83100:	e0fff317 	ldw	r3,-52(fp)
   83104:	100491ba 	slli	r2,r2,6
   83108:	10c5883a 	add	r2,r2,r3
   8310c:	1080fc04 	addi	r2,r2,1008
   83110:	10800017 	ldw	r2,0(r2)
   83114:	11000214 	ori	r4,r2,8
   83118:	e0fff317 	ldw	r3,-52(fp)
   8311c:	280491ba 	slli	r2,r5,6
   83120:	10c5883a 	add	r2,r2,r3
   83124:	1080fc04 	addi	r2,r2,1008
   83128:	11000015 	stw	r4,0(r2)
		if ((c[17] & 0x61) == 0x41)
   8312c:	e0bff817 	ldw	r2,-32(fp)
   83130:	10800444 	addi	r2,r2,17
   83134:	10800003 	ldbu	r2,0(r2)
   83138:	10803fcc 	andi	r2,r2,255
   8313c:	1080184c 	andi	r2,r2,97
   83140:	10801058 	cmpnei	r2,r2,65
   83144:	10000d1e 	bne	r2,zero,8317c <edid_decode_cea+0x1540>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
   83148:	e17ff517 	ldw	r5,-44(fp)
   8314c:	e0bff517 	ldw	r2,-44(fp)
   83150:	e0fff317 	ldw	r3,-52(fp)
   83154:	100491ba 	slli	r2,r2,6
   83158:	10c5883a 	add	r2,r2,r3
   8315c:	1080fc04 	addi	r2,r2,1008
   83160:	10800017 	ldw	r2,0(r2)
   83164:	11000414 	ori	r4,r2,16
   83168:	e0fff317 	ldw	r3,-52(fp)
   8316c:	280491ba 	slli	r2,r5,6
   83170:	10c5883a 	add	r2,r2,r3
   83174:	1080fc04 	addi	r2,r2,1008
   83178:	11000015 	stw	r4,0(r2)
		if ((c[17] & 0x61) == 0x60)
   8317c:	e0bff817 	ldw	r2,-32(fp)
   83180:	10800444 	addi	r2,r2,17
   83184:	10800003 	ldbu	r2,0(r2)
   83188:	10803fcc 	andi	r2,r2,255
   8318c:	1080184c 	andi	r2,r2,97
   83190:	10801818 	cmpnei	r2,r2,96
   83194:	10000d1e 	bne	r2,zero,831cc <edid_decode_cea+0x1590>
			cea->detailed_timing[i].stereo |= STEREO_4WAY_INTERLEAVE;
   83198:	e17ff517 	ldw	r5,-44(fp)
   8319c:	e0bff517 	ldw	r2,-44(fp)
   831a0:	e0fff317 	ldw	r3,-52(fp)
   831a4:	100491ba 	slli	r2,r2,6
   831a8:	10c5883a 	add	r2,r2,r3
   831ac:	1080fc04 	addi	r2,r2,1008
   831b0:	10800017 	ldw	r2,0(r2)
   831b4:	11000814 	ori	r4,r2,32
   831b8:	e0fff317 	ldw	r3,-52(fp)
   831bc:	280491ba 	slli	r2,r5,6
   831c0:	10c5883a 	add	r2,r2,r3
   831c4:	1080fc04 	addi	r2,r2,1008
   831c8:	11000015 	stw	r4,0(r2)
		if ((c[17] & 0x61) == 0x61)
   831cc:	e0bff817 	ldw	r2,-32(fp)
   831d0:	10800444 	addi	r2,r2,17
   831d4:	10800003 	ldbu	r2,0(r2)
   831d8:	10803fcc 	andi	r2,r2,255
   831dc:	1080184c 	andi	r2,r2,97
   831e0:	10801858 	cmpnei	r2,r2,97
   831e4:	10000d1e 	bne	r2,zero,8321c <edid_decode_cea+0x15e0>
			cea->detailed_timing[i].stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
   831e8:	e17ff517 	ldw	r5,-44(fp)
   831ec:	e0bff517 	ldw	r2,-44(fp)
   831f0:	e0fff317 	ldw	r3,-52(fp)
   831f4:	100491ba 	slli	r2,r2,6
   831f8:	10c5883a 	add	r2,r2,r3
   831fc:	1080fc04 	addi	r2,r2,1008
   83200:	10800017 	ldw	r2,0(r2)
   83204:	11001014 	ori	r4,r2,64
   83208:	e0fff317 	ldw	r3,-52(fp)
   8320c:	280491ba 	slli	r2,r5,6
   83210:	10c5883a 	add	r2,r2,r3
   83214:	1080fc04 	addi	r2,r2,1008
   83218:	11000015 	stw	r4,0(r2)

		cea->detailed_timing[i].sync = 0;
   8321c:	e0bff517 	ldw	r2,-44(fp)
   83220:	e0fff317 	ldw	r3,-52(fp)
   83224:	100491ba 	slli	r2,r2,6
   83228:	10c5883a 	add	r2,r2,r3
   8322c:	1080fd04 	addi	r2,r2,1012
   83230:	10000015 	stw	zero,0(r2)
        if (c[17] & 0x10) {
   83234:	e0bff817 	ldw	r2,-32(fp)
   83238:	10800444 	addi	r2,r2,17
   8323c:	10800003 	ldbu	r2,0(r2)
   83240:	10803fcc 	andi	r2,r2,255
   83244:	1080040c 	andi	r2,r2,16
   83248:	1005003a 	cmpeq	r2,r2,zero
   8324c:	1000591e 	bne	r2,zero,833b4 <edid_decode_cea+0x1778>
            if (c[17] & 0x08) {
   83250:	e0bff817 	ldw	r2,-32(fp)
   83254:	10800444 	addi	r2,r2,17
   83258:	10800003 	ldbu	r2,0(r2)
   8325c:	10803fcc 	andi	r2,r2,255
   83260:	1080020c 	andi	r2,r2,8
   83264:	1005003a 	cmpeq	r2,r2,zero
   83268:	1000301e 	bne	r2,zero,8332c <edid_decode_cea+0x16f0>
            	cea->detailed_timing[i].sync |= D_SEPERATE_SYNC;
   8326c:	e17ff517 	ldw	r5,-44(fp)
   83270:	e0bff517 	ldw	r2,-44(fp)
   83274:	e0fff317 	ldw	r3,-52(fp)
   83278:	100491ba 	slli	r2,r2,6
   8327c:	10c5883a 	add	r2,r2,r3
   83280:	1080fd04 	addi	r2,r2,1012
   83284:	10800017 	ldw	r2,0(r2)
   83288:	11002014 	ori	r4,r2,128
   8328c:	e0fff317 	ldw	r3,-52(fp)
   83290:	280491ba 	slli	r2,r5,6
   83294:	10c5883a 	add	r2,r2,r3
   83298:	1080fd04 	addi	r2,r2,1012
   8329c:	11000015 	stw	r4,0(r2)
            	if (c[17] & 0x04)
   832a0:	e0bff817 	ldw	r2,-32(fp)
   832a4:	10800444 	addi	r2,r2,17
   832a8:	10800003 	ldbu	r2,0(r2)
   832ac:	10803fcc 	andi	r2,r2,255
   832b0:	1080010c 	andi	r2,r2,4
   832b4:	1005003a 	cmpeq	r2,r2,zero
   832b8:	10000e1e 	bne	r2,zero,832f4 <edid_decode_cea+0x16b8>
                	cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_P;
   832bc:	e17ff517 	ldw	r5,-44(fp)
   832c0:	e0bff517 	ldw	r2,-44(fp)
   832c4:	e0fff317 	ldw	r3,-52(fp)
   832c8:	100491ba 	slli	r2,r2,6
   832cc:	10c5883a 	add	r2,r2,r3
   832d0:	1080fd04 	addi	r2,r2,1012
   832d4:	10800017 	ldw	r2,0(r2)
   832d8:	11008014 	ori	r4,r2,512
   832dc:	e0fff317 	ldw	r3,-52(fp)
   832e0:	280491ba 	slli	r2,r5,6
   832e4:	10c5883a 	add	r2,r2,r3
   832e8:	1080fd04 	addi	r2,r2,1012
   832ec:	11000015 	stw	r4,0(r2)
   832f0:	00008906 	br	83518 <edid_decode_cea+0x18dc>
            	else
            		cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_N;
   832f4:	e17ff517 	ldw	r5,-44(fp)
   832f8:	e0bff517 	ldw	r2,-44(fp)
   832fc:	e0fff317 	ldw	r3,-52(fp)
   83300:	100491ba 	slli	r2,r2,6
   83304:	10c5883a 	add	r2,r2,r3
   83308:	1080fd04 	addi	r2,r2,1012
   8330c:	10800017 	ldw	r2,0(r2)
   83310:	11004014 	ori	r4,r2,256
   83314:	e0fff317 	ldw	r3,-52(fp)
   83318:	280491ba 	slli	r2,r5,6
   8331c:	10c5883a 	add	r2,r2,r3
   83320:	1080fd04 	addi	r2,r2,1012
   83324:	11000015 	stw	r4,0(r2)
   83328:	00007b06 	br	83518 <edid_decode_cea+0x18dc>
            } else {
            	cea->detailed_timing[i].sync |= D_COMPOSITE_SYNC;
   8332c:	e17ff517 	ldw	r5,-44(fp)
   83330:	e0bff517 	ldw	r2,-44(fp)
   83334:	e0fff317 	ldw	r3,-52(fp)
   83338:	100491ba 	slli	r2,r2,6
   8333c:	10c5883a 	add	r2,r2,r3
   83340:	1080fd04 	addi	r2,r2,1012
   83344:	10800017 	ldw	r2,0(r2)
   83348:	11000814 	ori	r4,r2,32
   8334c:	e0fff317 	ldw	r3,-52(fp)
   83350:	280491ba 	slli	r2,r5,6
   83354:	10c5883a 	add	r2,r2,r3
   83358:	1080fd04 	addi	r2,r2,1012
   8335c:	11000015 	stw	r4,0(r2)
            	if (c[17] & 0x04)
   83360:	e0bff817 	ldw	r2,-32(fp)
   83364:	10800444 	addi	r2,r2,17
   83368:	10800003 	ldbu	r2,0(r2)
   8336c:	10803fcc 	andi	r2,r2,255
   83370:	1080010c 	andi	r2,r2,4
   83374:	1005003a 	cmpeq	r2,r2,zero
   83378:	1000671e 	bne	r2,zero,83518 <edid_decode_cea+0x18dc>
                	cea->detailed_timing[i].sync |= D_COMPOSITE_SERRATION;
   8337c:	e17ff517 	ldw	r5,-44(fp)
   83380:	e0bff517 	ldw	r2,-44(fp)
   83384:	e0fff317 	ldw	r3,-52(fp)
   83388:	100491ba 	slli	r2,r2,6
   8338c:	10c5883a 	add	r2,r2,r3
   83390:	1080fd04 	addi	r2,r2,1012
   83394:	10800017 	ldw	r2,0(r2)
   83398:	11001014 	ori	r4,r2,64
   8339c:	e0fff317 	ldw	r3,-52(fp)
   833a0:	280491ba 	slli	r2,r5,6
   833a4:	10c5883a 	add	r2,r2,r3
   833a8:	1080fd04 	addi	r2,r2,1012
   833ac:	11000015 	stw	r4,0(r2)
   833b0:	00005906 	br	83518 <edid_decode_cea+0x18dc>
            }
        } else {
        	if (c[17] & 0x80) {
   833b4:	e0bff817 	ldw	r2,-32(fp)
   833b8:	10800444 	addi	r2,r2,17
   833bc:	10800003 	ldbu	r2,0(r2)
   833c0:	10803fcc 	andi	r2,r2,255
   833c4:	1080201c 	xori	r2,r2,128
   833c8:	10bfe004 	addi	r2,r2,-128
   833cc:	1004403a 	cmpge	r2,r2,zero
   833d0:	1000441e 	bne	r2,zero,834e4 <edid_decode_cea+0x18a8>
        		cea->detailed_timing[i].sync |= A_BIPOLAR_COMPOSITE_SYNC;
   833d4:	e17ff517 	ldw	r5,-44(fp)
   833d8:	e0bff517 	ldw	r2,-44(fp)
   833dc:	e0fff317 	ldw	r3,-52(fp)
   833e0:	100491ba 	slli	r2,r2,6
   833e4:	10c5883a 	add	r2,r2,r3
   833e8:	1080fd04 	addi	r2,r2,1012
   833ec:	10800017 	ldw	r2,0(r2)
   833f0:	11000094 	ori	r4,r2,2
   833f4:	e0fff317 	ldw	r3,-52(fp)
   833f8:	280491ba 	slli	r2,r5,6
   833fc:	10c5883a 	add	r2,r2,r3
   83400:	1080fd04 	addi	r2,r2,1012
   83404:	11000015 	stw	r4,0(r2)
        		if (c[17] & 0x40) {
   83408:	e0bff817 	ldw	r2,-32(fp)
   8340c:	10800444 	addi	r2,r2,17
   83410:	10800003 	ldbu	r2,0(r2)
   83414:	10803fcc 	andi	r2,r2,255
   83418:	1080100c 	andi	r2,r2,64
   8341c:	1005003a 	cmpeq	r2,r2,zero
   83420:	10003d1e 	bne	r2,zero,83518 <edid_decode_cea+0x18dc>
            		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION;
   83424:	e17ff517 	ldw	r5,-44(fp)
   83428:	e0bff517 	ldw	r2,-44(fp)
   8342c:	e0fff317 	ldw	r3,-52(fp)
   83430:	100491ba 	slli	r2,r2,6
   83434:	10c5883a 	add	r2,r2,r3
   83438:	1080fd04 	addi	r2,r2,1012
   8343c:	10800017 	ldw	r2,0(r2)
   83440:	11000114 	ori	r4,r2,4
   83444:	e0fff317 	ldw	r3,-52(fp)
   83448:	280491ba 	slli	r2,r5,6
   8344c:	10c5883a 	add	r2,r2,r3
   83450:	1080fd04 	addi	r2,r2,1012
   83454:	11000015 	stw	r4,0(r2)
            		if (c[17] & 0x20)
   83458:	e0bff817 	ldw	r2,-32(fp)
   8345c:	10800444 	addi	r2,r2,17
   83460:	10800003 	ldbu	r2,0(r2)
   83464:	10803fcc 	andi	r2,r2,255
   83468:	1080080c 	andi	r2,r2,32
   8346c:	1005003a 	cmpeq	r2,r2,zero
   83470:	10000e1e 	bne	r2,zero,834ac <edid_decode_cea+0x1870>
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
   83474:	e17ff517 	ldw	r5,-44(fp)
   83478:	e0bff517 	ldw	r2,-44(fp)
   8347c:	e0fff317 	ldw	r3,-52(fp)
   83480:	100491ba 	slli	r2,r2,6
   83484:	10c5883a 	add	r2,r2,r3
   83488:	1080fd04 	addi	r2,r2,1012
   8348c:	10800017 	ldw	r2,0(r2)
   83490:	11000414 	ori	r4,r2,16
   83494:	e0fff317 	ldw	r3,-52(fp)
   83498:	280491ba 	slli	r2,r5,6
   8349c:	10c5883a 	add	r2,r2,r3
   834a0:	1080fd04 	addi	r2,r2,1012
   834a4:	11000015 	stw	r4,0(r2)
   834a8:	00001b06 	br	83518 <edid_decode_cea+0x18dc>
            		else
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_G;
   834ac:	e17ff517 	ldw	r5,-44(fp)
   834b0:	e0bff517 	ldw	r2,-44(fp)
   834b4:	e0fff317 	ldw	r3,-52(fp)
   834b8:	100491ba 	slli	r2,r2,6
   834bc:	10c5883a 	add	r2,r2,r3
   834c0:	1080fd04 	addi	r2,r2,1012
   834c4:	10800017 	ldw	r2,0(r2)
   834c8:	11000214 	ori	r4,r2,8
   834cc:	e0fff317 	ldw	r3,-52(fp)
   834d0:	280491ba 	slli	r2,r5,6
   834d4:	10c5883a 	add	r2,r2,r3
   834d8:	1080fd04 	addi	r2,r2,1012
   834dc:	11000015 	stw	r4,0(r2)
   834e0:	00000d06 	br	83518 <edid_decode_cea+0x18dc>
        		}
        	} else {
        		cea->detailed_timing[i].sync |= A_COMPOSITE_SYNC;
   834e4:	e17ff517 	ldw	r5,-44(fp)
   834e8:	e0bff517 	ldw	r2,-44(fp)
   834ec:	e0fff317 	ldw	r3,-52(fp)
   834f0:	100491ba 	slli	r2,r2,6
   834f4:	10c5883a 	add	r2,r2,r3
   834f8:	1080fd04 	addi	r2,r2,1012
   834fc:	10800017 	ldw	r2,0(r2)
   83500:	11000054 	ori	r4,r2,1
   83504:	e0fff317 	ldw	r3,-52(fp)
   83508:	280491ba 	slli	r2,r5,6
   8350c:	10c5883a 	add	r2,r2,r3
   83510:	1080fd04 	addi	r2,r2,1012
   83514:	11000015 	stw	r4,0(r2)

	// detail timing descriptor
	if (dtd == 0)
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   83518:	e0bff517 	ldw	r2,-44(fp)
   8351c:	10800044 	addi	r2,r2,1
   83520:	e0bff515 	stw	r2,-44(fp)
   83524:	e0bff317 	ldw	r2,-52(fp)
   83528:	10c00617 	ldw	r3,24(r2)
   8352c:	e0bff517 	ldw	r2,-44(fp)
   83530:	10fdd616 	blt	r2,r3,82c8c <edid_decode_cea+0x1050>
        		cea->detailed_timing[i].sync |= A_COMPOSITE_SYNC;
        	}
        }
	}

	return 0;
   83534:	e03fff15 	stw	zero,-4(fp)
   83538:	e0bfff17 	ldw	r2,-4(fp)
}
   8353c:	e037883a 	mov	sp,fp
   83540:	dfc00117 	ldw	ra,4(sp)
   83544:	df000017 	ldw	fp,0(sp)
   83548:	dec00204 	addi	sp,sp,8
   8354c:	f800283a 	ret

00083550 <edid_print_cea>:

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
   83550:	deffcf04 	addi	sp,sp,-196
   83554:	de00012e 	bgeu	sp,et,8355c <edid_print_cea+0xc>
   83558:	003da0fa 	break	3
   8355c:	dfc03015 	stw	ra,192(sp)
   83560:	df002f15 	stw	fp,188(sp)
   83564:	df002f04 	addi	fp,sp,188
   83568:	e13fdb15 	stw	r4,-148(fp)
   8356c:	e17fdc15 	stw	r5,-144(fp)
	u8 *c, *dtd = 0;
   83570:	e03fd915 	stw	zero,-156(fp)
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
   83574:	e0bfdb17 	ldw	r2,-148(fp)
   83578:	10c60b04 	addi	r3,r2,6188
   8357c:	e0bfdc17 	ldw	r2,-144(fp)
   83580:	10816f24 	muli	r2,r2,1468
   83584:	1885883a 	add	r2,r3,r2
   83588:	e0bfd615 	stw	r2,-168(fp)
	struct edid_cea *cea = &ext_data->cea_ext;
   8358c:	e0bfd617 	ldw	r2,-168(fp)
   83590:	10800104 	addi	r2,r2,4
   83594:	e0bfd515 	stw	r2,-172(fp)

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
   83598:	e0bfd517 	ldw	r2,-172(fp)
   8359c:	11800017 	ldw	r6,0(r2)
   835a0:	010002b4 	movhi	r4,10
   835a4:	212e0204 	addi	r4,r4,-18424
   835a8:	e17fdc17 	ldw	r5,-144(fp)
   835ac:	008ee340 	call	8ee34 <printf>

	printf("  number of DBCs (data block collections)      : %d\n", cea->nr_dbcs);
   835b0:	e0bfd517 	ldw	r2,-172(fp)
   835b4:	11400717 	ldw	r5,28(r2)
   835b8:	010002b4 	movhi	r4,10
   835bc:	212e1204 	addi	r4,r4,-18360
   835c0:	008ee340 	call	8ee34 <printf>
	printf("  number of DTDs (detailed timing descriptors) : %d\n", cea->nr_dtd);
   835c4:	e0bfd517 	ldw	r2,-172(fp)
   835c8:	11400617 	ldw	r5,24(r2)
   835cc:	010002b4 	movhi	r4,10
   835d0:	212e2004 	addi	r4,r4,-18304
   835d4:	008ee340 	call	8ee34 <printf>
	printf("  offset to DTD                                : %d\n", cea->off_dtd);
   835d8:	e0bfd517 	ldw	r2,-172(fp)
   835dc:	11400517 	ldw	r5,20(r2)
   835e0:	010002b4 	movhi	r4,10
   835e4:	212e2e04 	addi	r4,r4,-18248
   835e8:	008ee340 	call	8ee34 <printf>
	printf("  monitor underscans IT formats                : %s\n", cea->flags.underscan ? "yes" : "no");
   835ec:	e0bfd517 	ldw	r2,-172(fp)
   835f0:	10800117 	ldw	r2,4(r2)
   835f4:	1005003a 	cmpeq	r2,r2,zero
   835f8:	1000041e 	bne	r2,zero,8360c <edid_print_cea+0xbc>
   835fc:	008002b4 	movhi	r2,10
   83600:	10ae3c04 	addi	r2,r2,-18192
   83604:	e0bfff15 	stw	r2,-4(fp)
   83608:	00000306 	br	83618 <edid_print_cea+0xc8>
   8360c:	00c002b4 	movhi	r3,10
   83610:	18ee3d04 	addi	r3,r3,-18188
   83614:	e0ffff15 	stw	r3,-4(fp)
   83618:	010002b4 	movhi	r4,10
   8361c:	212e3e04 	addi	r4,r4,-18184
   83620:	e17fff17 	ldw	r5,-4(fp)
   83624:	008ee340 	call	8ee34 <printf>
	printf("  supports audio                               : %s\n", cea->flags.audio ? "yes" : "no");
   83628:	e0bfd517 	ldw	r2,-172(fp)
   8362c:	10800217 	ldw	r2,8(r2)
   83630:	1005003a 	cmpeq	r2,r2,zero
   83634:	1000041e 	bne	r2,zero,83648 <edid_print_cea+0xf8>
   83638:	010002b4 	movhi	r4,10
   8363c:	212e3c04 	addi	r4,r4,-18192
   83640:	e13ffe15 	stw	r4,-8(fp)
   83644:	00000306 	br	83654 <edid_print_cea+0x104>
   83648:	008002b4 	movhi	r2,10
   8364c:	10ae3d04 	addi	r2,r2,-18188
   83650:	e0bffe15 	stw	r2,-8(fp)
   83654:	010002b4 	movhi	r4,10
   83658:	212e4c04 	addi	r4,r4,-18128
   8365c:	e17ffe17 	ldw	r5,-8(fp)
   83660:	008ee340 	call	8ee34 <printf>
	printf("  supports YCbCr 4:4:4 in addition to RGB      : %s\n", cea->flags.ycbcr444 ? "yes" : "no");
   83664:	e0bfd517 	ldw	r2,-172(fp)
   83668:	10800317 	ldw	r2,12(r2)
   8366c:	1005003a 	cmpeq	r2,r2,zero
   83670:	1000041e 	bne	r2,zero,83684 <edid_print_cea+0x134>
   83674:	00c002b4 	movhi	r3,10
   83678:	18ee3c04 	addi	r3,r3,-18192
   8367c:	e0fffd15 	stw	r3,-12(fp)
   83680:	00000306 	br	83690 <edid_print_cea+0x140>
   83684:	010002b4 	movhi	r4,10
   83688:	212e3d04 	addi	r4,r4,-18188
   8368c:	e13ffd15 	stw	r4,-12(fp)
   83690:	010002b4 	movhi	r4,10
   83694:	212e5a04 	addi	r4,r4,-18072
   83698:	e17ffd17 	ldw	r5,-12(fp)
   8369c:	008ee340 	call	8ee34 <printf>
	printf("  supports YCbCr 4:2:2 in addition to RGB      : %s\n", cea->flags.ycbcr422 ? "yes" : "no");
   836a0:	e0bfd517 	ldw	r2,-172(fp)
   836a4:	10800417 	ldw	r2,16(r2)
   836a8:	1005003a 	cmpeq	r2,r2,zero
   836ac:	1000041e 	bne	r2,zero,836c0 <edid_print_cea+0x170>
   836b0:	008002b4 	movhi	r2,10
   836b4:	10ae3c04 	addi	r2,r2,-18192
   836b8:	e0bffc15 	stw	r2,-16(fp)
   836bc:	00000306 	br	836cc <edid_print_cea+0x17c>
   836c0:	00c002b4 	movhi	r3,10
   836c4:	18ee3d04 	addi	r3,r3,-18188
   836c8:	e0fffc15 	stw	r3,-16(fp)
   836cc:	010002b4 	movhi	r4,10
   836d0:	212e6804 	addi	r4,r4,-18016
   836d4:	e17ffc17 	ldw	r5,-16(fp)
   836d8:	008ee340 	call	8ee34 <printf>

	printf("\n  data block collections\n  ---------------------------------\n");
   836dc:	010002b4 	movhi	r4,10
   836e0:	212e7604 	addi	r4,r4,-17960
   836e4:	008ef700 	call	8ef70 <puts>

	// data block collection
	for (t = 0; t < cea->nr_dbcs; ++t) {
   836e8:	e03fd715 	stw	zero,-164(fp)
   836ec:	00044f06 	br	8482c <edid_print_cea+0x12dc>

		switch (cea->dbc_tags[t]) {
   836f0:	e0ffd717 	ldw	r3,-164(fp)
   836f4:	e0bfd517 	ldw	r2,-172(fp)
   836f8:	1885883a 	add	r2,r3,r2
   836fc:	10800804 	addi	r2,r2,32
   83700:	10800003 	ldbu	r2,0(r2)
   83704:	10803fcc 	andi	r2,r2,255
   83708:	e0bffb15 	stw	r2,-20(fp)
   8370c:	e13ffb17 	ldw	r4,-20(fp)
   83710:	20800228 	cmpgeui	r2,r4,8
   83714:	1004381e 	bne	r2,zero,847f8 <edid_print_cea+0x12a8>
   83718:	e0fffb17 	ldw	r3,-20(fp)
   8371c:	e0fffb17 	ldw	r3,-20(fp)
   83720:	18c5883a 	add	r2,r3,r3
   83724:	1087883a 	add	r3,r2,r2
   83728:	00800234 	movhi	r2,8
   8372c:	108dcf04 	addi	r2,r2,14140
   83730:	1885883a 	add	r2,r3,r2
   83734:	10800017 	ldw	r2,0(r2)
   83738:	1000683a 	jmp	r2
   8373c:	000847f8 	rdprs	zero,zero,8479
   83740:	0008375c 	xori	zero,zero,8413
   83744:	000839d8 	cmpnei	zero,zero,8423
   83748:	00083b64 	muli	zero,zero,8429
   8374c:	000842a8 	cmpgeui	zero,zero,8458
   83750:	00084480 	call	8448 <__alt_mem_onchip_memory2-0x77bb8>
   83754:	000847f8 	rdprs	zero,zero,8479
   83758:	00084494 	movui	zero,8466
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
   8375c:	010002b4 	movhi	r4,10
   83760:	212e8604 	addi	r4,r4,-17896
   83764:	e17fd717 	ldw	r5,-164(fp)
   83768:	008ee340 	call	8ee34 <printf>
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);
   8376c:	e0bfd517 	ldw	r2,-172(fp)
   83770:	11406817 	ldw	r5,416(r2)
   83774:	010002b4 	movhi	r4,10
   83778:	212e8e04 	addi	r4,r4,-17864
   8377c:	008ee340 	call	8ee34 <printf>

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   83780:	e03fd815 	stw	zero,-160(fp)
   83784:	00008f06 	br	839c4 <edid_print_cea+0x474>
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
   83788:	e0bfd817 	ldw	r2,-160(fp)
   8378c:	e0ffd517 	ldw	r3,-172(fp)
   83790:	10800524 	muli	r2,r2,20
   83794:	10c5883a 	add	r2,r2,r3
   83798:	10806904 	addi	r2,r2,420
   8379c:	10800017 	ldw	r2,0(r2)
   837a0:	00c002b4 	movhi	r3,10
   837a4:	18faa104 	addi	r3,r3,-5500
   837a8:	1085883a 	add	r2,r2,r2
   837ac:	1085883a 	add	r2,r2,r2
   837b0:	10c5883a 	add	r2,r2,r3
   837b4:	11800017 	ldw	r6,0(r2)
   837b8:	010002b4 	movhi	r4,10
   837bc:	212e9c04 	addi	r4,r4,-17808
   837c0:	e17fd817 	ldw	r5,-160(fp)
   837c4:	008ee340 	call	8ee34 <printf>
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
   837c8:	e0bfd817 	ldw	r2,-160(fp)
   837cc:	e0ffd517 	ldw	r3,-172(fp)
   837d0:	10800524 	muli	r2,r2,20
   837d4:	10c5883a 	add	r2,r2,r3
   837d8:	10806a04 	addi	r2,r2,424
   837dc:	11400017 	ldw	r5,0(r2)
   837e0:	010002b4 	movhi	r4,10
   837e4:	212ea404 	addi	r4,r4,-17776
   837e8:	008ee340 	call	8ee34 <printf>
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   837ec:	e0bfd817 	ldw	r2,-160(fp)
   837f0:	e0ffd517 	ldw	r3,-172(fp)
   837f4:	10800524 	muli	r2,r2,20
   837f8:	10c5883a 	add	r2,r2,r3
   837fc:	10806b04 	addi	r2,r2,428
   83800:	10800017 	ldw	r2,0(r2)
   83804:	1080100c 	andi	r2,r2,64
   83808:	100ac03a 	cmpne	r5,r2,zero
   8380c:	e0bfd817 	ldw	r2,-160(fp)
   83810:	e0ffd517 	ldw	r3,-172(fp)
   83814:	10800524 	muli	r2,r2,20
   83818:	10c5883a 	add	r2,r2,r3
   8381c:	10806b04 	addi	r2,r2,428
   83820:	10800017 	ldw	r2,0(r2)
   83824:	1080080c 	andi	r2,r2,32
   83828:	100cc03a 	cmpne	r6,r2,zero
   8382c:	e0bfd817 	ldw	r2,-160(fp)
   83830:	e0ffd517 	ldw	r3,-172(fp)
   83834:	10800524 	muli	r2,r2,20
   83838:	10c5883a 	add	r2,r2,r3
   8383c:	10806b04 	addi	r2,r2,428
   83840:	10800017 	ldw	r2,0(r2)
   83844:	1080040c 	andi	r2,r2,16
   83848:	100ec03a 	cmpne	r7,r2,zero
   8384c:	e0bfd817 	ldw	r2,-160(fp)
   83850:	e0ffd517 	ldw	r3,-172(fp)
   83854:	10800524 	muli	r2,r2,20
   83858:	10c5883a 	add	r2,r2,r3
   8385c:	10806b04 	addi	r2,r2,428
   83860:	10800017 	ldw	r2,0(r2)
   83864:	1080020c 	andi	r2,r2,8
   83868:	1010c03a 	cmpne	r8,r2,zero
   8386c:	e0bfd817 	ldw	r2,-160(fp)
   83870:	e0ffd517 	ldw	r3,-172(fp)
   83874:	10800524 	muli	r2,r2,20
   83878:	10c5883a 	add	r2,r2,r3
   8387c:	10806b04 	addi	r2,r2,428
   83880:	10800017 	ldw	r2,0(r2)
   83884:	1080010c 	andi	r2,r2,4
   83888:	1012c03a 	cmpne	r9,r2,zero
   8388c:	e0bfd817 	ldw	r2,-160(fp)
   83890:	e0ffd517 	ldw	r3,-172(fp)
   83894:	10800524 	muli	r2,r2,20
   83898:	10c5883a 	add	r2,r2,r3
   8389c:	10806b04 	addi	r2,r2,428
   838a0:	10800017 	ldw	r2,0(r2)
   838a4:	1080008c 	andi	r2,r2,2
   838a8:	1008c03a 	cmpne	r4,r2,zero
   838ac:	e0bfd817 	ldw	r2,-160(fp)
   838b0:	e0ffd517 	ldw	r3,-172(fp)
   838b4:	10800524 	muli	r2,r2,20
   838b8:	10c5883a 	add	r2,r2,r3
   838bc:	10806b04 	addi	r2,r2,428
   838c0:	10800017 	ldw	r2,0(r2)
   838c4:	1080004c 	andi	r2,r2,1
   838c8:	da000015 	stw	r8,0(sp)
   838cc:	da400115 	stw	r9,4(sp)
   838d0:	d9000215 	stw	r4,8(sp)
   838d4:	d8800315 	stw	r2,12(sp)
   838d8:	010002b4 	movhi	r4,10
   838dc:	212eac04 	addi	r4,r4,-17744
   838e0:	008ee340 	call	8ee34 <printf>
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
   838e4:	e0bfd817 	ldw	r2,-160(fp)
   838e8:	e0ffd517 	ldw	r3,-172(fp)
   838ec:	10800524 	muli	r2,r2,20
   838f0:	10c5883a 	add	r2,r2,r3
   838f4:	10806904 	addi	r2,r2,420
   838f8:	10800017 	ldw	r2,0(r2)
   838fc:	e0bffa15 	stw	r2,-24(fp)
   83900:	e13ffa17 	ldw	r4,-24(fp)
   83904:	20800060 	cmpeqi	r2,r4,1
   83908:	1000071e 	bne	r2,zero,83928 <edid_print_cea+0x3d8>
   8390c:	e0fffa17 	ldw	r3,-24(fp)
   83910:	18800050 	cmplti	r2,r3,1
   83914:	1000281e 	bne	r2,zero,839b8 <edid_print_cea+0x468>
   83918:	e13ffa17 	ldw	r4,-24(fp)
   8391c:	20800248 	cmpgei	r2,r4,9
   83920:	1000251e 	bne	r2,zero,839b8 <edid_print_cea+0x468>
   83924:	00001b06 	br	83994 <edid_print_cea+0x444>
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
   83928:	e0bfd817 	ldw	r2,-160(fp)
   8392c:	e0ffd517 	ldw	r3,-172(fp)
   83930:	10800524 	muli	r2,r2,20
   83934:	10c5883a 	add	r2,r2,r3
   83938:	10806c04 	addi	r2,r2,432
   8393c:	10800017 	ldw	r2,0(r2)
   83940:	1080010c 	andi	r2,r2,4
   83944:	100ac03a 	cmpne	r5,r2,zero
   83948:	e0bfd817 	ldw	r2,-160(fp)
   8394c:	e0ffd517 	ldw	r3,-172(fp)
   83950:	10800524 	muli	r2,r2,20
   83954:	10c5883a 	add	r2,r2,r3
   83958:	10806c04 	addi	r2,r2,432
   8395c:	10800017 	ldw	r2,0(r2)
   83960:	1080008c 	andi	r2,r2,2
   83964:	100cc03a 	cmpne	r6,r2,zero
   83968:	e0bfd817 	ldw	r2,-160(fp)
   8396c:	e0ffd517 	ldw	r3,-172(fp)
   83970:	10800524 	muli	r2,r2,20
   83974:	10c5883a 	add	r2,r2,r3
   83978:	10806c04 	addi	r2,r2,432
   8397c:	10800017 	ldw	r2,0(r2)
   83980:	11c0004c 	andi	r7,r2,1
   83984:	010002b4 	movhi	r4,10
   83988:	212ec104 	addi	r4,r4,-17660
   8398c:	008ee340 	call	8ee34 <printf>
						cea->db_audio.sad[i].resolution & 0x04 ? 1 : 0,
						cea->db_audio.sad[i].resolution & 0x02 ? 1 : 0,
						cea->db_audio.sad[i].resolution & 0x01 ? 1 : 0);
					break;
   83990:	00000906 	br	839b8 <edid_print_cea+0x468>
				case CEA_SAD_FMT_MP3:
				case CEA_SAD_FMT_MPEG2:
				case CEA_SAD_FMT_AAC:
				case CEA_SAD_FMT_DTS:
				case CEA_SAD_FMT_ATRAC:
					printf("           bitrate max : %d (kHz)\n", cea->db_audio.sad[i].bitrate);
   83994:	e0bfd817 	ldw	r2,-160(fp)
   83998:	e0ffd517 	ldw	r3,-172(fp)
   8399c:	10800524 	muli	r2,r2,20
   839a0:	10c5883a 	add	r2,r2,r3
   839a4:	10806d04 	addi	r2,r2,436
   839a8:	11400017 	ldw	r5,0(r2)
   839ac:	010002b4 	movhi	r4,10
   839b0:	212ecf04 	addi	r4,r4,-17604
   839b4:	008ee340 	call	8ee34 <printf>
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   839b8:	e0bfd817 	ldw	r2,-160(fp)
   839bc:	10800044 	addi	r2,r2,1
   839c0:	e0bfd815 	stw	r2,-160(fp)
   839c4:	e0bfd517 	ldw	r2,-172(fp)
   839c8:	10c06817 	ldw	r3,416(r2)
   839cc:	e0bfd817 	ldw	r2,-160(fp)
   839d0:	10ff6d16 	blt	r2,r3,83788 <edid_print_cea+0x238>
				//case CEA_SAD_FMT_DST:
				//case CEA_SAD_FMT_WMA_PRO:
				//	break;
				}
			}
			break;
   839d4:	00039206 	br	84820 <edid_print_cea+0x12d0>
				"720x480p       @239.76/240 Hz (16:9)",
				"720(1440)x480i @239.76/240 Hz (4:3)",
				"720(1440)x480i @239.76/240 Hz (16:9)",
			};

			printf("\n  [%02d] video data block ...\n", t);
   839d8:	010002b4 	movhi	r4,10
   839dc:	212ed804 	addi	r4,r4,-17568
   839e0:	e17fd717 	ldw	r5,-164(fp)
   839e4:	008ee340 	call	8ee34 <printf>
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);
   839e8:	e0bfd517 	ldw	r2,-172(fp)
   839ec:	11402717 	ldw	r5,156(r2)
   839f0:	010002b4 	movhi	r4,10
   839f4:	212ee004 	addi	r4,r4,-17536
   839f8:	008ee340 	call	8ee34 <printf>

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   839fc:	e03fd815 	stw	zero,-160(fp)
   83a00:	00005306 	br	83b50 <edid_print_cea+0x600>
				if (cea->db_video.svd[i].vic < 60)
   83a04:	e0bfd817 	ldw	r2,-160(fp)
   83a08:	e0ffd517 	ldw	r3,-172(fp)
   83a0c:	100490fa 	slli	r2,r2,3
   83a10:	10c5883a 	add	r2,r2,r3
   83a14:	10802904 	addi	r2,r2,164
   83a18:	10800017 	ldw	r2,0(r2)
   83a1c:	10800f08 	cmpgei	r2,r2,60
   83a20:	10002c1e 	bne	r2,zero,83ad4 <edid_print_cea+0x584>
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
   83a24:	e0bfd817 	ldw	r2,-160(fp)
   83a28:	e0ffd517 	ldw	r3,-172(fp)
   83a2c:	100490fa 	slli	r2,r2,3
   83a30:	10c5883a 	add	r2,r2,r3
   83a34:	10802904 	addi	r2,r2,164
   83a38:	10800017 	ldw	r2,0(r2)
   83a3c:	e0bff915 	stw	r2,-28(fp)
   83a40:	e0bfd817 	ldw	r2,-160(fp)
   83a44:	e0ffd517 	ldw	r3,-172(fp)
   83a48:	100490fa 	slli	r2,r2,3
   83a4c:	10c5883a 	add	r2,r2,r3
   83a50:	10802904 	addi	r2,r2,164
   83a54:	10800017 	ldw	r2,0(r2)
   83a58:	00c002b4 	movhi	r3,10
   83a5c:	18fa6504 	addi	r3,r3,-5740
   83a60:	1085883a 	add	r2,r2,r2
   83a64:	1085883a 	add	r2,r2,r2
   83a68:	10c5883a 	add	r2,r2,r3
   83a6c:	10800017 	ldw	r2,0(r2)
   83a70:	e0bff815 	stw	r2,-32(fp)
   83a74:	e0bfd817 	ldw	r2,-160(fp)
   83a78:	e0ffd517 	ldw	r3,-172(fp)
   83a7c:	100490fa 	slli	r2,r2,3
   83a80:	10c5883a 	add	r2,r2,r3
   83a84:	10802804 	addi	r2,r2,160
   83a88:	10800017 	ldw	r2,0(r2)
   83a8c:	1005003a 	cmpeq	r2,r2,zero
   83a90:	1000041e 	bne	r2,zero,83aa4 <edid_print_cea+0x554>
   83a94:	008002b4 	movhi	r2,10
   83a98:	10aeee04 	addi	r2,r2,-17480
   83a9c:	e0bff715 	stw	r2,-36(fp)
   83aa0:	00000306 	br	83ab0 <edid_print_cea+0x560>
   83aa4:	00c002b4 	movhi	r3,10
   83aa8:	18eef104 	addi	r3,r3,-17468
   83aac:	e0fff715 	stw	r3,-36(fp)
   83ab0:	e13ff717 	ldw	r4,-36(fp)
   83ab4:	d9000015 	stw	r4,0(sp)
   83ab8:	010002b4 	movhi	r4,10
   83abc:	212ef204 	addi	r4,r4,-17464
   83ac0:	e17fd817 	ldw	r5,-160(fp)
   83ac4:	e1bff917 	ldw	r6,-28(fp)
   83ac8:	e1fff817 	ldw	r7,-32(fp)
   83acc:	008ee340 	call	8ee34 <printf>
   83ad0:	00001c06 	br	83b44 <edid_print_cea+0x5f4>
				else
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
   83ad4:	e0bfd817 	ldw	r2,-160(fp)
   83ad8:	e0ffd517 	ldw	r3,-172(fp)
   83adc:	100490fa 	slli	r2,r2,3
   83ae0:	10c5883a 	add	r2,r2,r3
   83ae4:	10802904 	addi	r2,r2,164
   83ae8:	10800017 	ldw	r2,0(r2)
   83aec:	e0bff615 	stw	r2,-40(fp)
   83af0:	e0bfd817 	ldw	r2,-160(fp)
   83af4:	e0ffd517 	ldw	r3,-172(fp)
   83af8:	100490fa 	slli	r2,r2,3
   83afc:	10c5883a 	add	r2,r2,r3
   83b00:	10802804 	addi	r2,r2,160
   83b04:	10800017 	ldw	r2,0(r2)
   83b08:	1005003a 	cmpeq	r2,r2,zero
   83b0c:	1000041e 	bne	r2,zero,83b20 <edid_print_cea+0x5d0>
   83b10:	008002b4 	movhi	r2,10
   83b14:	10aeee04 	addi	r2,r2,-17480
   83b18:	e0bff515 	stw	r2,-44(fp)
   83b1c:	00000306 	br	83b2c <edid_print_cea+0x5dc>
   83b20:	00c002b4 	movhi	r3,10
   83b24:	18eef104 	addi	r3,r3,-17468
   83b28:	e0fff515 	stw	r3,-44(fp)
   83b2c:	010002b4 	movhi	r4,10
   83b30:	212efa04 	addi	r4,r4,-17432
   83b34:	e17fd817 	ldw	r5,-160(fp)
   83b38:	e1bff617 	ldw	r6,-40(fp)
   83b3c:	e1fff517 	ldw	r7,-44(fp)
   83b40:	008ee340 	call	8ee34 <printf>
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   83b44:	e0bfd817 	ldw	r2,-160(fp)
   83b48:	10800044 	addi	r2,r2,1
   83b4c:	e0bfd815 	stw	r2,-160(fp)
   83b50:	e0bfd517 	ldw	r2,-172(fp)
   83b54:	10c02717 	ldw	r3,156(r2)
   83b58:	e0bfd817 	ldw	r2,-160(fp)
   83b5c:	10ffa916 	blt	r2,r3,83a04 <edid_print_cea+0x4b4>
				if (cea->db_video.svd[i].vic < 60)
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
				else
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
			}
			break;
   83b60:	00032f06 	br	84820 <edid_print_cea+0x12d0>
		}
		case CEA_DB_VENDOR:
			if (cea->db_vsdb_hdmi.ieee_reg_id != 0x000c03) {
   83b64:	e0bfd517 	ldw	r2,-172(fp)
   83b68:	10809d17 	ldw	r2,628(r2)
   83b6c:	108300e0 	cmpeqi	r2,r2,3075
   83b70:	1000051e 	bne	r2,zero,83b88 <edid_print_cea+0x638>
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
   83b74:	010002b4 	movhi	r4,10
   83b78:	212f0304 	addi	r4,r4,-17396
   83b7c:	e17fd717 	ldw	r5,-164(fp)
   83b80:	008ee340 	call	8ee34 <printf>
				break;
   83b84:	00032606 	br	84820 <edid_print_cea+0x12d0>
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
   83b88:	010002b4 	movhi	r4,10
   83b8c:	212f0f04 	addi	r4,r4,-17348
   83b90:	e17fd717 	ldw	r5,-164(fp)
   83b94:	008ee340 	call	8ee34 <printf>
			printf("       source physical address         : %d.%d.%d.%d\n",
   83b98:	e0bfd517 	ldw	r2,-172(fp)
   83b9c:	11409e17 	ldw	r5,632(r2)
   83ba0:	e0bfd517 	ldw	r2,-172(fp)
   83ba4:	11809f17 	ldw	r6,636(r2)
   83ba8:	e0bfd517 	ldw	r2,-172(fp)
   83bac:	11c0a017 	ldw	r7,640(r2)
   83bb0:	e0bfd517 	ldw	r2,-172(fp)
   83bb4:	1080a117 	ldw	r2,644(r2)
   83bb8:	d8800015 	stw	r2,0(sp)
   83bbc:	010002b4 	movhi	r4,10
   83bc0:	212f1c04 	addi	r4,r4,-17296
   83bc4:	008ee340 	call	8ee34 <printf>
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
				cea->db_vsdb_hdmi.addr_c, cea->db_vsdb_hdmi.addr_d);

			if (cea->db_vsdb_hdmi.ext_len >= 6) {
   83bc8:	e0bfd517 	ldw	r2,-172(fp)
   83bcc:	10809c17 	ldw	r2,624(r2)
   83bd0:	10800190 	cmplti	r2,r2,6
   83bd4:	10005a1e 	bne	r2,zero,83d40 <edid_print_cea+0x7f0>
				printf("       support ACP ISRC1 ISRC2 packets : %s\n", cea->db_vsdb_hdmi.ai ? "yes" : "no");
   83bd8:	e0bfd517 	ldw	r2,-172(fp)
   83bdc:	1080a217 	ldw	r2,648(r2)
   83be0:	1005003a 	cmpeq	r2,r2,zero
   83be4:	1000041e 	bne	r2,zero,83bf8 <edid_print_cea+0x6a8>
   83be8:	010002b4 	movhi	r4,10
   83bec:	212e3c04 	addi	r4,r4,-18192
   83bf0:	e13ff415 	stw	r4,-48(fp)
   83bf4:	00000306 	br	83c04 <edid_print_cea+0x6b4>
   83bf8:	008002b4 	movhi	r2,10
   83bfc:	10ae3d04 	addi	r2,r2,-18188
   83c00:	e0bff415 	stw	r2,-48(fp)
   83c04:	010002b4 	movhi	r4,10
   83c08:	212f2a04 	addi	r4,r4,-17240
   83c0c:	e17ff417 	ldw	r5,-48(fp)
   83c10:	008ee340 	call	8ee34 <printf>
				printf("       support 48 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp48 ? "yes" : "no");
   83c14:	e0bfd517 	ldw	r2,-172(fp)
   83c18:	1080a517 	ldw	r2,660(r2)
   83c1c:	1005003a 	cmpeq	r2,r2,zero
   83c20:	1000041e 	bne	r2,zero,83c34 <edid_print_cea+0x6e4>
   83c24:	00c002b4 	movhi	r3,10
   83c28:	18ee3c04 	addi	r3,r3,-18192
   83c2c:	e0fff315 	stw	r3,-52(fp)
   83c30:	00000306 	br	83c40 <edid_print_cea+0x6f0>
   83c34:	010002b4 	movhi	r4,10
   83c38:	212e3d04 	addi	r4,r4,-18188
   83c3c:	e13ff315 	stw	r4,-52(fp)
   83c40:	010002b4 	movhi	r4,10
   83c44:	212f3604 	addi	r4,r4,-17192
   83c48:	e17ff317 	ldw	r5,-52(fp)
   83c4c:	008ee340 	call	8ee34 <printf>
				printf("       support 36 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp36 ? "yes" : "no");
   83c50:	e0bfd517 	ldw	r2,-172(fp)
   83c54:	1080a417 	ldw	r2,656(r2)
   83c58:	1005003a 	cmpeq	r2,r2,zero
   83c5c:	1000041e 	bne	r2,zero,83c70 <edid_print_cea+0x720>
   83c60:	008002b4 	movhi	r2,10
   83c64:	10ae3c04 	addi	r2,r2,-18192
   83c68:	e0bff215 	stw	r2,-56(fp)
   83c6c:	00000306 	br	83c7c <edid_print_cea+0x72c>
   83c70:	00c002b4 	movhi	r3,10
   83c74:	18ee3d04 	addi	r3,r3,-18188
   83c78:	e0fff215 	stw	r3,-56(fp)
   83c7c:	010002b4 	movhi	r4,10
   83c80:	212f4204 	addi	r4,r4,-17144
   83c84:	e17ff217 	ldw	r5,-56(fp)
   83c88:	008ee340 	call	8ee34 <printf>
				printf("       support 30 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp30 ? "yes" : "no");
   83c8c:	e0bfd517 	ldw	r2,-172(fp)
   83c90:	1080a317 	ldw	r2,652(r2)
   83c94:	1005003a 	cmpeq	r2,r2,zero
   83c98:	1000041e 	bne	r2,zero,83cac <edid_print_cea+0x75c>
   83c9c:	010002b4 	movhi	r4,10
   83ca0:	212e3c04 	addi	r4,r4,-18192
   83ca4:	e13ff115 	stw	r4,-60(fp)
   83ca8:	00000306 	br	83cb8 <edid_print_cea+0x768>
   83cac:	008002b4 	movhi	r2,10
   83cb0:	10ae3d04 	addi	r2,r2,-18188
   83cb4:	e0bff115 	stw	r2,-60(fp)
   83cb8:	010002b4 	movhi	r4,10
   83cbc:	212f4e04 	addi	r4,r4,-17096
   83cc0:	e17ff117 	ldw	r5,-60(fp)
   83cc4:	008ee340 	call	8ee34 <printf>
				printf("       support YCbCr 4:4:4 deep color  : %s\n", cea->db_vsdb_hdmi.ycbcr444 ? "yes" : "no");
   83cc8:	e0bfd517 	ldw	r2,-172(fp)
   83ccc:	1080a617 	ldw	r2,664(r2)
   83cd0:	1005003a 	cmpeq	r2,r2,zero
   83cd4:	1000041e 	bne	r2,zero,83ce8 <edid_print_cea+0x798>
   83cd8:	00c002b4 	movhi	r3,10
   83cdc:	18ee3c04 	addi	r3,r3,-18192
   83ce0:	e0fff015 	stw	r3,-64(fp)
   83ce4:	00000306 	br	83cf4 <edid_print_cea+0x7a4>
   83ce8:	010002b4 	movhi	r4,10
   83cec:	212e3d04 	addi	r4,r4,-18188
   83cf0:	e13ff015 	stw	r4,-64(fp)
   83cf4:	010002b4 	movhi	r4,10
   83cf8:	212f5a04 	addi	r4,r4,-17048
   83cfc:	e17ff017 	ldw	r5,-64(fp)
   83d00:	008ee340 	call	8ee34 <printf>
				printf("       support DVI dual-link           : %s\n", cea->db_vsdb_hdmi.dvi_dual ? "yes" : "no");
   83d04:	e0bfd517 	ldw	r2,-172(fp)
   83d08:	1080a717 	ldw	r2,668(r2)
   83d0c:	1005003a 	cmpeq	r2,r2,zero
   83d10:	1000041e 	bne	r2,zero,83d24 <edid_print_cea+0x7d4>
   83d14:	008002b4 	movhi	r2,10
   83d18:	10ae3c04 	addi	r2,r2,-18192
   83d1c:	e0bfef15 	stw	r2,-68(fp)
   83d20:	00000306 	br	83d30 <edid_print_cea+0x7e0>
   83d24:	00c002b4 	movhi	r3,10
   83d28:	18ee3d04 	addi	r3,r3,-18188
   83d2c:	e0ffef15 	stw	r3,-68(fp)
   83d30:	010002b4 	movhi	r4,10
   83d34:	212f6604 	addi	r4,r4,-17000
   83d38:	e17fef17 	ldw	r5,-68(fp)
   83d3c:	008ee340 	call	8ee34 <printf>
			}

			if (cea->db_vsdb_hdmi.ext_len >= 7) {
   83d40:	e0bfd517 	ldw	r2,-172(fp)
   83d44:	10809c17 	ldw	r2,624(r2)
   83d48:	108001d0 	cmplti	r2,r2,7
   83d4c:	1000051e 	bne	r2,zero,83d64 <edid_print_cea+0x814>
				printf("       max TMDS clock                  : %d (MHz)\n", cea->db_vsdb_hdmi.max_tmds_clk);
   83d50:	e0bfd517 	ldw	r2,-172(fp)
   83d54:	1140ab17 	ldw	r5,684(r2)
   83d58:	010002b4 	movhi	r4,10
   83d5c:	212f7204 	addi	r4,r4,-16952
   83d60:	008ee340 	call	8ee34 <printf>
			}

			if (cea->db_vsdb_hdmi.p_latency != 0) {
   83d64:	e0bfd517 	ldw	r2,-172(fp)
   83d68:	1080a817 	ldw	r2,672(r2)
   83d6c:	1005003a 	cmpeq	r2,r2,zero
   83d70:	10000a1e 	bne	r2,zero,83d9c <edid_print_cea+0x84c>
				printf("       video latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_p);
   83d74:	e0bfd517 	ldw	r2,-172(fp)
   83d78:	1140ac17 	ldw	r5,688(r2)
   83d7c:	010002b4 	movhi	r4,10
   83d80:	212f7f04 	addi	r4,r4,-16900
   83d84:	008ee340 	call	8ee34 <printf>
				printf("       audio latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_p);
   83d88:	e0bfd517 	ldw	r2,-172(fp)
   83d8c:	1140ad17 	ldw	r5,692(r2)
   83d90:	010002b4 	movhi	r4,10
   83d94:	212f8c04 	addi	r4,r4,-16848
   83d98:	008ee340 	call	8ee34 <printf>
			}

			if (cea->db_vsdb_hdmi.i_latency != 0) {
   83d9c:	e0bfd517 	ldw	r2,-172(fp)
   83da0:	1080a917 	ldw	r2,676(r2)
   83da4:	1005003a 	cmpeq	r2,r2,zero
   83da8:	10000a1e 	bne	r2,zero,83dd4 <edid_print_cea+0x884>
				printf("       video latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_i);
   83dac:	e0bfd517 	ldw	r2,-172(fp)
   83db0:	1140ae17 	ldw	r5,696(r2)
   83db4:	010002b4 	movhi	r4,10
   83db8:	212f9904 	addi	r4,r4,-16796
   83dbc:	008ee340 	call	8ee34 <printf>
				printf("       audio latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_i);
   83dc0:	e0bfd517 	ldw	r2,-172(fp)
   83dc4:	1140af17 	ldw	r5,700(r2)
   83dc8:	010002b4 	movhi	r4,10
   83dcc:	212fa604 	addi	r4,r4,-16744
   83dd0:	008ee340 	call	8ee34 <printf>
			}

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
   83dd4:	e0bfd517 	ldw	r2,-172(fp)
   83dd8:	1080aa17 	ldw	r2,680(r2)
   83ddc:	1005003a 	cmpeq	r2,r2,zero
   83de0:	1000041e 	bne	r2,zero,83df4 <edid_print_cea+0x8a4>
   83de4:	010002b4 	movhi	r4,10
   83de8:	212e3c04 	addi	r4,r4,-18192
   83dec:	e13fee15 	stw	r4,-72(fp)
   83df0:	00000306 	br	83e00 <edid_print_cea+0x8b0>
   83df4:	008002b4 	movhi	r2,10
   83df8:	10ae3d04 	addi	r2,r2,-18188
   83dfc:	e0bfee15 	stw	r2,-72(fp)
   83e00:	010002b4 	movhi	r4,10
   83e04:	212fb304 	addi	r4,r4,-16692
   83e08:	e17fee17 	ldw	r5,-72(fp)
   83e0c:	008ee340 	call	8ee34 <printf>
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");
   83e10:	e0bfd517 	ldw	r2,-172(fp)
   83e14:	1080b017 	ldw	r2,704(r2)
   83e18:	1005003a 	cmpeq	r2,r2,zero
   83e1c:	1000041e 	bne	r2,zero,83e30 <edid_print_cea+0x8e0>
   83e20:	00c002b4 	movhi	r3,10
   83e24:	18ee3c04 	addi	r3,r3,-18192
   83e28:	e0ffed15 	stw	r3,-76(fp)
   83e2c:	00000306 	br	83e3c <edid_print_cea+0x8ec>
   83e30:	010002b4 	movhi	r4,10
   83e34:	212e3d04 	addi	r4,r4,-18188
   83e38:	e13fed15 	stw	r4,-76(fp)
   83e3c:	010002b4 	movhi	r4,10
   83e40:	212fbf04 	addi	r4,r4,-16644
   83e44:	e17fed17 	ldw	r5,-76(fp)
   83e48:	008ee340 	call	8ee34 <printf>

			if (cea->db_vsdb_hdmi.hdmi_video != 0) {
   83e4c:	e0bfd517 	ldw	r2,-172(fp)
   83e50:	1080aa17 	ldw	r2,680(r2)
   83e54:	1005003a 	cmpeq	r2,r2,zero
   83e58:	1002711e 	bne	r2,zero,84820 <edid_print_cea+0x12d0>
				switch (cea->db_vsdb_hdmi.multi_3d) {
   83e5c:	e0bfd517 	ldw	r2,-172(fp)
   83e60:	1080b117 	ldw	r2,708(r2)
   83e64:	e0bfec15 	stw	r2,-80(fp)
   83e68:	e0ffec17 	ldw	r3,-80(fp)
   83e6c:	18800060 	cmpeqi	r2,r3,1
   83e70:	1000121e 	bne	r2,zero,83ebc <edid_print_cea+0x96c>
   83e74:	e13fec17 	ldw	r4,-80(fp)
   83e78:	20800088 	cmpgei	r2,r4,2
   83e7c:	1000041e 	bne	r2,zero,83e90 <edid_print_cea+0x940>
   83e80:	e0ffec17 	ldw	r3,-80(fp)
   83e84:	1805003a 	cmpeq	r2,r3,zero
   83e88:	1000081e 	bne	r2,zero,83eac <edid_print_cea+0x95c>
   83e8c:	00001606 	br	83ee8 <edid_print_cea+0x998>
   83e90:	e13fec17 	ldw	r4,-80(fp)
   83e94:	208000a0 	cmpeqi	r2,r4,2
   83e98:	10000c1e 	bne	r2,zero,83ecc <edid_print_cea+0x97c>
   83e9c:	e0ffec17 	ldw	r3,-80(fp)
   83ea0:	188000e0 	cmpeqi	r2,r3,3
   83ea4:	10000d1e 	bne	r2,zero,83edc <edid_print_cea+0x98c>
   83ea8:	00000f06 	br	83ee8 <edid_print_cea+0x998>
				case 0:
					printf("         3D-Multi_present              : 2b00 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   83eac:	010002b4 	movhi	r4,10
   83eb0:	212fcb04 	addi	r4,r4,-16596
   83eb4:	008ef700 	call	8ef70 <puts>
					break;
   83eb8:	00000b06 	br	83ee8 <edid_print_cea+0x998>
				case 1:
					printf("         3D-Multi_present              : 2b01 (with 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   83ebc:	010002b4 	movhi	r4,10
   83ec0:	212fe204 	addi	r4,r4,-16504
   83ec4:	008ef700 	call	8ef70 <puts>
					break;
   83ec8:	00000706 	br	83ee8 <edid_print_cea+0x998>
				case 2:
					printf("         3D-Multi_present              : 2b10 (with 3D_Structure_ALL_15..0, with 3D_MASK_15..0)\n");
   83ecc:	010002b4 	movhi	r4,10
   83ed0:	212ffa04 	addi	r4,r4,-16408
   83ed4:	008ef700 	call	8ef70 <puts>
					break;
   83ed8:	00000306 	br	83ee8 <edid_print_cea+0x998>
				case 3:
					printf("         3D-Multi_present              : 2b11 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   83edc:	010002b4 	movhi	r4,10
   83ee0:	21301204 	addi	r4,r4,-16312
   83ee4:	008ef700 	call	8ef70 <puts>
					break;
				}

				if ((cea->db_vsdb_hdmi.multi_3d == 1) || (cea->db_vsdb_hdmi.multi_3d == 2)) {
   83ee8:	e0bfd517 	ldw	r2,-172(fp)
   83eec:	1080b117 	ldw	r2,708(r2)
   83ef0:	10800060 	cmpeqi	r2,r2,1
   83ef4:	1000041e 	bne	r2,zero,83f08 <edid_print_cea+0x9b8>
   83ef8:	e0bfd517 	ldw	r2,-172(fp)
   83efc:	1080b117 	ldw	r2,708(r2)
   83f00:	10800098 	cmpnei	r2,r2,2
   83f04:	1000261e 	bne	r2,zero,83fa0 <edid_print_cea+0xa50>
					if (cea->db_vsdb_hdmi.struct_all_3d == 0) {
   83f08:	e0bfd517 	ldw	r2,-172(fp)
   83f0c:	1080b517 	ldw	r2,724(r2)
   83f10:	1004c03a 	cmpne	r2,r2,zero
   83f14:	1000041e 	bne	r2,zero,83f28 <edid_print_cea+0x9d8>
						printf("         3D_Structure_ALL              : none\n");
   83f18:	010002b4 	movhi	r4,10
   83f1c:	21302904 	addi	r4,r4,-16220
   83f20:	008ef700 	call	8ef70 <puts>
   83f24:	00001e06 	br	83fa0 <edid_print_cea+0xa50>
					} else {
						printf("         3D_Structure_ALL              : ");
   83f28:	010002b4 	movhi	r4,10
   83f2c:	21303504 	addi	r4,r4,-16172
   83f30:	008ee340 	call	8ee34 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x01)
   83f34:	e0bfd517 	ldw	r2,-172(fp)
   83f38:	1080b517 	ldw	r2,724(r2)
   83f3c:	1080004c 	andi	r2,r2,1
   83f40:	10803fcc 	andi	r2,r2,255
   83f44:	1005003a 	cmpeq	r2,r2,zero
   83f48:	1000031e 	bne	r2,zero,83f58 <edid_print_cea+0xa08>
							printf("frame_packing ");
   83f4c:	010002b4 	movhi	r4,10
   83f50:	21304004 	addi	r4,r4,-16128
   83f54:	008ee340 	call	8ee34 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x40)
   83f58:	e0bfd517 	ldw	r2,-172(fp)
   83f5c:	1080b517 	ldw	r2,724(r2)
   83f60:	1080100c 	andi	r2,r2,64
   83f64:	1005003a 	cmpeq	r2,r2,zero
   83f68:	1000031e 	bne	r2,zero,83f78 <edid_print_cea+0xa28>
							printf("top-and-bottom ");
   83f6c:	010002b4 	movhi	r4,10
   83f70:	21304404 	addi	r4,r4,-16112
   83f74:	008ee340 	call	8ee34 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x100)
   83f78:	e0bfd517 	ldw	r2,-172(fp)
   83f7c:	1080b517 	ldw	r2,724(r2)
   83f80:	1080400c 	andi	r2,r2,256
   83f84:	1005003a 	cmpeq	r2,r2,zero
   83f88:	1000031e 	bne	r2,zero,83f98 <edid_print_cea+0xa48>
							printf("side-by-side(half h_subsampling)");
   83f8c:	010002b4 	movhi	r4,10
   83f90:	21304804 	addi	r4,r4,-16096
   83f94:	008ee340 	call	8ee34 <printf>
						printf("\n");
   83f98:	01000284 	movi	r4,10
   83f9c:	008eeac0 	call	8eeac <putchar>
					}
				}

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
   83fa0:	e0bfd517 	ldw	r2,-172(fp)
   83fa4:	1080b117 	ldw	r2,708(r2)
   83fa8:	10800098 	cmpnei	r2,r2,2
   83fac:	1000051e 	bne	r2,zero,83fc4 <edid_print_cea+0xa74>
					printf("         3D_MASK                       : 0x%04x\n", cea->db_vsdb_hdmi.mask_3d);
   83fb0:	e0bfd517 	ldw	r2,-172(fp)
   83fb4:	1140b617 	ldw	r5,728(r2)
   83fb8:	010002b4 	movhi	r4,10
   83fbc:	21305104 	addi	r4,r4,-16060
   83fc0:	008ee340 	call	8ee34 <printf>
				}

				switch (cea->db_vsdb_hdmi.image_size) {
   83fc4:	e0bfd517 	ldw	r2,-172(fp)
   83fc8:	1080b217 	ldw	r2,712(r2)
   83fcc:	e0bfeb15 	stw	r2,-84(fp)
   83fd0:	e13feb17 	ldw	r4,-84(fp)
   83fd4:	20800060 	cmpeqi	r2,r4,1
   83fd8:	1000121e 	bne	r2,zero,84024 <edid_print_cea+0xad4>
   83fdc:	e0ffeb17 	ldw	r3,-84(fp)
   83fe0:	18800088 	cmpgei	r2,r3,2
   83fe4:	1000041e 	bne	r2,zero,83ff8 <edid_print_cea+0xaa8>
   83fe8:	e13feb17 	ldw	r4,-84(fp)
   83fec:	2005003a 	cmpeq	r2,r4,zero
   83ff0:	1000081e 	bne	r2,zero,84014 <edid_print_cea+0xac4>
   83ff4:	00001606 	br	84050 <edid_print_cea+0xb00>
   83ff8:	e0ffeb17 	ldw	r3,-84(fp)
   83ffc:	188000a0 	cmpeqi	r2,r3,2
   84000:	10000c1e 	bne	r2,zero,84034 <edid_print_cea+0xae4>
   84004:	e13feb17 	ldw	r4,-84(fp)
   84008:	208000e0 	cmpeqi	r2,r4,3
   8400c:	10000d1e 	bne	r2,zero,84044 <edid_print_cea+0xaf4>
   84010:	00000f06 	br	84050 <edid_print_cea+0xb00>
				case 0:
					printf("         image size extra properties   : none\n");
   84014:	010002b4 	movhi	r4,10
   84018:	21305e04 	addi	r4,r4,-16008
   8401c:	008ef700 	call	8ef70 <puts>
					break;
   84020:	00000b06 	br	84050 <edid_print_cea+0xb00>
				case 1:
					printf("         image size extra properties   : exact aspect ratio only\n");
   84024:	010002b4 	movhi	r4,10
   84028:	21306a04 	addi	r4,r4,-15960
   8402c:	008ef700 	call	8ef70 <puts>
					break;
   84030:	00000706 	br	84050 <edid_print_cea+0xb00>
				case 2:
					printf("         image size extra properties   : size correct (1cm nearest rounded)\n");
   84034:	010002b4 	movhi	r4,10
   84038:	21307b04 	addi	r4,r4,-15892
   8403c:	008ef700 	call	8ef70 <puts>
					break;
   84040:	00000306 	br	84050 <edid_print_cea+0xb00>
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
   84044:	010002b4 	movhi	r4,10
   84048:	21308e04 	addi	r4,r4,-15816
   8404c:	008ef700 	call	8ef70 <puts>
					break;
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
   84050:	e03fd815 	stw	zero,-160(fp)
   84054:	00008f06 	br	84294 <edid_print_cea+0xd44>

					printf("         [%02d] 2D_VIC_Order)%02d ", i, cea->db_vsdb_hdmi.vic_3d[i].vic_2d);
   84058:	e0bfd817 	ldw	r2,-160(fp)
   8405c:	e0ffd517 	ldw	r3,-172(fp)
   84060:	10800324 	muli	r2,r2,12
   84064:	10c5883a 	add	r2,r2,r3
   84068:	1080b804 	addi	r2,r2,736
   8406c:	11800017 	ldw	r6,0(r2)
   84070:	010002b4 	movhi	r4,10
   84074:	2130a304 	addi	r4,r4,-15732
   84078:	e17fd817 	ldw	r5,-160(fp)
   8407c:	008ee340 	call	8ee34 <printf>

					switch (cea->db_vsdb_hdmi.vic_3d[i].struct_3d) {
   84080:	e0bfd817 	ldw	r2,-160(fp)
   84084:	e0ffd517 	ldw	r3,-172(fp)
   84088:	10800324 	muli	r2,r2,12
   8408c:	10c5883a 	add	r2,r2,r3
   84090:	1080b904 	addi	r2,r2,740
   84094:	10800017 	ldw	r2,0(r2)
   84098:	e0bfea15 	stw	r2,-88(fp)
   8409c:	e0ffea17 	ldw	r3,-88(fp)
   840a0:	18800268 	cmpgeui	r2,r3,9
   840a4:	1000321e 	bne	r2,zero,84170 <edid_print_cea+0xc20>
   840a8:	e13fea17 	ldw	r4,-88(fp)
   840ac:	e13fea17 	ldw	r4,-88(fp)
   840b0:	2105883a 	add	r2,r4,r4
   840b4:	1087883a 	add	r3,r2,r2
   840b8:	00800234 	movhi	r2,8
   840bc:	10903304 	addi	r2,r2,16588
   840c0:	1885883a 	add	r2,r3,r2
   840c4:	10800017 	ldw	r2,0(r2)
   840c8:	1000683a 	jmp	r2
   840cc:	000840f0 	cmpltui	zero,zero,8451
   840d0:	00084100 	call	8410 <__alt_mem_onchip_memory2-0x77bf0>
   840d4:	00084110 	cmplti	zero,zero,8452
   840d8:	00084120 	cmpeqi	zero,zero,8452
   840dc:	00084130 	cmpltui	zero,zero,8452
   840e0:	00084140 	call	8414 <__alt_mem_onchip_memory2-0x77bec>
   840e4:	00084150 	cmplti	zero,zero,8453
   840e8:	00084170 	cmpltui	zero,zero,8453
   840ec:	00084160 	cmpeqi	zero,zero,8453
					case 0:
						printf("3D_Structure)frame_packing ");
   840f0:	010002b4 	movhi	r4,10
   840f4:	2130ac04 	addi	r4,r4,-15696
   840f8:	008ee340 	call	8ee34 <printf>
						break;
   840fc:	00001f06 	br	8417c <edid_print_cea+0xc2c>
					case 1:
						printf("3D_Structure)field_alternative ");
   84100:	010002b4 	movhi	r4,10
   84104:	2130b304 	addi	r4,r4,-15668
   84108:	008ee340 	call	8ee34 <printf>
						break;
   8410c:	00001b06 	br	8417c <edid_print_cea+0xc2c>
					case 2:
						printf("3D_Structure)line_alternative ");
   84110:	010002b4 	movhi	r4,10
   84114:	2130bb04 	addi	r4,r4,-15636
   84118:	008ee340 	call	8ee34 <printf>
						break;
   8411c:	00001706 	br	8417c <edid_print_cea+0xc2c>
					case 3:
						printf("3D_Structure)side-by-side(full) ");
   84120:	010002b4 	movhi	r4,10
   84124:	2130c304 	addi	r4,r4,-15604
   84128:	008ee340 	call	8ee34 <printf>
						break;
   8412c:	00001306 	br	8417c <edid_print_cea+0xc2c>
					case 4:
						printf("3D_Structure)L+depth ");
   84130:	010002b4 	movhi	r4,10
   84134:	2130cc04 	addi	r4,r4,-15568
   84138:	008ee340 	call	8ee34 <printf>
						break;
   8413c:	00000f06 	br	8417c <edid_print_cea+0xc2c>
					case 5:
						printf("3D_Structure)L+depth+graphics+graphics_depth ");
   84140:	010002b4 	movhi	r4,10
   84144:	2130d204 	addi	r4,r4,-15544
   84148:	008ee340 	call	8ee34 <printf>
						break;
   8414c:	00000b06 	br	8417c <edid_print_cea+0xc2c>
					case 6:
						printf("3D_Structure)top-and-bottom ");
   84150:	010002b4 	movhi	r4,10
   84154:	2130de04 	addi	r4,r4,-15496
   84158:	008ee340 	call	8ee34 <printf>
						break;
   8415c:	00000706 	br	8417c <edid_print_cea+0xc2c>
					case 8:
						printf("3D_Structure)side-by-side(half) ");
   84160:	010002b4 	movhi	r4,10
   84164:	2130e604 	addi	r4,r4,-15464
   84168:	008ee340 	call	8ee34 <printf>
						break;
   8416c:	00000306 	br	8417c <edid_print_cea+0xc2c>
					default:
						printf("3D_Structure)unknown ");
   84170:	010002b4 	movhi	r4,10
   84174:	2130ef04 	addi	r4,r4,-15428
   84178:	008ee340 	call	8ee34 <printf>
						break;
					}

					if (cea->db_vsdb_hdmi.vic_3d[i].struct_3d == 0x08) {
   8417c:	e0bfd817 	ldw	r2,-160(fp)
   84180:	e0ffd517 	ldw	r3,-172(fp)
   84184:	10800324 	muli	r2,r2,12
   84188:	10c5883a 	add	r2,r2,r3
   8418c:	1080b904 	addi	r2,r2,740
   84190:	10800017 	ldw	r2,0(r2)
   84194:	10800218 	cmpnei	r2,r2,8
   84198:	1000391e 	bne	r2,zero,84280 <edid_print_cea+0xd30>
						switch (cea->db_vsdb_hdmi.vic_3d[i].detail_3d) {
   8419c:	e0bfd817 	ldw	r2,-160(fp)
   841a0:	e0ffd517 	ldw	r3,-172(fp)
   841a4:	10800324 	muli	r2,r2,12
   841a8:	10c5883a 	add	r2,r2,r3
   841ac:	1080ba04 	addi	r2,r2,744
   841b0:	10800017 	ldw	r2,0(r2)
   841b4:	e0bfe915 	stw	r2,-92(fp)
   841b8:	e0ffe917 	ldw	r3,-92(fp)
   841bc:	188002e8 	cmpgeui	r2,r3,11
   841c0:	10002f1e 	bne	r2,zero,84280 <edid_print_cea+0xd30>
   841c4:	e13fe917 	ldw	r4,-92(fp)
   841c8:	e13fe917 	ldw	r4,-92(fp)
   841cc:	2105883a 	add	r2,r4,r4
   841d0:	1087883a 	add	r3,r2,r2
   841d4:	00800234 	movhi	r2,8
   841d8:	10907a04 	addi	r2,r2,16872
   841dc:	1885883a 	add	r2,r3,r2
   841e0:	10800017 	ldw	r2,0(r2)
   841e4:	1000683a 	jmp	r2
   841e8:	00084214 	movui	zero,8456
   841ec:	00084224 	muli	zero,zero,8456
   841f0:	00084280 	call	8428 <__alt_mem_onchip_memory2-0x77bd8>
   841f4:	00084280 	call	8428 <__alt_mem_onchip_memory2-0x77bd8>
   841f8:	00084280 	call	8428 <__alt_mem_onchip_memory2-0x77bd8>
   841fc:	00084280 	call	8428 <__alt_mem_onchip_memory2-0x77bd8>
   84200:	00084234 	movhi	zero,8456
   84204:	00084244 	movi	zero,8457
   84208:	00084254 	movui	zero,8457
   8420c:	00084264 	muli	zero,zero,8457
   84210:	00084274 	movhi	zero,8457
						case 0:
							printf("3D_Detail)h_sub_sampling+four_quincunx_matrix");
   84214:	010002b4 	movhi	r4,10
   84218:	2130f504 	addi	r4,r4,-15404
   8421c:	008ee340 	call	8ee34 <printf>
							break;
   84220:	00001706 	br	84280 <edid_print_cea+0xd30>
						case 1:
							printf("3D_Detail)h_sub_sampling");
   84224:	010002b4 	movhi	r4,10
   84228:	21310104 	addi	r4,r4,-15356
   8422c:	008ee340 	call	8ee34 <printf>
							break;
   84230:	00001306 	br	84280 <edid_print_cea+0xd30>
						case 6:
							printf("3D_Detail)all_4_sub_sampling_position");
   84234:	010002b4 	movhi	r4,10
   84238:	21310804 	addi	r4,r4,-15328
   8423c:	008ee340 	call	8ee34 <printf>
							break;
   84240:	00000f06 	br	84280 <edid_print_cea+0xd30>
						case 7:
							printf("3D_Detail)odd_left+odd_right");
   84244:	010002b4 	movhi	r4,10
   84248:	21311204 	addi	r4,r4,-15288
   8424c:	008ee340 	call	8ee34 <printf>
							break;
   84250:	00000b06 	br	84280 <edid_print_cea+0xd30>
						case 8:
							printf("3D_Detail)odd_left+even_right");
   84254:	010002b4 	movhi	r4,10
   84258:	21311a04 	addi	r4,r4,-15256
   8425c:	008ee340 	call	8ee34 <printf>
							break;
   84260:	00000706 	br	84280 <edid_print_cea+0xd30>
						case 9:
							printf("3D_Detail)even_left+odd_right");
   84264:	010002b4 	movhi	r4,10
   84268:	21312204 	addi	r4,r4,-15224
   8426c:	008ee340 	call	8ee34 <printf>
							break;
   84270:	00000306 	br	84280 <edid_print_cea+0xd30>
						case 10:
							printf("3D_Detail)even_left+even_right");
   84274:	010002b4 	movhi	r4,10
   84278:	21312a04 	addi	r4,r4,-15192
   8427c:	008ee340 	call	8ee34 <printf>
							break;
						}
					}

					printf("\n");
   84280:	01000284 	movi	r4,10
   84284:	008eeac0 	call	8eeac <putchar>
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
					break;
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
   84288:	e0bfd817 	ldw	r2,-160(fp)
   8428c:	10800044 	addi	r2,r2,1
   84290:	e0bfd815 	stw	r2,-160(fp)
   84294:	e0bfd517 	ldw	r2,-172(fp)
   84298:	10c0b717 	ldw	r3,732(r2)
   8429c:	e0bfd817 	ldw	r2,-160(fp)
   842a0:	10ff6d16 	blt	r2,r3,84058 <edid_print_cea+0xb08>

					printf("\n");
				}
			}

			break;
   842a4:	00015e06 	br	84820 <edid_print_cea+0x12d0>

		case CEA_DB_SPEAKER:
			printf("\n  [%02d] speaker allocation data block ...\n", t);
   842a8:	010002b4 	movhi	r4,10
   842ac:	21313204 	addi	r4,r4,-15160
   842b0:	e17fd717 	ldw	r5,-164(fp)
   842b4:	008ee340 	call	8ee34 <printf>

			printf("       RLC/RRC : %s\n", cea->db_speaker.designation & CEA_SPK_RLC_RRC ? "yes" : "no");
   842b8:	e0bfd517 	ldw	r2,-172(fp)
   842bc:	10809b17 	ldw	r2,620(r2)
   842c0:	1080100c 	andi	r2,r2,64
   842c4:	1005003a 	cmpeq	r2,r2,zero
   842c8:	1000041e 	bne	r2,zero,842dc <edid_print_cea+0xd8c>
   842cc:	008002b4 	movhi	r2,10
   842d0:	10ae3c04 	addi	r2,r2,-18192
   842d4:	e0bfe815 	stw	r2,-96(fp)
   842d8:	00000306 	br	842e8 <edid_print_cea+0xd98>
   842dc:	00c002b4 	movhi	r3,10
   842e0:	18ee3d04 	addi	r3,r3,-18188
   842e4:	e0ffe815 	stw	r3,-96(fp)
   842e8:	010002b4 	movhi	r4,10
   842ec:	21313e04 	addi	r4,r4,-15112
   842f0:	e17fe817 	ldw	r5,-96(fp)
   842f4:	008ee340 	call	8ee34 <printf>
			printf("       FLC/FRC : %s\n", cea->db_speaker.designation & CEA_SPK_FLC_FRC ? "yes" : "no");
   842f8:	e0bfd517 	ldw	r2,-172(fp)
   842fc:	10809b17 	ldw	r2,620(r2)
   84300:	1080080c 	andi	r2,r2,32
   84304:	1005003a 	cmpeq	r2,r2,zero
   84308:	1000041e 	bne	r2,zero,8431c <edid_print_cea+0xdcc>
   8430c:	010002b4 	movhi	r4,10
   84310:	212e3c04 	addi	r4,r4,-18192
   84314:	e13fe715 	stw	r4,-100(fp)
   84318:	00000306 	br	84328 <edid_print_cea+0xdd8>
   8431c:	008002b4 	movhi	r2,10
   84320:	10ae3d04 	addi	r2,r2,-18188
   84324:	e0bfe715 	stw	r2,-100(fp)
   84328:	010002b4 	movhi	r4,10
   8432c:	21314404 	addi	r4,r4,-15088
   84330:	e17fe717 	ldw	r5,-100(fp)
   84334:	008ee340 	call	8ee34 <printf>
			printf("       RC      : %s\n", cea->db_speaker.designation & CEA_SPK_RC ? "yes" : "no");
   84338:	e0bfd517 	ldw	r2,-172(fp)
   8433c:	10809b17 	ldw	r2,620(r2)
   84340:	1080040c 	andi	r2,r2,16
   84344:	1005003a 	cmpeq	r2,r2,zero
   84348:	1000041e 	bne	r2,zero,8435c <edid_print_cea+0xe0c>
   8434c:	00c002b4 	movhi	r3,10
   84350:	18ee3c04 	addi	r3,r3,-18192
   84354:	e0ffe615 	stw	r3,-104(fp)
   84358:	00000306 	br	84368 <edid_print_cea+0xe18>
   8435c:	010002b4 	movhi	r4,10
   84360:	212e3d04 	addi	r4,r4,-18188
   84364:	e13fe615 	stw	r4,-104(fp)
   84368:	010002b4 	movhi	r4,10
   8436c:	21314a04 	addi	r4,r4,-15064
   84370:	e17fe617 	ldw	r5,-104(fp)
   84374:	008ee340 	call	8ee34 <printf>
			printf("       RL/RR   : %s\n", cea->db_speaker.designation & CEA_SPK_RL_RR ? "yes" : "no");
   84378:	e0bfd517 	ldw	r2,-172(fp)
   8437c:	10809b17 	ldw	r2,620(r2)
   84380:	1080020c 	andi	r2,r2,8
   84384:	1005003a 	cmpeq	r2,r2,zero
   84388:	1000041e 	bne	r2,zero,8439c <edid_print_cea+0xe4c>
   8438c:	008002b4 	movhi	r2,10
   84390:	10ae3c04 	addi	r2,r2,-18192
   84394:	e0bfe515 	stw	r2,-108(fp)
   84398:	00000306 	br	843a8 <edid_print_cea+0xe58>
   8439c:	00c002b4 	movhi	r3,10
   843a0:	18ee3d04 	addi	r3,r3,-18188
   843a4:	e0ffe515 	stw	r3,-108(fp)
   843a8:	010002b4 	movhi	r4,10
   843ac:	21315004 	addi	r4,r4,-15040
   843b0:	e17fe517 	ldw	r5,-108(fp)
   843b4:	008ee340 	call	8ee34 <printf>
			printf("       FC      : %s\n", cea->db_speaker.designation & CEA_SPK_FC ? "yes" : "no");
   843b8:	e0bfd517 	ldw	r2,-172(fp)
   843bc:	10809b17 	ldw	r2,620(r2)
   843c0:	1080010c 	andi	r2,r2,4
   843c4:	1005003a 	cmpeq	r2,r2,zero
   843c8:	1000041e 	bne	r2,zero,843dc <edid_print_cea+0xe8c>
   843cc:	010002b4 	movhi	r4,10
   843d0:	212e3c04 	addi	r4,r4,-18192
   843d4:	e13fe415 	stw	r4,-112(fp)
   843d8:	00000306 	br	843e8 <edid_print_cea+0xe98>
   843dc:	008002b4 	movhi	r2,10
   843e0:	10ae3d04 	addi	r2,r2,-18188
   843e4:	e0bfe415 	stw	r2,-112(fp)
   843e8:	010002b4 	movhi	r4,10
   843ec:	21315604 	addi	r4,r4,-15016
   843f0:	e17fe417 	ldw	r5,-112(fp)
   843f4:	008ee340 	call	8ee34 <printf>
			printf("       LFE     : %s\n", cea->db_speaker.designation & CEA_SPK_LFE ? "yes" : "no");
   843f8:	e0bfd517 	ldw	r2,-172(fp)
   843fc:	10809b17 	ldw	r2,620(r2)
   84400:	1080008c 	andi	r2,r2,2
   84404:	1005003a 	cmpeq	r2,r2,zero
   84408:	1000041e 	bne	r2,zero,8441c <edid_print_cea+0xecc>
   8440c:	00c002b4 	movhi	r3,10
   84410:	18ee3c04 	addi	r3,r3,-18192
   84414:	e0ffe315 	stw	r3,-116(fp)
   84418:	00000306 	br	84428 <edid_print_cea+0xed8>
   8441c:	010002b4 	movhi	r4,10
   84420:	212e3d04 	addi	r4,r4,-18188
   84424:	e13fe315 	stw	r4,-116(fp)
   84428:	010002b4 	movhi	r4,10
   8442c:	21315c04 	addi	r4,r4,-14992
   84430:	e17fe317 	ldw	r5,-116(fp)
   84434:	008ee340 	call	8ee34 <printf>
			printf("       FL/FR   : %s\n", cea->db_speaker.designation & CEA_SPK_FL_FR ? "yes" : "no");
   84438:	e0bfd517 	ldw	r2,-172(fp)
   8443c:	10809b17 	ldw	r2,620(r2)
   84440:	1080004c 	andi	r2,r2,1
   84444:	10803fcc 	andi	r2,r2,255
   84448:	1005003a 	cmpeq	r2,r2,zero
   8444c:	1000041e 	bne	r2,zero,84460 <edid_print_cea+0xf10>
   84450:	008002b4 	movhi	r2,10
   84454:	10ae3c04 	addi	r2,r2,-18192
   84458:	e0bfe215 	stw	r2,-120(fp)
   8445c:	00000306 	br	8446c <edid_print_cea+0xf1c>
   84460:	00c002b4 	movhi	r3,10
   84464:	18ee3d04 	addi	r3,r3,-18188
   84468:	e0ffe215 	stw	r3,-120(fp)
   8446c:	010002b4 	movhi	r4,10
   84470:	21316204 	addi	r4,r4,-14968
   84474:	e17fe217 	ldw	r5,-120(fp)
   84478:	008ee340 	call	8ee34 <printf>

			break;
   8447c:	0000e806 	br	84820 <edid_print_cea+0x12d0>

		case CEA_DB_DTC:
			printf("\n  [%02d] VESA DTC data block ... (todo)\n", t);
   84480:	010002b4 	movhi	r4,10
   84484:	21316804 	addi	r4,r4,-14944
   84488:	e17fd717 	ldw	r5,-164(fp)
   8448c:	008ee340 	call	8ee34 <printf>
			break;
   84490:	0000e306 	br	84820 <edid_print_cea+0x12d0>

		case CEA_DB_EXTENDED:
			switch (cea->dbe_tags[t]) {
   84494:	e0ffd717 	ldw	r3,-164(fp)
   84498:	e0bfd517 	ldw	r2,-172(fp)
   8449c:	1885883a 	add	r2,r3,r2
   844a0:	10801704 	addi	r2,r2,92
   844a4:	10800083 	ldbu	r2,2(r2)
   844a8:	10803fcc 	andi	r2,r2,255
   844ac:	e0bfe115 	stw	r2,-124(fp)
   844b0:	e13fe117 	ldw	r4,-124(fp)
   844b4:	208004e8 	cmpgeui	r2,r4,19
   844b8:	1000d91e 	bne	r2,zero,84820 <edid_print_cea+0x12d0>
   844bc:	e0ffe117 	ldw	r3,-124(fp)
   844c0:	e0ffe117 	ldw	r3,-124(fp)
   844c4:	18c5883a 	add	r2,r3,r3
   844c8:	1087883a 	add	r3,r2,r2
   844cc:	00800234 	movhi	r2,8
   844d0:	10913804 	addi	r2,r2,17632
   844d4:	1885883a 	add	r2,r3,r2
   844d8:	10800017 	ldw	r2,0(r2)
   844dc:	1000683a 	jmp	r2
   844e0:	0008452c 	andhi	zero,zero,8468
   844e4:	00084720 	cmpeqi	zero,zero,8476
   844e8:	00084734 	movhi	zero,8476
   844ec:	00084748 	cmpgei	zero,zero,8477
   844f0:	0008475c 	xori	zero,zero,8477
   844f4:	00084770 	cmpltui	zero,zero,8477
   844f8:	00084820 	cmpeqi	zero,zero,8480
   844fc:	00084820 	cmpeqi	zero,zero,8480
   84500:	00084820 	cmpeqi	zero,zero,8480
   84504:	00084820 	cmpeqi	zero,zero,8480
   84508:	00084820 	cmpeqi	zero,zero,8480
   8450c:	00084820 	cmpeqi	zero,zero,8480
   84510:	00084820 	cmpeqi	zero,zero,8480
   84514:	00084820 	cmpeqi	zero,zero,8480
   84518:	00084820 	cmpeqi	zero,zero,8480
   8451c:	00084820 	cmpeqi	zero,zero,8480
   84520:	000847bc 	xorhi	zero,zero,8478
   84524:	000847d0 	cmplti	zero,zero,8479
   84528:	000847e4 	muli	zero,zero,8479
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);
   8452c:	010002b4 	movhi	r4,10
   84530:	21317304 	addi	r4,r4,-14900
   84534:	e17fd717 	ldw	r5,-164(fp)
   84538:	008ee340 	call	8ee34 <printf>

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");
   8453c:	e0bfd517 	ldw	r2,-172(fp)
   84540:	1080ea17 	ldw	r2,936(r2)
   84544:	1005003a 	cmpeq	r2,r2,zero
   84548:	1000041e 	bne	r2,zero,8455c <edid_print_cea+0x100c>
   8454c:	010002b4 	movhi	r4,10
   84550:	212e3c04 	addi	r4,r4,-18192
   84554:	e13fe015 	stw	r4,-128(fp)
   84558:	00000306 	br	84568 <edid_print_cea+0x1018>
   8455c:	008002b4 	movhi	r2,10
   84560:	10ae3d04 	addi	r2,r2,-18188
   84564:	e0bfe015 	stw	r2,-128(fp)
   84568:	010002b4 	movhi	r4,10
   8456c:	21318004 	addi	r4,r4,-14848
   84570:	e17fe017 	ldw	r5,-128(fp)
   84574:	008ee340 	call	8ee34 <printf>

				switch (cea->db_vcdb.pt_scan_behavior) {
   84578:	e0bfd517 	ldw	r2,-172(fp)
   8457c:	1080eb17 	ldw	r2,940(r2)
   84580:	e0bfdf15 	stw	r2,-132(fp)
   84584:	e0ffdf17 	ldw	r3,-132(fp)
   84588:	18800060 	cmpeqi	r2,r3,1
   8458c:	1000121e 	bne	r2,zero,845d8 <edid_print_cea+0x1088>
   84590:	e13fdf17 	ldw	r4,-132(fp)
   84594:	20800088 	cmpgei	r2,r4,2
   84598:	1000041e 	bne	r2,zero,845ac <edid_print_cea+0x105c>
   8459c:	e0ffdf17 	ldw	r3,-132(fp)
   845a0:	1805003a 	cmpeq	r2,r3,zero
   845a4:	1000081e 	bne	r2,zero,845c8 <edid_print_cea+0x1078>
   845a8:	00001606 	br	84604 <edid_print_cea+0x10b4>
   845ac:	e13fdf17 	ldw	r4,-132(fp)
   845b0:	208000a0 	cmpeqi	r2,r4,2
   845b4:	10000c1e 	bne	r2,zero,845e8 <edid_print_cea+0x1098>
   845b8:	e0ffdf17 	ldw	r3,-132(fp)
   845bc:	188000e0 	cmpeqi	r2,r3,3
   845c0:	10000d1e 	bne	r2,zero,845f8 <edid_print_cea+0x10a8>
   845c4:	00000f06 	br	84604 <edid_print_cea+0x10b4>
				case 0:
					printf("       PT scan behavior              : none\n");
   845c8:	010002b4 	movhi	r4,10
   845cc:	21318b04 	addi	r4,r4,-14804
   845d0:	008ef700 	call	8ef70 <puts>
					break;
   845d4:	00000b06 	br	84604 <edid_print_cea+0x10b4>
				case 1:
					printf("       PT scan behavior              : overscanned always\n");
   845d8:	010002b4 	movhi	r4,10
   845dc:	21319604 	addi	r4,r4,-14760
   845e0:	008ef700 	call	8ef70 <puts>
					break;
   845e4:	00000706 	br	84604 <edid_print_cea+0x10b4>
				case 2:
					printf("       PT scan behavior              : underscanned always\n");
   845e8:	010002b4 	movhi	r4,10
   845ec:	2131a504 	addi	r4,r4,-14700
   845f0:	008ef700 	call	8ef70 <puts>
					break;
   845f4:	00000306 	br	84604 <edid_print_cea+0x10b4>
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
   845f8:	010002b4 	movhi	r4,10
   845fc:	2131b404 	addi	r4,r4,-14640
   84600:	008ef700 	call	8ef70 <puts>
					break;
				}

				switch (cea->db_vcdb.it_scan_behavior) {
   84604:	e0bfd517 	ldw	r2,-172(fp)
   84608:	1080ec17 	ldw	r2,944(r2)
   8460c:	e0bfde15 	stw	r2,-136(fp)
   84610:	e13fde17 	ldw	r4,-136(fp)
   84614:	20800060 	cmpeqi	r2,r4,1
   84618:	1000121e 	bne	r2,zero,84664 <edid_print_cea+0x1114>
   8461c:	e0ffde17 	ldw	r3,-136(fp)
   84620:	18800088 	cmpgei	r2,r3,2
   84624:	1000041e 	bne	r2,zero,84638 <edid_print_cea+0x10e8>
   84628:	e13fde17 	ldw	r4,-136(fp)
   8462c:	2005003a 	cmpeq	r2,r4,zero
   84630:	1000081e 	bne	r2,zero,84654 <edid_print_cea+0x1104>
   84634:	00001606 	br	84690 <edid_print_cea+0x1140>
   84638:	e0ffde17 	ldw	r3,-136(fp)
   8463c:	188000a0 	cmpeqi	r2,r3,2
   84640:	10000c1e 	bne	r2,zero,84674 <edid_print_cea+0x1124>
   84644:	e13fde17 	ldw	r4,-136(fp)
   84648:	208000e0 	cmpeqi	r2,r4,3
   8464c:	10000d1e 	bne	r2,zero,84684 <edid_print_cea+0x1134>
   84650:	00000f06 	br	84690 <edid_print_cea+0x1140>
				case 0:
					printf("       IT scan behavior              : none\n");
   84654:	010002b4 	movhi	r4,10
   84658:	2131c604 	addi	r4,r4,-14568
   8465c:	008ef700 	call	8ef70 <puts>
					break;
   84660:	00000b06 	br	84690 <edid_print_cea+0x1140>
				case 1:
					printf("       IT scan behavior              : overscanned always\n");
   84664:	010002b4 	movhi	r4,10
   84668:	2131d104 	addi	r4,r4,-14524
   8466c:	008ef700 	call	8ef70 <puts>
					break;
   84670:	00000706 	br	84690 <edid_print_cea+0x1140>
				case 2:
					printf("       IT scan behavior              : underscanned always\n");
   84674:	010002b4 	movhi	r4,10
   84678:	2131e004 	addi	r4,r4,-14464
   8467c:	008ef700 	call	8ef70 <puts>
					break;
   84680:	00000306 	br	84690 <edid_print_cea+0x1140>
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
   84684:	010002b4 	movhi	r4,10
   84688:	2131ef04 	addi	r4,r4,-14404
   8468c:	008ef700 	call	8ef70 <puts>
					break;
				}

				switch (cea->db_vcdb.ce_scan_behavior) {
   84690:	e0bfd517 	ldw	r2,-172(fp)
   84694:	1080ed17 	ldw	r2,948(r2)
   84698:	e0bfdd15 	stw	r2,-140(fp)
   8469c:	e0ffdd17 	ldw	r3,-140(fp)
   846a0:	18800060 	cmpeqi	r2,r3,1
   846a4:	1000121e 	bne	r2,zero,846f0 <edid_print_cea+0x11a0>
   846a8:	e13fdd17 	ldw	r4,-140(fp)
   846ac:	20800088 	cmpgei	r2,r4,2
   846b0:	1000041e 	bne	r2,zero,846c4 <edid_print_cea+0x1174>
   846b4:	e0ffdd17 	ldw	r3,-140(fp)
   846b8:	1805003a 	cmpeq	r2,r3,zero
   846bc:	1000081e 	bne	r2,zero,846e0 <edid_print_cea+0x1190>
   846c0:	00005706 	br	84820 <edid_print_cea+0x12d0>
   846c4:	e13fdd17 	ldw	r4,-140(fp)
   846c8:	208000a0 	cmpeqi	r2,r4,2
   846cc:	10000c1e 	bne	r2,zero,84700 <edid_print_cea+0x11b0>
   846d0:	e0ffdd17 	ldw	r3,-140(fp)
   846d4:	188000e0 	cmpeqi	r2,r3,3
   846d8:	10000d1e 	bne	r2,zero,84710 <edid_print_cea+0x11c0>
   846dc:	00005006 	br	84820 <edid_print_cea+0x12d0>
				case 0:
					printf("       CE scan behavior              : none\n");
   846e0:	010002b4 	movhi	r4,10
   846e4:	21320104 	addi	r4,r4,-14332
   846e8:	008ef700 	call	8ef70 <puts>
					break;
   846ec:	00004c06 	br	84820 <edid_print_cea+0x12d0>
				case 1:
					printf("       CE scan behavior              : overscanned always\n");
   846f0:	010002b4 	movhi	r4,10
   846f4:	21320c04 	addi	r4,r4,-14288
   846f8:	008ef700 	call	8ef70 <puts>
					break;
   846fc:	00004806 	br	84820 <edid_print_cea+0x12d0>
				case 2:
					printf("       CE scan behavior              : underscanned always\n");
   84700:	010002b4 	movhi	r4,10
   84704:	21321b04 	addi	r4,r4,-14228
   84708:	008ef700 	call	8ef70 <puts>
					break;
   8470c:	00004406 	br	84820 <edid_print_cea+0x12d0>
				case 3:
					printf("       CE scan behavior              : supports both over/under-scan\n");
   84710:	010002b4 	movhi	r4,10
   84714:	21322a04 	addi	r4,r4,-14168
   84718:	008ef700 	call	8ef70 <puts>
					break;
				}
				break;
   8471c:	00004006 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_VIDEO_VENDOR:
				printf("\n  [%02d] vendor-specific video data block (ext) ... (todo)\n", t);
   84720:	010002b4 	movhi	r4,10
   84724:	21323c04 	addi	r4,r4,-14096
   84728:	e17fd717 	ldw	r5,-164(fp)
   8472c:	008ee340 	call	8ee34 <printf>
				break;
   84730:	00003b06 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_VIDEO_DDI:
				printf("\n  [%02d] VESA video display device information data block (ext) ... (todo)\n", t);
   84734:	010002b4 	movhi	r4,10
   84738:	21324c04 	addi	r4,r4,-14032
   8473c:	e17fd717 	ldw	r5,-164(fp)
   84740:	008ee340 	call	8ee34 <printf>
				break;
   84744:	00003606 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_VIDEO_VESA:
				printf("\n  [%02d] VESA video data block (ext) ... (todo)\n", t);
   84748:	010002b4 	movhi	r4,10
   8474c:	21326004 	addi	r4,r4,-13952
   84750:	e17fd717 	ldw	r5,-164(fp)
   84754:	008ee340 	call	8ee34 <printf>
				break;
   84758:	00003106 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_VIDEO_HDMI:
				printf("\n  [%02d] HDMI video data block (ext) ... (todo)\n", t);
   8475c:	010002b4 	movhi	r4,10
   84760:	21326d04 	addi	r4,r4,-13900
   84764:	e17fd717 	ldw	r5,-164(fp)
   84768:	008ee340 	call	8ee34 <printf>
				break;
   8476c:	00002c06 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_COLORIMETRY:
				printf("\n  [%02d] colorimetry data block (ext) ... (todo)\n", t);
   84770:	010002b4 	movhi	r4,10
   84774:	21327a04 	addi	r4,r4,-13848
   84778:	e17fd717 	ldw	r5,-164(fp)
   8477c:	008ee340 	call	8ee34 <printf>
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   84780:	e0bfda17 	ldw	r2,-152(fp)
   84784:	10800084 	addi	r2,r2,2
   84788:	10800003 	ldbu	r2,0(r2)
   8478c:	10803fcc 	andi	r2,r2,255
   84790:	10c000cc 	andi	r3,r2,3
   84794:	e0bfd517 	ldw	r2,-172(fp)
   84798:	10c0e815 	stw	r3,928(r2)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   8479c:	e0bfda17 	ldw	r2,-152(fp)
   847a0:	108000c4 	addi	r2,r2,3
   847a4:	10800003 	ldbu	r2,0(r2)
   847a8:	10803fcc 	andi	r2,r2,255
   847ac:	10c001cc 	andi	r3,r2,7
   847b0:	e0bfd517 	ldw	r2,-172(fp)
   847b4:	10c0e915 	stw	r3,932(r2)
				break;
   847b8:	00001906 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_AUDIO_MISC:
				printf("\n  [%02d] CEA misc audio fields (ext) ... (todo)\n", t);
   847bc:	010002b4 	movhi	r4,10
   847c0:	21328704 	addi	r4,r4,-13796
   847c4:	e17fd717 	ldw	r5,-164(fp)
   847c8:	008ee340 	call	8ee34 <printf>
				break;
   847cc:	00001406 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_AUDIO_VENDOR:
				printf("\n  [%02d] vendor-specific audio data block (ext) ... (todo)\n", t);
   847d0:	010002b4 	movhi	r4,10
   847d4:	21329404 	addi	r4,r4,-13744
   847d8:	e17fd717 	ldw	r5,-164(fp)
   847dc:	008ee340 	call	8ee34 <printf>
				break;
   847e0:	00000f06 	br	84820 <edid_print_cea+0x12d0>
			case CEA_DBE_AUDIO_HDMI:
				printf("\n  [%02d] HDMI audio data block (ext) ... (todo)\n", t);
   847e4:	010002b4 	movhi	r4,10
   847e8:	2132a404 	addi	r4,r4,-13680
   847ec:	e17fd717 	ldw	r5,-164(fp)
   847f0:	008ee340 	call	8ee34 <printf>
				break;
			}

			break;
   847f4:	00000a06 	br	84820 <edid_print_cea+0x12d0>

		default:
			printf("\n  [%02d] unknown data block (%d).\n", t, cea->dbc_tags[t]);
   847f8:	e0ffd717 	ldw	r3,-164(fp)
   847fc:	e0bfd517 	ldw	r2,-172(fp)
   84800:	1885883a 	add	r2,r3,r2
   84804:	10800804 	addi	r2,r2,32
   84808:	10800003 	ldbu	r2,0(r2)
   8480c:	11803fcc 	andi	r6,r2,255
   84810:	010002b4 	movhi	r4,10
   84814:	2132b104 	addi	r4,r4,-13628
   84818:	e17fd717 	ldw	r5,-164(fp)
   8481c:	008ee340 	call	8ee34 <printf>
	printf("  supports YCbCr 4:2:2 in addition to RGB      : %s\n", cea->flags.ycbcr422 ? "yes" : "no");

	printf("\n  data block collections\n  ---------------------------------\n");

	// data block collection
	for (t = 0; t < cea->nr_dbcs; ++t) {
   84820:	e0bfd717 	ldw	r2,-164(fp)
   84824:	10800044 	addi	r2,r2,1
   84828:	e0bfd715 	stw	r2,-164(fp)
   8482c:	e0bfd517 	ldw	r2,-172(fp)
   84830:	10c00717 	ldw	r3,28(r2)
   84834:	e0bfd717 	ldw	r2,-164(fp)
   84838:	10fbad16 	blt	r2,r3,836f0 <edid_print_cea+0x1a0>
			printf("\n  [%02d] unknown data block (%d).\n", t, cea->dbc_tags[t]);
			break;
		}
	}

	if (cea->nr_dtd != 0)
   8483c:	e0bfd517 	ldw	r2,-172(fp)
   84840:	10800617 	ldw	r2,24(r2)
   84844:	1005003a 	cmpeq	r2,r2,zero
   84848:	1000031e 	bne	r2,zero,84858 <edid_print_cea+0x1308>
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");
   8484c:	010002b4 	movhi	r4,10
   84850:	2132ba04 	addi	r4,r4,-13592
   84854:	008ef700 	call	8ef70 <puts>

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   84858:	e03fd815 	stw	zero,-160(fp)
   8485c:	00019e06 	br	84ed8 <edid_print_cea+0x1988>

		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
   84860:	010002b4 	movhi	r4,10
   84864:	2132cb04 	addi	r4,r4,-13524
   84868:	e17fd817 	ldw	r5,-160(fp)
   8486c:	008ee340 	call	8ee34 <printf>

		printf("      pixel clock   : %d (Hz)\n", cea->detailed_timing[i].pixel_clock);
   84870:	e0bfd817 	ldw	r2,-160(fp)
   84874:	e0ffd517 	ldw	r3,-172(fp)
   84878:	100491ba 	slli	r2,r2,6
   8487c:	10c5883a 	add	r2,r2,r3
   84880:	1080ee04 	addi	r2,r2,952
   84884:	11400017 	ldw	r5,0(r2)
   84888:	010002b4 	movhi	r4,10
   8488c:	2132d604 	addi	r4,r4,-13480
   84890:	008ee340 	call	8ee34 <printf>
		printf("      h addressible : %d (pixels)\n", cea->detailed_timing[i].width);
   84894:	e0bfd817 	ldw	r2,-160(fp)
   84898:	e0ffd517 	ldw	r3,-172(fp)
   8489c:	100491ba 	slli	r2,r2,6
   848a0:	10c5883a 	add	r2,r2,r3
   848a4:	1080ef04 	addi	r2,r2,956
   848a8:	11400017 	ldw	r5,0(r2)
   848ac:	010002b4 	movhi	r4,10
   848b0:	2132de04 	addi	r4,r4,-13448
   848b4:	008ee340 	call	8ee34 <printf>
		printf("        blank       : %d (pixels)\n", cea->detailed_timing[i].h_blank);
   848b8:	e0bfd817 	ldw	r2,-160(fp)
   848bc:	e0ffd517 	ldw	r3,-172(fp)
   848c0:	100491ba 	slli	r2,r2,6
   848c4:	10c5883a 	add	r2,r2,r3
   848c8:	1080f104 	addi	r2,r2,964
   848cc:	11400017 	ldw	r5,0(r2)
   848d0:	010002b4 	movhi	r4,10
   848d4:	2132e704 	addi	r4,r4,-13412
   848d8:	008ee340 	call	8ee34 <printf>
		printf("        fp          : %d (pixels)\n", cea->detailed_timing[i].h_fp);
   848dc:	e0bfd817 	ldw	r2,-160(fp)
   848e0:	e0ffd517 	ldw	r3,-172(fp)
   848e4:	100491ba 	slli	r2,r2,6
   848e8:	10c5883a 	add	r2,r2,r3
   848ec:	1080f304 	addi	r2,r2,972
   848f0:	11400017 	ldw	r5,0(r2)
   848f4:	010002b4 	movhi	r4,10
   848f8:	2132f004 	addi	r4,r4,-13376
   848fc:	008ee340 	call	8ee34 <printf>
		printf("        sync        : %d (pixels)\n", cea->detailed_timing[i].h_sync);
   84900:	e0bfd817 	ldw	r2,-160(fp)
   84904:	e0ffd517 	ldw	r3,-172(fp)
   84908:	100491ba 	slli	r2,r2,6
   8490c:	10c5883a 	add	r2,r2,r3
   84910:	1080f504 	addi	r2,r2,980
   84914:	11400017 	ldw	r5,0(r2)
   84918:	010002b4 	movhi	r4,10
   8491c:	2132f904 	addi	r4,r4,-13340
   84920:	008ee340 	call	8ee34 <printf>
		printf("        bp          : %d (pixels)\n", cea->detailed_timing[i].h_blank - cea->detailed_timing[i].h_fp - cea->detailed_timing[i].h_sync);
   84924:	e0bfd817 	ldw	r2,-160(fp)
   84928:	e0ffd517 	ldw	r3,-172(fp)
   8492c:	100491ba 	slli	r2,r2,6
   84930:	10c5883a 	add	r2,r2,r3
   84934:	1080f104 	addi	r2,r2,964
   84938:	11000017 	ldw	r4,0(r2)
   8493c:	e0bfd817 	ldw	r2,-160(fp)
   84940:	e0ffd517 	ldw	r3,-172(fp)
   84944:	100491ba 	slli	r2,r2,6
   84948:	10c5883a 	add	r2,r2,r3
   8494c:	1080f304 	addi	r2,r2,972
   84950:	10800017 	ldw	r2,0(r2)
   84954:	2089c83a 	sub	r4,r4,r2
   84958:	e0bfd817 	ldw	r2,-160(fp)
   8495c:	e0ffd517 	ldw	r3,-172(fp)
   84960:	100491ba 	slli	r2,r2,6
   84964:	10c5883a 	add	r2,r2,r3
   84968:	1080f504 	addi	r2,r2,980
   8496c:	10800017 	ldw	r2,0(r2)
   84970:	208bc83a 	sub	r5,r4,r2
   84974:	010002b4 	movhi	r4,10
   84978:	21330204 	addi	r4,r4,-13304
   8497c:	008ee340 	call	8ee34 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].h_size);
   84980:	e0bfd817 	ldw	r2,-160(fp)
   84984:	e0ffd517 	ldw	r3,-172(fp)
   84988:	100491ba 	slli	r2,r2,6
   8498c:	10c5883a 	add	r2,r2,r3
   84990:	1080f704 	addi	r2,r2,988
   84994:	11400017 	ldw	r5,0(r2)
   84998:	010002b4 	movhi	r4,10
   8499c:	21330b04 	addi	r4,r4,-13268
   849a0:	008ee340 	call	8ee34 <printf>
		printf("      v addressible : %d (lines)\n", cea->detailed_timing[i].height);
   849a4:	e0bfd817 	ldw	r2,-160(fp)
   849a8:	e0ffd517 	ldw	r3,-172(fp)
   849ac:	100491ba 	slli	r2,r2,6
   849b0:	10c5883a 	add	r2,r2,r3
   849b4:	1080f004 	addi	r2,r2,960
   849b8:	11400017 	ldw	r5,0(r2)
   849bc:	010002b4 	movhi	r4,10
   849c0:	21331304 	addi	r4,r4,-13236
   849c4:	008ee340 	call	8ee34 <printf>
		printf("        blank       : %d (lines)\n", cea->detailed_timing[i].v_blank);
   849c8:	e0bfd817 	ldw	r2,-160(fp)
   849cc:	e0ffd517 	ldw	r3,-172(fp)
   849d0:	100491ba 	slli	r2,r2,6
   849d4:	10c5883a 	add	r2,r2,r3
   849d8:	1080f204 	addi	r2,r2,968
   849dc:	11400017 	ldw	r5,0(r2)
   849e0:	010002b4 	movhi	r4,10
   849e4:	21331c04 	addi	r4,r4,-13200
   849e8:	008ee340 	call	8ee34 <printf>
		printf("        fp          : %d (lines)\n", cea->detailed_timing[i].v_fp);
   849ec:	e0bfd817 	ldw	r2,-160(fp)
   849f0:	e0ffd517 	ldw	r3,-172(fp)
   849f4:	100491ba 	slli	r2,r2,6
   849f8:	10c5883a 	add	r2,r2,r3
   849fc:	1080f404 	addi	r2,r2,976
   84a00:	11400017 	ldw	r5,0(r2)
   84a04:	010002b4 	movhi	r4,10
   84a08:	21332504 	addi	r4,r4,-13164
   84a0c:	008ee340 	call	8ee34 <printf>
		printf("        sync        : %d (lines)\n", cea->detailed_timing[i].v_sync);
   84a10:	e0bfd817 	ldw	r2,-160(fp)
   84a14:	e0ffd517 	ldw	r3,-172(fp)
   84a18:	100491ba 	slli	r2,r2,6
   84a1c:	10c5883a 	add	r2,r2,r3
   84a20:	1080f604 	addi	r2,r2,984
   84a24:	11400017 	ldw	r5,0(r2)
   84a28:	010002b4 	movhi	r4,10
   84a2c:	21332e04 	addi	r4,r4,-13128
   84a30:	008ee340 	call	8ee34 <printf>
		printf("        bp          : %d (lines)\n", cea->detailed_timing[i].v_blank - cea->detailed_timing[i].v_fp - cea->detailed_timing[i].v_sync);
   84a34:	e0bfd817 	ldw	r2,-160(fp)
   84a38:	e0ffd517 	ldw	r3,-172(fp)
   84a3c:	100491ba 	slli	r2,r2,6
   84a40:	10c5883a 	add	r2,r2,r3
   84a44:	1080f204 	addi	r2,r2,968
   84a48:	11000017 	ldw	r4,0(r2)
   84a4c:	e0bfd817 	ldw	r2,-160(fp)
   84a50:	e0ffd517 	ldw	r3,-172(fp)
   84a54:	100491ba 	slli	r2,r2,6
   84a58:	10c5883a 	add	r2,r2,r3
   84a5c:	1080f404 	addi	r2,r2,976
   84a60:	10800017 	ldw	r2,0(r2)
   84a64:	2089c83a 	sub	r4,r4,r2
   84a68:	e0bfd817 	ldw	r2,-160(fp)
   84a6c:	e0ffd517 	ldw	r3,-172(fp)
   84a70:	100491ba 	slli	r2,r2,6
   84a74:	10c5883a 	add	r2,r2,r3
   84a78:	1080f604 	addi	r2,r2,984
   84a7c:	10800017 	ldw	r2,0(r2)
   84a80:	208bc83a 	sub	r5,r4,r2
   84a84:	010002b4 	movhi	r4,10
   84a88:	21333704 	addi	r4,r4,-13092
   84a8c:	008ee340 	call	8ee34 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].v_size);
   84a90:	e0bfd817 	ldw	r2,-160(fp)
   84a94:	e0ffd517 	ldw	r3,-172(fp)
   84a98:	100491ba 	slli	r2,r2,6
   84a9c:	10c5883a 	add	r2,r2,r3
   84aa0:	1080f804 	addi	r2,r2,992
   84aa4:	11400017 	ldw	r5,0(r2)
   84aa8:	010002b4 	movhi	r4,10
   84aac:	21330b04 	addi	r4,r4,-13268
   84ab0:	008ee340 	call	8ee34 <printf>
		printf("      border (L&R)  : %d (pixels)\n", cea->detailed_timing[i].border_lr);
   84ab4:	e0bfd817 	ldw	r2,-160(fp)
   84ab8:	e0ffd517 	ldw	r3,-172(fp)
   84abc:	100491ba 	slli	r2,r2,6
   84ac0:	10c5883a 	add	r2,r2,r3
   84ac4:	1080f904 	addi	r2,r2,996
   84ac8:	11400017 	ldw	r5,0(r2)
   84acc:	010002b4 	movhi	r4,10
   84ad0:	21334004 	addi	r4,r4,-13056
   84ad4:	008ee340 	call	8ee34 <printf>
		printf("      border (T&B)  : %d (lines)\n", cea->detailed_timing[i].border_tb);
   84ad8:	e0bfd817 	ldw	r2,-160(fp)
   84adc:	e0ffd517 	ldw	r3,-172(fp)
   84ae0:	100491ba 	slli	r2,r2,6
   84ae4:	10c5883a 	add	r2,r2,r3
   84ae8:	1080fa04 	addi	r2,r2,1000
   84aec:	11400017 	ldw	r5,0(r2)
   84af0:	010002b4 	movhi	r4,10
   84af4:	21334904 	addi	r4,r4,-13020
   84af8:	008ee340 	call	8ee34 <printf>
		printf("      interlaced    : %d\n", cea->detailed_timing[i].interlaced);
   84afc:	e0bfd817 	ldw	r2,-160(fp)
   84b00:	e0ffd517 	ldw	r3,-172(fp)
   84b04:	100491ba 	slli	r2,r2,6
   84b08:	10c5883a 	add	r2,r2,r3
   84b0c:	1080fb04 	addi	r2,r2,1004
   84b10:	11400017 	ldw	r5,0(r2)
   84b14:	010002b4 	movhi	r4,10
   84b18:	21335204 	addi	r4,r4,-12984
   84b1c:	008ee340 	call	8ee34 <printf>

		if (cea->detailed_timing[i].stereo == STEREO_NONE) {
   84b20:	e0bfd817 	ldw	r2,-160(fp)
   84b24:	e0ffd517 	ldw	r3,-172(fp)
   84b28:	100491ba 	slli	r2,r2,6
   84b2c:	10c5883a 	add	r2,r2,r3
   84b30:	1080fc04 	addi	r2,r2,1008
   84b34:	10800017 	ldw	r2,0(r2)
   84b38:	1004c03a 	cmpne	r2,r2,zero
   84b3c:	1000041e 	bne	r2,zero,84b50 <edid_print_cea+0x1600>
			printf("      stereo        : none\n");
   84b40:	010002b4 	movhi	r4,10
   84b44:	21335904 	addi	r4,r4,-12956
   84b48:	008ef700 	call	8ef70 <puts>
   84b4c:	00004d06 	br	84c84 <edid_print_cea+0x1734>
		} else {
    		printf("      stereo        : ");
   84b50:	010002b4 	movhi	r4,10
   84b54:	21336004 	addi	r4,r4,-12928
   84b58:	008ee340 	call	8ee34 <printf>

    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
   84b5c:	e0bfd817 	ldw	r2,-160(fp)
   84b60:	e0ffd517 	ldw	r3,-172(fp)
   84b64:	100491ba 	slli	r2,r2,6
   84b68:	10c5883a 	add	r2,r2,r3
   84b6c:	1080fc04 	addi	r2,r2,1008
   84b70:	10800017 	ldw	r2,0(r2)
   84b74:	1080008c 	andi	r2,r2,2
   84b78:	1005003a 	cmpeq	r2,r2,zero
   84b7c:	1000031e 	bne	r2,zero,84b8c <edid_print_cea+0x163c>
        		printf("field_seq_right ");
   84b80:	010002b4 	movhi	r4,10
   84b84:	21336604 	addi	r4,r4,-12904
   84b88:	008ee340 	call	8ee34 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
   84b8c:	e0bfd817 	ldw	r2,-160(fp)
   84b90:	e0ffd517 	ldw	r3,-172(fp)
   84b94:	100491ba 	slli	r2,r2,6
   84b98:	10c5883a 	add	r2,r2,r3
   84b9c:	1080fc04 	addi	r2,r2,1008
   84ba0:	10800017 	ldw	r2,0(r2)
   84ba4:	1080010c 	andi	r2,r2,4
   84ba8:	1005003a 	cmpeq	r2,r2,zero
   84bac:	1000031e 	bne	r2,zero,84bbc <edid_print_cea+0x166c>
        		printf("field_seq_left ");
   84bb0:	010002b4 	movhi	r4,10
   84bb4:	21336b04 	addi	r4,r4,-12884
   84bb8:	008ee340 	call	8ee34 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
   84bbc:	e0bfd817 	ldw	r2,-160(fp)
   84bc0:	e0ffd517 	ldw	r3,-172(fp)
   84bc4:	100491ba 	slli	r2,r2,6
   84bc8:	10c5883a 	add	r2,r2,r3
   84bcc:	1080fc04 	addi	r2,r2,1008
   84bd0:	10800017 	ldw	r2,0(r2)
   84bd4:	1080020c 	andi	r2,r2,8
   84bd8:	1005003a 	cmpeq	r2,r2,zero
   84bdc:	1000031e 	bne	r2,zero,84bec <edid_print_cea+0x169c>
        		printf("2way_interleave_right ");
   84be0:	010002b4 	movhi	r4,10
   84be4:	21336f04 	addi	r4,r4,-12868
   84be8:	008ee340 	call	8ee34 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
   84bec:	e0bfd817 	ldw	r2,-160(fp)
   84bf0:	e0ffd517 	ldw	r3,-172(fp)
   84bf4:	100491ba 	slli	r2,r2,6
   84bf8:	10c5883a 	add	r2,r2,r3
   84bfc:	1080fc04 	addi	r2,r2,1008
   84c00:	10800017 	ldw	r2,0(r2)
   84c04:	1080040c 	andi	r2,r2,16
   84c08:	1005003a 	cmpeq	r2,r2,zero
   84c0c:	1000031e 	bne	r2,zero,84c1c <edid_print_cea+0x16cc>
        		printf("2way_interleave_left ");
   84c10:	010002b4 	movhi	r4,10
   84c14:	21337504 	addi	r4,r4,-12844
   84c18:	008ee340 	call	8ee34 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_4WAY_INTERLEAVE)
   84c1c:	e0bfd817 	ldw	r2,-160(fp)
   84c20:	e0ffd517 	ldw	r3,-172(fp)
   84c24:	100491ba 	slli	r2,r2,6
   84c28:	10c5883a 	add	r2,r2,r3
   84c2c:	1080fc04 	addi	r2,r2,1008
   84c30:	10800017 	ldw	r2,0(r2)
   84c34:	1080080c 	andi	r2,r2,32
   84c38:	1005003a 	cmpeq	r2,r2,zero
   84c3c:	1000031e 	bne	r2,zero,84c4c <edid_print_cea+0x16fc>
        		printf("4way_interleave ");
   84c40:	010002b4 	movhi	r4,10
   84c44:	21337b04 	addi	r4,r4,-12820
   84c48:	008ee340 	call	8ee34 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
   84c4c:	e0bfd817 	ldw	r2,-160(fp)
   84c50:	e0ffd517 	ldw	r3,-172(fp)
   84c54:	100491ba 	slli	r2,r2,6
   84c58:	10c5883a 	add	r2,r2,r3
   84c5c:	1080fc04 	addi	r2,r2,1008
   84c60:	10800017 	ldw	r2,0(r2)
   84c64:	1080100c 	andi	r2,r2,64
   84c68:	1005003a 	cmpeq	r2,r2,zero
   84c6c:	1000031e 	bne	r2,zero,84c7c <edid_print_cea+0x172c>
        		printf("side-by-side ");
   84c70:	010002b4 	movhi	r4,10
   84c74:	21338004 	addi	r4,r4,-12800
   84c78:	008ee340 	call	8ee34 <printf>

    		printf("\n");
   84c7c:	01000284 	movi	r4,10
   84c80:	008eeac0 	call	8eeac <putchar>
		}

		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC) {
   84c84:	e0bfd817 	ldw	r2,-160(fp)
   84c88:	e0ffd517 	ldw	r3,-172(fp)
   84c8c:	100491ba 	slli	r2,r2,6
   84c90:	10c5883a 	add	r2,r2,r3
   84c94:	1080fd04 	addi	r2,r2,1012
   84c98:	10800017 	ldw	r2,0(r2)
   84c9c:	1080004c 	andi	r2,r2,1
   84ca0:	10803fcc 	andi	r2,r2,255
   84ca4:	1005003a 	cmpeq	r2,r2,zero
   84ca8:	10003b1e 	bne	r2,zero,84d98 <edid_print_cea+0x1848>

			printf("      analog sync   : composite");
   84cac:	010002b4 	movhi	r4,10
   84cb0:	21338404 	addi	r4,r4,-12784
   84cb4:	008ee340 	call	8ee34 <printf>

    		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC)
   84cb8:	e0bfd817 	ldw	r2,-160(fp)
   84cbc:	e0ffd517 	ldw	r3,-172(fp)
   84cc0:	100491ba 	slli	r2,r2,6
   84cc4:	10c5883a 	add	r2,r2,r3
   84cc8:	1080fd04 	addi	r2,r2,1012
   84ccc:	10800017 	ldw	r2,0(r2)
   84cd0:	1080004c 	andi	r2,r2,1
   84cd4:	10803fcc 	andi	r2,r2,255
   84cd8:	1005003a 	cmpeq	r2,r2,zero
   84cdc:	1000031e 	bne	r2,zero,84cec <edid_print_cea+0x179c>
        		printf(" bipolar");
   84ce0:	010002b4 	movhi	r4,10
   84ce4:	21338c04 	addi	r4,r4,-12752
   84ce8:	008ee340 	call	8ee34 <printf>

    		if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION) {
   84cec:	e0bfd817 	ldw	r2,-160(fp)
   84cf0:	e0ffd517 	ldw	r3,-172(fp)
   84cf4:	100491ba 	slli	r2,r2,6
   84cf8:	10c5883a 	add	r2,r2,r3
   84cfc:	1080fd04 	addi	r2,r2,1012
   84d00:	10800017 	ldw	r2,0(r2)
   84d04:	1080010c 	andi	r2,r2,4
   84d08:	1005003a 	cmpeq	r2,r2,zero
   84d0c:	10001c1e 	bne	r2,zero,84d80 <edid_print_cea+0x1830>
        		printf(" with_serrations");
   84d10:	010002b4 	movhi	r4,10
   84d14:	21338f04 	addi	r4,r4,-12740
   84d18:	008ee340 	call	8ee34 <printf>
    			if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_G)
   84d1c:	e0bfd817 	ldw	r2,-160(fp)
   84d20:	e0ffd517 	ldw	r3,-172(fp)
   84d24:	100491ba 	slli	r2,r2,6
   84d28:	10c5883a 	add	r2,r2,r3
   84d2c:	1080fd04 	addi	r2,r2,1012
   84d30:	10800017 	ldw	r2,0(r2)
   84d34:	1080020c 	andi	r2,r2,8
   84d38:	1005003a 	cmpeq	r2,r2,zero
   84d3c:	1000031e 	bne	r2,zero,84d4c <edid_print_cea+0x17fc>
					printf(" syn_on_green");
   84d40:	010002b4 	movhi	r4,10
   84d44:	21339404 	addi	r4,r4,-12720
   84d48:	008ee340 	call	8ee34 <printf>
				if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_RGB)
   84d4c:	e0bfd817 	ldw	r2,-160(fp)
   84d50:	e0ffd517 	ldw	r3,-172(fp)
   84d54:	100491ba 	slli	r2,r2,6
   84d58:	10c5883a 	add	r2,r2,r3
   84d5c:	1080fd04 	addi	r2,r2,1012
   84d60:	10800017 	ldw	r2,0(r2)
   84d64:	1080040c 	andi	r2,r2,16
   84d68:	1005003a 	cmpeq	r2,r2,zero
   84d6c:	1000071e 	bne	r2,zero,84d8c <edid_print_cea+0x183c>
					printf(" syn_on_rgb");
   84d70:	010002b4 	movhi	r4,10
   84d74:	21339804 	addi	r4,r4,-12704
   84d78:	008ee340 	call	8ee34 <printf>
   84d7c:	00000306 	br	84d8c <edid_print_cea+0x183c>
    		} else {
        		printf(" without_serrations");
   84d80:	010002b4 	movhi	r4,10
   84d84:	21339b04 	addi	r4,r4,-12692
   84d88:	008ee340 	call	8ee34 <printf>
    		}

			printf("\n");
   84d8c:	01000284 	movi	r4,10
   84d90:	008eeac0 	call	8eeac <putchar>
   84d94:	00004d06 	br	84ecc <edid_print_cea+0x197c>

		} else if (cea->detailed_timing[i].sync & D_COMPOSITE_SYNC) {
   84d98:	e0bfd817 	ldw	r2,-160(fp)
   84d9c:	e0ffd517 	ldw	r3,-172(fp)
   84da0:	100491ba 	slli	r2,r2,6
   84da4:	10c5883a 	add	r2,r2,r3
   84da8:	1080fd04 	addi	r2,r2,1012
   84dac:	10800017 	ldw	r2,0(r2)
   84db0:	1080080c 	andi	r2,r2,32
   84db4:	1005003a 	cmpeq	r2,r2,zero
   84db8:	1000161e 	bne	r2,zero,84e14 <edid_print_cea+0x18c4>

			printf("      digital sync  : composite");
   84dbc:	010002b4 	movhi	r4,10
   84dc0:	2133a004 	addi	r4,r4,-12672
   84dc4:	008ee340 	call	8ee34 <printf>

    		if (cea->detailed_timing[i].sync & D_COMPOSITE_SERRATION)
   84dc8:	e0bfd817 	ldw	r2,-160(fp)
   84dcc:	e0ffd517 	ldw	r3,-172(fp)
   84dd0:	100491ba 	slli	r2,r2,6
   84dd4:	10c5883a 	add	r2,r2,r3
   84dd8:	1080fd04 	addi	r2,r2,1012
   84ddc:	10800017 	ldw	r2,0(r2)
   84de0:	1080100c 	andi	r2,r2,64
   84de4:	1005003a 	cmpeq	r2,r2,zero
   84de8:	1000041e 	bne	r2,zero,84dfc <edid_print_cea+0x18ac>
        		printf(" with_serrations");
   84dec:	010002b4 	movhi	r4,10
   84df0:	21338f04 	addi	r4,r4,-12740
   84df4:	008ee340 	call	8ee34 <printf>
   84df8:	00000306 	br	84e08 <edid_print_cea+0x18b8>
    		else
    			printf(" without_serrations");
   84dfc:	010002b4 	movhi	r4,10
   84e00:	21339b04 	addi	r4,r4,-12692
   84e04:	008ee340 	call	8ee34 <printf>

    		printf("\n");
   84e08:	01000284 	movi	r4,10
   84e0c:	008eeac0 	call	8eeac <putchar>
   84e10:	00002e06 	br	84ecc <edid_print_cea+0x197c>

		} else if (cea->detailed_timing[i].sync & D_SEPERATE_SYNC) {
   84e14:	e0bfd817 	ldw	r2,-160(fp)
   84e18:	e0ffd517 	ldw	r3,-172(fp)
   84e1c:	100491ba 	slli	r2,r2,6
   84e20:	10c5883a 	add	r2,r2,r3
   84e24:	1080fd04 	addi	r2,r2,1012
   84e28:	10800017 	ldw	r2,0(r2)
   84e2c:	1080200c 	andi	r2,r2,128
   84e30:	1005003a 	cmpeq	r2,r2,zero
   84e34:	1000251e 	bne	r2,zero,84ecc <edid_print_cea+0x197c>

			printf("      digital sync  : seperate");
   84e38:	010002b4 	movhi	r4,10
   84e3c:	2133a804 	addi	r4,r4,-12640
   84e40:	008ee340 	call	8ee34 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_VSYNC_N)
   84e44:	e0bfd817 	ldw	r2,-160(fp)
   84e48:	e0ffd517 	ldw	r3,-172(fp)
   84e4c:	100491ba 	slli	r2,r2,6
   84e50:	10c5883a 	add	r2,r2,r3
   84e54:	1080fd04 	addi	r2,r2,1012
   84e58:	10800017 	ldw	r2,0(r2)
   84e5c:	1080400c 	andi	r2,r2,256
   84e60:	1005003a 	cmpeq	r2,r2,zero
   84e64:	1000041e 	bne	r2,zero,84e78 <edid_print_cea+0x1928>
				printf(" vsync_n");
   84e68:	010002b4 	movhi	r4,10
   84e6c:	2133b004 	addi	r4,r4,-12608
   84e70:	008ee340 	call	8ee34 <printf>
   84e74:	00000306 	br	84e84 <edid_print_cea+0x1934>
			else
				printf(" vsync_p");
   84e78:	010002b4 	movhi	r4,10
   84e7c:	2133b304 	addi	r4,r4,-12596
   84e80:	008ee340 	call	8ee34 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_HSYNC_N)
   84e84:	e0bfd817 	ldw	r2,-160(fp)
   84e88:	e0ffd517 	ldw	r3,-172(fp)
   84e8c:	100491ba 	slli	r2,r2,6
   84e90:	10c5883a 	add	r2,r2,r3
   84e94:	1080fd04 	addi	r2,r2,1012
   84e98:	10800017 	ldw	r2,0(r2)
   84e9c:	1081000c 	andi	r2,r2,1024
   84ea0:	1005003a 	cmpeq	r2,r2,zero
   84ea4:	1000041e 	bne	r2,zero,84eb8 <edid_print_cea+0x1968>
				printf(" hsync_n");
   84ea8:	010002b4 	movhi	r4,10
   84eac:	2133b604 	addi	r4,r4,-12584
   84eb0:	008ee340 	call	8ee34 <printf>
   84eb4:	00000306 	br	84ec4 <edid_print_cea+0x1974>
			else
				printf(" hsync_p");
   84eb8:	010002b4 	movhi	r4,10
   84ebc:	2133b904 	addi	r4,r4,-12572
   84ec0:	008ee340 	call	8ee34 <printf>

    		printf("\n");
   84ec4:	01000284 	movi	r4,10
   84ec8:	008eeac0 	call	8eeac <putchar>

	if (cea->nr_dtd != 0)
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   84ecc:	e0bfd817 	ldw	r2,-160(fp)
   84ed0:	10800044 	addi	r2,r2,1
   84ed4:	e0bfd815 	stw	r2,-160(fp)
   84ed8:	e0bfd517 	ldw	r2,-172(fp)
   84edc:	10c00617 	ldw	r3,24(r2)
   84ee0:	e0bfd817 	ldw	r2,-160(fp)
   84ee4:	10fe5e16 	blt	r2,r3,84860 <edid_print_cea+0x1310>
				printf(" hsync_p");

    		printf("\n");
		}
	}
}
   84ee8:	e037883a 	mov	sp,fp
   84eec:	dfc00117 	ldw	ra,4(sp)
   84ef0:	df000017 	ldw	fp,0(sp)
   84ef4:	dec00204 	addi	sp,sp,8
   84ef8:	f800283a 	ret

00084efc <edid_decode_extensions>:

int edid_decode_extensions(struct base_edid *edid, const unsigned char *edid_bin)
{
   84efc:	defff704 	addi	sp,sp,-36
   84f00:	de00012e 	bgeu	sp,et,84f08 <edid_decode_extensions+0xc>
   84f04:	003da0fa 	break	3
   84f08:	dfc00815 	stw	ra,32(sp)
   84f0c:	df000715 	stw	fp,28(sp)
   84f10:	df000704 	addi	fp,sp,28
   84f14:	e13ffc15 	stw	r4,-16(fp)
   84f18:	e17ffd15 	stw	r5,-12(fp)
	const u8 *c = edid_bin;
   84f1c:	e0bffd17 	ldw	r2,-12(fp)
   84f20:	e0bffb15 	stw	r2,-20(fp)
	int i, nr_ext;

	nr_ext = (int)c[0x7e];
   84f24:	e0bffb17 	ldw	r2,-20(fp)
   84f28:	10801f84 	addi	r2,r2,126
   84f2c:	10800003 	ldbu	r2,0(r2)
   84f30:	10803fcc 	andi	r2,r2,255
   84f34:	e0bff915 	stw	r2,-28(fp)

#if 1
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
   84f38:	e0bff917 	ldw	r2,-28(fp)
   84f3c:	10800090 	cmplti	r2,r2,2
   84f40:	1000021e 	bne	r2,zero,84f4c <edid_decode_extensions+0x50>
		nr_ext = 1;
   84f44:	00800044 	movi	r2,1
   84f48:	e0bff915 	stw	r2,-28(fp)
#endif

	for (i = 0; i < nr_ext; ++i) {
   84f4c:	e03ffa15 	stw	zero,-24(fp)
   84f50:	00001e06 	br	84fcc <edid_decode_extensions+0xd0>

		c = &edid_bin[128 + 128 * i];
   84f54:	e0bffa17 	ldw	r2,-24(fp)
   84f58:	100491fa 	slli	r2,r2,7
   84f5c:	1007883a 	mov	r3,r2
   84f60:	e0bffd17 	ldw	r2,-12(fp)
   84f64:	1885883a 	add	r2,r3,r2
   84f68:	10802004 	addi	r2,r2,128
   84f6c:	e0bffb15 	stw	r2,-20(fp)

		switch (c[0]) {
   84f70:	e0bffb17 	ldw	r2,-20(fp)
   84f74:	10800003 	ldbu	r2,0(r2)
   84f78:	10803fcc 	andi	r2,r2,255
   84f7c:	e0bfff15 	stw	r2,-4(fp)
   84f80:	e0ffff17 	ldw	r3,-4(fp)
   84f84:	18800060 	cmpeqi	r2,r3,1
   84f88:	10000d1e 	bne	r2,zero,84fc0 <edid_decode_extensions+0xc4>
   84f8c:	e0ffff17 	ldw	r3,-4(fp)
   84f90:	188000a0 	cmpeqi	r2,r3,2
   84f94:	1000011e 	bne	r2,zero,84f9c <edid_decode_extensions+0xa0>
   84f98:	00000906 	br	84fc0 <edid_decode_extensions+0xc4>
		case 0x01:  // 0x01 (LCD Timings)
			// todo ...
			break;

		case EDID_EXT_TAG_CEA:  // 0x02 CEA-EXT (CEA-861 Series Extension)
			if (edid_decode_cea(edid, edid_bin, i) != 0)
   84f9c:	e13ffc17 	ldw	r4,-16(fp)
   84fa0:	e17ffd17 	ldw	r5,-12(fp)
   84fa4:	e1bffa17 	ldw	r6,-24(fp)
   84fa8:	0081c3c0 	call	81c3c <edid_decode_cea>
   84fac:	1005003a 	cmpeq	r2,r2,zero
   84fb0:	1000031e 	bne	r2,zero,84fc0 <edid_decode_extensions+0xc4>
				return -1;
   84fb4:	00bfffc4 	movi	r2,-1
   84fb8:	e0bffe15 	stw	r2,-8(fp)
   84fbc:	00000706 	br	84fdc <edid_decode_extensions+0xe0>
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
		nr_ext = 1;
#endif

	for (i = 0; i < nr_ext; ++i) {
   84fc0:	e0bffa17 	ldw	r2,-24(fp)
   84fc4:	10800044 	addi	r2,r2,1
   84fc8:	e0bffa15 	stw	r2,-24(fp)
   84fcc:	e0fffa17 	ldw	r3,-24(fp)
   84fd0:	e0bff917 	ldw	r2,-28(fp)
   84fd4:	18bfdf16 	blt	r3,r2,84f54 <edid_decode_extensions+0x58>
		case 0xff:  // 0xff (define by display manufacturer)
			break;
		}
	}

	return 0;
   84fd8:	e03ffe15 	stw	zero,-8(fp)
   84fdc:	e0bffe17 	ldw	r2,-8(fp)
}
   84fe0:	e037883a 	mov	sp,fp
   84fe4:	dfc00117 	ldw	ra,4(sp)
   84fe8:	df000017 	ldw	fp,0(sp)
   84fec:	dec00204 	addi	sp,sp,8
   84ff0:	f800283a 	ret

00084ff4 <edid_decode_v14>:

int edid_decode_v14(struct base_edid *edid, const unsigned char *edid_bin)
{
   84ff4:	deffe604 	addi	sp,sp,-104
   84ff8:	de00012e 	bgeu	sp,et,85000 <edid_decode_v14+0xc>
   84ffc:	003da0fa 	break	3
   85000:	dfc01915 	stw	ra,100(sp)
   85004:	df001815 	stw	fp,96(sp)
   85008:	dc001715 	stw	r16,92(sp)
   8500c:	df001704 	addi	fp,sp,92
   85010:	e13ff015 	stw	r4,-64(fp)
   85014:	e17ff115 	stw	r5,-60(fp)
	static const u8 header[] = { 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00 };

	const u8 *c = edid_bin;
   85018:	e0bff117 	ldw	r2,-60(fp)
   8501c:	e0bfef15 	stw	r2,-68(fp)
    u8 checksum = 0;
   85020:	e03fee05 	stb	zero,-72(fp)
    int i = 0, s = 0;
   85024:	e03fed15 	stw	zero,-76(fp)
   85028:	e03fec15 	stw	zero,-80(fp)

    // header
    if (memcmp(c, header, 8) != 0)
   8502c:	e13fef17 	ldw	r4,-68(fp)
   85030:	d1600104 	addi	r5,gp,-32764
   85034:	01800204 	movi	r6,8
   85038:	008ec880 	call	8ec88 <memcmp>
   8503c:	1005003a 	cmpeq	r2,r2,zero
   85040:	1000031e 	bne	r2,zero,85050 <edid_decode_v14+0x5c>
        return -1;
   85044:	00bfffc4 	movi	r2,-1
   85048:	e0bfff15 	stw	r2,-4(fp)
   8504c:	0010e606 	br	893e8 <edid_decode_v14+0x43f4>

    // checksum
    for (s = 0; s < 127; ++s)
   85050:	e03fec15 	stw	zero,-80(fp)
   85054:	00000b06 	br	85084 <edid_decode_v14+0x90>
        checksum += c[s];
   85058:	e0bfec17 	ldw	r2,-80(fp)
   8505c:	1007883a 	mov	r3,r2
   85060:	e0bfef17 	ldw	r2,-68(fp)
   85064:	1885883a 	add	r2,r3,r2
   85068:	10c00003 	ldbu	r3,0(r2)
   8506c:	e0bfee03 	ldbu	r2,-72(fp)
   85070:	10c5883a 	add	r2,r2,r3
   85074:	e0bfee05 	stb	r2,-72(fp)
    // header
    if (memcmp(c, header, 8) != 0)
        return -1;

    // checksum
    for (s = 0; s < 127; ++s)
   85078:	e0bfec17 	ldw	r2,-80(fp)
   8507c:	10800044 	addi	r2,r2,1
   85080:	e0bfec15 	stw	r2,-80(fp)
   85084:	e0bfec17 	ldw	r2,-80(fp)
   85088:	10801fd0 	cmplti	r2,r2,127
   8508c:	103ff21e 	bne	r2,zero,85058 <edid_decode_v14+0x64>
        checksum += c[s];

    if ((u8)(checksum + c[127]) != 0x00)
   85090:	e0bfef17 	ldw	r2,-68(fp)
   85094:	10801fc4 	addi	r2,r2,127
   85098:	10c00003 	ldbu	r3,0(r2)
   8509c:	e0bfee03 	ldbu	r2,-72(fp)
   850a0:	1885883a 	add	r2,r3,r2
   850a4:	10803fcc 	andi	r2,r2,255
   850a8:	1005003a 	cmpeq	r2,r2,zero
   850ac:	1000031e 	bne	r2,zero,850bc <edid_decode_v14+0xc8>
    	return -1;
   850b0:	00ffffc4 	movi	r3,-1
   850b4:	e0ffff15 	stw	r3,-4(fp)
   850b8:	0010cb06 	br	893e8 <edid_decode_v14+0x43f4>

    edid->checksum = c[127];
   850bc:	e0bfef17 	ldw	r2,-68(fp)
   850c0:	10801fc4 	addi	r2,r2,127
   850c4:	10800003 	ldbu	r2,0(r2)
   850c8:	10c03fcc 	andi	r3,r2,255
   850cc:	e0bff017 	ldw	r2,-64(fp)
   850d0:	10c60a15 	stw	r3,6184(r2)

    // vid/pid
    c = &edid_bin[8];
   850d4:	e0bff117 	ldw	r2,-60(fp)
   850d8:	10800204 	addi	r2,r2,8
   850dc:	e0bfef15 	stw	r2,-68(fp)

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
   850e0:	e0bfef17 	ldw	r2,-68(fp)
   850e4:	10800003 	ldbu	r2,0(r2)
   850e8:	10803fcc 	andi	r2,r2,255
   850ec:	1004d0ba 	srli	r2,r2,2
   850f0:	108007cc 	andi	r2,r2,31
   850f4:	10801004 	addi	r2,r2,64
   850f8:	1007883a 	mov	r3,r2
   850fc:	e0bff017 	ldw	r2,-64(fp)
   85100:	10c00005 	stb	r3,0(r2)
    edid->id_mfg[1] = 0x40 + (((c[0] << 3) | (c[1] >> 5)) & 0x1f);
   85104:	e0bfef17 	ldw	r2,-68(fp)
   85108:	10800003 	ldbu	r2,0(r2)
   8510c:	10803fcc 	andi	r2,r2,255
   85110:	100490fa 	slli	r2,r2,3
   85114:	1007883a 	mov	r3,r2
   85118:	e0bfef17 	ldw	r2,-68(fp)
   8511c:	10800044 	addi	r2,r2,1
   85120:	10800003 	ldbu	r2,0(r2)
   85124:	10803fcc 	andi	r2,r2,255
   85128:	1004d17a 	srli	r2,r2,5
   8512c:	1884b03a 	or	r2,r3,r2
   85130:	108007cc 	andi	r2,r2,31
   85134:	10801004 	addi	r2,r2,64
   85138:	1007883a 	mov	r3,r2
   8513c:	e0bff017 	ldw	r2,-64(fp)
   85140:	10c00045 	stb	r3,1(r2)
    edid->id_mfg[2] = 0x40 + (c[1] & 0x1f);
   85144:	e0bfef17 	ldw	r2,-68(fp)
   85148:	10800044 	addi	r2,r2,1
   8514c:	10800003 	ldbu	r2,0(r2)
   85150:	108007cc 	andi	r2,r2,31
   85154:	10801004 	addi	r2,r2,64
   85158:	1007883a 	mov	r3,r2
   8515c:	e0bff017 	ldw	r2,-64(fp)
   85160:	10c00085 	stb	r3,2(r2)
    edid->id_mfg[3] = 0;
   85164:	e0bff017 	ldw	r2,-64(fp)
   85168:	100000c5 	stb	zero,3(r2)

    c = &edid_bin[0x0a];
   8516c:	e0bff117 	ldw	r2,-60(fp)
   85170:	10800284 	addi	r2,r2,10
   85174:	e0bfef15 	stw	r2,-68(fp)
    edid->id_prod = (c[1] << 8) | c[0];
   85178:	e0bfef17 	ldw	r2,-68(fp)
   8517c:	10800044 	addi	r2,r2,1
   85180:	10800003 	ldbu	r2,0(r2)
   85184:	10803fcc 	andi	r2,r2,255
   85188:	1006923a 	slli	r3,r2,8
   8518c:	e0bfef17 	ldw	r2,-68(fp)
   85190:	10800003 	ldbu	r2,0(r2)
   85194:	10803fcc 	andi	r2,r2,255
   85198:	1884b03a 	or	r2,r3,r2
   8519c:	1007883a 	mov	r3,r2
   851a0:	e0bff017 	ldw	r2,-64(fp)
   851a4:	10c00115 	stw	r3,4(r2)

    c = &edid_bin[0x0c];
   851a8:	e0bff117 	ldw	r2,-60(fp)
   851ac:	10800304 	addi	r2,r2,12
   851b0:	e0bfef15 	stw	r2,-68(fp)
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
   851b4:	e0bfef17 	ldw	r2,-68(fp)
   851b8:	108000c4 	addi	r2,r2,3
   851bc:	10800003 	ldbu	r2,0(r2)
   851c0:	10803fcc 	andi	r2,r2,255
   851c4:	1006963a 	slli	r3,r2,24
   851c8:	e0bfef17 	ldw	r2,-68(fp)
   851cc:	10800084 	addi	r2,r2,2
   851d0:	10800003 	ldbu	r2,0(r2)
   851d4:	10803fcc 	andi	r2,r2,255
   851d8:	1004943a 	slli	r2,r2,16
   851dc:	1886b03a 	or	r3,r3,r2
   851e0:	e0bfef17 	ldw	r2,-68(fp)
   851e4:	10800044 	addi	r2,r2,1
   851e8:	10800003 	ldbu	r2,0(r2)
   851ec:	10803fcc 	andi	r2,r2,255
   851f0:	1004923a 	slli	r2,r2,8
   851f4:	1886b03a 	or	r3,r3,r2
   851f8:	e0bfef17 	ldw	r2,-68(fp)
   851fc:	10800003 	ldbu	r2,0(r2)
   85200:	10803fcc 	andi	r2,r2,255
   85204:	1884b03a 	or	r2,r3,r2
   85208:	1007883a 	mov	r3,r2
   8520c:	e0bff017 	ldw	r2,-64(fp)
   85210:	10c00215 	stw	r3,8(r2)

    c = &edid_bin[0x10];
   85214:	e0bff117 	ldw	r2,-60(fp)
   85218:	10800404 	addi	r2,r2,16
   8521c:	e0bfef15 	stw	r2,-68(fp)

	edid->mfg_week = 0;
   85220:	e0bff017 	ldw	r2,-64(fp)
   85224:	10000315 	stw	zero,12(r2)
	edid->mfg_year = 0;
   85228:	e0bff017 	ldw	r2,-64(fp)
   8522c:	10000415 	stw	zero,16(r2)
	edid->model_year = 0;
   85230:	e0bff017 	ldw	r2,-64(fp)
   85234:	10000515 	stw	zero,20(r2)

    if ((c[0] >= 0x01) && (c[0] <= 0x36))
   85238:	e0bfef17 	ldw	r2,-68(fp)
   8523c:	10800003 	ldbu	r2,0(r2)
   85240:	10803fcc 	andi	r2,r2,255
   85244:	1005003a 	cmpeq	r2,r2,zero
   85248:	10000a1e 	bne	r2,zero,85274 <edid_decode_v14+0x280>
   8524c:	e0bfef17 	ldw	r2,-68(fp)
   85250:	10800003 	ldbu	r2,0(r2)
   85254:	10803fcc 	andi	r2,r2,255
   85258:	10800de8 	cmpgeui	r2,r2,55
   8525c:	1000051e 	bne	r2,zero,85274 <edid_decode_v14+0x280>
    	edid->mfg_week = c[0];
   85260:	e0bfef17 	ldw	r2,-68(fp)
   85264:	10800003 	ldbu	r2,0(r2)
   85268:	10c03fcc 	andi	r3,r2,255
   8526c:	e0bff017 	ldw	r2,-64(fp)
   85270:	10c00315 	stw	r3,12(r2)

    if (c[0] == 0xff)
   85274:	e0bfef17 	ldw	r2,-68(fp)
   85278:	10800003 	ldbu	r2,0(r2)
   8527c:	10803fcc 	andi	r2,r2,255
   85280:	10803fd8 	cmpnei	r2,r2,255
   85284:	1000081e 	bne	r2,zero,852a8 <edid_decode_v14+0x2b4>
    	edid->model_year = 1990 + c[1];
   85288:	e0bfef17 	ldw	r2,-68(fp)
   8528c:	10800044 	addi	r2,r2,1
   85290:	10800003 	ldbu	r2,0(r2)
   85294:	10803fcc 	andi	r2,r2,255
   85298:	10c1f184 	addi	r3,r2,1990
   8529c:	e0bff017 	ldw	r2,-64(fp)
   852a0:	10c00515 	stw	r3,20(r2)
   852a4:	00000706 	br	852c4 <edid_decode_v14+0x2d0>
    else
    	edid->mfg_year = 1990 + c[1];
   852a8:	e0bfef17 	ldw	r2,-68(fp)
   852ac:	10800044 	addi	r2,r2,1
   852b0:	10800003 	ldbu	r2,0(r2)
   852b4:	10803fcc 	andi	r2,r2,255
   852b8:	10c1f184 	addi	r3,r2,1990
   852bc:	e0bff017 	ldw	r2,-64(fp)
   852c0:	10c00415 	stw	r3,16(r2)

    // edid version
    c = &edid_bin[0x12];
   852c4:	e0bff117 	ldw	r2,-60(fp)
   852c8:	10800484 	addi	r2,r2,18
   852cc:	e0bfef15 	stw	r2,-68(fp)

    edid->ver_mj = c[0];
   852d0:	e0bfef17 	ldw	r2,-68(fp)
   852d4:	10800003 	ldbu	r2,0(r2)
   852d8:	10c03fcc 	andi	r3,r2,255
   852dc:	e0bff017 	ldw	r2,-64(fp)
   852e0:	10c00615 	stw	r3,24(r2)
    edid->ver_mn = c[1];
   852e4:	e0bfef17 	ldw	r2,-68(fp)
   852e8:	10800044 	addi	r2,r2,1
   852ec:	10800003 	ldbu	r2,0(r2)
   852f0:	10c03fcc 	andi	r3,r2,255
   852f4:	e0bff017 	ldw	r2,-64(fp)
   852f8:	10c00715 	stw	r3,28(r2)

    // basic display parameters & features
    c = &edid_bin[0x14];
   852fc:	e0bff117 	ldw	r2,-60(fp)
   85300:	10800504 	addi	r2,r2,20
   85304:	e0bfef15 	stw	r2,-68(fp)

    if (*c & 0x80) {
   85308:	e0bfef17 	ldw	r2,-68(fp)
   8530c:	10800003 	ldbu	r2,0(r2)
   85310:	10803fcc 	andi	r2,r2,255
   85314:	1080201c 	xori	r2,r2,128
   85318:	10bfe004 	addi	r2,r2,-128
   8531c:	1004403a 	cmpge	r2,r2,zero
   85320:	1000651e 	bne	r2,zero,854b8 <edid_decode_v14+0x4c4>
        edid->input.digital_if = 1;
   85324:	e0fff017 	ldw	r3,-64(fp)
   85328:	00800044 	movi	r2,1
   8532c:	18800815 	stw	r2,32(r3)

        switch ((*c >> 4) & 0x7) {
   85330:	e0bfef17 	ldw	r2,-68(fp)
   85334:	10800003 	ldbu	r2,0(r2)
   85338:	10803fcc 	andi	r2,r2,255
   8533c:	1004d13a 	srli	r2,r2,4
   85340:	10803fcc 	andi	r2,r2,255
   85344:	108001cc 	andi	r2,r2,7
   85348:	e0bffe15 	stw	r2,-8(fp)
   8534c:	e13ffe17 	ldw	r4,-8(fp)
   85350:	208001e8 	cmpgeui	r2,r4,7
   85354:	1000281e 	bne	r2,zero,853f8 <edid_decode_v14+0x404>
   85358:	e0fffe17 	ldw	r3,-8(fp)
   8535c:	e0fffe17 	ldw	r3,-8(fp)
   85360:	18c5883a 	add	r2,r3,r3
   85364:	1087883a 	add	r3,r2,r2
   85368:	00800234 	movhi	r2,8
   8536c:	1094df04 	addi	r2,r2,21372
   85370:	1885883a 	add	r2,r3,r2
   85374:	10800017 	ldw	r2,0(r2)
   85378:	1000683a 	jmp	r2
   8537c:	000853f8 	rdprs	zero,zero,8527
   85380:	00085398 	cmpnei	zero,zero,8526
   85384:	000853a8 	cmpgeui	zero,zero,8526
   85388:	000853b8 	rdprs	zero,zero,8526
   8538c:	000853c8 	cmpgei	zero,zero,8527
   85390:	000853d8 	cmpnei	zero,zero,8527
   85394:	000853e8 	cmpgeui	zero,zero,8527
        case 1:
            edid->input.digital.depth = VID_6BITS;
   85398:	e0fff017 	ldw	r3,-64(fp)
   8539c:	00800044 	movi	r2,1
   853a0:	18800915 	stw	r2,36(r3)
            break;
   853a4:	00001606 	br	85400 <edid_decode_v14+0x40c>
        case 2:
            edid->input.digital.depth = VID_8BITS;
   853a8:	e0fff017 	ldw	r3,-64(fp)
   853ac:	00800084 	movi	r2,2
   853b0:	18800915 	stw	r2,36(r3)
            break;
   853b4:	00001206 	br	85400 <edid_decode_v14+0x40c>
        case 3:
            edid->input.digital.depth = VID_10BITS;
   853b8:	e0fff017 	ldw	r3,-64(fp)
   853bc:	008000c4 	movi	r2,3
   853c0:	18800915 	stw	r2,36(r3)
            break;
   853c4:	00000e06 	br	85400 <edid_decode_v14+0x40c>
        case 4:
            edid->input.digital.depth = VID_12BITS;
   853c8:	e0fff017 	ldw	r3,-64(fp)
   853cc:	00800104 	movi	r2,4
   853d0:	18800915 	stw	r2,36(r3)
            break;
   853d4:	00000a06 	br	85400 <edid_decode_v14+0x40c>
        case 5:
            edid->input.digital.depth = VID_14BITS;
   853d8:	e0fff017 	ldw	r3,-64(fp)
   853dc:	00800144 	movi	r2,5
   853e0:	18800915 	stw	r2,36(r3)
            break;
   853e4:	00000606 	br	85400 <edid_decode_v14+0x40c>
        case 6:
            edid->input.digital.depth = VID_16BITS;
   853e8:	e0fff017 	ldw	r3,-64(fp)
   853ec:	00800184 	movi	r2,6
   853f0:	18800915 	stw	r2,36(r3)
            break;
   853f4:	00000206 	br	85400 <edid_decode_v14+0x40c>
        case 0:
        default:
            edid->input.digital.depth = VID_NOT_DEFINED;
   853f8:	e0bff017 	ldw	r2,-64(fp)
   853fc:	10000915 	stw	zero,36(r2)
            break;
        }

        switch (*c & 0xf) {
   85400:	e0bfef17 	ldw	r2,-68(fp)
   85404:	10800003 	ldbu	r2,0(r2)
   85408:	10803fcc 	andi	r2,r2,255
   8540c:	108003cc 	andi	r2,r2,15
   85410:	e0bffd15 	stw	r2,-12(fp)
   85414:	e13ffd17 	ldw	r4,-12(fp)
   85418:	208001a8 	cmpgeui	r2,r4,6
   8541c:	1000231e 	bne	r2,zero,854ac <edid_decode_v14+0x4b8>
   85420:	e0fffd17 	ldw	r3,-12(fp)
   85424:	e0fffd17 	ldw	r3,-12(fp)
   85428:	18c5883a 	add	r2,r3,r3
   8542c:	1087883a 	add	r3,r2,r2
   85430:	00800234 	movhi	r2,8
   85434:	10951104 	addi	r2,r2,21572
   85438:	1885883a 	add	r2,r3,r2
   8543c:	10800017 	ldw	r2,0(r2)
   85440:	1000683a 	jmp	r2
   85444:	000854ac 	andhi	zero,zero,8530
   85448:	0008545c 	xori	zero,zero,8529
   8544c:	0008546c 	andhi	zero,zero,8529
   85450:	0008547c 	xorhi	zero,zero,8529
   85454:	0008548c 	andi	zero,zero,8530
   85458:	0008549c 	xori	zero,zero,8530
        case 1:
            edid->input.digital.interface = VII_DVI;
   8545c:	e0fff017 	ldw	r3,-64(fp)
   85460:	00800044 	movi	r2,1
   85464:	18800a15 	stw	r2,40(r3)
            break;
   85468:	00007706 	br	85648 <edid_decode_v14+0x654>
        case 2:
            edid->input.digital.interface = VII_HDMI_A;
   8546c:	e0fff017 	ldw	r3,-64(fp)
   85470:	00800084 	movi	r2,2
   85474:	18800a15 	stw	r2,40(r3)
            break;
   85478:	00007306 	br	85648 <edid_decode_v14+0x654>
        case 3:
            edid->input.digital.interface = VII_HDMI_B;
   8547c:	e0fff017 	ldw	r3,-64(fp)
   85480:	008000c4 	movi	r2,3
   85484:	18800a15 	stw	r2,40(r3)
            break;
   85488:	00006f06 	br	85648 <edid_decode_v14+0x654>
        case 4:
            edid->input.digital.interface = VII_MDDI;
   8548c:	e0fff017 	ldw	r3,-64(fp)
   85490:	00800104 	movi	r2,4
   85494:	18800a15 	stw	r2,40(r3)
            break;
   85498:	00006b06 	br	85648 <edid_decode_v14+0x654>
        case 5:
            edid->input.digital.interface = VII_DISPLAYPORT;
   8549c:	e0fff017 	ldw	r3,-64(fp)
   854a0:	00800144 	movi	r2,5
   854a4:	18800a15 	stw	r2,40(r3)
            break;
   854a8:	00006706 	br	85648 <edid_decode_v14+0x654>
        case 0:
        default:
            edid->input.digital.interface = VII_NOT_DEFINED;
   854ac:	e0bff017 	ldw	r2,-64(fp)
   854b0:	10000a15 	stw	zero,40(r2)
   854b4:	00006406 	br	85648 <edid_decode_v14+0x654>
            break;
        }

    } else {

        edid->input.digital_if = 0;
   854b8:	e0bff017 	ldw	r2,-64(fp)
   854bc:	10000815 	stw	zero,32(r2)

        switch ((*c >> 5) & 0x3) {
   854c0:	e0bfef17 	ldw	r2,-68(fp)
   854c4:	10800003 	ldbu	r2,0(r2)
   854c8:	10803fcc 	andi	r2,r2,255
   854cc:	1004d17a 	srli	r2,r2,5
   854d0:	10803fcc 	andi	r2,r2,255
   854d4:	108000cc 	andi	r2,r2,3
   854d8:	e0bffc15 	stw	r2,-16(fp)
   854dc:	e13ffc17 	ldw	r4,-16(fp)
   854e0:	20800060 	cmpeqi	r2,r4,1
   854e4:	1000111e 	bne	r2,zero,8552c <edid_decode_v14+0x538>
   854e8:	e0fffc17 	ldw	r3,-16(fp)
   854ec:	18800088 	cmpgei	r2,r3,2
   854f0:	1000041e 	bne	r2,zero,85504 <edid_decode_v14+0x510>
   854f4:	e13ffc17 	ldw	r4,-16(fp)
   854f8:	2005003a 	cmpeq	r2,r4,zero
   854fc:	1000081e 	bne	r2,zero,85520 <edid_decode_v14+0x52c>
   85500:	00001506 	br	85558 <edid_decode_v14+0x564>
   85504:	e0fffc17 	ldw	r3,-16(fp)
   85508:	188000a0 	cmpeqi	r2,r3,2
   8550c:	10000b1e 	bne	r2,zero,8553c <edid_decode_v14+0x548>
   85510:	e13ffc17 	ldw	r4,-16(fp)
   85514:	208000e0 	cmpeqi	r2,r4,3
   85518:	10000c1e 	bne	r2,zero,8554c <edid_decode_v14+0x558>
   8551c:	00000e06 	br	85558 <edid_decode_v14+0x564>
        case 0:
            edid->input.analog.level = VIL_0P700_0P300_1P000;
   85520:	e0bff017 	ldw	r2,-64(fp)
   85524:	10000915 	stw	zero,36(r2)
            break;
   85528:	00000b06 	br	85558 <edid_decode_v14+0x564>
        case 1:
            edid->input.analog.level = VIL_0P714_0P286_1P000;
   8552c:	e0fff017 	ldw	r3,-64(fp)
   85530:	00800044 	movi	r2,1
   85534:	18800915 	stw	r2,36(r3)
            break;
   85538:	00000706 	br	85558 <edid_decode_v14+0x564>
        case 2:
            edid->input.analog.level = VIL_1P000_0P400_1P400;
   8553c:	e0fff017 	ldw	r3,-64(fp)
   85540:	00800084 	movi	r2,2
   85544:	18800915 	stw	r2,36(r3)
            break;
   85548:	00000306 	br	85558 <edid_decode_v14+0x564>
        case 3:
            edid->input.analog.level = VIL_0P700_0P000_0P700;
   8554c:	e0fff017 	ldw	r3,-64(fp)
   85550:	008000c4 	movi	r2,3
   85554:	18800915 	stw	r2,36(r3)
            break;
        }

        if (*c & 0x10)
   85558:	e0bfef17 	ldw	r2,-68(fp)
   8555c:	10800003 	ldbu	r2,0(r2)
   85560:	10803fcc 	andi	r2,r2,255
   85564:	1080040c 	andi	r2,r2,16
   85568:	1005003a 	cmpeq	r2,r2,zero
   8556c:	1000041e 	bne	r2,zero,85580 <edid_decode_v14+0x58c>
            edid->input.analog.setup = VIS_BLANK_TO_BLACK_PEDESTAL;
   85570:	e0fff017 	ldw	r3,-64(fp)
   85574:	00800044 	movi	r2,1
   85578:	18800a15 	stw	r2,40(r3)
   8557c:	00000206 	br	85588 <edid_decode_v14+0x594>
        else
            edid->input.analog.setup = VIS_BLANK_LEVEL_EQ_BLACK_LEVEL;
   85580:	e0bff017 	ldw	r2,-64(fp)
   85584:	10000a15 	stw	zero,40(r2)

        edid->input.analog.sync_type = 0;
   85588:	e0bff017 	ldw	r2,-64(fp)
   8558c:	10000b15 	stw	zero,44(r2)
        if (*c & 0x08)
   85590:	e0bfef17 	ldw	r2,-68(fp)
   85594:	10800003 	ldbu	r2,0(r2)
   85598:	10803fcc 	andi	r2,r2,255
   8559c:	1080020c 	andi	r2,r2,8
   855a0:	1005003a 	cmpeq	r2,r2,zero
   855a4:	1000051e 	bne	r2,zero,855bc <edid_decode_v14+0x5c8>
        	edid->input.analog.sync_type |= VIS_SEPERATE_H_V_SYNC;
   855a8:	e0bff017 	ldw	r2,-64(fp)
   855ac:	10800b17 	ldw	r2,44(r2)
   855b0:	10c00054 	ori	r3,r2,1
   855b4:	e0bff017 	ldw	r2,-64(fp)
   855b8:	10c00b15 	stw	r3,44(r2)
        if (*c & 0x04)
   855bc:	e0bfef17 	ldw	r2,-68(fp)
   855c0:	10800003 	ldbu	r2,0(r2)
   855c4:	10803fcc 	andi	r2,r2,255
   855c8:	1080010c 	andi	r2,r2,4
   855cc:	1005003a 	cmpeq	r2,r2,zero
   855d0:	1000051e 	bne	r2,zero,855e8 <edid_decode_v14+0x5f4>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_H_SYNC;
   855d4:	e0bff017 	ldw	r2,-64(fp)
   855d8:	10800b17 	ldw	r2,44(r2)
   855dc:	10c00094 	ori	r3,r2,2
   855e0:	e0bff017 	ldw	r2,-64(fp)
   855e4:	10c00b15 	stw	r3,44(r2)
        if (*c & 0x02)
   855e8:	e0bfef17 	ldw	r2,-68(fp)
   855ec:	10800003 	ldbu	r2,0(r2)
   855f0:	10803fcc 	andi	r2,r2,255
   855f4:	1080008c 	andi	r2,r2,2
   855f8:	1005003a 	cmpeq	r2,r2,zero
   855fc:	1000051e 	bne	r2,zero,85614 <edid_decode_v14+0x620>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_G_VIDEO;
   85600:	e0bff017 	ldw	r2,-64(fp)
   85604:	10800b17 	ldw	r2,44(r2)
   85608:	10c00114 	ori	r3,r2,4
   8560c:	e0bff017 	ldw	r2,-64(fp)
   85610:	10c00b15 	stw	r3,44(r2)

        if (*c & 0x01)
   85614:	e0bfef17 	ldw	r2,-68(fp)
   85618:	10800003 	ldbu	r2,0(r2)
   8561c:	10803fcc 	andi	r2,r2,255
   85620:	1080004c 	andi	r2,r2,1
   85624:	10803fcc 	andi	r2,r2,255
   85628:	1005003a 	cmpeq	r2,r2,zero
   8562c:	1000041e 	bne	r2,zero,85640 <edid_decode_v14+0x64c>
        	edid->input.analog.serrations = VISR_VSYNC;
   85630:	e0fff017 	ldw	r3,-64(fp)
   85634:	00800044 	movi	r2,1
   85638:	18800c15 	stw	r2,48(r3)
   8563c:	00000206 	br	85648 <edid_decode_v14+0x654>
        else
        	edid->input.analog.serrations = 0;
   85640:	e0bff017 	ldw	r2,-64(fp)
   85644:	10000c15 	stw	zero,48(r2)
    }

    c = &edid_bin[0x15];
   85648:	e0bff117 	ldw	r2,-60(fp)
   8564c:	10800544 	addi	r2,r2,21
   85650:	e0bfef15 	stw	r2,-68(fp)

    edid->screen.size_defined = 0;
   85654:	e0bff017 	ldw	r2,-64(fp)
   85658:	10000d15 	stw	zero,52(r2)
    edid->screen.size.horizontal = 0;
   8565c:	e0bff017 	ldw	r2,-64(fp)
   85660:	10000f15 	stw	zero,60(r2)
    edid->screen.size.vertical = 0;
   85664:	e0bff017 	ldw	r2,-64(fp)
   85668:	10001015 	stw	zero,64(r2)
    edid->screen.aspect_defined = 0;
   8566c:	e0bff017 	ldw	r2,-64(fp)
   85670:	10000e15 	stw	zero,56(r2)
    edid->screen.aspect.landscape = 0.0f;
   85674:	e0bff017 	ldw	r2,-64(fp)
   85678:	10000f15 	stw	zero,60(r2)
    edid->screen.aspect.portrait = 0.0f;
   8567c:	e0bff017 	ldw	r2,-64(fp)
   85680:	10001015 	stw	zero,64(r2)

    if (c[0] != 0) {
   85684:	e0bfef17 	ldw	r2,-68(fp)
   85688:	10800003 	ldbu	r2,0(r2)
   8568c:	10803fcc 	andi	r2,r2,255
   85690:	1005003a 	cmpeq	r2,r2,zero
   85694:	1000271e 	bne	r2,zero,85734 <edid_decode_v14+0x740>
        if (c[1] != 0) {
   85698:	e0bfef17 	ldw	r2,-68(fp)
   8569c:	10800044 	addi	r2,r2,1
   856a0:	10800003 	ldbu	r2,0(r2)
   856a4:	10803fcc 	andi	r2,r2,255
   856a8:	1005003a 	cmpeq	r2,r2,zero
   856ac:	10000f1e 	bne	r2,zero,856ec <edid_decode_v14+0x6f8>
        	edid->screen.size_defined = 1;
   856b0:	e0fff017 	ldw	r3,-64(fp)
   856b4:	00800044 	movi	r2,1
   856b8:	18800d15 	stw	r2,52(r3)
        	edid->screen.size.horizontal = c[0];
   856bc:	e0bfef17 	ldw	r2,-68(fp)
   856c0:	10800003 	ldbu	r2,0(r2)
   856c4:	10c03fcc 	andi	r3,r2,255
   856c8:	e0bff017 	ldw	r2,-64(fp)
   856cc:	10c00f15 	stw	r3,60(r2)
        	edid->screen.size.vertical = c[1];
   856d0:	e0bfef17 	ldw	r2,-68(fp)
   856d4:	10800044 	addi	r2,r2,1
   856d8:	10800003 	ldbu	r2,0(r2)
   856dc:	10c03fcc 	andi	r3,r2,255
   856e0:	e0bff017 	ldw	r2,-64(fp)
   856e4:	10c01015 	stw	r3,64(r2)
   856e8:	00002906 	br	85790 <edid_decode_v14+0x79c>
        } else {
        	edid->screen.aspect_defined = 1;
   856ec:	e0fff017 	ldw	r3,-64(fp)
   856f0:	00800044 	movi	r2,1
   856f4:	18800e15 	stw	r2,56(r3)
        	edid->screen.aspect.landscape = ((float)c[0] + 99.0f) * 0.01f;
   856f8:	e0bfef17 	ldw	r2,-68(fp)
   856fc:	10800003 	ldbu	r2,0(r2)
   85700:	11003fcc 	andi	r4,r2,255
   85704:	008d6200 	call	8d620 <__floatunsisf>
   85708:	1009883a 	mov	r4,r2
   8570c:	0150b1b4 	movhi	r5,17094
   85710:	008d2140 	call	8d214 <__addsf3>
   85714:	1009883a 	mov	r4,r2
   85718:	014f0934 	movhi	r5,15396
   8571c:	2975c284 	addi	r5,r5,-10486
   85720:	008d2780 	call	8d278 <__mulsf3>
   85724:	1007883a 	mov	r3,r2
   85728:	e0bff017 	ldw	r2,-64(fp)
   8572c:	10c00f15 	stw	r3,60(r2)
   85730:	00001706 	br	85790 <edid_decode_v14+0x79c>
        }
    } else if (c[1] != 0) {
   85734:	e0bfef17 	ldw	r2,-68(fp)
   85738:	10800044 	addi	r2,r2,1
   8573c:	10800003 	ldbu	r2,0(r2)
   85740:	10803fcc 	andi	r2,r2,255
   85744:	1005003a 	cmpeq	r2,r2,zero
   85748:	1000111e 	bne	r2,zero,85790 <edid_decode_v14+0x79c>
    	edid->screen.aspect_defined = 2;
   8574c:	e0fff017 	ldw	r3,-64(fp)
   85750:	00800084 	movi	r2,2
   85754:	18800e15 	stw	r2,56(r3)
    	edid->screen.aspect.portrait = 100.0f / ((float)c[1] + 99.0f);
   85758:	e0bfef17 	ldw	r2,-68(fp)
   8575c:	10800044 	addi	r2,r2,1
   85760:	10800003 	ldbu	r2,0(r2)
   85764:	11003fcc 	andi	r4,r2,255
   85768:	008d6200 	call	8d620 <__floatunsisf>
   8576c:	1009883a 	mov	r4,r2
   85770:	0150b1b4 	movhi	r5,17094
   85774:	008d2140 	call	8d214 <__addsf3>
   85778:	0110b234 	movhi	r4,17096
   8577c:	100b883a 	mov	r5,r2
   85780:	008d4580 	call	8d458 <__divsf3>
   85784:	1007883a 	mov	r3,r2
   85788:	e0bff017 	ldw	r2,-64(fp)
   8578c:	10c01015 	stw	r3,64(r2)
    }

    // gamma
    c = &edid_bin[0x17];
   85790:	e0bff117 	ldw	r2,-60(fp)
   85794:	108005c4 	addi	r2,r2,23
   85798:	e0bfef15 	stw	r2,-68(fp)

    if (*c < 0xff)
   8579c:	e0bfef17 	ldw	r2,-68(fp)
   857a0:	10800003 	ldbu	r2,0(r2)
   857a4:	10803fcc 	andi	r2,r2,255
   857a8:	10803fe0 	cmpeqi	r2,r2,255
   857ac:	10000e1e 	bne	r2,zero,857e8 <edid_decode_v14+0x7f4>
        edid->gamma = ((float)(*c) + 100.0f) / 100.0f;
   857b0:	e0bfef17 	ldw	r2,-68(fp)
   857b4:	10800003 	ldbu	r2,0(r2)
   857b8:	11003fcc 	andi	r4,r2,255
   857bc:	008d6200 	call	8d620 <__floatunsisf>
   857c0:	1009883a 	mov	r4,r2
   857c4:	0150b234 	movhi	r5,17096
   857c8:	008d2140 	call	8d214 <__addsf3>
   857cc:	1009883a 	mov	r4,r2
   857d0:	0150b234 	movhi	r5,17096
   857d4:	008d4580 	call	8d458 <__divsf3>
   857d8:	1007883a 	mov	r3,r2
   857dc:	e0bff017 	ldw	r2,-64(fp)
   857e0:	10c01115 	stw	r3,68(r2)
   857e4:	00000206 	br	857f0 <edid_decode_v14+0x7fc>
    else
        edid->gamma = 0.0f;  // defined in an extension block
   857e8:	e0bff017 	ldw	r2,-64(fp)
   857ec:	10001115 	stw	zero,68(r2)

    // feature
    c = &edid_bin[0x18];
   857f0:	e0bff117 	ldw	r2,-60(fp)
   857f4:	10800604 	addi	r2,r2,24
   857f8:	e0bfef15 	stw	r2,-68(fp)

    edid->feature = 0;
   857fc:	e0bff017 	ldw	r2,-64(fp)
   85800:	10001215 	stw	zero,72(r2)
    if (*c & 0x80)
   85804:	e0bfef17 	ldw	r2,-68(fp)
   85808:	10800003 	ldbu	r2,0(r2)
   8580c:	10803fcc 	andi	r2,r2,255
   85810:	1080201c 	xori	r2,r2,128
   85814:	10bfe004 	addi	r2,r2,-128
   85818:	1004403a 	cmpge	r2,r2,zero
   8581c:	1000051e 	bne	r2,zero,85834 <edid_decode_v14+0x840>
    	edid->feature |= FS_PM_STANDBY;
   85820:	e0bff017 	ldw	r2,-64(fp)
   85824:	10801217 	ldw	r2,72(r2)
   85828:	10c00054 	ori	r3,r2,1
   8582c:	e0bff017 	ldw	r2,-64(fp)
   85830:	10c01215 	stw	r3,72(r2)
    if (*c & 0x40)
   85834:	e0bfef17 	ldw	r2,-68(fp)
   85838:	10800003 	ldbu	r2,0(r2)
   8583c:	10803fcc 	andi	r2,r2,255
   85840:	1080100c 	andi	r2,r2,64
   85844:	1005003a 	cmpeq	r2,r2,zero
   85848:	1000051e 	bne	r2,zero,85860 <edid_decode_v14+0x86c>
    	edid->feature |= FS_PM_SUSPEND;
   8584c:	e0bff017 	ldw	r2,-64(fp)
   85850:	10801217 	ldw	r2,72(r2)
   85854:	10c00094 	ori	r3,r2,2
   85858:	e0bff017 	ldw	r2,-64(fp)
   8585c:	10c01215 	stw	r3,72(r2)
    if (*c & 0x20)
   85860:	e0bfef17 	ldw	r2,-68(fp)
   85864:	10800003 	ldbu	r2,0(r2)
   85868:	10803fcc 	andi	r2,r2,255
   8586c:	1080080c 	andi	r2,r2,32
   85870:	1005003a 	cmpeq	r2,r2,zero
   85874:	1000051e 	bne	r2,zero,8588c <edid_decode_v14+0x898>
    	edid->feature |= FS_PM_ACTIVE_OFF;
   85878:	e0bff017 	ldw	r2,-64(fp)
   8587c:	10801217 	ldw	r2,72(r2)
   85880:	10c00114 	ori	r3,r2,4
   85884:	e0bff017 	ldw	r2,-64(fp)
   85888:	10c01215 	stw	r3,72(r2)

    if (edid->input.digital_if) {
   8588c:	e0bff017 	ldw	r2,-64(fp)
   85890:	10800817 	ldw	r2,32(r2)
   85894:	1005003a 	cmpeq	r2,r2,zero
   85898:	1000301e 	bne	r2,zero,8595c <edid_decode_v14+0x968>
        switch ((*c >> 3) & 0x03) {
   8589c:	e0bfef17 	ldw	r2,-68(fp)
   858a0:	10800003 	ldbu	r2,0(r2)
   858a4:	10803fcc 	andi	r2,r2,255
   858a8:	1004d0fa 	srli	r2,r2,3
   858ac:	10803fcc 	andi	r2,r2,255
   858b0:	108000cc 	andi	r2,r2,3
   858b4:	e0bffb15 	stw	r2,-20(fp)
   858b8:	e0fffb17 	ldw	r3,-20(fp)
   858bc:	18800060 	cmpeqi	r2,r3,1
   858c0:	1000141e 	bne	r2,zero,85914 <edid_decode_v14+0x920>
   858c4:	e13ffb17 	ldw	r4,-20(fp)
   858c8:	20800088 	cmpgei	r2,r4,2
   858cc:	1000041e 	bne	r2,zero,858e0 <edid_decode_v14+0x8ec>
   858d0:	e0fffb17 	ldw	r3,-20(fp)
   858d4:	1805003a 	cmpeq	r2,r3,zero
   858d8:	1000081e 	bne	r2,zero,858fc <edid_decode_v14+0x908>
   858dc:	00004106 	br	859e4 <edid_decode_v14+0x9f0>
   858e0:	e13ffb17 	ldw	r4,-20(fp)
   858e4:	208000a0 	cmpeqi	r2,r4,2
   858e8:	1000101e 	bne	r2,zero,8592c <edid_decode_v14+0x938>
   858ec:	e0fffb17 	ldw	r3,-20(fp)
   858f0:	188000e0 	cmpeqi	r2,r3,3
   858f4:	1000131e 	bne	r2,zero,85944 <edid_decode_v14+0x950>
   858f8:	00003a06 	br	859e4 <edid_decode_v14+0x9f0>
        case 0:
        	edid->feature |= FS_CEF_RGB444;
   858fc:	e0bff017 	ldw	r2,-64(fp)
   85900:	10801217 	ldw	r2,72(r2)
   85904:	10c01014 	ori	r3,r2,64
   85908:	e0bff017 	ldw	r2,-64(fp)
   8590c:	10c01215 	stw	r3,72(r2)
            break;
   85910:	00003406 	br	859e4 <edid_decode_v14+0x9f0>
        case 1:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444);
   85914:	e0bff017 	ldw	r2,-64(fp)
   85918:	10801217 	ldw	r2,72(r2)
   8591c:	10c03014 	ori	r3,r2,192
   85920:	e0bff017 	ldw	r2,-64(fp)
   85924:	10c01215 	stw	r3,72(r2)
            break;
   85928:	00002e06 	br	859e4 <edid_decode_v14+0x9f0>
        case 2:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR422);
   8592c:	e0bff017 	ldw	r2,-64(fp)
   85930:	10801217 	ldw	r2,72(r2)
   85934:	10c05014 	ori	r3,r2,320
   85938:	e0bff017 	ldw	r2,-64(fp)
   8593c:	10c01215 	stw	r3,72(r2)
            break;
   85940:	00002806 	br	859e4 <edid_decode_v14+0x9f0>
        case 3:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444 | FS_CEF_YCBCR422);
   85944:	e0bff017 	ldw	r2,-64(fp)
   85948:	10801217 	ldw	r2,72(r2)
   8594c:	10c07014 	ori	r3,r2,448
   85950:	e0bff017 	ldw	r2,-64(fp)
   85954:	10c01215 	stw	r3,72(r2)
   85958:	00002206 	br	859e4 <edid_decode_v14+0x9f0>
            break;
        }
    } else {
        switch ((*c >> 3) & 0x03) {
   8595c:	e0bfef17 	ldw	r2,-68(fp)
   85960:	10800003 	ldbu	r2,0(r2)
   85964:	10803fcc 	andi	r2,r2,255
   85968:	1004d0fa 	srli	r2,r2,3
   8596c:	10803fcc 	andi	r2,r2,255
   85970:	108000cc 	andi	r2,r2,3
   85974:	e0bffa15 	stw	r2,-24(fp)
   85978:	e13ffa17 	ldw	r4,-24(fp)
   8597c:	20800060 	cmpeqi	r2,r4,1
   85980:	10000d1e 	bne	r2,zero,859b8 <edid_decode_v14+0x9c4>
   85984:	e0fffa17 	ldw	r3,-24(fp)
   85988:	188000a0 	cmpeqi	r2,r3,2
   8598c:	1000101e 	bne	r2,zero,859d0 <edid_decode_v14+0x9dc>
   85990:	e13ffa17 	ldw	r4,-24(fp)
   85994:	2005003a 	cmpeq	r2,r4,zero
   85998:	1000011e 	bne	r2,zero,859a0 <edid_decode_v14+0x9ac>
   8599c:	00001106 	br	859e4 <edid_decode_v14+0x9f0>
        case 0:
        	edid->feature |= FS_DCT_MONO_GRAY;
   859a0:	e0bff017 	ldw	r2,-64(fp)
   859a4:	10801217 	ldw	r2,72(r2)
   859a8:	10c00214 	ori	r3,r2,8
   859ac:	e0bff017 	ldw	r2,-64(fp)
   859b0:	10c01215 	stw	r3,72(r2)
            break;
   859b4:	00000b06 	br	859e4 <edid_decode_v14+0x9f0>
        case 1:
        	edid->feature |= FS_DCT_RGB;
   859b8:	e0bff017 	ldw	r2,-64(fp)
   859bc:	10801217 	ldw	r2,72(r2)
   859c0:	10c00414 	ori	r3,r2,16
   859c4:	e0bff017 	ldw	r2,-64(fp)
   859c8:	10c01215 	stw	r3,72(r2)
            break;
   859cc:	00000506 	br	859e4 <edid_decode_v14+0x9f0>
        case 2:
        	edid->feature |= FS_DCT_NON_RGB;
   859d0:	e0bff017 	ldw	r2,-64(fp)
   859d4:	10801217 	ldw	r2,72(r2)
   859d8:	10c00814 	ori	r3,r2,32
   859dc:	e0bff017 	ldw	r2,-64(fp)
   859e0:	10c01215 	stw	r3,72(r2)
            break;
        }
    }

    if (*c & 0x04)
   859e4:	e0bfef17 	ldw	r2,-68(fp)
   859e8:	10800003 	ldbu	r2,0(r2)
   859ec:	10803fcc 	andi	r2,r2,255
   859f0:	1080010c 	andi	r2,r2,4
   859f4:	1005003a 	cmpeq	r2,r2,zero
   859f8:	1000051e 	bne	r2,zero,85a10 <edid_decode_v14+0xa1c>
    	edid->feature |= FS_OF_SRGB_DEFAULT;
   859fc:	e0bff017 	ldw	r2,-64(fp)
   85a00:	10801217 	ldw	r2,72(r2)
   85a04:	10c08014 	ori	r3,r2,512
   85a08:	e0bff017 	ldw	r2,-64(fp)
   85a0c:	10c01215 	stw	r3,72(r2)
    if (*c & 0x02)
   85a10:	e0bfef17 	ldw	r2,-68(fp)
   85a14:	10800003 	ldbu	r2,0(r2)
   85a18:	10803fcc 	andi	r2,r2,255
   85a1c:	1080008c 	andi	r2,r2,2
   85a20:	1005003a 	cmpeq	r2,r2,zero
   85a24:	1000051e 	bne	r2,zero,85a3c <edid_decode_v14+0xa48>
    	edid->feature |= FS_OF_NATIVE_PREFERRED;
   85a28:	e0bff017 	ldw	r2,-64(fp)
   85a2c:	10801217 	ldw	r2,72(r2)
   85a30:	10c10014 	ori	r3,r2,1024
   85a34:	e0bff017 	ldw	r2,-64(fp)
   85a38:	10c01215 	stw	r3,72(r2)
    if (*c & 0x01)
   85a3c:	e0bfef17 	ldw	r2,-68(fp)
   85a40:	10800003 	ldbu	r2,0(r2)
   85a44:	10803fcc 	andi	r2,r2,255
   85a48:	1080004c 	andi	r2,r2,1
   85a4c:	10803fcc 	andi	r2,r2,255
   85a50:	1005003a 	cmpeq	r2,r2,zero
   85a54:	1000051e 	bne	r2,zero,85a6c <edid_decode_v14+0xa78>
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;
   85a58:	e0bff017 	ldw	r2,-64(fp)
   85a5c:	10801217 	ldw	r2,72(r2)
   85a60:	10c20014 	ori	r3,r2,2048
   85a64:	e0bff017 	ldw	r2,-64(fp)
   85a68:	10c01215 	stw	r3,72(r2)

    // chromaticity coordinates
    c = &edid_bin[0x19];
   85a6c:	e0bff117 	ldw	r2,-60(fp)
   85a70:	10800644 	addi	r2,r2,25
   85a74:	e0bfef15 	stw	r2,-68(fp)

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
   85a78:	e0bfef17 	ldw	r2,-68(fp)
   85a7c:	10800084 	addi	r2,r2,2
   85a80:	10800003 	ldbu	r2,0(r2)
   85a84:	10803fcc 	andi	r2,r2,255
   85a88:	1085883a 	add	r2,r2,r2
   85a8c:	1085883a 	add	r2,r2,r2
   85a90:	1007883a 	mov	r3,r2
   85a94:	e0bfef17 	ldw	r2,-68(fp)
   85a98:	10800003 	ldbu	r2,0(r2)
   85a9c:	10803fcc 	andi	r2,r2,255
   85aa0:	1004d1ba 	srli	r2,r2,6
   85aa4:	10803fcc 	andi	r2,r2,255
   85aa8:	108000cc 	andi	r2,r2,3
   85aac:	1886b03a 	or	r3,r3,r2
   85ab0:	e0bff017 	ldw	r2,-64(fp)
   85ab4:	10c01315 	stw	r3,76(r2)
    edid->chromaticity.r_y = ((u16)c[3] << 2) | (((u16)c[0] >> 4) & 0x3);
   85ab8:	e0bfef17 	ldw	r2,-68(fp)
   85abc:	108000c4 	addi	r2,r2,3
   85ac0:	10800003 	ldbu	r2,0(r2)
   85ac4:	10803fcc 	andi	r2,r2,255
   85ac8:	1085883a 	add	r2,r2,r2
   85acc:	1085883a 	add	r2,r2,r2
   85ad0:	1007883a 	mov	r3,r2
   85ad4:	e0bfef17 	ldw	r2,-68(fp)
   85ad8:	10800003 	ldbu	r2,0(r2)
   85adc:	10803fcc 	andi	r2,r2,255
   85ae0:	1004d13a 	srli	r2,r2,4
   85ae4:	10803fcc 	andi	r2,r2,255
   85ae8:	108000cc 	andi	r2,r2,3
   85aec:	1886b03a 	or	r3,r3,r2
   85af0:	e0bff017 	ldw	r2,-64(fp)
   85af4:	10c01415 	stw	r3,80(r2)
    edid->chromaticity.g_x = ((u16)c[4] << 2) | (((u16)c[0] >> 2) & 0x3);
   85af8:	e0bfef17 	ldw	r2,-68(fp)
   85afc:	10800104 	addi	r2,r2,4
   85b00:	10800003 	ldbu	r2,0(r2)
   85b04:	10803fcc 	andi	r2,r2,255
   85b08:	1085883a 	add	r2,r2,r2
   85b0c:	1085883a 	add	r2,r2,r2
   85b10:	1007883a 	mov	r3,r2
   85b14:	e0bfef17 	ldw	r2,-68(fp)
   85b18:	10800003 	ldbu	r2,0(r2)
   85b1c:	10803fcc 	andi	r2,r2,255
   85b20:	1004d0ba 	srli	r2,r2,2
   85b24:	10803fcc 	andi	r2,r2,255
   85b28:	108000cc 	andi	r2,r2,3
   85b2c:	1886b03a 	or	r3,r3,r2
   85b30:	e0bff017 	ldw	r2,-64(fp)
   85b34:	10c01515 	stw	r3,84(r2)
    edid->chromaticity.g_y = ((u16)c[5] << 2) | ((u16)c[0] & 0x3);
   85b38:	e0bfef17 	ldw	r2,-68(fp)
   85b3c:	10800144 	addi	r2,r2,5
   85b40:	10800003 	ldbu	r2,0(r2)
   85b44:	10803fcc 	andi	r2,r2,255
   85b48:	1085883a 	add	r2,r2,r2
   85b4c:	1085883a 	add	r2,r2,r2
   85b50:	1007883a 	mov	r3,r2
   85b54:	e0bfef17 	ldw	r2,-68(fp)
   85b58:	10800003 	ldbu	r2,0(r2)
   85b5c:	10803fcc 	andi	r2,r2,255
   85b60:	108000cc 	andi	r2,r2,3
   85b64:	1886b03a 	or	r3,r3,r2
   85b68:	e0bff017 	ldw	r2,-64(fp)
   85b6c:	10c01615 	stw	r3,88(r2)
    edid->chromaticity.b_x = ((u16)c[6] << 2) | (((u16)c[1] >> 6) & 0x3);
   85b70:	e0bfef17 	ldw	r2,-68(fp)
   85b74:	10800184 	addi	r2,r2,6
   85b78:	10800003 	ldbu	r2,0(r2)
   85b7c:	10803fcc 	andi	r2,r2,255
   85b80:	1085883a 	add	r2,r2,r2
   85b84:	1085883a 	add	r2,r2,r2
   85b88:	1007883a 	mov	r3,r2
   85b8c:	e0bfef17 	ldw	r2,-68(fp)
   85b90:	10800044 	addi	r2,r2,1
   85b94:	10800003 	ldbu	r2,0(r2)
   85b98:	10803fcc 	andi	r2,r2,255
   85b9c:	1004d1ba 	srli	r2,r2,6
   85ba0:	10803fcc 	andi	r2,r2,255
   85ba4:	108000cc 	andi	r2,r2,3
   85ba8:	1886b03a 	or	r3,r3,r2
   85bac:	e0bff017 	ldw	r2,-64(fp)
   85bb0:	10c01715 	stw	r3,92(r2)
    edid->chromaticity.b_y = ((u16)c[7] << 2) | (((u16)c[1] >> 4) & 0x3);
   85bb4:	e0bfef17 	ldw	r2,-68(fp)
   85bb8:	108001c4 	addi	r2,r2,7
   85bbc:	10800003 	ldbu	r2,0(r2)
   85bc0:	10803fcc 	andi	r2,r2,255
   85bc4:	1085883a 	add	r2,r2,r2
   85bc8:	1085883a 	add	r2,r2,r2
   85bcc:	1007883a 	mov	r3,r2
   85bd0:	e0bfef17 	ldw	r2,-68(fp)
   85bd4:	10800044 	addi	r2,r2,1
   85bd8:	10800003 	ldbu	r2,0(r2)
   85bdc:	10803fcc 	andi	r2,r2,255
   85be0:	1004d13a 	srli	r2,r2,4
   85be4:	10803fcc 	andi	r2,r2,255
   85be8:	108000cc 	andi	r2,r2,3
   85bec:	1886b03a 	or	r3,r3,r2
   85bf0:	e0bff017 	ldw	r2,-64(fp)
   85bf4:	10c01815 	stw	r3,96(r2)
    edid->chromaticity.w_x = ((u16)c[8] << 2) | (((u16)c[1] >> 2) & 0x3);
   85bf8:	e0bfef17 	ldw	r2,-68(fp)
   85bfc:	10800204 	addi	r2,r2,8
   85c00:	10800003 	ldbu	r2,0(r2)
   85c04:	10803fcc 	andi	r2,r2,255
   85c08:	1085883a 	add	r2,r2,r2
   85c0c:	1085883a 	add	r2,r2,r2
   85c10:	1007883a 	mov	r3,r2
   85c14:	e0bfef17 	ldw	r2,-68(fp)
   85c18:	10800044 	addi	r2,r2,1
   85c1c:	10800003 	ldbu	r2,0(r2)
   85c20:	10803fcc 	andi	r2,r2,255
   85c24:	1004d0ba 	srli	r2,r2,2
   85c28:	10803fcc 	andi	r2,r2,255
   85c2c:	108000cc 	andi	r2,r2,3
   85c30:	1886b03a 	or	r3,r3,r2
   85c34:	e0bff017 	ldw	r2,-64(fp)
   85c38:	10c01915 	stw	r3,100(r2)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);
   85c3c:	e0bfef17 	ldw	r2,-68(fp)
   85c40:	10800244 	addi	r2,r2,9
   85c44:	10800003 	ldbu	r2,0(r2)
   85c48:	10803fcc 	andi	r2,r2,255
   85c4c:	1085883a 	add	r2,r2,r2
   85c50:	1085883a 	add	r2,r2,r2
   85c54:	1007883a 	mov	r3,r2
   85c58:	e0bfef17 	ldw	r2,-68(fp)
   85c5c:	10800044 	addi	r2,r2,1
   85c60:	10800003 	ldbu	r2,0(r2)
   85c64:	10803fcc 	andi	r2,r2,255
   85c68:	108000cc 	andi	r2,r2,3
   85c6c:	1886b03a 	or	r3,r3,r2
   85c70:	e0bff017 	ldw	r2,-64(fp)
   85c74:	10c01a15 	stw	r3,104(r2)

    // established timings I/II
    c = &edid_bin[0x23];
   85c78:	e0bff117 	ldw	r2,-60(fp)
   85c7c:	108008c4 	addi	r2,r2,35
   85c80:	e0bfef15 	stw	r2,-68(fp)

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
   85c84:	e0bff017 	ldw	r2,-64(fp)
   85c88:	11001b04 	addi	r4,r2,108
   85c8c:	e0bfef17 	ldw	r2,-68(fp)
   85c90:	10800003 	ldbu	r2,0(r2)
   85c94:	10803fcc 	andi	r2,r2,255
   85c98:	1080200c 	andi	r2,r2,128
   85c9c:	d8800015 	stw	r2,0(sp)
   85ca0:	0140b404 	movi	r5,720
   85ca4:	01806404 	movi	r6,400
   85ca8:	01c01184 	movi	r7,70
   85cac:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[1], 720, 400, 88, c[0] & 0x40);
   85cb0:	e0bff017 	ldw	r2,-64(fp)
   85cb4:	10801b04 	addi	r2,r2,108
   85cb8:	11000604 	addi	r4,r2,24
   85cbc:	e0bfef17 	ldw	r2,-68(fp)
   85cc0:	10800003 	ldbu	r2,0(r2)
   85cc4:	10803fcc 	andi	r2,r2,255
   85cc8:	1080100c 	andi	r2,r2,64
   85ccc:	d8800015 	stw	r2,0(sp)
   85cd0:	0140b404 	movi	r5,720
   85cd4:	01806404 	movi	r6,400
   85cd8:	01c01604 	movi	r7,88
   85cdc:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[2], 640, 480, 60, c[0] & 0x20);
   85ce0:	e0bff017 	ldw	r2,-64(fp)
   85ce4:	10801b04 	addi	r2,r2,108
   85ce8:	11000c04 	addi	r4,r2,48
   85cec:	e0bfef17 	ldw	r2,-68(fp)
   85cf0:	10800003 	ldbu	r2,0(r2)
   85cf4:	10803fcc 	andi	r2,r2,255
   85cf8:	1080080c 	andi	r2,r2,32
   85cfc:	d8800015 	stw	r2,0(sp)
   85d00:	0140a004 	movi	r5,640
   85d04:	01807804 	movi	r6,480
   85d08:	01c00f04 	movi	r7,60
   85d0c:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[3], 640, 480, 67, c[0] & 0x10);
   85d10:	e0bff017 	ldw	r2,-64(fp)
   85d14:	10801b04 	addi	r2,r2,108
   85d18:	11001204 	addi	r4,r2,72
   85d1c:	e0bfef17 	ldw	r2,-68(fp)
   85d20:	10800003 	ldbu	r2,0(r2)
   85d24:	10803fcc 	andi	r2,r2,255
   85d28:	1080040c 	andi	r2,r2,16
   85d2c:	d8800015 	stw	r2,0(sp)
   85d30:	0140a004 	movi	r5,640
   85d34:	01807804 	movi	r6,480
   85d38:	01c010c4 	movi	r7,67
   85d3c:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[4], 640, 480, 72, c[0] & 0x08);
   85d40:	e0bff017 	ldw	r2,-64(fp)
   85d44:	10801b04 	addi	r2,r2,108
   85d48:	11001804 	addi	r4,r2,96
   85d4c:	e0bfef17 	ldw	r2,-68(fp)
   85d50:	10800003 	ldbu	r2,0(r2)
   85d54:	10803fcc 	andi	r2,r2,255
   85d58:	1080020c 	andi	r2,r2,8
   85d5c:	d8800015 	stw	r2,0(sp)
   85d60:	0140a004 	movi	r5,640
   85d64:	01807804 	movi	r6,480
   85d68:	01c01204 	movi	r7,72
   85d6c:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[5], 640, 480, 75, c[0] & 0x04);
   85d70:	e0bff017 	ldw	r2,-64(fp)
   85d74:	10801b04 	addi	r2,r2,108
   85d78:	11001e04 	addi	r4,r2,120
   85d7c:	e0bfef17 	ldw	r2,-68(fp)
   85d80:	10800003 	ldbu	r2,0(r2)
   85d84:	10803fcc 	andi	r2,r2,255
   85d88:	1080010c 	andi	r2,r2,4
   85d8c:	d8800015 	stw	r2,0(sp)
   85d90:	0140a004 	movi	r5,640
   85d94:	01807804 	movi	r6,480
   85d98:	01c012c4 	movi	r7,75
   85d9c:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[6], 800, 600, 56, c[0] & 0x02);
   85da0:	e0bff017 	ldw	r2,-64(fp)
   85da4:	10801b04 	addi	r2,r2,108
   85da8:	11002404 	addi	r4,r2,144
   85dac:	e0bfef17 	ldw	r2,-68(fp)
   85db0:	10800003 	ldbu	r2,0(r2)
   85db4:	10803fcc 	andi	r2,r2,255
   85db8:	1080008c 	andi	r2,r2,2
   85dbc:	d8800015 	stw	r2,0(sp)
   85dc0:	0140c804 	movi	r5,800
   85dc4:	01809604 	movi	r6,600
   85dc8:	01c00e04 	movi	r7,56
   85dcc:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[7], 800, 600, 60, c[0] & 0x01);
   85dd0:	e0bff017 	ldw	r2,-64(fp)
   85dd4:	10801b04 	addi	r2,r2,108
   85dd8:	11002a04 	addi	r4,r2,168
   85ddc:	e0bfef17 	ldw	r2,-68(fp)
   85de0:	10800003 	ldbu	r2,0(r2)
   85de4:	10803fcc 	andi	r2,r2,255
   85de8:	1080004c 	andi	r2,r2,1
   85dec:	d8800015 	stw	r2,0(sp)
   85df0:	0140c804 	movi	r5,800
   85df4:	01809604 	movi	r6,600
   85df8:	01c00f04 	movi	r7,60
   85dfc:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[8], 800, 600, 72, c[1] & 0x80);
   85e00:	e0bff017 	ldw	r2,-64(fp)
   85e04:	10801b04 	addi	r2,r2,108
   85e08:	11003004 	addi	r4,r2,192
   85e0c:	e0bfef17 	ldw	r2,-68(fp)
   85e10:	10800044 	addi	r2,r2,1
   85e14:	10800003 	ldbu	r2,0(r2)
   85e18:	10803fcc 	andi	r2,r2,255
   85e1c:	1080200c 	andi	r2,r2,128
   85e20:	d8800015 	stw	r2,0(sp)
   85e24:	0140c804 	movi	r5,800
   85e28:	01809604 	movi	r6,600
   85e2c:	01c01204 	movi	r7,72
   85e30:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[9], 800, 600, 75, c[1] & 0x40);
   85e34:	e0bff017 	ldw	r2,-64(fp)
   85e38:	10801b04 	addi	r2,r2,108
   85e3c:	11003604 	addi	r4,r2,216
   85e40:	e0bfef17 	ldw	r2,-68(fp)
   85e44:	10800044 	addi	r2,r2,1
   85e48:	10800003 	ldbu	r2,0(r2)
   85e4c:	10803fcc 	andi	r2,r2,255
   85e50:	1080100c 	andi	r2,r2,64
   85e54:	d8800015 	stw	r2,0(sp)
   85e58:	0140c804 	movi	r5,800
   85e5c:	01809604 	movi	r6,600
   85e60:	01c012c4 	movi	r7,75
   85e64:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[10], 823, 624, 75, c[1] & 0x20);
   85e68:	e0bff017 	ldw	r2,-64(fp)
   85e6c:	10801b04 	addi	r2,r2,108
   85e70:	11003c04 	addi	r4,r2,240
   85e74:	e0bfef17 	ldw	r2,-68(fp)
   85e78:	10800044 	addi	r2,r2,1
   85e7c:	10800003 	ldbu	r2,0(r2)
   85e80:	10803fcc 	andi	r2,r2,255
   85e84:	1080080c 	andi	r2,r2,32
   85e88:	d8800015 	stw	r2,0(sp)
   85e8c:	0140cdc4 	movi	r5,823
   85e90:	01809c04 	movi	r6,624
   85e94:	01c012c4 	movi	r7,75
   85e98:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing_i(&edid->timing_1_2[11], 1024, 768, 87, c[1] & 0x10);
   85e9c:	e0bff017 	ldw	r2,-64(fp)
   85ea0:	10801b04 	addi	r2,r2,108
   85ea4:	11004204 	addi	r4,r2,264
   85ea8:	e0bfef17 	ldw	r2,-68(fp)
   85eac:	10800044 	addi	r2,r2,1
   85eb0:	10800003 	ldbu	r2,0(r2)
   85eb4:	10803fcc 	andi	r2,r2,255
   85eb8:	1080040c 	andi	r2,r2,16
   85ebc:	d8800015 	stw	r2,0(sp)
   85ec0:	01410004 	movi	r5,1024
   85ec4:	0180c004 	movi	r6,768
   85ec8:	01c015c4 	movi	r7,87
   85ecc:	00894040 	call	89404 <eb_establish_timing_i>
	eb_establish_timing(&edid->timing_1_2[12], 1024, 768, 60, c[1] & 0x08);
   85ed0:	e0bff017 	ldw	r2,-64(fp)
   85ed4:	10801b04 	addi	r2,r2,108
   85ed8:	11004804 	addi	r4,r2,288
   85edc:	e0bfef17 	ldw	r2,-68(fp)
   85ee0:	10800044 	addi	r2,r2,1
   85ee4:	10800003 	ldbu	r2,0(r2)
   85ee8:	10803fcc 	andi	r2,r2,255
   85eec:	1080020c 	andi	r2,r2,8
   85ef0:	d8800015 	stw	r2,0(sp)
   85ef4:	01410004 	movi	r5,1024
   85ef8:	0180c004 	movi	r6,768
   85efc:	01c00f04 	movi	r7,60
   85f00:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[13], 1024, 768, 70, c[1] & 0x04);
   85f04:	e0bff017 	ldw	r2,-64(fp)
   85f08:	10801b04 	addi	r2,r2,108
   85f0c:	11004e04 	addi	r4,r2,312
   85f10:	e0bfef17 	ldw	r2,-68(fp)
   85f14:	10800044 	addi	r2,r2,1
   85f18:	10800003 	ldbu	r2,0(r2)
   85f1c:	10803fcc 	andi	r2,r2,255
   85f20:	1080010c 	andi	r2,r2,4
   85f24:	d8800015 	stw	r2,0(sp)
   85f28:	01410004 	movi	r5,1024
   85f2c:	0180c004 	movi	r6,768
   85f30:	01c01184 	movi	r7,70
   85f34:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[14], 1024, 768, 75, c[1] & 0x02);
   85f38:	e0bff017 	ldw	r2,-64(fp)
   85f3c:	10801b04 	addi	r2,r2,108
   85f40:	11005404 	addi	r4,r2,336
   85f44:	e0bfef17 	ldw	r2,-68(fp)
   85f48:	10800044 	addi	r2,r2,1
   85f4c:	10800003 	ldbu	r2,0(r2)
   85f50:	10803fcc 	andi	r2,r2,255
   85f54:	1080008c 	andi	r2,r2,2
   85f58:	d8800015 	stw	r2,0(sp)
   85f5c:	01410004 	movi	r5,1024
   85f60:	0180c004 	movi	r6,768
   85f64:	01c012c4 	movi	r7,75
   85f68:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[15], 1280, 1024, 75, c[1] & 0x01);
   85f6c:	e0bff017 	ldw	r2,-64(fp)
   85f70:	10801b04 	addi	r2,r2,108
   85f74:	11005a04 	addi	r4,r2,360
   85f78:	e0bfef17 	ldw	r2,-68(fp)
   85f7c:	10800044 	addi	r2,r2,1
   85f80:	10800003 	ldbu	r2,0(r2)
   85f84:	10803fcc 	andi	r2,r2,255
   85f88:	1080004c 	andi	r2,r2,1
   85f8c:	d8800015 	stw	r2,0(sp)
   85f90:	01414004 	movi	r5,1280
   85f94:	01810004 	movi	r6,1024
   85f98:	01c012c4 	movi	r7,75
   85f9c:	00895740 	call	89574 <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);
   85fa0:	e0bff017 	ldw	r2,-64(fp)
   85fa4:	10801b04 	addi	r2,r2,108
   85fa8:	11006004 	addi	r4,r2,384
   85fac:	e0bfef17 	ldw	r2,-68(fp)
   85fb0:	10800084 	addi	r2,r2,2
   85fb4:	10800003 	ldbu	r2,0(r2)
   85fb8:	10803fcc 	andi	r2,r2,255
   85fbc:	1080200c 	andi	r2,r2,128
   85fc0:	d8800015 	stw	r2,0(sp)
   85fc4:	01412004 	movi	r5,1152
   85fc8:	0180d984 	movi	r6,870
   85fcc:	01c012c4 	movi	r7,75
   85fd0:	00895740 	call	89574 <eb_establish_timing>

    // standard timings
    c = &edid_bin[0x26];
   85fd4:	e0bff117 	ldw	r2,-60(fp)
   85fd8:	10800984 	addi	r2,r2,38
   85fdc:	e0bfef15 	stw	r2,-68(fp)

    for (i = 0; i < 8; ++i, c += 2) {
   85fe0:	e03fed15 	stw	zero,-76(fp)
   85fe4:	00005906 	br	8614c <edid_decode_v14+0x1158>
        if (*c == 0)
   85fe8:	e0bfef17 	ldw	r2,-68(fp)
   85fec:	10800003 	ldbu	r2,0(r2)
   85ff0:	10803fcc 	andi	r2,r2,255
   85ff4:	1005003a 	cmpeq	r2,r2,zero
   85ff8:	10004e1e 	bne	r2,zero,86134 <edid_decode_v14+0x1140>
        	continue;

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;
   85ffc:	e17fed17 	ldw	r5,-76(fp)
   86000:	e0bfef17 	ldw	r2,-68(fp)
   86004:	10800003 	ldbu	r2,0(r2)
   86008:	10803fcc 	andi	r2,r2,255
   8600c:	100490fa 	slli	r2,r2,3
   86010:	11003e04 	addi	r4,r2,248
   86014:	e0fff017 	ldw	r3,-64(fp)
   86018:	28800324 	muli	r2,r5,12
   8601c:	10c5883a 	add	r2,r2,r3
   86020:	10808104 	addi	r2,r2,516
   86024:	11000015 	stw	r4,0(r2)

		switch ((c[1] >> 6) & 0x3) {
   86028:	e0bfef17 	ldw	r2,-68(fp)
   8602c:	10800044 	addi	r2,r2,1
   86030:	10800003 	ldbu	r2,0(r2)
   86034:	10803fcc 	andi	r2,r2,255
   86038:	1004d1ba 	srli	r2,r2,6
   8603c:	10803fcc 	andi	r2,r2,255
   86040:	108000cc 	andi	r2,r2,3
   86044:	e0bff915 	stw	r2,-28(fp)
   86048:	e0fff917 	ldw	r3,-28(fp)
   8604c:	18800060 	cmpeqi	r2,r3,1
   86050:	1000151e 	bne	r2,zero,860a8 <edid_decode_v14+0x10b4>
   86054:	e13ff917 	ldw	r4,-28(fp)
   86058:	20800088 	cmpgei	r2,r4,2
   8605c:	1000041e 	bne	r2,zero,86070 <edid_decode_v14+0x107c>
   86060:	e0fff917 	ldw	r3,-28(fp)
   86064:	1805003a 	cmpeq	r2,r3,zero
   86068:	1000081e 	bne	r2,zero,8608c <edid_decode_v14+0x1098>
   8606c:	00002506 	br	86104 <edid_decode_v14+0x1110>
   86070:	e13ff917 	ldw	r4,-28(fp)
   86074:	208000a0 	cmpeqi	r2,r4,2
   86078:	1000131e 	bne	r2,zero,860c8 <edid_decode_v14+0x10d4>
   8607c:	e0fff917 	ldw	r3,-28(fp)
   86080:	188000e0 	cmpeqi	r2,r3,3
   86084:	1000181e 	bne	r2,zero,860e8 <edid_decode_v14+0x10f4>
   86088:	00001e06 	br	86104 <edid_decode_v14+0x1110>
		case 0:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_10;
   8608c:	e0bfed17 	ldw	r2,-76(fp)
   86090:	e0fff017 	ldw	r3,-64(fp)
   86094:	10800324 	muli	r2,r2,12
   86098:	10c5883a 	add	r2,r2,r3
   8609c:	10808204 	addi	r2,r2,520
   860a0:	10000015 	stw	zero,0(r2)
			break;
   860a4:	00001706 	br	86104 <edid_decode_v14+0x1110>
		case 1:
			edid->standard_timings[i].aspect_ratio = ST_AR_4_3;
   860a8:	e0bfed17 	ldw	r2,-76(fp)
   860ac:	e0fff017 	ldw	r3,-64(fp)
   860b0:	10800324 	muli	r2,r2,12
   860b4:	10c5883a 	add	r2,r2,r3
   860b8:	10c08204 	addi	r3,r2,520
   860bc:	00800044 	movi	r2,1
   860c0:	18800015 	stw	r2,0(r3)
			break;
   860c4:	00000f06 	br	86104 <edid_decode_v14+0x1110>
		case 2:
			edid->standard_timings[i].aspect_ratio = ST_AR_5_4;
   860c8:	e0bfed17 	ldw	r2,-76(fp)
   860cc:	e0fff017 	ldw	r3,-64(fp)
   860d0:	10800324 	muli	r2,r2,12
   860d4:	10c5883a 	add	r2,r2,r3
   860d8:	10c08204 	addi	r3,r2,520
   860dc:	00800084 	movi	r2,2
   860e0:	18800015 	stw	r2,0(r3)
			break;
   860e4:	00000706 	br	86104 <edid_decode_v14+0x1110>
		case 3:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_9;
   860e8:	e0bfed17 	ldw	r2,-76(fp)
   860ec:	e0fff017 	ldw	r3,-64(fp)
   860f0:	10800324 	muli	r2,r2,12
   860f4:	10c5883a 	add	r2,r2,r3
   860f8:	10c08204 	addi	r3,r2,520
   860fc:	008000c4 	movi	r2,3
   86100:	18800015 	stw	r2,0(r3)
			break;
		}

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
   86104:	e17fed17 	ldw	r5,-76(fp)
   86108:	e0bfef17 	ldw	r2,-68(fp)
   8610c:	10800044 	addi	r2,r2,1
   86110:	10800003 	ldbu	r2,0(r2)
   86114:	10803fcc 	andi	r2,r2,255
   86118:	10800fcc 	andi	r2,r2,63
   8611c:	11000f04 	addi	r4,r2,60
   86120:	e0fff017 	ldw	r3,-64(fp)
   86124:	28800324 	muli	r2,r5,12
   86128:	10c5883a 	add	r2,r2,r3
   8612c:	10808304 	addi	r2,r2,524
   86130:	11000015 	stw	r4,0(r2)
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);

    // standard timings
    c = &edid_bin[0x26];

    for (i = 0; i < 8; ++i, c += 2) {
   86134:	e0bfed17 	ldw	r2,-76(fp)
   86138:	10800044 	addi	r2,r2,1
   8613c:	e0bfed15 	stw	r2,-76(fp)
   86140:	e0bfef17 	ldw	r2,-68(fp)
   86144:	10800084 	addi	r2,r2,2
   86148:	e0bfef15 	stw	r2,-68(fp)
   8614c:	e0bfed17 	ldw	r2,-76(fp)
   86150:	10800210 	cmplti	r2,r2,8
   86154:	103fa41e 	bne	r2,zero,85fe8 <edid_decode_v14+0xff4>

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {
   86158:	e03fed15 	stw	zero,-76(fp)
   8615c:	000c8f06 	br	8939c <edid_decode_v14+0x43a8>

    	c = &edid_bin[0x36 + 18 * i];
   86160:	e0bfed17 	ldw	r2,-76(fp)
   86164:	108004a4 	muli	r2,r2,18
   86168:	1007883a 	mov	r3,r2
   8616c:	e0bff117 	ldw	r2,-60(fp)
   86170:	1885883a 	add	r2,r3,r2
   86174:	10800d84 	addi	r2,r2,54
   86178:	e0bfef15 	stw	r2,-68(fp)

        if ((c[0] != 0) || (c[1] != 0)) {
   8617c:	e0bfef17 	ldw	r2,-68(fp)
   86180:	10800003 	ldbu	r2,0(r2)
   86184:	10803fcc 	andi	r2,r2,255
   86188:	1004c03a 	cmpne	r2,r2,zero
   8618c:	1000061e 	bne	r2,zero,861a8 <edid_decode_v14+0x11b4>
   86190:	e0bfef17 	ldw	r2,-68(fp)
   86194:	10800044 	addi	r2,r2,1
   86198:	10800003 	ldbu	r2,0(r2)
   8619c:	10803fcc 	andi	r2,r2,255
   861a0:	1005003a 	cmpeq	r2,r2,zero
   861a4:	1002461e 	bne	r2,zero,86ac0 <edid_decode_v14+0x1acc>
            // detailed timing definition (preferred timing if is the first descriptor)

        	edid->descriptors[i].type = DT_DETAILED_TIMING;
   861a8:	e0bfed17 	ldw	r2,-76(fp)
   861ac:	e0fff017 	ldw	r3,-64(fp)
   861b0:	10815c24 	muli	r2,r2,1392
   861b4:	10c5883a 	add	r2,r2,r3
   861b8:	10809904 	addi	r2,r2,612
   861bc:	10000015 	stw	zero,0(r2)

            edid->descriptors[i].detailed_timing.pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
   861c0:	e17fed17 	ldw	r5,-76(fp)
   861c4:	e0bfef17 	ldw	r2,-68(fp)
   861c8:	10800044 	addi	r2,r2,1
   861cc:	10800003 	ldbu	r2,0(r2)
   861d0:	10803fcc 	andi	r2,r2,255
   861d4:	1006923a 	slli	r3,r2,8
   861d8:	e0bfef17 	ldw	r2,-68(fp)
   861dc:	10800003 	ldbu	r2,0(r2)
   861e0:	10803fcc 	andi	r2,r2,255
   861e4:	1884b03a 	or	r2,r3,r2
   861e8:	1109c424 	muli	r4,r2,10000
   861ec:	e0fff017 	ldw	r3,-64(fp)
   861f0:	28815c24 	muli	r2,r5,1392
   861f4:	10c5883a 	add	r2,r2,r3
   861f8:	10809b04 	addi	r2,r2,620
   861fc:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
   86200:	e17fed17 	ldw	r5,-76(fp)
   86204:	e0bfef17 	ldw	r2,-68(fp)
   86208:	10800104 	addi	r2,r2,4
   8620c:	10800003 	ldbu	r2,0(r2)
   86210:	10803fcc 	andi	r2,r2,255
   86214:	1004913a 	slli	r2,r2,4
   86218:	10c3c00c 	andi	r3,r2,3840
   8621c:	e0bfef17 	ldw	r2,-68(fp)
   86220:	10800084 	addi	r2,r2,2
   86224:	10800003 	ldbu	r2,0(r2)
   86228:	10803fcc 	andi	r2,r2,255
   8622c:	1888b03a 	or	r4,r3,r2
   86230:	e0fff017 	ldw	r3,-64(fp)
   86234:	28815c24 	muli	r2,r5,1392
   86238:	10c5883a 	add	r2,r2,r3
   8623c:	10809c04 	addi	r2,r2,624
   86240:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
   86244:	e17fed17 	ldw	r5,-76(fp)
   86248:	e0bfef17 	ldw	r2,-68(fp)
   8624c:	108001c4 	addi	r2,r2,7
   86250:	10800003 	ldbu	r2,0(r2)
   86254:	10803fcc 	andi	r2,r2,255
   86258:	1004913a 	slli	r2,r2,4
   8625c:	10c3c00c 	andi	r3,r2,3840
   86260:	e0bfef17 	ldw	r2,-68(fp)
   86264:	10800144 	addi	r2,r2,5
   86268:	10800003 	ldbu	r2,0(r2)
   8626c:	10803fcc 	andi	r2,r2,255
   86270:	1888b03a 	or	r4,r3,r2
   86274:	e0fff017 	ldw	r3,-64(fp)
   86278:	28815c24 	muli	r2,r5,1392
   8627c:	10c5883a 	add	r2,r2,r3
   86280:	10809d04 	addi	r2,r2,628
   86284:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
   86288:	e17fed17 	ldw	r5,-76(fp)
   8628c:	e0bfef17 	ldw	r2,-68(fp)
   86290:	10800104 	addi	r2,r2,4
   86294:	10800003 	ldbu	r2,0(r2)
   86298:	10803fcc 	andi	r2,r2,255
   8629c:	1004923a 	slli	r2,r2,8
   862a0:	10c3c00c 	andi	r3,r2,3840
   862a4:	e0bfef17 	ldw	r2,-68(fp)
   862a8:	108000c4 	addi	r2,r2,3
   862ac:	10800003 	ldbu	r2,0(r2)
   862b0:	10803fcc 	andi	r2,r2,255
   862b4:	1888b03a 	or	r4,r3,r2
   862b8:	e0fff017 	ldw	r3,-64(fp)
   862bc:	28815c24 	muli	r2,r5,1392
   862c0:	10c5883a 	add	r2,r2,r3
   862c4:	10809e04 	addi	r2,r2,632
   862c8:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
   862cc:	e17fed17 	ldw	r5,-76(fp)
   862d0:	e0bfef17 	ldw	r2,-68(fp)
   862d4:	108001c4 	addi	r2,r2,7
   862d8:	10800003 	ldbu	r2,0(r2)
   862dc:	10803fcc 	andi	r2,r2,255
   862e0:	1004923a 	slli	r2,r2,8
   862e4:	10c3c00c 	andi	r3,r2,3840
   862e8:	e0bfef17 	ldw	r2,-68(fp)
   862ec:	10800184 	addi	r2,r2,6
   862f0:	10800003 	ldbu	r2,0(r2)
   862f4:	10803fcc 	andi	r2,r2,255
   862f8:	1888b03a 	or	r4,r3,r2
   862fc:	e0fff017 	ldw	r3,-64(fp)
   86300:	28815c24 	muli	r2,r5,1392
   86304:	10c5883a 	add	r2,r2,r3
   86308:	10809f04 	addi	r2,r2,636
   8630c:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
   86310:	e17fed17 	ldw	r5,-76(fp)
   86314:	e0bfef17 	ldw	r2,-68(fp)
   86318:	108002c4 	addi	r2,r2,11
   8631c:	10800003 	ldbu	r2,0(r2)
   86320:	10803fcc 	andi	r2,r2,255
   86324:	1085883a 	add	r2,r2,r2
   86328:	1085883a 	add	r2,r2,r2
   8632c:	10c0c00c 	andi	r3,r2,768
   86330:	e0bfef17 	ldw	r2,-68(fp)
   86334:	10800204 	addi	r2,r2,8
   86338:	10800003 	ldbu	r2,0(r2)
   8633c:	10803fcc 	andi	r2,r2,255
   86340:	1888b03a 	or	r4,r3,r2
   86344:	e0fff017 	ldw	r3,-64(fp)
   86348:	28815c24 	muli	r2,r5,1392
   8634c:	10c5883a 	add	r2,r2,r3
   86350:	1080a004 	addi	r2,r2,640
   86354:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
   86358:	e17fed17 	ldw	r5,-76(fp)
   8635c:	e0bfef17 	ldw	r2,-68(fp)
   86360:	108002c4 	addi	r2,r2,11
   86364:	10800003 	ldbu	r2,0(r2)
   86368:	10803fcc 	andi	r2,r2,255
   8636c:	1085883a 	add	r2,r2,r2
   86370:	1085883a 	add	r2,r2,r2
   86374:	10c00c0c 	andi	r3,r2,48
   86378:	e0bfef17 	ldw	r2,-68(fp)
   8637c:	10800284 	addi	r2,r2,10
   86380:	10800003 	ldbu	r2,0(r2)
   86384:	10803fcc 	andi	r2,r2,255
   86388:	1004d13a 	srli	r2,r2,4
   8638c:	10803fcc 	andi	r2,r2,255
   86390:	1888b03a 	or	r4,r3,r2
   86394:	e0fff017 	ldw	r3,-64(fp)
   86398:	28815c24 	muli	r2,r5,1392
   8639c:	10c5883a 	add	r2,r2,r3
   863a0:	1080a104 	addi	r2,r2,644
   863a4:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
   863a8:	e17fed17 	ldw	r5,-76(fp)
   863ac:	e0bfef17 	ldw	r2,-68(fp)
   863b0:	108002c4 	addi	r2,r2,11
   863b4:	10800003 	ldbu	r2,0(r2)
   863b8:	10803fcc 	andi	r2,r2,255
   863bc:	1004913a 	slli	r2,r2,4
   863c0:	10c0c00c 	andi	r3,r2,768
   863c4:	e0bfef17 	ldw	r2,-68(fp)
   863c8:	10800244 	addi	r2,r2,9
   863cc:	10800003 	ldbu	r2,0(r2)
   863d0:	10803fcc 	andi	r2,r2,255
   863d4:	1888b03a 	or	r4,r3,r2
   863d8:	e0fff017 	ldw	r3,-64(fp)
   863dc:	28815c24 	muli	r2,r5,1392
   863e0:	10c5883a 	add	r2,r2,r3
   863e4:	1080a204 	addi	r2,r2,648
   863e8:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
   863ec:	e17fed17 	ldw	r5,-76(fp)
   863f0:	e0bfef17 	ldw	r2,-68(fp)
   863f4:	108002c4 	addi	r2,r2,11
   863f8:	10800003 	ldbu	r2,0(r2)
   863fc:	10803fcc 	andi	r2,r2,255
   86400:	1004913a 	slli	r2,r2,4
   86404:	10c00c0c 	andi	r3,r2,48
   86408:	e0bfef17 	ldw	r2,-68(fp)
   8640c:	10800284 	addi	r2,r2,10
   86410:	10800003 	ldbu	r2,0(r2)
   86414:	10803fcc 	andi	r2,r2,255
   86418:	108003cc 	andi	r2,r2,15
   8641c:	1888b03a 	or	r4,r3,r2
   86420:	e0fff017 	ldw	r3,-64(fp)
   86424:	28815c24 	muli	r2,r5,1392
   86428:	10c5883a 	add	r2,r2,r3
   8642c:	1080a304 	addi	r2,r2,652
   86430:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
   86434:	e17fed17 	ldw	r5,-76(fp)
   86438:	e0bfef17 	ldw	r2,-68(fp)
   8643c:	10800384 	addi	r2,r2,14
   86440:	10800003 	ldbu	r2,0(r2)
   86444:	10803fcc 	andi	r2,r2,255
   86448:	1004913a 	slli	r2,r2,4
   8644c:	10c3c00c 	andi	r3,r2,3840
   86450:	e0bfef17 	ldw	r2,-68(fp)
   86454:	10800304 	addi	r2,r2,12
   86458:	10800003 	ldbu	r2,0(r2)
   8645c:	10803fcc 	andi	r2,r2,255
   86460:	1888b03a 	or	r4,r3,r2
   86464:	e0fff017 	ldw	r3,-64(fp)
   86468:	28815c24 	muli	r2,r5,1392
   8646c:	10c5883a 	add	r2,r2,r3
   86470:	1080a404 	addi	r2,r2,656
   86474:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
   86478:	e17fed17 	ldw	r5,-76(fp)
   8647c:	e0bfef17 	ldw	r2,-68(fp)
   86480:	10800384 	addi	r2,r2,14
   86484:	10800003 	ldbu	r2,0(r2)
   86488:	10803fcc 	andi	r2,r2,255
   8648c:	1004923a 	slli	r2,r2,8
   86490:	10c3c00c 	andi	r3,r2,3840
   86494:	e0bfef17 	ldw	r2,-68(fp)
   86498:	10800344 	addi	r2,r2,13
   8649c:	10800003 	ldbu	r2,0(r2)
   864a0:	10803fcc 	andi	r2,r2,255
   864a4:	1888b03a 	or	r4,r3,r2
   864a8:	e0fff017 	ldw	r3,-64(fp)
   864ac:	28815c24 	muli	r2,r5,1392
   864b0:	10c5883a 	add	r2,r2,r3
   864b4:	1080a504 	addi	r2,r2,660
   864b8:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.border_lr = (int)c[15];
   864bc:	e17fed17 	ldw	r5,-76(fp)
   864c0:	e0bfef17 	ldw	r2,-68(fp)
   864c4:	108003c4 	addi	r2,r2,15
   864c8:	10800003 	ldbu	r2,0(r2)
   864cc:	11003fcc 	andi	r4,r2,255
   864d0:	e0fff017 	ldw	r3,-64(fp)
   864d4:	28815c24 	muli	r2,r5,1392
   864d8:	10c5883a 	add	r2,r2,r3
   864dc:	1080a604 	addi	r2,r2,664
   864e0:	11000015 	stw	r4,0(r2)
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];
   864e4:	e17fed17 	ldw	r5,-76(fp)
   864e8:	e0bfef17 	ldw	r2,-68(fp)
   864ec:	10800404 	addi	r2,r2,16
   864f0:	10800003 	ldbu	r2,0(r2)
   864f4:	11003fcc 	andi	r4,r2,255
   864f8:	e0fff017 	ldw	r3,-64(fp)
   864fc:	28815c24 	muli	r2,r5,1392
   86500:	10c5883a 	add	r2,r2,r3
   86504:	1080a704 	addi	r2,r2,668
   86508:	11000015 	stw	r4,0(r2)

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;
   8650c:	e17fed17 	ldw	r5,-76(fp)
   86510:	e0bfef17 	ldw	r2,-68(fp)
   86514:	10800444 	addi	r2,r2,17
   86518:	10800003 	ldbu	r2,0(r2)
   8651c:	10803fcc 	andi	r2,r2,255
   86520:	1080201c 	xori	r2,r2,128
   86524:	10bfe004 	addi	r2,r2,-128
   86528:	1008d7fa 	srli	r4,r2,31
   8652c:	e0fff017 	ldw	r3,-64(fp)
   86530:	28815c24 	muli	r2,r5,1392
   86534:	10c5883a 	add	r2,r2,r3
   86538:	1080a804 	addi	r2,r2,672
   8653c:	11000015 	stw	r4,0(r2)

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
   86540:	e0bfed17 	ldw	r2,-76(fp)
   86544:	e0fff017 	ldw	r3,-64(fp)
   86548:	10815c24 	muli	r2,r2,1392
   8654c:	10c5883a 	add	r2,r2,r3
   86550:	1080a904 	addi	r2,r2,676
   86554:	10000015 	stw	zero,0(r2)
			if ((c[17] & 0x61) == 0x20)
   86558:	e0bfef17 	ldw	r2,-68(fp)
   8655c:	10800444 	addi	r2,r2,17
   86560:	10800003 	ldbu	r2,0(r2)
   86564:	10803fcc 	andi	r2,r2,255
   86568:	1080184c 	andi	r2,r2,97
   8656c:	10800818 	cmpnei	r2,r2,32
   86570:	10000d1e 	bne	r2,zero,865a8 <edid_decode_v14+0x15b4>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
   86574:	e17fed17 	ldw	r5,-76(fp)
   86578:	e0bfed17 	ldw	r2,-76(fp)
   8657c:	e0fff017 	ldw	r3,-64(fp)
   86580:	10815c24 	muli	r2,r2,1392
   86584:	10c5883a 	add	r2,r2,r3
   86588:	1080a904 	addi	r2,r2,676
   8658c:	10800017 	ldw	r2,0(r2)
   86590:	11000094 	ori	r4,r2,2
   86594:	e0fff017 	ldw	r3,-64(fp)
   86598:	28815c24 	muli	r2,r5,1392
   8659c:	10c5883a 	add	r2,r2,r3
   865a0:	1080a904 	addi	r2,r2,676
   865a4:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x40)
   865a8:	e0bfef17 	ldw	r2,-68(fp)
   865ac:	10800444 	addi	r2,r2,17
   865b0:	10800003 	ldbu	r2,0(r2)
   865b4:	10803fcc 	andi	r2,r2,255
   865b8:	1080184c 	andi	r2,r2,97
   865bc:	10801018 	cmpnei	r2,r2,64
   865c0:	10000d1e 	bne	r2,zero,865f8 <edid_decode_v14+0x1604>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
   865c4:	e17fed17 	ldw	r5,-76(fp)
   865c8:	e0bfed17 	ldw	r2,-76(fp)
   865cc:	e0fff017 	ldw	r3,-64(fp)
   865d0:	10815c24 	muli	r2,r2,1392
   865d4:	10c5883a 	add	r2,r2,r3
   865d8:	1080a904 	addi	r2,r2,676
   865dc:	10800017 	ldw	r2,0(r2)
   865e0:	11000114 	ori	r4,r2,4
   865e4:	e0fff017 	ldw	r3,-64(fp)
   865e8:	28815c24 	muli	r2,r5,1392
   865ec:	10c5883a 	add	r2,r2,r3
   865f0:	1080a904 	addi	r2,r2,676
   865f4:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x21)
   865f8:	e0bfef17 	ldw	r2,-68(fp)
   865fc:	10800444 	addi	r2,r2,17
   86600:	10800003 	ldbu	r2,0(r2)
   86604:	10803fcc 	andi	r2,r2,255
   86608:	1080184c 	andi	r2,r2,97
   8660c:	10800858 	cmpnei	r2,r2,33
   86610:	10000d1e 	bne	r2,zero,86648 <edid_decode_v14+0x1654>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
   86614:	e17fed17 	ldw	r5,-76(fp)
   86618:	e0bfed17 	ldw	r2,-76(fp)
   8661c:	e0fff017 	ldw	r3,-64(fp)
   86620:	10815c24 	muli	r2,r2,1392
   86624:	10c5883a 	add	r2,r2,r3
   86628:	1080a904 	addi	r2,r2,676
   8662c:	10800017 	ldw	r2,0(r2)
   86630:	11000214 	ori	r4,r2,8
   86634:	e0fff017 	ldw	r3,-64(fp)
   86638:	28815c24 	muli	r2,r5,1392
   8663c:	10c5883a 	add	r2,r2,r3
   86640:	1080a904 	addi	r2,r2,676
   86644:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x41)
   86648:	e0bfef17 	ldw	r2,-68(fp)
   8664c:	10800444 	addi	r2,r2,17
   86650:	10800003 	ldbu	r2,0(r2)
   86654:	10803fcc 	andi	r2,r2,255
   86658:	1080184c 	andi	r2,r2,97
   8665c:	10801058 	cmpnei	r2,r2,65
   86660:	10000d1e 	bne	r2,zero,86698 <edid_decode_v14+0x16a4>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
   86664:	e17fed17 	ldw	r5,-76(fp)
   86668:	e0bfed17 	ldw	r2,-76(fp)
   8666c:	e0fff017 	ldw	r3,-64(fp)
   86670:	10815c24 	muli	r2,r2,1392
   86674:	10c5883a 	add	r2,r2,r3
   86678:	1080a904 	addi	r2,r2,676
   8667c:	10800017 	ldw	r2,0(r2)
   86680:	11000414 	ori	r4,r2,16
   86684:	e0fff017 	ldw	r3,-64(fp)
   86688:	28815c24 	muli	r2,r5,1392
   8668c:	10c5883a 	add	r2,r2,r3
   86690:	1080a904 	addi	r2,r2,676
   86694:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x60)
   86698:	e0bfef17 	ldw	r2,-68(fp)
   8669c:	10800444 	addi	r2,r2,17
   866a0:	10800003 	ldbu	r2,0(r2)
   866a4:	10803fcc 	andi	r2,r2,255
   866a8:	1080184c 	andi	r2,r2,97
   866ac:	10801818 	cmpnei	r2,r2,96
   866b0:	10000d1e 	bne	r2,zero,866e8 <edid_decode_v14+0x16f4>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
   866b4:	e17fed17 	ldw	r5,-76(fp)
   866b8:	e0bfed17 	ldw	r2,-76(fp)
   866bc:	e0fff017 	ldw	r3,-64(fp)
   866c0:	10815c24 	muli	r2,r2,1392
   866c4:	10c5883a 	add	r2,r2,r3
   866c8:	1080a904 	addi	r2,r2,676
   866cc:	10800017 	ldw	r2,0(r2)
   866d0:	11000814 	ori	r4,r2,32
   866d4:	e0fff017 	ldw	r3,-64(fp)
   866d8:	28815c24 	muli	r2,r5,1392
   866dc:	10c5883a 	add	r2,r2,r3
   866e0:	1080a904 	addi	r2,r2,676
   866e4:	11000015 	stw	r4,0(r2)
			if ((c[17] & 0x61) == 0x61)
   866e8:	e0bfef17 	ldw	r2,-68(fp)
   866ec:	10800444 	addi	r2,r2,17
   866f0:	10800003 	ldbu	r2,0(r2)
   866f4:	10803fcc 	andi	r2,r2,255
   866f8:	1080184c 	andi	r2,r2,97
   866fc:	10801858 	cmpnei	r2,r2,97
   86700:	10000d1e 	bne	r2,zero,86738 <edid_decode_v14+0x1744>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
   86704:	e17fed17 	ldw	r5,-76(fp)
   86708:	e0bfed17 	ldw	r2,-76(fp)
   8670c:	e0fff017 	ldw	r3,-64(fp)
   86710:	10815c24 	muli	r2,r2,1392
   86714:	10c5883a 	add	r2,r2,r3
   86718:	1080a904 	addi	r2,r2,676
   8671c:	10800017 	ldw	r2,0(r2)
   86720:	11001014 	ori	r4,r2,64
   86724:	e0fff017 	ldw	r3,-64(fp)
   86728:	28815c24 	muli	r2,r5,1392
   8672c:	10c5883a 	add	r2,r2,r3
   86730:	1080a904 	addi	r2,r2,676
   86734:	11000015 	stw	r4,0(r2)

			edid->descriptors[i].detailed_timing.sync = 0;
   86738:	e0bfed17 	ldw	r2,-76(fp)
   8673c:	e0fff017 	ldw	r3,-64(fp)
   86740:	10815c24 	muli	r2,r2,1392
   86744:	10c5883a 	add	r2,r2,r3
   86748:	1080aa04 	addi	r2,r2,680
   8674c:	10000015 	stw	zero,0(r2)
            if (c[17] & 0x10) {
   86750:	e0bfef17 	ldw	r2,-68(fp)
   86754:	10800444 	addi	r2,r2,17
   86758:	10800003 	ldbu	r2,0(r2)
   8675c:	10803fcc 	andi	r2,r2,255
   86760:	1080040c 	andi	r2,r2,16
   86764:	1005003a 	cmpeq	r2,r2,zero
   86768:	10007b1e 	bne	r2,zero,86958 <edid_decode_v14+0x1964>
                if (c[17] & 0x08) {
   8676c:	e0bfef17 	ldw	r2,-68(fp)
   86770:	10800444 	addi	r2,r2,17
   86774:	10800003 	ldbu	r2,0(r2)
   86778:	10803fcc 	andi	r2,r2,255
   8677c:	1080020c 	andi	r2,r2,8
   86780:	1005003a 	cmpeq	r2,r2,zero
   86784:	1000521e 	bne	r2,zero,868d0 <edid_decode_v14+0x18dc>
                	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_SYNC;
   86788:	e17fed17 	ldw	r5,-76(fp)
   8678c:	e0bfed17 	ldw	r2,-76(fp)
   86790:	e0fff017 	ldw	r3,-64(fp)
   86794:	10815c24 	muli	r2,r2,1392
   86798:	10c5883a 	add	r2,r2,r3
   8679c:	1080aa04 	addi	r2,r2,680
   867a0:	10800017 	ldw	r2,0(r2)
   867a4:	11002014 	ori	r4,r2,128
   867a8:	e0fff017 	ldw	r3,-64(fp)
   867ac:	28815c24 	muli	r2,r5,1392
   867b0:	10c5883a 	add	r2,r2,r3
   867b4:	1080aa04 	addi	r2,r2,680
   867b8:	11000015 	stw	r4,0(r2)

                	if (c[17] & 0x04)
   867bc:	e0bfef17 	ldw	r2,-68(fp)
   867c0:	10800444 	addi	r2,r2,17
   867c4:	10800003 	ldbu	r2,0(r2)
   867c8:	10803fcc 	andi	r2,r2,255
   867cc:	1080010c 	andi	r2,r2,4
   867d0:	1005003a 	cmpeq	r2,r2,zero
   867d4:	10000e1e 	bne	r2,zero,86810 <edid_decode_v14+0x181c>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_P;
   867d8:	e17fed17 	ldw	r5,-76(fp)
   867dc:	e0bfed17 	ldw	r2,-76(fp)
   867e0:	e0fff017 	ldw	r3,-64(fp)
   867e4:	10815c24 	muli	r2,r2,1392
   867e8:	10c5883a 	add	r2,r2,r3
   867ec:	1080aa04 	addi	r2,r2,680
   867f0:	10800017 	ldw	r2,0(r2)
   867f4:	11008014 	ori	r4,r2,512
   867f8:	e0fff017 	ldw	r3,-64(fp)
   867fc:	28815c24 	muli	r2,r5,1392
   86800:	10c5883a 	add	r2,r2,r3
   86804:	1080aa04 	addi	r2,r2,680
   86808:	11000015 	stw	r4,0(r2)
   8680c:	00000d06 	br	86844 <edid_decode_v14+0x1850>
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_N;
   86810:	e17fed17 	ldw	r5,-76(fp)
   86814:	e0bfed17 	ldw	r2,-76(fp)
   86818:	e0fff017 	ldw	r3,-64(fp)
   8681c:	10815c24 	muli	r2,r2,1392
   86820:	10c5883a 	add	r2,r2,r3
   86824:	1080aa04 	addi	r2,r2,680
   86828:	10800017 	ldw	r2,0(r2)
   8682c:	11004014 	ori	r4,r2,256
   86830:	e0fff017 	ldw	r3,-64(fp)
   86834:	28815c24 	muli	r2,r5,1392
   86838:	10c5883a 	add	r2,r2,r3
   8683c:	1080aa04 	addi	r2,r2,680
   86840:	11000015 	stw	r4,0(r2)

                	if (c[17] & 0x02)
   86844:	e0bfef17 	ldw	r2,-68(fp)
   86848:	10800444 	addi	r2,r2,17
   8684c:	10800003 	ldbu	r2,0(r2)
   86850:	10803fcc 	andi	r2,r2,255
   86854:	1080008c 	andi	r2,r2,2
   86858:	1005003a 	cmpeq	r2,r2,zero
   8685c:	10000e1e 	bne	r2,zero,86898 <edid_decode_v14+0x18a4>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
   86860:	e17fed17 	ldw	r5,-76(fp)
   86864:	e0bfed17 	ldw	r2,-76(fp)
   86868:	e0fff017 	ldw	r3,-64(fp)
   8686c:	10815c24 	muli	r2,r2,1392
   86870:	10c5883a 	add	r2,r2,r3
   86874:	1080aa04 	addi	r2,r2,680
   86878:	10800017 	ldw	r2,0(r2)
   8687c:	11020014 	ori	r4,r2,2048
   86880:	e0fff017 	ldw	r3,-64(fp)
   86884:	28815c24 	muli	r2,r5,1392
   86888:	10c5883a 	add	r2,r2,r3
   8688c:	1080aa04 	addi	r2,r2,680
   86890:	11000015 	stw	r4,0(r2)
   86894:	000abe06 	br	89390 <edid_decode_v14+0x439c>
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_N;
   86898:	e17fed17 	ldw	r5,-76(fp)
   8689c:	e0bfed17 	ldw	r2,-76(fp)
   868a0:	e0fff017 	ldw	r3,-64(fp)
   868a4:	10815c24 	muli	r2,r2,1392
   868a8:	10c5883a 	add	r2,r2,r3
   868ac:	1080aa04 	addi	r2,r2,680
   868b0:	10800017 	ldw	r2,0(r2)
   868b4:	11010014 	ori	r4,r2,1024
   868b8:	e0fff017 	ldw	r3,-64(fp)
   868bc:	28815c24 	muli	r2,r5,1392
   868c0:	10c5883a 	add	r2,r2,r3
   868c4:	1080aa04 	addi	r2,r2,680
   868c8:	11000015 	stw	r4,0(r2)
   868cc:	000ab006 	br	89390 <edid_decode_v14+0x439c>
                } else {
                	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SYNC;
   868d0:	e17fed17 	ldw	r5,-76(fp)
   868d4:	e0bfed17 	ldw	r2,-76(fp)
   868d8:	e0fff017 	ldw	r3,-64(fp)
   868dc:	10815c24 	muli	r2,r2,1392
   868e0:	10c5883a 	add	r2,r2,r3
   868e4:	1080aa04 	addi	r2,r2,680
   868e8:	10800017 	ldw	r2,0(r2)
   868ec:	11000814 	ori	r4,r2,32
   868f0:	e0fff017 	ldw	r3,-64(fp)
   868f4:	28815c24 	muli	r2,r5,1392
   868f8:	10c5883a 	add	r2,r2,r3
   868fc:	1080aa04 	addi	r2,r2,680
   86900:	11000015 	stw	r4,0(r2)
                	if (c[17] & 0x04)
   86904:	e0bfef17 	ldw	r2,-68(fp)
   86908:	10800444 	addi	r2,r2,17
   8690c:	10800003 	ldbu	r2,0(r2)
   86910:	10803fcc 	andi	r2,r2,255
   86914:	1080010c 	andi	r2,r2,4
   86918:	1005003a 	cmpeq	r2,r2,zero
   8691c:	100a9c1e 	bne	r2,zero,89390 <edid_decode_v14+0x439c>
                    	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SERRATION;
   86920:	e17fed17 	ldw	r5,-76(fp)
   86924:	e0bfed17 	ldw	r2,-76(fp)
   86928:	e0fff017 	ldw	r3,-64(fp)
   8692c:	10815c24 	muli	r2,r2,1392
   86930:	10c5883a 	add	r2,r2,r3
   86934:	1080aa04 	addi	r2,r2,680
   86938:	10800017 	ldw	r2,0(r2)
   8693c:	11001014 	ori	r4,r2,64
   86940:	e0fff017 	ldw	r3,-64(fp)
   86944:	28815c24 	muli	r2,r5,1392
   86948:	10c5883a 	add	r2,r2,r3
   8694c:	1080aa04 	addi	r2,r2,680
   86950:	11000015 	stw	r4,0(r2)
   86954:	000a8e06 	br	89390 <edid_decode_v14+0x439c>
                }
            } else {
            	if (c[17] & 0x80) {
   86958:	e0bfef17 	ldw	r2,-68(fp)
   8695c:	10800444 	addi	r2,r2,17
   86960:	10800003 	ldbu	r2,0(r2)
   86964:	10803fcc 	andi	r2,r2,255
   86968:	1080201c 	xori	r2,r2,128
   8696c:	10bfe004 	addi	r2,r2,-128
   86970:	1004403a 	cmpge	r2,r2,zero
   86974:	1000441e 	bne	r2,zero,86a88 <edid_decode_v14+0x1a94>
            		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_COMPOSITE_SYNC;
   86978:	e17fed17 	ldw	r5,-76(fp)
   8697c:	e0bfed17 	ldw	r2,-76(fp)
   86980:	e0fff017 	ldw	r3,-64(fp)
   86984:	10815c24 	muli	r2,r2,1392
   86988:	10c5883a 	add	r2,r2,r3
   8698c:	1080aa04 	addi	r2,r2,680
   86990:	10800017 	ldw	r2,0(r2)
   86994:	11000094 	ori	r4,r2,2
   86998:	e0fff017 	ldw	r3,-64(fp)
   8699c:	28815c24 	muli	r2,r5,1392
   869a0:	10c5883a 	add	r2,r2,r3
   869a4:	1080aa04 	addi	r2,r2,680
   869a8:	11000015 	stw	r4,0(r2)
            		if (c[17] & 0x40) {
   869ac:	e0bfef17 	ldw	r2,-68(fp)
   869b0:	10800444 	addi	r2,r2,17
   869b4:	10800003 	ldbu	r2,0(r2)
   869b8:	10803fcc 	andi	r2,r2,255
   869bc:	1080100c 	andi	r2,r2,64
   869c0:	1005003a 	cmpeq	r2,r2,zero
   869c4:	100a721e 	bne	r2,zero,89390 <edid_decode_v14+0x439c>
                		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION;
   869c8:	e17fed17 	ldw	r5,-76(fp)
   869cc:	e0bfed17 	ldw	r2,-76(fp)
   869d0:	e0fff017 	ldw	r3,-64(fp)
   869d4:	10815c24 	muli	r2,r2,1392
   869d8:	10c5883a 	add	r2,r2,r3
   869dc:	1080aa04 	addi	r2,r2,680
   869e0:	10800017 	ldw	r2,0(r2)
   869e4:	11000114 	ori	r4,r2,4
   869e8:	e0fff017 	ldw	r3,-64(fp)
   869ec:	28815c24 	muli	r2,r5,1392
   869f0:	10c5883a 	add	r2,r2,r3
   869f4:	1080aa04 	addi	r2,r2,680
   869f8:	11000015 	stw	r4,0(r2)
                		if (c[17] & 0x20)
   869fc:	e0bfef17 	ldw	r2,-68(fp)
   86a00:	10800444 	addi	r2,r2,17
   86a04:	10800003 	ldbu	r2,0(r2)
   86a08:	10803fcc 	andi	r2,r2,255
   86a0c:	1080080c 	andi	r2,r2,32
   86a10:	1005003a 	cmpeq	r2,r2,zero
   86a14:	10000e1e 	bne	r2,zero,86a50 <edid_decode_v14+0x1a5c>
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
   86a18:	e17fed17 	ldw	r5,-76(fp)
   86a1c:	e0bfed17 	ldw	r2,-76(fp)
   86a20:	e0fff017 	ldw	r3,-64(fp)
   86a24:	10815c24 	muli	r2,r2,1392
   86a28:	10c5883a 	add	r2,r2,r3
   86a2c:	1080aa04 	addi	r2,r2,680
   86a30:	10800017 	ldw	r2,0(r2)
   86a34:	11000414 	ori	r4,r2,16
   86a38:	e0fff017 	ldw	r3,-64(fp)
   86a3c:	28815c24 	muli	r2,r5,1392
   86a40:	10c5883a 	add	r2,r2,r3
   86a44:	1080aa04 	addi	r2,r2,680
   86a48:	11000015 	stw	r4,0(r2)
   86a4c:	000a5006 	br	89390 <edid_decode_v14+0x439c>
                		else
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_G;
   86a50:	e17fed17 	ldw	r5,-76(fp)
   86a54:	e0bfed17 	ldw	r2,-76(fp)
   86a58:	e0fff017 	ldw	r3,-64(fp)
   86a5c:	10815c24 	muli	r2,r2,1392
   86a60:	10c5883a 	add	r2,r2,r3
   86a64:	1080aa04 	addi	r2,r2,680
   86a68:	10800017 	ldw	r2,0(r2)
   86a6c:	11000214 	ori	r4,r2,8
   86a70:	e0fff017 	ldw	r3,-64(fp)
   86a74:	28815c24 	muli	r2,r5,1392
   86a78:	10c5883a 	add	r2,r2,r3
   86a7c:	1080aa04 	addi	r2,r2,680
   86a80:	11000015 	stw	r4,0(r2)
   86a84:	000a4206 	br	89390 <edid_decode_v14+0x439c>
            		}
            	} else {
            		edid->descriptors[i].detailed_timing.sync |= A_COMPOSITE_SYNC;
   86a88:	e17fed17 	ldw	r5,-76(fp)
   86a8c:	e0bfed17 	ldw	r2,-76(fp)
   86a90:	e0fff017 	ldw	r3,-64(fp)
   86a94:	10815c24 	muli	r2,r2,1392
   86a98:	10c5883a 	add	r2,r2,r3
   86a9c:	1080aa04 	addi	r2,r2,680
   86aa0:	10800017 	ldw	r2,0(r2)
   86aa4:	11000054 	ori	r4,r2,1
   86aa8:	e0fff017 	ldw	r3,-64(fp)
   86aac:	28815c24 	muli	r2,r5,1392
   86ab0:	10c5883a 	add	r2,r2,r3
   86ab4:	1080aa04 	addi	r2,r2,680
   86ab8:	11000015 	stw	r4,0(r2)
    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {

    	c = &edid_bin[0x36 + 18 * i];

        if ((c[0] != 0) || (c[1] != 0)) {
   86abc:	000a3406 	br	89390 <edid_decode_v14+0x439c>
            }

        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;
   86ac0:	e0bfed17 	ldw	r2,-76(fp)
   86ac4:	e0fff017 	ldw	r3,-64(fp)
   86ac8:	10815c24 	muli	r2,r2,1392
   86acc:	10c5883a 	add	r2,r2,r3
   86ad0:	10c09904 	addi	r3,r2,612
   86ad4:	00800044 	movi	r2,1
   86ad8:	18800015 	stw	r2,0(r3)

        	switch (c[3]) {  // tag
   86adc:	e0bfef17 	ldw	r2,-68(fp)
   86ae0:	108000c4 	addi	r2,r2,3
   86ae4:	10800003 	ldbu	r2,0(r2)
   86ae8:	10803fcc 	andi	r2,r2,255
   86aec:	e0bff815 	stw	r2,-32(fp)
   86af0:	e13ff817 	ldw	r4,-32(fp)
   86af4:	20803ea0 	cmpeqi	r2,r4,250
   86af8:	1004de1e 	bne	r2,zero,87e74 <edid_decode_v14+0x2e80>
   86afc:	e0fff817 	ldw	r3,-32(fp)
   86b00:	18803ec8 	cmpgei	r2,r3,251
   86b04:	1000111e 	bne	r2,zero,86b4c <edid_decode_v14+0x1b58>
   86b08:	e13ff817 	ldw	r4,-32(fp)
   86b0c:	20803de0 	cmpeqi	r2,r4,247
   86b10:	1007511e 	bne	r2,zero,88858 <edid_decode_v14+0x3864>
   86b14:	e0fff817 	ldw	r3,-32(fp)
   86b18:	18803e08 	cmpgei	r2,r3,248
   86b1c:	1000041e 	bne	r2,zero,86b30 <edid_decode_v14+0x1b3c>
   86b20:	e13ff817 	ldw	r4,-32(fp)
   86b24:	20800420 	cmpeqi	r2,r4,16
   86b28:	100a121e 	bne	r2,zero,89374 <edid_decode_v14+0x4380>
   86b2c:	000a1806 	br	89390 <edid_decode_v14+0x439c>
   86b30:	e0fff817 	ldw	r3,-32(fp)
   86b34:	18803e20 	cmpeqi	r2,r3,248
   86b38:	1005c21e 	bne	r2,zero,88244 <edid_decode_v14+0x3250>
   86b3c:	e13ff817 	ldw	r4,-32(fp)
   86b40:	20803e60 	cmpeqi	r2,r4,249
   86b44:	1005471e 	bne	r2,zero,88064 <edid_decode_v14+0x3070>
   86b48:	000a1106 	br	89390 <edid_decode_v14+0x439c>
   86b4c:	e0fff817 	ldw	r3,-32(fp)
   86b50:	18803f60 	cmpeqi	r2,r3,253
   86b54:	1000a91e 	bne	r2,zero,86dfc <edid_decode_v14+0x1e08>
   86b58:	e13ff817 	ldw	r4,-32(fp)
   86b5c:	20803f88 	cmpgei	r2,r4,254
   86b60:	1000071e 	bne	r2,zero,86b80 <edid_decode_v14+0x1b8c>
   86b64:	e0fff817 	ldw	r3,-32(fp)
   86b68:	18803ee0 	cmpeqi	r2,r3,251
   86b6c:	1004151e 	bne	r2,zero,87bc4 <edid_decode_v14+0x2bd0>
   86b70:	e13ff817 	ldw	r4,-32(fp)
   86b74:	20803f20 	cmpeqi	r2,r4,252
   86b78:	1003c61e 	bne	r2,zero,87a94 <edid_decode_v14+0x2aa0>
   86b7c:	000a0406 	br	89390 <edid_decode_v14+0x439c>
   86b80:	e0fff817 	ldw	r3,-32(fp)
   86b84:	18803fa0 	cmpeqi	r2,r3,254
   86b88:	1000501e 	bne	r2,zero,86ccc <edid_decode_v14+0x1cd8>
   86b8c:	e13ff817 	ldw	r4,-32(fp)
   86b90:	20803fe0 	cmpeqi	r2,r4,255
   86b94:	1000011e 	bne	r2,zero,86b9c <edid_decode_v14+0x1ba8>
   86b98:	0009fd06 	br	89390 <edid_decode_v14+0x439c>
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
   86b9c:	e0bfed17 	ldw	r2,-76(fp)
   86ba0:	e0fff017 	ldw	r3,-64(fp)
   86ba4:	10815c24 	muli	r2,r2,1392
   86ba8:	10c5883a 	add	r2,r2,r3
   86bac:	10c09a04 	addi	r3,r2,616
   86bb0:	00803fc4 	movi	r2,255
   86bb4:	18800015 	stw	r2,0(r3)
            	edid->descriptors[i].serial[18] = 0;
   86bb8:	e0bfed17 	ldw	r2,-76(fp)
   86bbc:	e0fff017 	ldw	r3,-64(fp)
   86bc0:	10815c24 	muli	r2,r2,1392
   86bc4:	10c5883a 	add	r2,r2,r3
   86bc8:	10809f84 	addi	r2,r2,638
   86bcc:	10000005 	stb	zero,0(r2)
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
   86bd0:	e0bfed17 	ldw	r2,-76(fp)
   86bd4:	10815c24 	muli	r2,r2,1392
   86bd8:	10c09b04 	addi	r3,r2,620
   86bdc:	e0bff017 	ldw	r2,-64(fp)
   86be0:	1889883a 	add	r4,r3,r2
   86be4:	e0bfef17 	ldw	r2,-68(fp)
   86be8:	10c00144 	addi	r3,r2,5
   86bec:	18800003 	ldbu	r2,0(r3)
   86bf0:	20800005 	stb	r2,0(r4)
   86bf4:	18800043 	ldbu	r2,1(r3)
   86bf8:	20800045 	stb	r2,1(r4)
   86bfc:	18800083 	ldbu	r2,2(r3)
   86c00:	20800085 	stb	r2,2(r4)
   86c04:	188000c3 	ldbu	r2,3(r3)
   86c08:	208000c5 	stb	r2,3(r4)
   86c0c:	18800103 	ldbu	r2,4(r3)
   86c10:	20800105 	stb	r2,4(r4)
   86c14:	18800143 	ldbu	r2,5(r3)
   86c18:	20800145 	stb	r2,5(r4)
   86c1c:	18800183 	ldbu	r2,6(r3)
   86c20:	20800185 	stb	r2,6(r4)
   86c24:	188001c3 	ldbu	r2,7(r3)
   86c28:	208001c5 	stb	r2,7(r4)
   86c2c:	18800203 	ldbu	r2,8(r3)
   86c30:	20800205 	stb	r2,8(r4)
   86c34:	18800243 	ldbu	r2,9(r3)
   86c38:	20800245 	stb	r2,9(r4)
   86c3c:	18800283 	ldbu	r2,10(r3)
   86c40:	20800285 	stb	r2,10(r4)
   86c44:	188002c3 	ldbu	r2,11(r3)
   86c48:	208002c5 	stb	r2,11(r4)
   86c4c:	18800303 	ldbu	r2,12(r3)
   86c50:	20800305 	stb	r2,12(r4)
                for (s = 0; s < 18-5; ++s) {
   86c54:	e03fec15 	stw	zero,-80(fp)
   86c58:	00001806 	br	86cbc <edid_decode_v14+0x1cc8>
                    if (edid->descriptors[i].serial[s] == 0x0a) {
   86c5c:	e0bfed17 	ldw	r2,-76(fp)
   86c60:	e13fec17 	ldw	r4,-80(fp)
   86c64:	e0fff017 	ldw	r3,-64(fp)
   86c68:	10815c24 	muli	r2,r2,1392
   86c6c:	10c5883a 	add	r2,r2,r3
   86c70:	1105883a 	add	r2,r2,r4
   86c74:	10809b04 	addi	r2,r2,620
   86c78:	10800003 	ldbu	r2,0(r2)
   86c7c:	10803fcc 	andi	r2,r2,255
   86c80:	1080201c 	xori	r2,r2,128
   86c84:	10bfe004 	addi	r2,r2,-128
   86c88:	10800298 	cmpnei	r2,r2,10
   86c8c:	1000081e 	bne	r2,zero,86cb0 <edid_decode_v14+0x1cbc>
                    	edid->descriptors[i].serial[s] = 0;
   86c90:	e0bfed17 	ldw	r2,-76(fp)
   86c94:	e13fec17 	ldw	r4,-80(fp)
   86c98:	e0fff017 	ldw	r3,-64(fp)
   86c9c:	10815c24 	muli	r2,r2,1392
   86ca0:	10c5883a 	add	r2,r2,r3
   86ca4:	1105883a 	add	r2,r2,r4
   86ca8:	10809b04 	addi	r2,r2,620
   86cac:	10000005 	stb	zero,0(r2)
        	switch (c[3]) {  // tag
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
            	edid->descriptors[i].serial[18] = 0;
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   86cb0:	e0bfec17 	ldw	r2,-80(fp)
   86cb4:	10800044 	addi	r2,r2,1
   86cb8:	e0bfec15 	stw	r2,-80(fp)
   86cbc:	e0bfec17 	ldw	r2,-80(fp)
   86cc0:	10800350 	cmplti	r2,r2,13
   86cc4:	103fe51e 	bne	r2,zero,86c5c <edid_decode_v14+0x1c68>
                    if (edid->descriptors[i].serial[s] == 0x0a) {
                    	edid->descriptors[i].serial[s] = 0;
                    }
                }
                break;
   86cc8:	0009b106 	br	89390 <edid_decode_v14+0x439c>

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
   86ccc:	e0bfed17 	ldw	r2,-76(fp)
   86cd0:	e0fff017 	ldw	r3,-64(fp)
   86cd4:	10815c24 	muli	r2,r2,1392
   86cd8:	10c5883a 	add	r2,r2,r3
   86cdc:	10c09a04 	addi	r3,r2,616
   86ce0:	00803f84 	movi	r2,254
   86ce4:	18800015 	stw	r2,0(r3)
            	edid->descriptors[i].string[18] = 0;
   86ce8:	e0bfed17 	ldw	r2,-76(fp)
   86cec:	e0fff017 	ldw	r3,-64(fp)
   86cf0:	10815c24 	muli	r2,r2,1392
   86cf4:	10c5883a 	add	r2,r2,r3
   86cf8:	10809f84 	addi	r2,r2,638
   86cfc:	10000005 	stb	zero,0(r2)
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
   86d00:	e0bfed17 	ldw	r2,-76(fp)
   86d04:	10815c24 	muli	r2,r2,1392
   86d08:	10c09b04 	addi	r3,r2,620
   86d0c:	e0bff017 	ldw	r2,-64(fp)
   86d10:	1889883a 	add	r4,r3,r2
   86d14:	e0bfef17 	ldw	r2,-68(fp)
   86d18:	10c00144 	addi	r3,r2,5
   86d1c:	18800003 	ldbu	r2,0(r3)
   86d20:	20800005 	stb	r2,0(r4)
   86d24:	18800043 	ldbu	r2,1(r3)
   86d28:	20800045 	stb	r2,1(r4)
   86d2c:	18800083 	ldbu	r2,2(r3)
   86d30:	20800085 	stb	r2,2(r4)
   86d34:	188000c3 	ldbu	r2,3(r3)
   86d38:	208000c5 	stb	r2,3(r4)
   86d3c:	18800103 	ldbu	r2,4(r3)
   86d40:	20800105 	stb	r2,4(r4)
   86d44:	18800143 	ldbu	r2,5(r3)
   86d48:	20800145 	stb	r2,5(r4)
   86d4c:	18800183 	ldbu	r2,6(r3)
   86d50:	20800185 	stb	r2,6(r4)
   86d54:	188001c3 	ldbu	r2,7(r3)
   86d58:	208001c5 	stb	r2,7(r4)
   86d5c:	18800203 	ldbu	r2,8(r3)
   86d60:	20800205 	stb	r2,8(r4)
   86d64:	18800243 	ldbu	r2,9(r3)
   86d68:	20800245 	stb	r2,9(r4)
   86d6c:	18800283 	ldbu	r2,10(r3)
   86d70:	20800285 	stb	r2,10(r4)
   86d74:	188002c3 	ldbu	r2,11(r3)
   86d78:	208002c5 	stb	r2,11(r4)
   86d7c:	18800303 	ldbu	r2,12(r3)
   86d80:	20800305 	stb	r2,12(r4)
                for (s = 0; s < 18-5; ++s) {
   86d84:	e03fec15 	stw	zero,-80(fp)
   86d88:	00001806 	br	86dec <edid_decode_v14+0x1df8>
                    if (edid->descriptors[i].string[s] == 0x0a) {
   86d8c:	e0bfed17 	ldw	r2,-76(fp)
   86d90:	e13fec17 	ldw	r4,-80(fp)
   86d94:	e0fff017 	ldw	r3,-64(fp)
   86d98:	10815c24 	muli	r2,r2,1392
   86d9c:	10c5883a 	add	r2,r2,r3
   86da0:	1105883a 	add	r2,r2,r4
   86da4:	10809b04 	addi	r2,r2,620
   86da8:	10800003 	ldbu	r2,0(r2)
   86dac:	10803fcc 	andi	r2,r2,255
   86db0:	1080201c 	xori	r2,r2,128
   86db4:	10bfe004 	addi	r2,r2,-128
   86db8:	10800298 	cmpnei	r2,r2,10
   86dbc:	1000081e 	bne	r2,zero,86de0 <edid_decode_v14+0x1dec>
                    	edid->descriptors[i].string[s] = 0;
   86dc0:	e0bfed17 	ldw	r2,-76(fp)
   86dc4:	e13fec17 	ldw	r4,-80(fp)
   86dc8:	e0fff017 	ldw	r3,-64(fp)
   86dcc:	10815c24 	muli	r2,r2,1392
   86dd0:	10c5883a 	add	r2,r2,r3
   86dd4:	1105883a 	add	r2,r2,r4
   86dd8:	10809b04 	addi	r2,r2,620
   86ddc:	10000005 	stb	zero,0(r2)

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
            	edid->descriptors[i].string[18] = 0;
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   86de0:	e0bfec17 	ldw	r2,-80(fp)
   86de4:	10800044 	addi	r2,r2,1
   86de8:	e0bfec15 	stw	r2,-80(fp)
   86dec:	e0bfec17 	ldw	r2,-80(fp)
   86df0:	10800350 	cmplti	r2,r2,13
   86df4:	103fe51e 	bne	r2,zero,86d8c <edid_decode_v14+0x1d98>
                    if (edid->descriptors[i].string[s] == 0x0a) {
                    	edid->descriptors[i].string[s] = 0;
                    }
                }
                break;
   86df8:	00096506 	br	89390 <edid_decode_v14+0x439c>

            case 0xfd:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;
   86dfc:	e0bfed17 	ldw	r2,-76(fp)
   86e00:	e0fff017 	ldw	r3,-64(fp)
   86e04:	10815c24 	muli	r2,r2,1392
   86e08:	10c5883a 	add	r2,r2,r3
   86e0c:	10c09a04 	addi	r3,r2,616
   86e10:	00803f44 	movi	r2,253
   86e14:	18800015 	stw	r2,0(r3)

            	edid->descriptors[i].range_limits.h_offset = HRO_ZERO;
   86e18:	e0bfed17 	ldw	r2,-76(fp)
   86e1c:	e0fff017 	ldw	r3,-64(fp)
   86e20:	10815c24 	muli	r2,r2,1392
   86e24:	10c5883a 	add	r2,r2,r3
   86e28:	10809c04 	addi	r2,r2,624
   86e2c:	10000015 	stw	zero,0(r2)

            	switch (c[4] & 0xfc) {
   86e30:	e0bfef17 	ldw	r2,-68(fp)
   86e34:	10800104 	addi	r2,r2,4
   86e38:	10800003 	ldbu	r2,0(r2)
   86e3c:	10803fcc 	andi	r2,r2,255
   86e40:	10803f0c 	andi	r2,r2,252
   86e44:	e0bff715 	stw	r2,-36(fp)
   86e48:	e0fff717 	ldw	r3,-36(fp)
   86e4c:	18800220 	cmpeqi	r2,r3,8
   86e50:	1000041e 	bne	r2,zero,86e64 <edid_decode_v14+0x1e70>
   86e54:	e13ff717 	ldw	r4,-36(fp)
   86e58:	20800320 	cmpeqi	r2,r4,12
   86e5c:	1000091e 	bne	r2,zero,86e84 <edid_decode_v14+0x1e90>
   86e60:	00000f06 	br	86ea0 <edid_decode_v14+0x1eac>
                case 0x08:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_ZERO;
   86e64:	e0bfed17 	ldw	r2,-76(fp)
   86e68:	e0fff017 	ldw	r3,-64(fp)
   86e6c:	10815c24 	muli	r2,r2,1392
   86e70:	10c5883a 	add	r2,r2,r3
   86e74:	10c09c04 	addi	r3,r2,624
   86e78:	00800044 	movi	r2,1
   86e7c:	18800015 	stw	r2,0(r3)
                    break;
   86e80:	00000706 	br	86ea0 <edid_decode_v14+0x1eac>
                case 0x0c:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_255;
   86e84:	e0bfed17 	ldw	r2,-76(fp)
   86e88:	e0fff017 	ldw	r3,-64(fp)
   86e8c:	10815c24 	muli	r2,r2,1392
   86e90:	10c5883a 	add	r2,r2,r3
   86e94:	10c09c04 	addi	r3,r2,624
   86e98:	00800084 	movi	r2,2
   86e9c:	18800015 	stw	r2,0(r3)
                    break;
                }

            	edid->descriptors[i].range_limits.v_offset = VRO_ZERO;
   86ea0:	e0bfed17 	ldw	r2,-76(fp)
   86ea4:	e0fff017 	ldw	r3,-64(fp)
   86ea8:	10815c24 	muli	r2,r2,1392
   86eac:	10c5883a 	add	r2,r2,r3
   86eb0:	10809b04 	addi	r2,r2,620
   86eb4:	10000015 	stw	zero,0(r2)

                switch (c[4] & 0xf3) {
   86eb8:	e0bfef17 	ldw	r2,-68(fp)
   86ebc:	10800104 	addi	r2,r2,4
   86ec0:	10800003 	ldbu	r2,0(r2)
   86ec4:	10803fcc 	andi	r2,r2,255
   86ec8:	10803ccc 	andi	r2,r2,243
   86ecc:	e0bff615 	stw	r2,-40(fp)
   86ed0:	e0fff617 	ldw	r3,-40(fp)
   86ed4:	188000a0 	cmpeqi	r2,r3,2
   86ed8:	1000041e 	bne	r2,zero,86eec <edid_decode_v14+0x1ef8>
   86edc:	e13ff617 	ldw	r4,-40(fp)
   86ee0:	208000e0 	cmpeqi	r2,r4,3
   86ee4:	1000091e 	bne	r2,zero,86f0c <edid_decode_v14+0x1f18>
   86ee8:	00000f06 	br	86f28 <edid_decode_v14+0x1f34>
                case 0x02:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_ZERO;
   86eec:	e0bfed17 	ldw	r2,-76(fp)
   86ef0:	e0fff017 	ldw	r3,-64(fp)
   86ef4:	10815c24 	muli	r2,r2,1392
   86ef8:	10c5883a 	add	r2,r2,r3
   86efc:	10c09b04 	addi	r3,r2,620
   86f00:	00800044 	movi	r2,1
   86f04:	18800015 	stw	r2,0(r3)
                    break;
   86f08:	00000706 	br	86f28 <edid_decode_v14+0x1f34>
                case 0x03:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_255;
   86f0c:	e0bfed17 	ldw	r2,-76(fp)
   86f10:	e0fff017 	ldw	r3,-64(fp)
   86f14:	10815c24 	muli	r2,r2,1392
   86f18:	10c5883a 	add	r2,r2,r3
   86f1c:	10c09b04 	addi	r3,r2,620
   86f20:	00800084 	movi	r2,2
   86f24:	18800015 	stw	r2,0(r3)
                    break;
                }

                if (c[5] != 0) {
   86f28:	e0bfef17 	ldw	r2,-68(fp)
   86f2c:	10800144 	addi	r2,r2,5
   86f30:	10800003 	ldbu	r2,0(r2)
   86f34:	10803fcc 	andi	r2,r2,255
   86f38:	1005003a 	cmpeq	r2,r2,zero
   86f3c:	10001e1e 	bne	r2,zero,86fb8 <edid_decode_v14+0x1fc4>
					if ((c[4] & 0x03) == 0x03)
   86f40:	e0bfef17 	ldw	r2,-68(fp)
   86f44:	10800104 	addi	r2,r2,4
   86f48:	10800003 	ldbu	r2,0(r2)
   86f4c:	10803fcc 	andi	r2,r2,255
   86f50:	108000cc 	andi	r2,r2,3
   86f54:	108000d8 	cmpnei	r2,r2,3
   86f58:	10000c1e 	bne	r2,zero,86f8c <edid_decode_v14+0x1f98>
						edid->descriptors[i].range_limits.v_min = c[5] + 255;
   86f5c:	e17fed17 	ldw	r5,-76(fp)
   86f60:	e0bfef17 	ldw	r2,-68(fp)
   86f64:	10800144 	addi	r2,r2,5
   86f68:	10800003 	ldbu	r2,0(r2)
   86f6c:	10803fcc 	andi	r2,r2,255
   86f70:	11003fc4 	addi	r4,r2,255
   86f74:	e0fff017 	ldw	r3,-64(fp)
   86f78:	28815c24 	muli	r2,r5,1392
   86f7c:	10c5883a 	add	r2,r2,r3
   86f80:	10809d04 	addi	r2,r2,628
   86f84:	11000015 	stw	r4,0(r2)
   86f88:	00001106 	br	86fd0 <edid_decode_v14+0x1fdc>
					else
						edid->descriptors[i].range_limits.v_min = c[5];
   86f8c:	e17fed17 	ldw	r5,-76(fp)
   86f90:	e0bfef17 	ldw	r2,-68(fp)
   86f94:	10800144 	addi	r2,r2,5
   86f98:	10800003 	ldbu	r2,0(r2)
   86f9c:	11003fcc 	andi	r4,r2,255
   86fa0:	e0fff017 	ldw	r3,-64(fp)
   86fa4:	28815c24 	muli	r2,r5,1392
   86fa8:	10c5883a 	add	r2,r2,r3
   86fac:	10809d04 	addi	r2,r2,628
   86fb0:	11000015 	stw	r4,0(r2)
   86fb4:	00000606 	br	86fd0 <edid_decode_v14+0x1fdc>
                } else {
                	edid->descriptors[i].range_limits.v_min = 0;
   86fb8:	e0bfed17 	ldw	r2,-76(fp)
   86fbc:	e0fff017 	ldw	r3,-64(fp)
   86fc0:	10815c24 	muli	r2,r2,1392
   86fc4:	10c5883a 	add	r2,r2,r3
   86fc8:	10809d04 	addi	r2,r2,628
   86fcc:	10000015 	stw	zero,0(r2)
                }

                if (c[6] != 0) {
   86fd0:	e0bfef17 	ldw	r2,-68(fp)
   86fd4:	10800184 	addi	r2,r2,6
   86fd8:	10800003 	ldbu	r2,0(r2)
   86fdc:	10803fcc 	andi	r2,r2,255
   86fe0:	1005003a 	cmpeq	r2,r2,zero
   86fe4:	10001e1e 	bne	r2,zero,87060 <edid_decode_v14+0x206c>
					if ((c[4] & 0x02) == 0x02)
   86fe8:	e0bfef17 	ldw	r2,-68(fp)
   86fec:	10800104 	addi	r2,r2,4
   86ff0:	10800003 	ldbu	r2,0(r2)
   86ff4:	10803fcc 	andi	r2,r2,255
   86ff8:	1080008c 	andi	r2,r2,2
   86ffc:	1005003a 	cmpeq	r2,r2,zero
   87000:	10000c1e 	bne	r2,zero,87034 <edid_decode_v14+0x2040>
						edid->descriptors[i].range_limits.v_max = c[6] + 255;
   87004:	e17fed17 	ldw	r5,-76(fp)
   87008:	e0bfef17 	ldw	r2,-68(fp)
   8700c:	10800184 	addi	r2,r2,6
   87010:	10800003 	ldbu	r2,0(r2)
   87014:	10803fcc 	andi	r2,r2,255
   87018:	11003fc4 	addi	r4,r2,255
   8701c:	e0fff017 	ldw	r3,-64(fp)
   87020:	28815c24 	muli	r2,r5,1392
   87024:	10c5883a 	add	r2,r2,r3
   87028:	10809e04 	addi	r2,r2,632
   8702c:	11000015 	stw	r4,0(r2)
   87030:	00001106 	br	87078 <edid_decode_v14+0x2084>
					else
						edid->descriptors[i].range_limits.v_max = c[6];
   87034:	e17fed17 	ldw	r5,-76(fp)
   87038:	e0bfef17 	ldw	r2,-68(fp)
   8703c:	10800184 	addi	r2,r2,6
   87040:	10800003 	ldbu	r2,0(r2)
   87044:	11003fcc 	andi	r4,r2,255
   87048:	e0fff017 	ldw	r3,-64(fp)
   8704c:	28815c24 	muli	r2,r5,1392
   87050:	10c5883a 	add	r2,r2,r3
   87054:	10809e04 	addi	r2,r2,632
   87058:	11000015 	stw	r4,0(r2)
   8705c:	00000606 	br	87078 <edid_decode_v14+0x2084>
                } else {
                	edid->descriptors[i].range_limits.v_max = 0;
   87060:	e0bfed17 	ldw	r2,-76(fp)
   87064:	e0fff017 	ldw	r3,-64(fp)
   87068:	10815c24 	muli	r2,r2,1392
   8706c:	10c5883a 	add	r2,r2,r3
   87070:	10809e04 	addi	r2,r2,632
   87074:	10000015 	stw	zero,0(r2)
                }

                if (c[7] != 0) {
   87078:	e0bfef17 	ldw	r2,-68(fp)
   8707c:	108001c4 	addi	r2,r2,7
   87080:	10800003 	ldbu	r2,0(r2)
   87084:	10803fcc 	andi	r2,r2,255
   87088:	1005003a 	cmpeq	r2,r2,zero
   8708c:	10001e1e 	bne	r2,zero,87108 <edid_decode_v14+0x2114>
					if ((c[4] & 0x0c) == 0x0c)
   87090:	e0bfef17 	ldw	r2,-68(fp)
   87094:	10800104 	addi	r2,r2,4
   87098:	10800003 	ldbu	r2,0(r2)
   8709c:	10803fcc 	andi	r2,r2,255
   870a0:	1080030c 	andi	r2,r2,12
   870a4:	10800318 	cmpnei	r2,r2,12
   870a8:	10000c1e 	bne	r2,zero,870dc <edid_decode_v14+0x20e8>
						edid->descriptors[i].range_limits.h_min = c[7] + 255;
   870ac:	e17fed17 	ldw	r5,-76(fp)
   870b0:	e0bfef17 	ldw	r2,-68(fp)
   870b4:	108001c4 	addi	r2,r2,7
   870b8:	10800003 	ldbu	r2,0(r2)
   870bc:	10803fcc 	andi	r2,r2,255
   870c0:	11003fc4 	addi	r4,r2,255
   870c4:	e0fff017 	ldw	r3,-64(fp)
   870c8:	28815c24 	muli	r2,r5,1392
   870cc:	10c5883a 	add	r2,r2,r3
   870d0:	10809f04 	addi	r2,r2,636
   870d4:	11000015 	stw	r4,0(r2)
   870d8:	00001106 	br	87120 <edid_decode_v14+0x212c>
					else
						edid->descriptors[i].range_limits.h_min = c[7];
   870dc:	e17fed17 	ldw	r5,-76(fp)
   870e0:	e0bfef17 	ldw	r2,-68(fp)
   870e4:	108001c4 	addi	r2,r2,7
   870e8:	10800003 	ldbu	r2,0(r2)
   870ec:	11003fcc 	andi	r4,r2,255
   870f0:	e0fff017 	ldw	r3,-64(fp)
   870f4:	28815c24 	muli	r2,r5,1392
   870f8:	10c5883a 	add	r2,r2,r3
   870fc:	10809f04 	addi	r2,r2,636
   87100:	11000015 	stw	r4,0(r2)
   87104:	00000606 	br	87120 <edid_decode_v14+0x212c>
                } else {
                	edid->descriptors[i].range_limits.h_min = 0;
   87108:	e0bfed17 	ldw	r2,-76(fp)
   8710c:	e0fff017 	ldw	r3,-64(fp)
   87110:	10815c24 	muli	r2,r2,1392
   87114:	10c5883a 	add	r2,r2,r3
   87118:	10809f04 	addi	r2,r2,636
   8711c:	10000015 	stw	zero,0(r2)
                }

                if (c[8] != 0) {
   87120:	e0bfef17 	ldw	r2,-68(fp)
   87124:	10800204 	addi	r2,r2,8
   87128:	10800003 	ldbu	r2,0(r2)
   8712c:	10803fcc 	andi	r2,r2,255
   87130:	1005003a 	cmpeq	r2,r2,zero
   87134:	10001e1e 	bne	r2,zero,871b0 <edid_decode_v14+0x21bc>
					if ((c[4] & 0x08) == 0x08)
   87138:	e0bfef17 	ldw	r2,-68(fp)
   8713c:	10800104 	addi	r2,r2,4
   87140:	10800003 	ldbu	r2,0(r2)
   87144:	10803fcc 	andi	r2,r2,255
   87148:	1080020c 	andi	r2,r2,8
   8714c:	1005003a 	cmpeq	r2,r2,zero
   87150:	10000c1e 	bne	r2,zero,87184 <edid_decode_v14+0x2190>
						edid->descriptors[i].range_limits.h_max = c[8] + 255;
   87154:	e17fed17 	ldw	r5,-76(fp)
   87158:	e0bfef17 	ldw	r2,-68(fp)
   8715c:	10800204 	addi	r2,r2,8
   87160:	10800003 	ldbu	r2,0(r2)
   87164:	10803fcc 	andi	r2,r2,255
   87168:	11003fc4 	addi	r4,r2,255
   8716c:	e0fff017 	ldw	r3,-64(fp)
   87170:	28815c24 	muli	r2,r5,1392
   87174:	10c5883a 	add	r2,r2,r3
   87178:	1080a004 	addi	r2,r2,640
   8717c:	11000015 	stw	r4,0(r2)
   87180:	00001106 	br	871c8 <edid_decode_v14+0x21d4>
					else
						edid->descriptors[i].range_limits.h_max = c[8];
   87184:	e17fed17 	ldw	r5,-76(fp)
   87188:	e0bfef17 	ldw	r2,-68(fp)
   8718c:	10800204 	addi	r2,r2,8
   87190:	10800003 	ldbu	r2,0(r2)
   87194:	11003fcc 	andi	r4,r2,255
   87198:	e0fff017 	ldw	r3,-64(fp)
   8719c:	28815c24 	muli	r2,r5,1392
   871a0:	10c5883a 	add	r2,r2,r3
   871a4:	1080a004 	addi	r2,r2,640
   871a8:	11000015 	stw	r4,0(r2)
   871ac:	00000606 	br	871c8 <edid_decode_v14+0x21d4>
                } else {
                	edid->descriptors[i].range_limits.h_max = 0;
   871b0:	e0bfed17 	ldw	r2,-76(fp)
   871b4:	e0fff017 	ldw	r3,-64(fp)
   871b8:	10815c24 	muli	r2,r2,1392
   871bc:	10c5883a 	add	r2,r2,r3
   871c0:	1080a004 	addi	r2,r2,640
   871c4:	10000015 	stw	zero,0(r2)
                }

                edid->descriptors[i].range_limits.p_max = c[9] * 10;
   871c8:	e17fed17 	ldw	r5,-76(fp)
   871cc:	e0bfef17 	ldw	r2,-68(fp)
   871d0:	10800244 	addi	r2,r2,9
   871d4:	10800003 	ldbu	r2,0(r2)
   871d8:	10803fcc 	andi	r2,r2,255
   871dc:	110002a4 	muli	r4,r2,10
   871e0:	e0fff017 	ldw	r3,-64(fp)
   871e4:	28815c24 	muli	r2,r5,1392
   871e8:	10c5883a 	add	r2,r2,r3
   871ec:	1080a104 	addi	r2,r2,644
   871f0:	11000015 	stw	r4,0(r2)

                // additional timing support flags
            	edid->descriptors[i].range_limits.timing_flags = 0;
   871f4:	e0bfed17 	ldw	r2,-76(fp)
   871f8:	e0fff017 	ldw	r3,-64(fp)
   871fc:	10815c24 	muli	r2,r2,1392
   87200:	10c5883a 	add	r2,r2,r3
   87204:	1080a204 	addi	r2,r2,648
   87208:	10000015 	stw	zero,0(r2)

            	if ((c[10] == 0) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   8720c:	e0bfef17 	ldw	r2,-68(fp)
   87210:	10800284 	addi	r2,r2,10
   87214:	10800003 	ldbu	r2,0(r2)
   87218:	10803fcc 	andi	r2,r2,255
   8721c:	1004c03a 	cmpne	r2,r2,zero
   87220:	1000121e 	bne	r2,zero,8726c <edid_decode_v14+0x2278>
   87224:	e0bff017 	ldw	r2,-64(fp)
   87228:	10801217 	ldw	r2,72(r2)
   8722c:	1082000c 	andi	r2,r2,2048
   87230:	1005003a 	cmpeq	r2,r2,zero
   87234:	10000d1e 	bne	r2,zero,8726c <edid_decode_v14+0x2278>

            		edid->descriptors[i].range_limits.timing_flags |= TF_DEFAULT_GTF;
   87238:	e17fed17 	ldw	r5,-76(fp)
   8723c:	e0bfed17 	ldw	r2,-76(fp)
   87240:	e0fff017 	ldw	r3,-64(fp)
   87244:	10815c24 	muli	r2,r2,1392
   87248:	10c5883a 	add	r2,r2,r3
   8724c:	1080a204 	addi	r2,r2,648
   87250:	11000017 	ldw	r4,0(r2)
   87254:	e0fff017 	ldw	r3,-64(fp)
   87258:	28815c24 	muli	r2,r5,1392
   8725c:	10c5883a 	add	r2,r2,r3
   87260:	1080a204 	addi	r2,r2,648
   87264:	11000015 	stw	r4,0(r2)
                edid->descriptors[i].range_limits.p_max = c[9] * 10;

                // additional timing support flags
            	edid->descriptors[i].range_limits.timing_flags = 0;

            	if ((c[10] == 0) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   87268:	00084906 	br	89390 <edid_decode_v14+0x439c>

            		edid->descriptors[i].range_limits.timing_flags |= TF_DEFAULT_GTF;

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   8726c:	e0bfef17 	ldw	r2,-68(fp)
   87270:	10800284 	addi	r2,r2,10
   87274:	10800003 	ldbu	r2,0(r2)
   87278:	10803fcc 	andi	r2,r2,255
   8727c:	10800118 	cmpnei	r2,r2,4
   87280:	10019d1e 	bne	r2,zero,878f8 <edid_decode_v14+0x2904>
   87284:	e0bff017 	ldw	r2,-64(fp)
   87288:	10801217 	ldw	r2,72(r2)
   8728c:	1082000c 	andi	r2,r2,2048
   87290:	1005003a 	cmpeq	r2,r2,zero
   87294:	1001981e 	bne	r2,zero,878f8 <edid_decode_v14+0x2904>

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;
   87298:	e17fed17 	ldw	r5,-76(fp)
   8729c:	e0bfed17 	ldw	r2,-76(fp)
   872a0:	e0fff017 	ldw	r3,-64(fp)
   872a4:	10815c24 	muli	r2,r2,1392
   872a8:	10c5883a 	add	r2,r2,r3
   872ac:	1080a204 	addi	r2,r2,648
   872b0:	10800017 	ldw	r2,0(r2)
   872b4:	11000114 	ori	r4,r2,4
   872b8:	e0fff017 	ldw	r3,-64(fp)
   872bc:	28815c24 	muli	r2,r5,1392
   872c0:	10c5883a 	add	r2,r2,r3
   872c4:	1080a204 	addi	r2,r2,648
   872c8:	11000015 	stw	r4,0(r2)

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
   872cc:	e17fed17 	ldw	r5,-76(fp)
   872d0:	e0bfef17 	ldw	r2,-68(fp)
   872d4:	108002c4 	addi	r2,r2,11
   872d8:	10800003 	ldbu	r2,0(r2)
   872dc:	10803fcc 	andi	r2,r2,255
   872e0:	1004d13a 	srli	r2,r2,4
   872e4:	11003fcc 	andi	r4,r2,255
   872e8:	e0fff017 	ldw	r3,-64(fp)
   872ec:	28815c24 	muli	r2,r5,1392
   872f0:	10c5883a 	add	r2,r2,r3
   872f4:	1080a304 	addi	r2,r2,652
   872f8:	11000015 	stw	r4,0(r2)
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;
   872fc:	e17fed17 	ldw	r5,-76(fp)
   87300:	e0bfef17 	ldw	r2,-68(fp)
   87304:	108002c4 	addi	r2,r2,11
   87308:	10800003 	ldbu	r2,0(r2)
   8730c:	10803fcc 	andi	r2,r2,255
   87310:	110003cc 	andi	r4,r2,15
   87314:	e0fff017 	ldw	r3,-64(fp)
   87318:	28815c24 	muli	r2,r5,1392
   8731c:	10c5883a 	add	r2,r2,r3
   87320:	1080a404 	addi	r2,r2,656
   87324:	11000015 	stw	r4,0(r2)

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
   87328:	e43fed17 	ldw	r16,-76(fp)
   8732c:	e0bfef17 	ldw	r2,-68(fp)
   87330:	10800304 	addi	r2,r2,12
   87334:	10800003 	ldbu	r2,0(r2)
   87338:	10803fcc 	andi	r2,r2,255
   8733c:	1004d0ba 	srli	r2,r2,2
   87340:	11003fcc 	andi	r4,r2,255
   87344:	008d6200 	call	8d620 <__floatunsisf>
   87348:	1009883a 	mov	r4,r2
   8734c:	014fa034 	movhi	r5,16000
   87350:	008d2780 	call	8d278 <__mulsf3>
   87354:	1009883a 	mov	r4,r2
   87358:	e0fff017 	ldw	r3,-64(fp)
   8735c:	80815c24 	muli	r2,r16,1392
   87360:	10c5883a 	add	r2,r2,r3
   87364:	1080a504 	addi	r2,r2,660
   87368:	11000015 	stw	r4,0(r2)
                    if (c[13] != 0)
   8736c:	e0bfef17 	ldw	r2,-68(fp)
   87370:	10800344 	addi	r2,r2,13
   87374:	10800003 	ldbu	r2,0(r2)
   87378:	10803fcc 	andi	r2,r2,255
   8737c:	1005003a 	cmpeq	r2,r2,zero
   87380:	1000141e 	bne	r2,zero,873d4 <edid_decode_v14+0x23e0>
                    	edid->descriptors[i].range_limits.cvt.line_max = ((((u32)c[12] & 0x03) << 8) | (u32)c[13]) * 8;
   87384:	e17fed17 	ldw	r5,-76(fp)
   87388:	e0bfef17 	ldw	r2,-68(fp)
   8738c:	10800304 	addi	r2,r2,12
   87390:	10800003 	ldbu	r2,0(r2)
   87394:	10803fcc 	andi	r2,r2,255
   87398:	108000cc 	andi	r2,r2,3
   8739c:	1006923a 	slli	r3,r2,8
   873a0:	e0bfef17 	ldw	r2,-68(fp)
   873a4:	10800344 	addi	r2,r2,13
   873a8:	10800003 	ldbu	r2,0(r2)
   873ac:	10803fcc 	andi	r2,r2,255
   873b0:	1884b03a 	or	r2,r3,r2
   873b4:	100490fa 	slli	r2,r2,3
   873b8:	1009883a 	mov	r4,r2
   873bc:	e0fff017 	ldw	r3,-64(fp)
   873c0:	28815c24 	muli	r2,r5,1392
   873c4:	10c5883a 	add	r2,r2,r3
   873c8:	1080a604 	addi	r2,r2,664
   873cc:	11000015 	stw	r4,0(r2)
   873d0:	00000606 	br	873ec <edid_decode_v14+0x23f8>
                    else
                    	edid->descriptors[i].range_limits.cvt.line_max = 0;
   873d4:	e0bfed17 	ldw	r2,-76(fp)
   873d8:	e0fff017 	ldw	r3,-64(fp)
   873dc:	10815c24 	muli	r2,r2,1392
   873e0:	10c5883a 	add	r2,r2,r3
   873e4:	1080a604 	addi	r2,r2,664
   873e8:	10000015 	stw	zero,0(r2)

                    edid->descriptors[i].range_limits.cvt.aspect_ratios = 0;
   873ec:	e0bfed17 	ldw	r2,-76(fp)
   873f0:	e0fff017 	ldw	r3,-64(fp)
   873f4:	10815c24 	muli	r2,r2,1392
   873f8:	10c5883a 	add	r2,r2,r3
   873fc:	1080a704 	addi	r2,r2,668
   87400:	10000015 	stw	zero,0(r2)
                    if (c[14] & 0x80)
   87404:	e0bfef17 	ldw	r2,-68(fp)
   87408:	10800384 	addi	r2,r2,14
   8740c:	10800003 	ldbu	r2,0(r2)
   87410:	10803fcc 	andi	r2,r2,255
   87414:	1080201c 	xori	r2,r2,128
   87418:	10bfe004 	addi	r2,r2,-128
   8741c:	1004403a 	cmpge	r2,r2,zero
   87420:	10000d1e 	bne	r2,zero,87458 <edid_decode_v14+0x2464>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_4_3;
   87424:	e17fed17 	ldw	r5,-76(fp)
   87428:	e0bfed17 	ldw	r2,-76(fp)
   8742c:	e0fff017 	ldw	r3,-64(fp)
   87430:	10815c24 	muli	r2,r2,1392
   87434:	10c5883a 	add	r2,r2,r3
   87438:	1080a704 	addi	r2,r2,668
   8743c:	10800017 	ldw	r2,0(r2)
   87440:	11000054 	ori	r4,r2,1
   87444:	e0fff017 	ldw	r3,-64(fp)
   87448:	28815c24 	muli	r2,r5,1392
   8744c:	10c5883a 	add	r2,r2,r3
   87450:	1080a704 	addi	r2,r2,668
   87454:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x40)
   87458:	e0bfef17 	ldw	r2,-68(fp)
   8745c:	10800384 	addi	r2,r2,14
   87460:	10800003 	ldbu	r2,0(r2)
   87464:	10803fcc 	andi	r2,r2,255
   87468:	1080100c 	andi	r2,r2,64
   8746c:	1005003a 	cmpeq	r2,r2,zero
   87470:	10000d1e 	bne	r2,zero,874a8 <edid_decode_v14+0x24b4>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_9;
   87474:	e17fed17 	ldw	r5,-76(fp)
   87478:	e0bfed17 	ldw	r2,-76(fp)
   8747c:	e0fff017 	ldw	r3,-64(fp)
   87480:	10815c24 	muli	r2,r2,1392
   87484:	10c5883a 	add	r2,r2,r3
   87488:	1080a704 	addi	r2,r2,668
   8748c:	10800017 	ldw	r2,0(r2)
   87490:	11000094 	ori	r4,r2,2
   87494:	e0fff017 	ldw	r3,-64(fp)
   87498:	28815c24 	muli	r2,r5,1392
   8749c:	10c5883a 	add	r2,r2,r3
   874a0:	1080a704 	addi	r2,r2,668
   874a4:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x20)
   874a8:	e0bfef17 	ldw	r2,-68(fp)
   874ac:	10800384 	addi	r2,r2,14
   874b0:	10800003 	ldbu	r2,0(r2)
   874b4:	10803fcc 	andi	r2,r2,255
   874b8:	1080080c 	andi	r2,r2,32
   874bc:	1005003a 	cmpeq	r2,r2,zero
   874c0:	10000d1e 	bne	r2,zero,874f8 <edid_decode_v14+0x2504>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_10;
   874c4:	e17fed17 	ldw	r5,-76(fp)
   874c8:	e0bfed17 	ldw	r2,-76(fp)
   874cc:	e0fff017 	ldw	r3,-64(fp)
   874d0:	10815c24 	muli	r2,r2,1392
   874d4:	10c5883a 	add	r2,r2,r3
   874d8:	1080a704 	addi	r2,r2,668
   874dc:	10800017 	ldw	r2,0(r2)
   874e0:	11000114 	ori	r4,r2,4
   874e4:	e0fff017 	ldw	r3,-64(fp)
   874e8:	28815c24 	muli	r2,r5,1392
   874ec:	10c5883a 	add	r2,r2,r3
   874f0:	1080a704 	addi	r2,r2,668
   874f4:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x10)
   874f8:	e0bfef17 	ldw	r2,-68(fp)
   874fc:	10800384 	addi	r2,r2,14
   87500:	10800003 	ldbu	r2,0(r2)
   87504:	10803fcc 	andi	r2,r2,255
   87508:	1080040c 	andi	r2,r2,16
   8750c:	1005003a 	cmpeq	r2,r2,zero
   87510:	10000d1e 	bne	r2,zero,87548 <edid_decode_v14+0x2554>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_5_4;
   87514:	e17fed17 	ldw	r5,-76(fp)
   87518:	e0bfed17 	ldw	r2,-76(fp)
   8751c:	e0fff017 	ldw	r3,-64(fp)
   87520:	10815c24 	muli	r2,r2,1392
   87524:	10c5883a 	add	r2,r2,r3
   87528:	1080a704 	addi	r2,r2,668
   8752c:	10800017 	ldw	r2,0(r2)
   87530:	11000214 	ori	r4,r2,8
   87534:	e0fff017 	ldw	r3,-64(fp)
   87538:	28815c24 	muli	r2,r5,1392
   8753c:	10c5883a 	add	r2,r2,r3
   87540:	1080a704 	addi	r2,r2,668
   87544:	11000015 	stw	r4,0(r2)
                    if (c[14] & 0x08)
   87548:	e0bfef17 	ldw	r2,-68(fp)
   8754c:	10800384 	addi	r2,r2,14
   87550:	10800003 	ldbu	r2,0(r2)
   87554:	10803fcc 	andi	r2,r2,255
   87558:	1080020c 	andi	r2,r2,8
   8755c:	1005003a 	cmpeq	r2,r2,zero
   87560:	10000d1e 	bne	r2,zero,87598 <edid_decode_v14+0x25a4>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;
   87564:	e17fed17 	ldw	r5,-76(fp)
   87568:	e0bfed17 	ldw	r2,-76(fp)
   8756c:	e0fff017 	ldw	r3,-64(fp)
   87570:	10815c24 	muli	r2,r2,1392
   87574:	10c5883a 	add	r2,r2,r3
   87578:	1080a704 	addi	r2,r2,668
   8757c:	10800017 	ldw	r2,0(r2)
   87580:	11000414 	ori	r4,r2,16
   87584:	e0fff017 	ldw	r3,-64(fp)
   87588:	28815c24 	muli	r2,r5,1392
   8758c:	10c5883a 	add	r2,r2,r3
   87590:	1080a704 	addi	r2,r2,668
   87594:	11000015 	stw	r4,0(r2)

                    switch (c[15] & 0xe0) {
   87598:	e0bfef17 	ldw	r2,-68(fp)
   8759c:	108003c4 	addi	r2,r2,15
   875a0:	10800003 	ldbu	r2,0(r2)
   875a4:	10803fcc 	andi	r2,r2,255
   875a8:	1080380c 	andi	r2,r2,224
   875ac:	e0bff515 	stw	r2,-44(fp)
   875b0:	e0fff517 	ldw	r3,-44(fp)
   875b4:	18801020 	cmpeqi	r2,r3,64
   875b8:	1000211e 	bne	r2,zero,87640 <edid_decode_v14+0x264c>
   875bc:	e13ff517 	ldw	r4,-44(fp)
   875c0:	20801048 	cmpgei	r2,r4,65
   875c4:	1000071e 	bne	r2,zero,875e4 <edid_decode_v14+0x25f0>
   875c8:	e0fff517 	ldw	r3,-44(fp)
   875cc:	1805003a 	cmpeq	r2,r3,zero
   875d0:	10000b1e 	bne	r2,zero,87600 <edid_decode_v14+0x260c>
   875d4:	e13ff517 	ldw	r4,-44(fp)
   875d8:	20800820 	cmpeqi	r2,r4,32
   875dc:	1000101e 	bne	r2,zero,87620 <edid_decode_v14+0x262c>
   875e0:	00002f06 	br	876a0 <edid_decode_v14+0x26ac>
   875e4:	e0fff517 	ldw	r3,-44(fp)
   875e8:	18801820 	cmpeqi	r2,r3,96
   875ec:	10001c1e 	bne	r2,zero,87660 <edid_decode_v14+0x266c>
   875f0:	e13ff517 	ldw	r4,-44(fp)
   875f4:	20802020 	cmpeqi	r2,r4,128
   875f8:	1000211e 	bne	r2,zero,87680 <edid_decode_v14+0x268c>
   875fc:	00002806 	br	876a0 <edid_decode_v14+0x26ac>
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
   87600:	e0bfed17 	ldw	r2,-76(fp)
   87604:	e0fff017 	ldw	r3,-64(fp)
   87608:	10815c24 	muli	r2,r2,1392
   8760c:	10c5883a 	add	r2,r2,r3
   87610:	10c0a804 	addi	r3,r2,672
   87614:	00800044 	movi	r2,1
   87618:	18800015 	stw	r2,0(r3)
                        break;
   8761c:	00002606 	br	876b8 <edid_decode_v14+0x26c4>
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
   87620:	e0bfed17 	ldw	r2,-76(fp)
   87624:	e0fff017 	ldw	r3,-64(fp)
   87628:	10815c24 	muli	r2,r2,1392
   8762c:	10c5883a 	add	r2,r2,r3
   87630:	10c0a804 	addi	r3,r2,672
   87634:	00800084 	movi	r2,2
   87638:	18800015 	stw	r2,0(r3)
                        break;
   8763c:	00001e06 	br	876b8 <edid_decode_v14+0x26c4>
                    case 0x40:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_10;
   87640:	e0bfed17 	ldw	r2,-76(fp)
   87644:	e0fff017 	ldw	r3,-64(fp)
   87648:	10815c24 	muli	r2,r2,1392
   8764c:	10c5883a 	add	r2,r2,r3
   87650:	10c0a804 	addi	r3,r2,672
   87654:	00800104 	movi	r2,4
   87658:	18800015 	stw	r2,0(r3)
                        break;
   8765c:	00001606 	br	876b8 <edid_decode_v14+0x26c4>
                    case 0x60:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_5_4;
   87660:	e0bfed17 	ldw	r2,-76(fp)
   87664:	e0fff017 	ldw	r3,-64(fp)
   87668:	10815c24 	muli	r2,r2,1392
   8766c:	10c5883a 	add	r2,r2,r3
   87670:	10c0a804 	addi	r3,r2,672
   87674:	00800204 	movi	r2,8
   87678:	18800015 	stw	r2,0(r3)
                        break;
   8767c:	00000e06 	br	876b8 <edid_decode_v14+0x26c4>
                    case 0x80:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_15_9;
   87680:	e0bfed17 	ldw	r2,-76(fp)
   87684:	e0fff017 	ldw	r3,-64(fp)
   87688:	10815c24 	muli	r2,r2,1392
   8768c:	10c5883a 	add	r2,r2,r3
   87690:	10c0a804 	addi	r3,r2,672
   87694:	00800404 	movi	r2,16
   87698:	18800015 	stw	r2,0(r3)
                        break;
   8769c:	00000606 	br	876b8 <edid_decode_v14+0x26c4>
                    default:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = 0;
   876a0:	e0bfed17 	ldw	r2,-76(fp)
   876a4:	e0fff017 	ldw	r3,-64(fp)
   876a8:	10815c24 	muli	r2,r2,1392
   876ac:	10c5883a 	add	r2,r2,r3
   876b0:	1080a804 	addi	r2,r2,672
   876b4:	10000015 	stw	zero,0(r2)
                        break;
                    }

                    edid->descriptors[i].range_limits.cvt.blanking = 0;
   876b8:	e0bfed17 	ldw	r2,-76(fp)
   876bc:	e0fff017 	ldw	r3,-64(fp)
   876c0:	10815c24 	muli	r2,r2,1392
   876c4:	10c5883a 	add	r2,r2,r3
   876c8:	1080a904 	addi	r2,r2,676
   876cc:	10000015 	stw	zero,0(r2)
					if (c[15] & 0x08)
   876d0:	e0bfef17 	ldw	r2,-68(fp)
   876d4:	108003c4 	addi	r2,r2,15
   876d8:	10800003 	ldbu	r2,0(r2)
   876dc:	10803fcc 	andi	r2,r2,255
   876e0:	1080020c 	andi	r2,r2,8
   876e4:	1005003a 	cmpeq	r2,r2,zero
   876e8:	10000d1e 	bne	r2,zero,87720 <edid_decode_v14+0x272c>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_STANDARD_BLANKING;
   876ec:	e17fed17 	ldw	r5,-76(fp)
   876f0:	e0bfed17 	ldw	r2,-76(fp)
   876f4:	e0fff017 	ldw	r3,-64(fp)
   876f8:	10815c24 	muli	r2,r2,1392
   876fc:	10c5883a 	add	r2,r2,r3
   87700:	1080a904 	addi	r2,r2,676
   87704:	10800017 	ldw	r2,0(r2)
   87708:	11000054 	ori	r4,r2,1
   8770c:	e0fff017 	ldw	r3,-64(fp)
   87710:	28815c24 	muli	r2,r5,1392
   87714:	10c5883a 	add	r2,r2,r3
   87718:	1080a904 	addi	r2,r2,676
   8771c:	11000015 	stw	r4,0(r2)
					if (c[15] & 0x10)
   87720:	e0bfef17 	ldw	r2,-68(fp)
   87724:	108003c4 	addi	r2,r2,15
   87728:	10800003 	ldbu	r2,0(r2)
   8772c:	10803fcc 	andi	r2,r2,255
   87730:	1080040c 	andi	r2,r2,16
   87734:	1005003a 	cmpeq	r2,r2,zero
   87738:	10000d1e 	bne	r2,zero,87770 <edid_decode_v14+0x277c>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_REDUCED_BLANKING;
   8773c:	e17fed17 	ldw	r5,-76(fp)
   87740:	e0bfed17 	ldw	r2,-76(fp)
   87744:	e0fff017 	ldw	r3,-64(fp)
   87748:	10815c24 	muli	r2,r2,1392
   8774c:	10c5883a 	add	r2,r2,r3
   87750:	1080a904 	addi	r2,r2,676
   87754:	10800017 	ldw	r2,0(r2)
   87758:	11000094 	ori	r4,r2,2
   8775c:	e0fff017 	ldw	r3,-64(fp)
   87760:	28815c24 	muli	r2,r5,1392
   87764:	10c5883a 	add	r2,r2,r3
   87768:	1080a904 	addi	r2,r2,676
   8776c:	11000015 	stw	r4,0(r2)

                    edid->descriptors[i].range_limits.cvt.scaling = 0;
   87770:	e0bfed17 	ldw	r2,-76(fp)
   87774:	e0fff017 	ldw	r3,-64(fp)
   87778:	10815c24 	muli	r2,r2,1392
   8777c:	10c5883a 	add	r2,r2,r3
   87780:	1080aa04 	addi	r2,r2,680
   87784:	10000015 	stw	zero,0(r2)
					if (c[16] & 0x80)
   87788:	e0bfef17 	ldw	r2,-68(fp)
   8778c:	10800404 	addi	r2,r2,16
   87790:	10800003 	ldbu	r2,0(r2)
   87794:	10803fcc 	andi	r2,r2,255
   87798:	1080201c 	xori	r2,r2,128
   8779c:	10bfe004 	addi	r2,r2,-128
   877a0:	1004403a 	cmpge	r2,r2,zero
   877a4:	10000d1e 	bne	r2,zero,877dc <edid_decode_v14+0x27e8>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_SHRINK;
   877a8:	e17fed17 	ldw	r5,-76(fp)
   877ac:	e0bfed17 	ldw	r2,-76(fp)
   877b0:	e0fff017 	ldw	r3,-64(fp)
   877b4:	10815c24 	muli	r2,r2,1392
   877b8:	10c5883a 	add	r2,r2,r3
   877bc:	1080aa04 	addi	r2,r2,680
   877c0:	10800017 	ldw	r2,0(r2)
   877c4:	11000054 	ori	r4,r2,1
   877c8:	e0fff017 	ldw	r3,-64(fp)
   877cc:	28815c24 	muli	r2,r5,1392
   877d0:	10c5883a 	add	r2,r2,r3
   877d4:	1080aa04 	addi	r2,r2,680
   877d8:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x40)
   877dc:	e0bfef17 	ldw	r2,-68(fp)
   877e0:	10800404 	addi	r2,r2,16
   877e4:	10800003 	ldbu	r2,0(r2)
   877e8:	10803fcc 	andi	r2,r2,255
   877ec:	1080100c 	andi	r2,r2,64
   877f0:	1005003a 	cmpeq	r2,r2,zero
   877f4:	10000d1e 	bne	r2,zero,8782c <edid_decode_v14+0x2838>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_STRETCH;
   877f8:	e17fed17 	ldw	r5,-76(fp)
   877fc:	e0bfed17 	ldw	r2,-76(fp)
   87800:	e0fff017 	ldw	r3,-64(fp)
   87804:	10815c24 	muli	r2,r2,1392
   87808:	10c5883a 	add	r2,r2,r3
   8780c:	1080aa04 	addi	r2,r2,680
   87810:	10800017 	ldw	r2,0(r2)
   87814:	11000094 	ori	r4,r2,2
   87818:	e0fff017 	ldw	r3,-64(fp)
   8781c:	28815c24 	muli	r2,r5,1392
   87820:	10c5883a 	add	r2,r2,r3
   87824:	1080aa04 	addi	r2,r2,680
   87828:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x20)
   8782c:	e0bfef17 	ldw	r2,-68(fp)
   87830:	10800404 	addi	r2,r2,16
   87834:	10800003 	ldbu	r2,0(r2)
   87838:	10803fcc 	andi	r2,r2,255
   8783c:	1080080c 	andi	r2,r2,32
   87840:	1005003a 	cmpeq	r2,r2,zero
   87844:	10000d1e 	bne	r2,zero,8787c <edid_decode_v14+0x2888>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_SHRINK;
   87848:	e17fed17 	ldw	r5,-76(fp)
   8784c:	e0bfed17 	ldw	r2,-76(fp)
   87850:	e0fff017 	ldw	r3,-64(fp)
   87854:	10815c24 	muli	r2,r2,1392
   87858:	10c5883a 	add	r2,r2,r3
   8785c:	1080aa04 	addi	r2,r2,680
   87860:	10800017 	ldw	r2,0(r2)
   87864:	11000114 	ori	r4,r2,4
   87868:	e0fff017 	ldw	r3,-64(fp)
   8786c:	28815c24 	muli	r2,r5,1392
   87870:	10c5883a 	add	r2,r2,r3
   87874:	1080aa04 	addi	r2,r2,680
   87878:	11000015 	stw	r4,0(r2)
					if (c[16] & 0x10)
   8787c:	e0bfef17 	ldw	r2,-68(fp)
   87880:	10800404 	addi	r2,r2,16
   87884:	10800003 	ldbu	r2,0(r2)
   87888:	10803fcc 	andi	r2,r2,255
   8788c:	1080040c 	andi	r2,r2,16
   87890:	1005003a 	cmpeq	r2,r2,zero
   87894:	10000d1e 	bne	r2,zero,878cc <edid_decode_v14+0x28d8>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_STRETCH;
   87898:	e17fed17 	ldw	r5,-76(fp)
   8789c:	e0bfed17 	ldw	r2,-76(fp)
   878a0:	e0fff017 	ldw	r3,-64(fp)
   878a4:	10815c24 	muli	r2,r2,1392
   878a8:	10c5883a 	add	r2,r2,r3
   878ac:	1080aa04 	addi	r2,r2,680
   878b0:	10800017 	ldw	r2,0(r2)
   878b4:	11000214 	ori	r4,r2,8
   878b8:	e0fff017 	ldw	r3,-64(fp)
   878bc:	28815c24 	muli	r2,r5,1392
   878c0:	10c5883a 	add	r2,r2,r3
   878c4:	1080aa04 	addi	r2,r2,680
   878c8:	11000015 	stw	r4,0(r2)

					edid->descriptors[i].range_limits.cvt.v_refresh = c[17];
   878cc:	e17fed17 	ldw	r5,-76(fp)
   878d0:	e0bfef17 	ldw	r2,-68(fp)
   878d4:	10800444 	addi	r2,r2,17
   878d8:	10800003 	ldbu	r2,0(r2)
   878dc:	11003fcc 	andi	r4,r2,255
   878e0:	e0fff017 	ldw	r3,-64(fp)
   878e4:	28815c24 	muli	r2,r5,1392
   878e8:	10c5883a 	add	r2,r2,r3
   878ec:	1080ab04 	addi	r2,r2,684
   878f0:	11000015 	stw	r4,0(r2)

            	if ((c[10] == 0) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {

            		edid->descriptors[i].range_limits.timing_flags |= TF_DEFAULT_GTF;

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   878f4:	0006a606 	br	89390 <edid_decode_v14+0x439c>
					if (c[16] & 0x10)
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_STRETCH;

					edid->descriptors[i].range_limits.cvt.v_refresh = c[17];

                } else if (c[10] == 0x01) {
   878f8:	e0bfef17 	ldw	r2,-68(fp)
   878fc:	10800284 	addi	r2,r2,10
   87900:	10800003 	ldbu	r2,0(r2)
   87904:	10803fcc 	andi	r2,r2,255
   87908:	10800058 	cmpnei	r2,r2,1
   8790c:	10000e1e 	bne	r2,zero,87948 <edid_decode_v14+0x2954>
                	edid->descriptors[i].range_limits.timing_flags |= TF_RANGE_LIMITS;
   87910:	e17fed17 	ldw	r5,-76(fp)
   87914:	e0bfed17 	ldw	r2,-76(fp)
   87918:	e0fff017 	ldw	r3,-64(fp)
   8791c:	10815c24 	muli	r2,r2,1392
   87920:	10c5883a 	add	r2,r2,r3
   87924:	1080a204 	addi	r2,r2,648
   87928:	10800017 	ldw	r2,0(r2)
   8792c:	11000054 	ori	r4,r2,1
   87930:	e0fff017 	ldw	r3,-64(fp)
   87934:	28815c24 	muli	r2,r5,1392
   87938:	10c5883a 	add	r2,r2,r3
   8793c:	1080a204 	addi	r2,r2,648
   87940:	11000015 	stw	r4,0(r2)
   87944:	00069206 	br	89390 <edid_decode_v14+0x439c>
                } else if (c[10] == 0x02) {
   87948:	e0bfef17 	ldw	r2,-68(fp)
   8794c:	10800284 	addi	r2,r2,10
   87950:	10800003 	ldbu	r2,0(r2)
   87954:	10803fcc 	andi	r2,r2,255
   87958:	10800098 	cmpnei	r2,r2,2
   8795c:	10068c1e 	bne	r2,zero,89390 <edid_decode_v14+0x439c>
                	edid->descriptors[i].range_limits.timing_flags |= TF_SECOND_GTF;
   87960:	e17fed17 	ldw	r5,-76(fp)
   87964:	e0bfed17 	ldw	r2,-76(fp)
   87968:	e0fff017 	ldw	r3,-64(fp)
   8796c:	10815c24 	muli	r2,r2,1392
   87970:	10c5883a 	add	r2,r2,r3
   87974:	1080a204 	addi	r2,r2,648
   87978:	10800017 	ldw	r2,0(r2)
   8797c:	11000094 	ori	r4,r2,2
   87980:	e0fff017 	ldw	r3,-64(fp)
   87984:	28815c24 	muli	r2,r5,1392
   87988:	10c5883a 	add	r2,r2,r3
   8798c:	1080a204 	addi	r2,r2,648
   87990:	11000015 	stw	r4,0(r2)

                	edid->descriptors[i].range_limits.gtf_2nd_curve.break_freq = c[12] * 2;
   87994:	e17fed17 	ldw	r5,-76(fp)
   87998:	e0bfef17 	ldw	r2,-68(fp)
   8799c:	10800304 	addi	r2,r2,12
   879a0:	10800003 	ldbu	r2,0(r2)
   879a4:	10803fcc 	andi	r2,r2,255
   879a8:	1085883a 	add	r2,r2,r2
   879ac:	1009883a 	mov	r4,r2
   879b0:	e0fff017 	ldw	r3,-64(fp)
   879b4:	28815c24 	muli	r2,r5,1392
   879b8:	10c5883a 	add	r2,r2,r3
   879bc:	1080a304 	addi	r2,r2,652
   879c0:	11000015 	stw	r4,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.C = c[13] / 2;
   879c4:	e17fed17 	ldw	r5,-76(fp)
   879c8:	e0bfef17 	ldw	r2,-68(fp)
   879cc:	10800344 	addi	r2,r2,13
   879d0:	10800003 	ldbu	r2,0(r2)
   879d4:	10803fcc 	andi	r2,r2,255
   879d8:	1004d07a 	srli	r2,r2,1
   879dc:	11003fcc 	andi	r4,r2,255
   879e0:	e0fff017 	ldw	r3,-64(fp)
   879e4:	28815c24 	muli	r2,r5,1392
   879e8:	10c5883a 	add	r2,r2,r3
   879ec:	1080a404 	addi	r2,r2,656
   879f0:	11000015 	stw	r4,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.M = ((u32)c[15] << 8) | (u32)c[14];
   879f4:	e17fed17 	ldw	r5,-76(fp)
   879f8:	e0bfef17 	ldw	r2,-68(fp)
   879fc:	108003c4 	addi	r2,r2,15
   87a00:	10800003 	ldbu	r2,0(r2)
   87a04:	10803fcc 	andi	r2,r2,255
   87a08:	1006923a 	slli	r3,r2,8
   87a0c:	e0bfef17 	ldw	r2,-68(fp)
   87a10:	10800384 	addi	r2,r2,14
   87a14:	10800003 	ldbu	r2,0(r2)
   87a18:	10803fcc 	andi	r2,r2,255
   87a1c:	1884b03a 	or	r2,r3,r2
   87a20:	1009883a 	mov	r4,r2
   87a24:	e0fff017 	ldw	r3,-64(fp)
   87a28:	28815c24 	muli	r2,r5,1392
   87a2c:	10c5883a 	add	r2,r2,r3
   87a30:	1080a504 	addi	r2,r2,660
   87a34:	11000015 	stw	r4,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.K = c[16];
   87a38:	e17fed17 	ldw	r5,-76(fp)
   87a3c:	e0bfef17 	ldw	r2,-68(fp)
   87a40:	10800404 	addi	r2,r2,16
   87a44:	10800003 	ldbu	r2,0(r2)
   87a48:	11003fcc 	andi	r4,r2,255
   87a4c:	e0fff017 	ldw	r3,-64(fp)
   87a50:	28815c24 	muli	r2,r5,1392
   87a54:	10c5883a 	add	r2,r2,r3
   87a58:	1080a604 	addi	r2,r2,664
   87a5c:	11000015 	stw	r4,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.J = c[17] / 2;
   87a60:	e17fed17 	ldw	r5,-76(fp)
   87a64:	e0bfef17 	ldw	r2,-68(fp)
   87a68:	10800444 	addi	r2,r2,17
   87a6c:	10800003 	ldbu	r2,0(r2)
   87a70:	10803fcc 	andi	r2,r2,255
   87a74:	1004d07a 	srli	r2,r2,1
   87a78:	11003fcc 	andi	r4,r2,255
   87a7c:	e0fff017 	ldw	r3,-64(fp)
   87a80:	28815c24 	muli	r2,r5,1392
   87a84:	10c5883a 	add	r2,r2,r3
   87a88:	1080a704 	addi	r2,r2,668
   87a8c:	11000015 	stw	r4,0(r2)
                }

                break;
   87a90:	00063f06 	br	89390 <edid_decode_v14+0x439c>

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
   87a94:	e0bfed17 	ldw	r2,-76(fp)
   87a98:	e0fff017 	ldw	r3,-64(fp)
   87a9c:	10815c24 	muli	r2,r2,1392
   87aa0:	10c5883a 	add	r2,r2,r3
   87aa4:	10c09a04 	addi	r3,r2,616
   87aa8:	00803f04 	movi	r2,252
   87aac:	18800015 	stw	r2,0(r3)
            	edid->descriptors[i].prod_name[18] = 0;
   87ab0:	e0bfed17 	ldw	r2,-76(fp)
   87ab4:	e0fff017 	ldw	r3,-64(fp)
   87ab8:	10815c24 	muli	r2,r2,1392
   87abc:	10c5883a 	add	r2,r2,r3
   87ac0:	10809f84 	addi	r2,r2,638
   87ac4:	10000005 	stb	zero,0(r2)
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
   87ac8:	e0bfed17 	ldw	r2,-76(fp)
   87acc:	10815c24 	muli	r2,r2,1392
   87ad0:	10c09b04 	addi	r3,r2,620
   87ad4:	e0bff017 	ldw	r2,-64(fp)
   87ad8:	1889883a 	add	r4,r3,r2
   87adc:	e0bfef17 	ldw	r2,-68(fp)
   87ae0:	10c00144 	addi	r3,r2,5
   87ae4:	18800003 	ldbu	r2,0(r3)
   87ae8:	20800005 	stb	r2,0(r4)
   87aec:	18800043 	ldbu	r2,1(r3)
   87af0:	20800045 	stb	r2,1(r4)
   87af4:	18800083 	ldbu	r2,2(r3)
   87af8:	20800085 	stb	r2,2(r4)
   87afc:	188000c3 	ldbu	r2,3(r3)
   87b00:	208000c5 	stb	r2,3(r4)
   87b04:	18800103 	ldbu	r2,4(r3)
   87b08:	20800105 	stb	r2,4(r4)
   87b0c:	18800143 	ldbu	r2,5(r3)
   87b10:	20800145 	stb	r2,5(r4)
   87b14:	18800183 	ldbu	r2,6(r3)
   87b18:	20800185 	stb	r2,6(r4)
   87b1c:	188001c3 	ldbu	r2,7(r3)
   87b20:	208001c5 	stb	r2,7(r4)
   87b24:	18800203 	ldbu	r2,8(r3)
   87b28:	20800205 	stb	r2,8(r4)
   87b2c:	18800243 	ldbu	r2,9(r3)
   87b30:	20800245 	stb	r2,9(r4)
   87b34:	18800283 	ldbu	r2,10(r3)
   87b38:	20800285 	stb	r2,10(r4)
   87b3c:	188002c3 	ldbu	r2,11(r3)
   87b40:	208002c5 	stb	r2,11(r4)
   87b44:	18800303 	ldbu	r2,12(r3)
   87b48:	20800305 	stb	r2,12(r4)
                for (s = 0; s < 18-5; ++s) {
   87b4c:	e03fec15 	stw	zero,-80(fp)
   87b50:	00001806 	br	87bb4 <edid_decode_v14+0x2bc0>
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
   87b54:	e0bfed17 	ldw	r2,-76(fp)
   87b58:	e13fec17 	ldw	r4,-80(fp)
   87b5c:	e0fff017 	ldw	r3,-64(fp)
   87b60:	10815c24 	muli	r2,r2,1392
   87b64:	10c5883a 	add	r2,r2,r3
   87b68:	1105883a 	add	r2,r2,r4
   87b6c:	10809b04 	addi	r2,r2,620
   87b70:	10800003 	ldbu	r2,0(r2)
   87b74:	10803fcc 	andi	r2,r2,255
   87b78:	1080201c 	xori	r2,r2,128
   87b7c:	10bfe004 	addi	r2,r2,-128
   87b80:	10800298 	cmpnei	r2,r2,10
   87b84:	1000081e 	bne	r2,zero,87ba8 <edid_decode_v14+0x2bb4>
                    	edid->descriptors[i].prod_name[s] = 0;
   87b88:	e0bfed17 	ldw	r2,-76(fp)
   87b8c:	e13fec17 	ldw	r4,-80(fp)
   87b90:	e0fff017 	ldw	r3,-64(fp)
   87b94:	10815c24 	muli	r2,r2,1392
   87b98:	10c5883a 	add	r2,r2,r3
   87b9c:	1105883a 	add	r2,r2,r4
   87ba0:	10809b04 	addi	r2,r2,620
   87ba4:	10000005 	stb	zero,0(r2)

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
            	edid->descriptors[i].prod_name[18] = 0;
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   87ba8:	e0bfec17 	ldw	r2,-80(fp)
   87bac:	10800044 	addi	r2,r2,1
   87bb0:	e0bfec15 	stw	r2,-80(fp)
   87bb4:	e0bfec17 	ldw	r2,-80(fp)
   87bb8:	10800350 	cmplti	r2,r2,13
   87bbc:	103fe51e 	bne	r2,zero,87b54 <edid_decode_v14+0x2b60>
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
                    	edid->descriptors[i].prod_name[s] = 0;
                    }
                }
                break;
   87bc0:	0005f306 	br	89390 <edid_decode_v14+0x439c>

            case 0xfb:
            	edid->descriptors[i].tag = DTAG_COLOR_POINT;
   87bc4:	e0bfed17 	ldw	r2,-76(fp)
   87bc8:	e0fff017 	ldw	r3,-64(fp)
   87bcc:	10815c24 	muli	r2,r2,1392
   87bd0:	10c5883a 	add	r2,r2,r3
   87bd4:	10c09a04 	addi	r3,r2,616
   87bd8:	00803ec4 	movi	r2,251
   87bdc:	18800015 	stw	r2,0(r3)

				edid->descriptors[i].white_point[0].index = c[5];
   87be0:	e17fed17 	ldw	r5,-76(fp)
   87be4:	e0bfef17 	ldw	r2,-68(fp)
   87be8:	10800144 	addi	r2,r2,5
   87bec:	10800003 	ldbu	r2,0(r2)
   87bf0:	11003fcc 	andi	r4,r2,255
   87bf4:	e0fff017 	ldw	r3,-64(fp)
   87bf8:	28815c24 	muli	r2,r5,1392
   87bfc:	10c5883a 	add	r2,r2,r3
   87c00:	10809b04 	addi	r2,r2,620
   87c04:	11000015 	stw	r4,0(r2)
				edid->descriptors[i].white_point[0].x = ((u16)c[7] << 2) | (((u16)c[6] >> 2) & 0x3);
   87c08:	e17fed17 	ldw	r5,-76(fp)
   87c0c:	e0bfef17 	ldw	r2,-68(fp)
   87c10:	108001c4 	addi	r2,r2,7
   87c14:	10800003 	ldbu	r2,0(r2)
   87c18:	10803fcc 	andi	r2,r2,255
   87c1c:	1085883a 	add	r2,r2,r2
   87c20:	1085883a 	add	r2,r2,r2
   87c24:	1007883a 	mov	r3,r2
   87c28:	e0bfef17 	ldw	r2,-68(fp)
   87c2c:	10800184 	addi	r2,r2,6
   87c30:	10800003 	ldbu	r2,0(r2)
   87c34:	10803fcc 	andi	r2,r2,255
   87c38:	1004d0ba 	srli	r2,r2,2
   87c3c:	10803fcc 	andi	r2,r2,255
   87c40:	108000cc 	andi	r2,r2,3
   87c44:	1888b03a 	or	r4,r3,r2
   87c48:	e0fff017 	ldw	r3,-64(fp)
   87c4c:	28815c24 	muli	r2,r5,1392
   87c50:	10c5883a 	add	r2,r2,r3
   87c54:	10809c04 	addi	r2,r2,624
   87c58:	11000015 	stw	r4,0(r2)
				edid->descriptors[i].white_point[0].y = ((u16)c[8] << 2) | ((u16)c[6] & 0x3);
   87c5c:	e17fed17 	ldw	r5,-76(fp)
   87c60:	e0bfef17 	ldw	r2,-68(fp)
   87c64:	10800204 	addi	r2,r2,8
   87c68:	10800003 	ldbu	r2,0(r2)
   87c6c:	10803fcc 	andi	r2,r2,255
   87c70:	1085883a 	add	r2,r2,r2
   87c74:	1085883a 	add	r2,r2,r2
   87c78:	1007883a 	mov	r3,r2
   87c7c:	e0bfef17 	ldw	r2,-68(fp)
   87c80:	10800184 	addi	r2,r2,6
   87c84:	10800003 	ldbu	r2,0(r2)
   87c88:	10803fcc 	andi	r2,r2,255
   87c8c:	108000cc 	andi	r2,r2,3
   87c90:	1888b03a 	or	r4,r3,r2
   87c94:	e0fff017 	ldw	r3,-64(fp)
   87c98:	28815c24 	muli	r2,r5,1392
   87c9c:	10c5883a 	add	r2,r2,r3
   87ca0:	10809d04 	addi	r2,r2,628
   87ca4:	11000015 	stw	r4,0(r2)
				if (c[9] < 0xff)
   87ca8:	e0bfef17 	ldw	r2,-68(fp)
   87cac:	10800244 	addi	r2,r2,9
   87cb0:	10800003 	ldbu	r2,0(r2)
   87cb4:	10803fcc 	andi	r2,r2,255
   87cb8:	10803fe0 	cmpeqi	r2,r2,255
   87cbc:	1000141e 	bne	r2,zero,87d10 <edid_decode_v14+0x2d1c>
					edid->descriptors[i].white_point[0].gamma = ((float)c[9] + 100.0f) * 0.01f;
   87cc0:	e43fed17 	ldw	r16,-76(fp)
   87cc4:	e0bfef17 	ldw	r2,-68(fp)
   87cc8:	10800244 	addi	r2,r2,9
   87ccc:	10800003 	ldbu	r2,0(r2)
   87cd0:	11003fcc 	andi	r4,r2,255
   87cd4:	008d6200 	call	8d620 <__floatunsisf>
   87cd8:	1009883a 	mov	r4,r2
   87cdc:	0150b234 	movhi	r5,17096
   87ce0:	008d2140 	call	8d214 <__addsf3>
   87ce4:	1009883a 	mov	r4,r2
   87ce8:	014f0934 	movhi	r5,15396
   87cec:	2975c284 	addi	r5,r5,-10486
   87cf0:	008d2780 	call	8d278 <__mulsf3>
   87cf4:	1009883a 	mov	r4,r2
   87cf8:	e0fff017 	ldw	r3,-64(fp)
   87cfc:	80815c24 	muli	r2,r16,1392
   87d00:	10c5883a 	add	r2,r2,r3
   87d04:	10809e04 	addi	r2,r2,632
   87d08:	11000015 	stw	r4,0(r2)
   87d0c:	00000606 	br	87d28 <edid_decode_v14+0x2d34>
				else
					edid->descriptors[i].white_point[0].gamma = 0.0f;
   87d10:	e0bfed17 	ldw	r2,-76(fp)
   87d14:	e0fff017 	ldw	r3,-64(fp)
   87d18:	10815c24 	muli	r2,r2,1392
   87d1c:	10c5883a 	add	r2,r2,r3
   87d20:	10809e04 	addi	r2,r2,632
   87d24:	10000015 	stw	zero,0(r2)

				edid->descriptors[i].white_point[1].index = c[10];
   87d28:	e17fed17 	ldw	r5,-76(fp)
   87d2c:	e0bfef17 	ldw	r2,-68(fp)
   87d30:	10800284 	addi	r2,r2,10
   87d34:	10800003 	ldbu	r2,0(r2)
   87d38:	11003fcc 	andi	r4,r2,255
   87d3c:	e0fff017 	ldw	r3,-64(fp)
   87d40:	28815c24 	muli	r2,r5,1392
   87d44:	10c5883a 	add	r2,r2,r3
   87d48:	10809f04 	addi	r2,r2,636
   87d4c:	11000015 	stw	r4,0(r2)
				edid->descriptors[i].white_point[1].x = ((u16)c[12] << 2) | (((u16)c[11] >> 2) & 0x3);
   87d50:	e17fed17 	ldw	r5,-76(fp)
   87d54:	e0bfef17 	ldw	r2,-68(fp)
   87d58:	10800304 	addi	r2,r2,12
   87d5c:	10800003 	ldbu	r2,0(r2)
   87d60:	10803fcc 	andi	r2,r2,255
   87d64:	1085883a 	add	r2,r2,r2
   87d68:	1085883a 	add	r2,r2,r2
   87d6c:	1007883a 	mov	r3,r2
   87d70:	e0bfef17 	ldw	r2,-68(fp)
   87d74:	108002c4 	addi	r2,r2,11
   87d78:	10800003 	ldbu	r2,0(r2)
   87d7c:	10803fcc 	andi	r2,r2,255
   87d80:	1004d0ba 	srli	r2,r2,2
   87d84:	10803fcc 	andi	r2,r2,255
   87d88:	108000cc 	andi	r2,r2,3
   87d8c:	1888b03a 	or	r4,r3,r2
   87d90:	e0fff017 	ldw	r3,-64(fp)
   87d94:	28815c24 	muli	r2,r5,1392
   87d98:	10c5883a 	add	r2,r2,r3
   87d9c:	1080a004 	addi	r2,r2,640
   87da0:	11000015 	stw	r4,0(r2)
				edid->descriptors[i].white_point[1].y = ((u16)c[13] << 2) | ((u16)c[11] & 0x3);
   87da4:	e17fed17 	ldw	r5,-76(fp)
   87da8:	e0bfef17 	ldw	r2,-68(fp)
   87dac:	10800344 	addi	r2,r2,13
   87db0:	10800003 	ldbu	r2,0(r2)
   87db4:	10803fcc 	andi	r2,r2,255
   87db8:	1085883a 	add	r2,r2,r2
   87dbc:	1085883a 	add	r2,r2,r2
   87dc0:	1007883a 	mov	r3,r2
   87dc4:	e0bfef17 	ldw	r2,-68(fp)
   87dc8:	108002c4 	addi	r2,r2,11
   87dcc:	10800003 	ldbu	r2,0(r2)
   87dd0:	10803fcc 	andi	r2,r2,255
   87dd4:	108000cc 	andi	r2,r2,3
   87dd8:	1888b03a 	or	r4,r3,r2
   87ddc:	e0fff017 	ldw	r3,-64(fp)
   87de0:	28815c24 	muli	r2,r5,1392
   87de4:	10c5883a 	add	r2,r2,r3
   87de8:	1080a104 	addi	r2,r2,644
   87dec:	11000015 	stw	r4,0(r2)
				if (c[14] < 0xff)
   87df0:	e0bfef17 	ldw	r2,-68(fp)
   87df4:	10800384 	addi	r2,r2,14
   87df8:	10800003 	ldbu	r2,0(r2)
   87dfc:	10803fcc 	andi	r2,r2,255
   87e00:	10803fe0 	cmpeqi	r2,r2,255
   87e04:	1000141e 	bne	r2,zero,87e58 <edid_decode_v14+0x2e64>
					edid->descriptors[i].white_point[1].gamma = ((float)c[14] + 100.0f) * 0.01f;
   87e08:	e43fed17 	ldw	r16,-76(fp)
   87e0c:	e0bfef17 	ldw	r2,-68(fp)
   87e10:	10800384 	addi	r2,r2,14
   87e14:	10800003 	ldbu	r2,0(r2)
   87e18:	11003fcc 	andi	r4,r2,255
   87e1c:	008d6200 	call	8d620 <__floatunsisf>
   87e20:	1009883a 	mov	r4,r2
   87e24:	0150b234 	movhi	r5,17096
   87e28:	008d2140 	call	8d214 <__addsf3>
   87e2c:	1009883a 	mov	r4,r2
   87e30:	014f0934 	movhi	r5,15396
   87e34:	2975c284 	addi	r5,r5,-10486
   87e38:	008d2780 	call	8d278 <__mulsf3>
   87e3c:	1009883a 	mov	r4,r2
   87e40:	e0fff017 	ldw	r3,-64(fp)
   87e44:	80815c24 	muli	r2,r16,1392
   87e48:	10c5883a 	add	r2,r2,r3
   87e4c:	1080a204 	addi	r2,r2,648
   87e50:	11000015 	stw	r4,0(r2)
   87e54:	00054e06 	br	89390 <edid_decode_v14+0x439c>
				else
					edid->descriptors[i].white_point[1].gamma = 0.0f;
   87e58:	e0bfed17 	ldw	r2,-76(fp)
   87e5c:	e0fff017 	ldw	r3,-64(fp)
   87e60:	10815c24 	muli	r2,r2,1392
   87e64:	10c5883a 	add	r2,r2,r3
   87e68:	1080a204 	addi	r2,r2,648
   87e6c:	10000015 	stw	zero,0(r2)

                break;
   87e70:	00054706 	br	89390 <edid_decode_v14+0x439c>

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;
   87e74:	e0bfed17 	ldw	r2,-76(fp)
   87e78:	e0fff017 	ldw	r3,-64(fp)
   87e7c:	10815c24 	muli	r2,r2,1392
   87e80:	10c5883a 	add	r2,r2,r3
   87e84:	10c09a04 	addi	r3,r2,616
   87e88:	00803e84 	movi	r2,250
   87e8c:	18800015 	stw	r2,0(r3)

                for (s = 0; s < 6; ++s) {
   87e90:	e03fec15 	stw	zero,-80(fp)
   87e94:	00006f06 	br	88054 <edid_decode_v14+0x3060>
            		u8 *d = (u8 *)&c[5 + 2 * s];
   87e98:	e0bfec17 	ldw	r2,-80(fp)
   87e9c:	1085883a 	add	r2,r2,r2
   87ea0:	1007883a 	mov	r3,r2
   87ea4:	e0bfef17 	ldw	r2,-68(fp)
   87ea8:	1885883a 	add	r2,r3,r2
   87eac:	10800144 	addi	r2,r2,5
   87eb0:	e0bfeb15 	stw	r2,-84(fp)

            		if (*d == 0)
   87eb4:	e0bfeb17 	ldw	r2,-84(fp)
   87eb8:	10800003 	ldbu	r2,0(r2)
   87ebc:	10803fcc 	andi	r2,r2,255
   87ec0:	1005003a 	cmpeq	r2,r2,zero
   87ec4:	1000601e 	bne	r2,zero,88048 <edid_decode_v14+0x3054>
                    	continue;

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;
   87ec8:	e17fed17 	ldw	r5,-76(fp)
   87ecc:	e0ffec17 	ldw	r3,-80(fp)
   87ed0:	e0bfeb17 	ldw	r2,-84(fp)
   87ed4:	10800003 	ldbu	r2,0(r2)
   87ed8:	10803fcc 	andi	r2,r2,255
   87edc:	100490fa 	slli	r2,r2,3
   87ee0:	11803e04 	addi	r6,r2,248
   87ee4:	e13ff017 	ldw	r4,-64(fp)
   87ee8:	18c00324 	muli	r3,r3,12
   87eec:	28815c24 	muli	r2,r5,1392
   87ef0:	1885883a 	add	r2,r3,r2
   87ef4:	1105883a 	add	r2,r2,r4
   87ef8:	1080ac04 	addi	r2,r2,688
   87efc:	11800015 	stw	r6,0(r2)

            		switch ((d[1] >> 6) & 0x3) {
   87f00:	e0bfeb17 	ldw	r2,-84(fp)
   87f04:	10800044 	addi	r2,r2,1
   87f08:	10800003 	ldbu	r2,0(r2)
   87f0c:	10803fcc 	andi	r2,r2,255
   87f10:	1004d1ba 	srli	r2,r2,6
   87f14:	10803fcc 	andi	r2,r2,255
   87f18:	108000cc 	andi	r2,r2,3
   87f1c:	e0bff415 	stw	r2,-48(fp)
   87f20:	e0fff417 	ldw	r3,-48(fp)
   87f24:	18800060 	cmpeqi	r2,r3,1
   87f28:	1000181e 	bne	r2,zero,87f8c <edid_decode_v14+0x2f98>
   87f2c:	e13ff417 	ldw	r4,-48(fp)
   87f30:	20800088 	cmpgei	r2,r4,2
   87f34:	1000041e 	bne	r2,zero,87f48 <edid_decode_v14+0x2f54>
   87f38:	e0fff417 	ldw	r3,-48(fp)
   87f3c:	1805003a 	cmpeq	r2,r3,zero
   87f40:	1000081e 	bne	r2,zero,87f64 <edid_decode_v14+0x2f70>
   87f44:	00003106 	br	8800c <edid_decode_v14+0x3018>
   87f48:	e13ff417 	ldw	r4,-48(fp)
   87f4c:	208000a0 	cmpeqi	r2,r4,2
   87f50:	1000191e 	bne	r2,zero,87fb8 <edid_decode_v14+0x2fc4>
   87f54:	e0fff417 	ldw	r3,-48(fp)
   87f58:	188000e0 	cmpeqi	r2,r3,3
   87f5c:	1000211e 	bne	r2,zero,87fe4 <edid_decode_v14+0x2ff0>
   87f60:	00002a06 	br	8800c <edid_decode_v14+0x3018>
            		case 0:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_10;
   87f64:	e13fed17 	ldw	r4,-76(fp)
   87f68:	e0bfec17 	ldw	r2,-80(fp)
   87f6c:	e17ff017 	ldw	r5,-64(fp)
   87f70:	10c00324 	muli	r3,r2,12
   87f74:	20815c24 	muli	r2,r4,1392
   87f78:	1885883a 	add	r2,r3,r2
   87f7c:	1145883a 	add	r2,r2,r5
   87f80:	1080ad04 	addi	r2,r2,692
   87f84:	10000015 	stw	zero,0(r2)
            			break;
   87f88:	00002006 	br	8800c <edid_decode_v14+0x3018>
            		case 1:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_4_3;
   87f8c:	e13fed17 	ldw	r4,-76(fp)
   87f90:	e0bfec17 	ldw	r2,-80(fp)
   87f94:	e17ff017 	ldw	r5,-64(fp)
   87f98:	10c00324 	muli	r3,r2,12
   87f9c:	20815c24 	muli	r2,r4,1392
   87fa0:	1885883a 	add	r2,r3,r2
   87fa4:	1145883a 	add	r2,r2,r5
   87fa8:	10c0ad04 	addi	r3,r2,692
   87fac:	00800044 	movi	r2,1
   87fb0:	18800015 	stw	r2,0(r3)
            			break;
   87fb4:	00001506 	br	8800c <edid_decode_v14+0x3018>
            		case 2:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_5_4;
   87fb8:	e13fed17 	ldw	r4,-76(fp)
   87fbc:	e0bfec17 	ldw	r2,-80(fp)
   87fc0:	e17ff017 	ldw	r5,-64(fp)
   87fc4:	10c00324 	muli	r3,r2,12
   87fc8:	20815c24 	muli	r2,r4,1392
   87fcc:	1885883a 	add	r2,r3,r2
   87fd0:	1145883a 	add	r2,r2,r5
   87fd4:	10c0ad04 	addi	r3,r2,692
   87fd8:	00800084 	movi	r2,2
   87fdc:	18800015 	stw	r2,0(r3)
            			break;
   87fe0:	00000a06 	br	8800c <edid_decode_v14+0x3018>
            		case 3:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_9;
   87fe4:	e13fed17 	ldw	r4,-76(fp)
   87fe8:	e0bfec17 	ldw	r2,-80(fp)
   87fec:	e17ff017 	ldw	r5,-64(fp)
   87ff0:	10c00324 	muli	r3,r2,12
   87ff4:	20815c24 	muli	r2,r4,1392
   87ff8:	1885883a 	add	r2,r3,r2
   87ffc:	1145883a 	add	r2,r2,r5
   88000:	10c0ad04 	addi	r3,r2,692
   88004:	008000c4 	movi	r2,3
   88008:	18800015 	stw	r2,0(r3)
            			break;
            		}

            		edid->descriptors[i].extra_standard_timings[s].refresh_rate = (d[1] & 0x3f) + 60;
   8800c:	e17fed17 	ldw	r5,-76(fp)
   88010:	e0ffec17 	ldw	r3,-80(fp)
   88014:	e0bfeb17 	ldw	r2,-84(fp)
   88018:	10800044 	addi	r2,r2,1
   8801c:	10800003 	ldbu	r2,0(r2)
   88020:	10803fcc 	andi	r2,r2,255
   88024:	10800fcc 	andi	r2,r2,63
   88028:	11800f04 	addi	r6,r2,60
   8802c:	e13ff017 	ldw	r4,-64(fp)
   88030:	18c00324 	muli	r3,r3,12
   88034:	28815c24 	muli	r2,r5,1392
   88038:	1885883a 	add	r2,r3,r2
   8803c:	1105883a 	add	r2,r2,r4
   88040:	1080ae04 	addi	r2,r2,696
   88044:	11800015 	stw	r6,0(r2)
                break;

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;

                for (s = 0; s < 6; ++s) {
   88048:	e0bfec17 	ldw	r2,-80(fp)
   8804c:	10800044 	addi	r2,r2,1
   88050:	e0bfec15 	stw	r2,-80(fp)
   88054:	e0bfec17 	ldw	r2,-80(fp)
   88058:	10800190 	cmplti	r2,r2,6
   8805c:	103f8e1e 	bne	r2,zero,87e98 <edid_decode_v14+0x2ea4>
            		}

            		edid->descriptors[i].extra_standard_timings[s].refresh_rate = (d[1] & 0x3f) + 60;
                }

                break;
   88060:	0004cb06 	br	89390 <edid_decode_v14+0x439c>

            case 0xf9:
            	// display color management data
            	edid->descriptors[i].tag = DTAG_DCM_DATA;
   88064:	e0bfed17 	ldw	r2,-76(fp)
   88068:	e0fff017 	ldw	r3,-64(fp)
   8806c:	10815c24 	muli	r2,r2,1392
   88070:	10c5883a 	add	r2,r2,r3
   88074:	10c09a04 	addi	r3,r2,616
   88078:	00803e44 	movi	r2,249
   8807c:	18800015 	stw	r2,0(r3)

            	edid->descriptors[i].dcm.ver = c[5];
   88080:	e17fed17 	ldw	r5,-76(fp)
   88084:	e0bfef17 	ldw	r2,-68(fp)
   88088:	10800144 	addi	r2,r2,5
   8808c:	10800003 	ldbu	r2,0(r2)
   88090:	11003fcc 	andi	r4,r2,255
   88094:	e0fff017 	ldw	r3,-64(fp)
   88098:	28815c24 	muli	r2,r5,1392
   8809c:	10c5883a 	add	r2,r2,r3
   880a0:	1080be04 	addi	r2,r2,760
   880a4:	11000015 	stw	r4,0(r2)
            	edid->descriptors[i].dcm.r_a2 = ((u32)c[9] << 8) | (u32)c[8];
   880a8:	e17fed17 	ldw	r5,-76(fp)
   880ac:	e0bfef17 	ldw	r2,-68(fp)
   880b0:	10800244 	addi	r2,r2,9
   880b4:	10800003 	ldbu	r2,0(r2)
   880b8:	10803fcc 	andi	r2,r2,255
   880bc:	1006923a 	slli	r3,r2,8
   880c0:	e0bfef17 	ldw	r2,-68(fp)
   880c4:	10800204 	addi	r2,r2,8
   880c8:	10800003 	ldbu	r2,0(r2)
   880cc:	10803fcc 	andi	r2,r2,255
   880d0:	1884b03a 	or	r2,r3,r2
   880d4:	1009883a 	mov	r4,r2
   880d8:	e0fff017 	ldw	r3,-64(fp)
   880dc:	28815c24 	muli	r2,r5,1392
   880e0:	10c5883a 	add	r2,r2,r3
   880e4:	1080bf04 	addi	r2,r2,764
   880e8:	11000015 	stw	r4,0(r2)
            	edid->descriptors[i].dcm.r_a3 = ((u32)c[7] << 8) | (u32)c[6];
   880ec:	e17fed17 	ldw	r5,-76(fp)
   880f0:	e0bfef17 	ldw	r2,-68(fp)
   880f4:	108001c4 	addi	r2,r2,7
   880f8:	10800003 	ldbu	r2,0(r2)
   880fc:	10803fcc 	andi	r2,r2,255
   88100:	1006923a 	slli	r3,r2,8
   88104:	e0bfef17 	ldw	r2,-68(fp)
   88108:	10800184 	addi	r2,r2,6
   8810c:	10800003 	ldbu	r2,0(r2)
   88110:	10803fcc 	andi	r2,r2,255
   88114:	1884b03a 	or	r2,r3,r2
   88118:	1009883a 	mov	r4,r2
   8811c:	e0fff017 	ldw	r3,-64(fp)
   88120:	28815c24 	muli	r2,r5,1392
   88124:	10c5883a 	add	r2,r2,r3
   88128:	1080c004 	addi	r2,r2,768
   8812c:	11000015 	stw	r4,0(r2)
            	edid->descriptors[i].dcm.g_a2 = ((u32)c[13] << 8) | (u32)c[12];
   88130:	e17fed17 	ldw	r5,-76(fp)
   88134:	e0bfef17 	ldw	r2,-68(fp)
   88138:	10800344 	addi	r2,r2,13
   8813c:	10800003 	ldbu	r2,0(r2)
   88140:	10803fcc 	andi	r2,r2,255
   88144:	1006923a 	slli	r3,r2,8
   88148:	e0bfef17 	ldw	r2,-68(fp)
   8814c:	10800304 	addi	r2,r2,12
   88150:	10800003 	ldbu	r2,0(r2)
   88154:	10803fcc 	andi	r2,r2,255
   88158:	1884b03a 	or	r2,r3,r2
   8815c:	1009883a 	mov	r4,r2
   88160:	e0fff017 	ldw	r3,-64(fp)
   88164:	28815c24 	muli	r2,r5,1392
   88168:	10c5883a 	add	r2,r2,r3
   8816c:	1080c104 	addi	r2,r2,772
   88170:	11000015 	stw	r4,0(r2)
            	edid->descriptors[i].dcm.g_a3 = ((u32)c[11] << 8) | (u32)c[10];
   88174:	e17fed17 	ldw	r5,-76(fp)
   88178:	e0bfef17 	ldw	r2,-68(fp)
   8817c:	108002c4 	addi	r2,r2,11
   88180:	10800003 	ldbu	r2,0(r2)
   88184:	10803fcc 	andi	r2,r2,255
   88188:	1006923a 	slli	r3,r2,8
   8818c:	e0bfef17 	ldw	r2,-68(fp)
   88190:	10800284 	addi	r2,r2,10
   88194:	10800003 	ldbu	r2,0(r2)
   88198:	10803fcc 	andi	r2,r2,255
   8819c:	1884b03a 	or	r2,r3,r2
   881a0:	1009883a 	mov	r4,r2
   881a4:	e0fff017 	ldw	r3,-64(fp)
   881a8:	28815c24 	muli	r2,r5,1392
   881ac:	10c5883a 	add	r2,r2,r3
   881b0:	1080c204 	addi	r2,r2,776
   881b4:	11000015 	stw	r4,0(r2)
            	edid->descriptors[i].dcm.b_a2 = ((u32)c[17] << 8) | (u32)c[16];
   881b8:	e17fed17 	ldw	r5,-76(fp)
   881bc:	e0bfef17 	ldw	r2,-68(fp)
   881c0:	10800444 	addi	r2,r2,17
   881c4:	10800003 	ldbu	r2,0(r2)
   881c8:	10803fcc 	andi	r2,r2,255
   881cc:	1006923a 	slli	r3,r2,8
   881d0:	e0bfef17 	ldw	r2,-68(fp)
   881d4:	10800404 	addi	r2,r2,16
   881d8:	10800003 	ldbu	r2,0(r2)
   881dc:	10803fcc 	andi	r2,r2,255
   881e0:	1884b03a 	or	r2,r3,r2
   881e4:	1009883a 	mov	r4,r2
   881e8:	e0fff017 	ldw	r3,-64(fp)
   881ec:	28815c24 	muli	r2,r5,1392
   881f0:	10c5883a 	add	r2,r2,r3
   881f4:	1080c304 	addi	r2,r2,780
   881f8:	11000015 	stw	r4,0(r2)
            	edid->descriptors[i].dcm.b_a3 = ((u32)c[15] << 8) | (u32)c[14];
   881fc:	e17fed17 	ldw	r5,-76(fp)
   88200:	e0bfef17 	ldw	r2,-68(fp)
   88204:	108003c4 	addi	r2,r2,15
   88208:	10800003 	ldbu	r2,0(r2)
   8820c:	10803fcc 	andi	r2,r2,255
   88210:	1006923a 	slli	r3,r2,8
   88214:	e0bfef17 	ldw	r2,-68(fp)
   88218:	10800384 	addi	r2,r2,14
   8821c:	10800003 	ldbu	r2,0(r2)
   88220:	10803fcc 	andi	r2,r2,255
   88224:	1884b03a 	or	r2,r3,r2
   88228:	1009883a 	mov	r4,r2
   8822c:	e0fff017 	ldw	r3,-64(fp)
   88230:	28815c24 	muli	r2,r5,1392
   88234:	10c5883a 	add	r2,r2,r3
   88238:	1080c404 	addi	r2,r2,784
   8823c:	11000015 	stw	r4,0(r2)

            	break;
   88240:	00045306 	br	89390 <edid_decode_v14+0x439c>

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;
   88244:	e0bfed17 	ldw	r2,-76(fp)
   88248:	e0fff017 	ldw	r3,-64(fp)
   8824c:	10815c24 	muli	r2,r2,1392
   88250:	10c5883a 	add	r2,r2,r3
   88254:	10c09a04 	addi	r3,r2,616
   88258:	00803e04 	movi	r2,248
   8825c:	18800015 	stw	r2,0(r3)

                for (s = 0; s < 4; ++s) {
   88260:	e03fec15 	stw	zero,-80(fp)
   88264:	00017806 	br	88848 <edid_decode_v14+0x3854>
                	u8 *d = (u8 *)&c[6 + s * 3];
   88268:	e0ffec17 	ldw	r3,-80(fp)
   8826c:	1805883a 	mov	r2,r3
   88270:	1085883a 	add	r2,r2,r2
   88274:	10c5883a 	add	r2,r2,r3
   88278:	1007883a 	mov	r3,r2
   8827c:	e0bfef17 	ldw	r2,-68(fp)
   88280:	1885883a 	add	r2,r3,r2
   88284:	10800184 	addi	r2,r2,6
   88288:	e0bfea15 	stw	r2,-88(fp)

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];
   8828c:	e17fed17 	ldw	r5,-76(fp)
   88290:	e1bfec17 	ldw	r6,-80(fp)
   88294:	e0bfea17 	ldw	r2,-88(fp)
   88298:	10800044 	addi	r2,r2,1
   8829c:	10800003 	ldbu	r2,0(r2)
   882a0:	10803fcc 	andi	r2,r2,255
   882a4:	10803c0c 	andi	r2,r2,240
   882a8:	1006913a 	slli	r3,r2,4
   882ac:	e0bfea17 	ldw	r2,-88(fp)
   882b0:	10800003 	ldbu	r2,0(r2)
   882b4:	10803fcc 	andi	r2,r2,255
   882b8:	1884b03a 	or	r2,r3,r2
   882bc:	1009883a 	mov	r4,r2
   882c0:	e0fff017 	ldw	r3,-64(fp)
   882c4:	288015e4 	muli	r2,r5,87
   882c8:	1185883a 	add	r2,r2,r6
   882cc:	1004913a 	slli	r2,r2,4
   882d0:	10c5883a 	add	r2,r2,r3
   882d4:	1080c504 	addi	r2,r2,788
   882d8:	11000015 	stw	r4,0(r2)

                	switch (d[1] & 0x0c) {
   882dc:	e0bfea17 	ldw	r2,-88(fp)
   882e0:	10800044 	addi	r2,r2,1
   882e4:	10800003 	ldbu	r2,0(r2)
   882e8:	10803fcc 	andi	r2,r2,255
   882ec:	1080030c 	andi	r2,r2,12
   882f0:	e0bff315 	stw	r2,-52(fp)
   882f4:	e13ff317 	ldw	r4,-52(fp)
   882f8:	20800120 	cmpeqi	r2,r4,4
   882fc:	1000221e 	bne	r2,zero,88388 <edid_decode_v14+0x3394>
   88300:	e0fff317 	ldw	r3,-52(fp)
   88304:	18800148 	cmpgei	r2,r3,5
   88308:	1000041e 	bne	r2,zero,8831c <edid_decode_v14+0x3328>
   8830c:	e13ff317 	ldw	r4,-52(fp)
   88310:	2005003a 	cmpeq	r2,r4,zero
   88314:	1000081e 	bne	r2,zero,88338 <edid_decode_v14+0x3344>
   88318:	00005606 	br	88474 <edid_decode_v14+0x3480>
   8831c:	e0fff317 	ldw	r3,-52(fp)
   88320:	18800220 	cmpeqi	r2,r3,8
   88324:	10002c1e 	bne	r2,zero,883d8 <edid_decode_v14+0x33e4>
   88328:	e13ff317 	ldw	r4,-52(fp)
   8832c:	20800320 	cmpeqi	r2,r4,12
   88330:	10003d1e 	bne	r2,zero,88428 <edid_decode_v14+0x3434>
   88334:	00004f06 	br	88474 <edid_decode_v14+0x3480>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_4_3;
   88338:	e17fed17 	ldw	r5,-76(fp)
   8833c:	e1bfec17 	ldw	r6,-80(fp)
   88340:	e0bfed17 	ldw	r2,-76(fp)
   88344:	e0ffec17 	ldw	r3,-80(fp)
   88348:	e13ff017 	ldw	r4,-64(fp)
   8834c:	108015e4 	muli	r2,r2,87
   88350:	10c5883a 	add	r2,r2,r3
   88354:	1004913a 	slli	r2,r2,4
   88358:	1105883a 	add	r2,r2,r4
   8835c:	1080c604 	addi	r2,r2,792
   88360:	10800017 	ldw	r2,0(r2)
   88364:	11000054 	ori	r4,r2,1
   88368:	e0fff017 	ldw	r3,-64(fp)
   8836c:	288015e4 	muli	r2,r5,87
   88370:	1185883a 	add	r2,r2,r6
   88374:	1004913a 	slli	r2,r2,4
   88378:	10c5883a 	add	r2,r2,r3
   8837c:	1080c604 	addi	r2,r2,792
   88380:	11000015 	stw	r4,0(r2)
                        break;
   88384:	00003b06 	br	88474 <edid_decode_v14+0x3480>
                    case 0x04:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_9;
   88388:	e17fed17 	ldw	r5,-76(fp)
   8838c:	e1bfec17 	ldw	r6,-80(fp)
   88390:	e0bfed17 	ldw	r2,-76(fp)
   88394:	e0ffec17 	ldw	r3,-80(fp)
   88398:	e13ff017 	ldw	r4,-64(fp)
   8839c:	108015e4 	muli	r2,r2,87
   883a0:	10c5883a 	add	r2,r2,r3
   883a4:	1004913a 	slli	r2,r2,4
   883a8:	1105883a 	add	r2,r2,r4
   883ac:	1080c604 	addi	r2,r2,792
   883b0:	10800017 	ldw	r2,0(r2)
   883b4:	11000094 	ori	r4,r2,2
   883b8:	e0fff017 	ldw	r3,-64(fp)
   883bc:	288015e4 	muli	r2,r5,87
   883c0:	1185883a 	add	r2,r2,r6
   883c4:	1004913a 	slli	r2,r2,4
   883c8:	10c5883a 	add	r2,r2,r3
   883cc:	1080c604 	addi	r2,r2,792
   883d0:	11000015 	stw	r4,0(r2)
                        break;
   883d4:	00002706 	br	88474 <edid_decode_v14+0x3480>
                    case 0x08:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_10;
   883d8:	e17fed17 	ldw	r5,-76(fp)
   883dc:	e1bfec17 	ldw	r6,-80(fp)
   883e0:	e0bfed17 	ldw	r2,-76(fp)
   883e4:	e0ffec17 	ldw	r3,-80(fp)
   883e8:	e13ff017 	ldw	r4,-64(fp)
   883ec:	108015e4 	muli	r2,r2,87
   883f0:	10c5883a 	add	r2,r2,r3
   883f4:	1004913a 	slli	r2,r2,4
   883f8:	1105883a 	add	r2,r2,r4
   883fc:	1080c604 	addi	r2,r2,792
   88400:	10800017 	ldw	r2,0(r2)
   88404:	11000114 	ori	r4,r2,4
   88408:	e0fff017 	ldw	r3,-64(fp)
   8840c:	288015e4 	muli	r2,r5,87
   88410:	1185883a 	add	r2,r2,r6
   88414:	1004913a 	slli	r2,r2,4
   88418:	10c5883a 	add	r2,r2,r3
   8841c:	1080c604 	addi	r2,r2,792
   88420:	11000015 	stw	r4,0(r2)
                        break;
   88424:	00001306 	br	88474 <edid_decode_v14+0x3480>
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
   88428:	e17fed17 	ldw	r5,-76(fp)
   8842c:	e1bfec17 	ldw	r6,-80(fp)
   88430:	e0bfed17 	ldw	r2,-76(fp)
   88434:	e0ffec17 	ldw	r3,-80(fp)
   88438:	e13ff017 	ldw	r4,-64(fp)
   8843c:	108015e4 	muli	r2,r2,87
   88440:	10c5883a 	add	r2,r2,r3
   88444:	1004913a 	slli	r2,r2,4
   88448:	1105883a 	add	r2,r2,r4
   8844c:	1080c604 	addi	r2,r2,792
   88450:	10800017 	ldw	r2,0(r2)
   88454:	11000414 	ori	r4,r2,16
   88458:	e0fff017 	ldw	r3,-64(fp)
   8845c:	288015e4 	muli	r2,r5,87
   88460:	1185883a 	add	r2,r2,r6
   88464:	1004913a 	slli	r2,r2,4
   88468:	10c5883a 	add	r2,r2,r3
   8846c:	1080c604 	addi	r2,r2,792
   88470:	11000015 	stw	r4,0(r2)
                        break;
                    }

                	switch (d[2] & 0x60) {
   88474:	e0bfea17 	ldw	r2,-88(fp)
   88478:	10800084 	addi	r2,r2,2
   8847c:	10800003 	ldbu	r2,0(r2)
   88480:	10803fcc 	andi	r2,r2,255
   88484:	1080180c 	andi	r2,r2,96
   88488:	e0bff215 	stw	r2,-56(fp)
   8848c:	e0fff217 	ldw	r3,-56(fp)
   88490:	18801020 	cmpeqi	r2,r3,64
   88494:	1000361e 	bne	r2,zero,88570 <edid_decode_v14+0x357c>
   88498:	e13ff217 	ldw	r4,-56(fp)
   8849c:	20801048 	cmpgei	r2,r4,65
   884a0:	1000071e 	bne	r2,zero,884c0 <edid_decode_v14+0x34cc>
   884a4:	e0fff217 	ldw	r3,-56(fp)
   884a8:	1805003a 	cmpeq	r2,r3,zero
   884ac:	1000081e 	bne	r2,zero,884d0 <edid_decode_v14+0x34dc>
   884b0:	e13ff217 	ldw	r4,-56(fp)
   884b4:	20800820 	cmpeqi	r2,r4,32
   884b8:	1000191e 	bne	r2,zero,88520 <edid_decode_v14+0x352c>
   884bc:	00005306 	br	8860c <edid_decode_v14+0x3618>
   884c0:	e0fff217 	ldw	r3,-56(fp)
   884c4:	18801820 	cmpeqi	r2,r3,96
   884c8:	10003d1e 	bne	r2,zero,885c0 <edid_decode_v14+0x35cc>
   884cc:	00004f06 	br	8860c <edid_decode_v14+0x3618>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_50HZ;
   884d0:	e17fed17 	ldw	r5,-76(fp)
   884d4:	e1bfec17 	ldw	r6,-80(fp)
   884d8:	e0bfed17 	ldw	r2,-76(fp)
   884dc:	e0ffec17 	ldw	r3,-80(fp)
   884e0:	e13ff017 	ldw	r4,-64(fp)
   884e4:	108015e4 	muli	r2,r2,87
   884e8:	10c5883a 	add	r2,r2,r3
   884ec:	1004913a 	slli	r2,r2,4
   884f0:	1105883a 	add	r2,r2,r4
   884f4:	1080c704 	addi	r2,r2,796
   884f8:	10800017 	ldw	r2,0(r2)
   884fc:	11004014 	ori	r4,r2,256
   88500:	e0fff017 	ldw	r3,-64(fp)
   88504:	288015e4 	muli	r2,r5,87
   88508:	1185883a 	add	r2,r2,r6
   8850c:	1004913a 	slli	r2,r2,4
   88510:	10c5883a 	add	r2,r2,r3
   88514:	1080c704 	addi	r2,r2,796
   88518:	11000015 	stw	r4,0(r2)
                        break;
   8851c:	00003b06 	br	8860c <edid_decode_v14+0x3618>
                    case 0x20:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_60HZ;
   88520:	e17fed17 	ldw	r5,-76(fp)
   88524:	e1bfec17 	ldw	r6,-80(fp)
   88528:	e0bfed17 	ldw	r2,-76(fp)
   8852c:	e0ffec17 	ldw	r3,-80(fp)
   88530:	e13ff017 	ldw	r4,-64(fp)
   88534:	108015e4 	muli	r2,r2,87
   88538:	10c5883a 	add	r2,r2,r3
   8853c:	1004913a 	slli	r2,r2,4
   88540:	1105883a 	add	r2,r2,r4
   88544:	1080c704 	addi	r2,r2,796
   88548:	10800017 	ldw	r2,0(r2)
   8854c:	11008014 	ori	r4,r2,512
   88550:	e0fff017 	ldw	r3,-64(fp)
   88554:	288015e4 	muli	r2,r5,87
   88558:	1185883a 	add	r2,r2,r6
   8855c:	1004913a 	slli	r2,r2,4
   88560:	10c5883a 	add	r2,r2,r3
   88564:	1080c704 	addi	r2,r2,796
   88568:	11000015 	stw	r4,0(r2)
                        break;
   8856c:	00002706 	br	8860c <edid_decode_v14+0x3618>
                    case 0x40:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_75HZ;
   88570:	e17fed17 	ldw	r5,-76(fp)
   88574:	e1bfec17 	ldw	r6,-80(fp)
   88578:	e0bfed17 	ldw	r2,-76(fp)
   8857c:	e0ffec17 	ldw	r3,-80(fp)
   88580:	e13ff017 	ldw	r4,-64(fp)
   88584:	108015e4 	muli	r2,r2,87
   88588:	10c5883a 	add	r2,r2,r3
   8858c:	1004913a 	slli	r2,r2,4
   88590:	1105883a 	add	r2,r2,r4
   88594:	1080c704 	addi	r2,r2,796
   88598:	10800017 	ldw	r2,0(r2)
   8859c:	11010014 	ori	r4,r2,1024
   885a0:	e0fff017 	ldw	r3,-64(fp)
   885a4:	288015e4 	muli	r2,r5,87
   885a8:	1185883a 	add	r2,r2,r6
   885ac:	1004913a 	slli	r2,r2,4
   885b0:	10c5883a 	add	r2,r2,r3
   885b4:	1080c704 	addi	r2,r2,796
   885b8:	11000015 	stw	r4,0(r2)
                        break;
   885bc:	00001306 	br	8860c <edid_decode_v14+0x3618>
                    case 0x60:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_85HZ;
   885c0:	e17fed17 	ldw	r5,-76(fp)
   885c4:	e1bfec17 	ldw	r6,-80(fp)
   885c8:	e0bfed17 	ldw	r2,-76(fp)
   885cc:	e0ffec17 	ldw	r3,-80(fp)
   885d0:	e13ff017 	ldw	r4,-64(fp)
   885d4:	108015e4 	muli	r2,r2,87
   885d8:	10c5883a 	add	r2,r2,r3
   885dc:	1004913a 	slli	r2,r2,4
   885e0:	1105883a 	add	r2,r2,r4
   885e4:	1080c704 	addi	r2,r2,796
   885e8:	10800017 	ldw	r2,0(r2)
   885ec:	11020014 	ori	r4,r2,2048
   885f0:	e0fff017 	ldw	r3,-64(fp)
   885f4:	288015e4 	muli	r2,r5,87
   885f8:	1185883a 	add	r2,r2,r6
   885fc:	1004913a 	slli	r2,r2,4
   88600:	10c5883a 	add	r2,r2,r3
   88604:	1080c704 	addi	r2,r2,796
   88608:	11000015 	stw	r4,0(r2)
                        break;
                    }

                	edid->descriptors[i].cvt[s].supported_v_rate_blank = 0;
   8860c:	e0bfed17 	ldw	r2,-76(fp)
   88610:	e0ffec17 	ldw	r3,-80(fp)
   88614:	e13ff017 	ldw	r4,-64(fp)
   88618:	108015e4 	muli	r2,r2,87
   8861c:	10c5883a 	add	r2,r2,r3
   88620:	1004913a 	slli	r2,r2,4
   88624:	1105883a 	add	r2,r2,r4
   88628:	1080c804 	addi	r2,r2,800
   8862c:	10000015 	stw	zero,0(r2)

                    if (d[2] & 0x10)
   88630:	e0bfea17 	ldw	r2,-88(fp)
   88634:	10800084 	addi	r2,r2,2
   88638:	10800003 	ldbu	r2,0(r2)
   8863c:	10803fcc 	andi	r2,r2,255
   88640:	1080040c 	andi	r2,r2,16
   88644:	1005003a 	cmpeq	r2,r2,zero
   88648:	1000131e 	bne	r2,zero,88698 <edid_decode_v14+0x36a4>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_50HZ | CVT_STANDARD_BLANKING);
   8864c:	e17fed17 	ldw	r5,-76(fp)
   88650:	e1bfec17 	ldw	r6,-80(fp)
   88654:	e0bfed17 	ldw	r2,-76(fp)
   88658:	e0ffec17 	ldw	r3,-80(fp)
   8865c:	e13ff017 	ldw	r4,-64(fp)
   88660:	108015e4 	muli	r2,r2,87
   88664:	10c5883a 	add	r2,r2,r3
   88668:	1004913a 	slli	r2,r2,4
   8866c:	1105883a 	add	r2,r2,r4
   88670:	1080c804 	addi	r2,r2,800
   88674:	10800017 	ldw	r2,0(r2)
   88678:	11004054 	ori	r4,r2,257
   8867c:	e0fff017 	ldw	r3,-64(fp)
   88680:	288015e4 	muli	r2,r5,87
   88684:	1185883a 	add	r2,r2,r6
   88688:	1004913a 	slli	r2,r2,4
   8868c:	10c5883a 	add	r2,r2,r3
   88690:	1080c804 	addi	r2,r2,800
   88694:	11000015 	stw	r4,0(r2)
                    if (d[2] & 0x08)
   88698:	e0bfea17 	ldw	r2,-88(fp)
   8869c:	10800084 	addi	r2,r2,2
   886a0:	10800003 	ldbu	r2,0(r2)
   886a4:	10803fcc 	andi	r2,r2,255
   886a8:	1080020c 	andi	r2,r2,8
   886ac:	1005003a 	cmpeq	r2,r2,zero
   886b0:	1000131e 	bne	r2,zero,88700 <edid_decode_v14+0x370c>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_STANDARD_BLANKING);
   886b4:	e17fed17 	ldw	r5,-76(fp)
   886b8:	e1bfec17 	ldw	r6,-80(fp)
   886bc:	e0bfed17 	ldw	r2,-76(fp)
   886c0:	e0ffec17 	ldw	r3,-80(fp)
   886c4:	e13ff017 	ldw	r4,-64(fp)
   886c8:	108015e4 	muli	r2,r2,87
   886cc:	10c5883a 	add	r2,r2,r3
   886d0:	1004913a 	slli	r2,r2,4
   886d4:	1105883a 	add	r2,r2,r4
   886d8:	1080c804 	addi	r2,r2,800
   886dc:	10800017 	ldw	r2,0(r2)
   886e0:	11008054 	ori	r4,r2,513
   886e4:	e0fff017 	ldw	r3,-64(fp)
   886e8:	288015e4 	muli	r2,r5,87
   886ec:	1185883a 	add	r2,r2,r6
   886f0:	1004913a 	slli	r2,r2,4
   886f4:	10c5883a 	add	r2,r2,r3
   886f8:	1080c804 	addi	r2,r2,800
   886fc:	11000015 	stw	r4,0(r2)
                    if (d[2] & 0x04)
   88700:	e0bfea17 	ldw	r2,-88(fp)
   88704:	10800084 	addi	r2,r2,2
   88708:	10800003 	ldbu	r2,0(r2)
   8870c:	10803fcc 	andi	r2,r2,255
   88710:	1080010c 	andi	r2,r2,4
   88714:	1005003a 	cmpeq	r2,r2,zero
   88718:	1000131e 	bne	r2,zero,88768 <edid_decode_v14+0x3774>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_75HZ | CVT_STANDARD_BLANKING);
   8871c:	e17fed17 	ldw	r5,-76(fp)
   88720:	e1bfec17 	ldw	r6,-80(fp)
   88724:	e0bfed17 	ldw	r2,-76(fp)
   88728:	e0ffec17 	ldw	r3,-80(fp)
   8872c:	e13ff017 	ldw	r4,-64(fp)
   88730:	108015e4 	muli	r2,r2,87
   88734:	10c5883a 	add	r2,r2,r3
   88738:	1004913a 	slli	r2,r2,4
   8873c:	1105883a 	add	r2,r2,r4
   88740:	1080c804 	addi	r2,r2,800
   88744:	10800017 	ldw	r2,0(r2)
   88748:	11010054 	ori	r4,r2,1025
   8874c:	e0fff017 	ldw	r3,-64(fp)
   88750:	288015e4 	muli	r2,r5,87
   88754:	1185883a 	add	r2,r2,r6
   88758:	1004913a 	slli	r2,r2,4
   8875c:	10c5883a 	add	r2,r2,r3
   88760:	1080c804 	addi	r2,r2,800
   88764:	11000015 	stw	r4,0(r2)
                    if (d[2] & 0x02)
   88768:	e0bfea17 	ldw	r2,-88(fp)
   8876c:	10800084 	addi	r2,r2,2
   88770:	10800003 	ldbu	r2,0(r2)
   88774:	10803fcc 	andi	r2,r2,255
   88778:	1080008c 	andi	r2,r2,2
   8877c:	1005003a 	cmpeq	r2,r2,zero
   88780:	1000131e 	bne	r2,zero,887d0 <edid_decode_v14+0x37dc>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_85HZ | CVT_STANDARD_BLANKING);
   88784:	e17fed17 	ldw	r5,-76(fp)
   88788:	e1bfec17 	ldw	r6,-80(fp)
   8878c:	e0bfed17 	ldw	r2,-76(fp)
   88790:	e0ffec17 	ldw	r3,-80(fp)
   88794:	e13ff017 	ldw	r4,-64(fp)
   88798:	108015e4 	muli	r2,r2,87
   8879c:	10c5883a 	add	r2,r2,r3
   887a0:	1004913a 	slli	r2,r2,4
   887a4:	1105883a 	add	r2,r2,r4
   887a8:	1080c804 	addi	r2,r2,800
   887ac:	10800017 	ldw	r2,0(r2)
   887b0:	11020054 	ori	r4,r2,2049
   887b4:	e0fff017 	ldw	r3,-64(fp)
   887b8:	288015e4 	muli	r2,r5,87
   887bc:	1185883a 	add	r2,r2,r6
   887c0:	1004913a 	slli	r2,r2,4
   887c4:	10c5883a 	add	r2,r2,r3
   887c8:	1080c804 	addi	r2,r2,800
   887cc:	11000015 	stw	r4,0(r2)
                    if (d[2] & 0x01)
   887d0:	e0bfea17 	ldw	r2,-88(fp)
   887d4:	10800084 	addi	r2,r2,2
   887d8:	10800003 	ldbu	r2,0(r2)
   887dc:	10803fcc 	andi	r2,r2,255
   887e0:	1080004c 	andi	r2,r2,1
   887e4:	10803fcc 	andi	r2,r2,255
   887e8:	1005003a 	cmpeq	r2,r2,zero
   887ec:	1000131e 	bne	r2,zero,8883c <edid_decode_v14+0x3848>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_REDUCED_BLANKING);
   887f0:	e17fed17 	ldw	r5,-76(fp)
   887f4:	e1bfec17 	ldw	r6,-80(fp)
   887f8:	e0bfed17 	ldw	r2,-76(fp)
   887fc:	e0ffec17 	ldw	r3,-80(fp)
   88800:	e13ff017 	ldw	r4,-64(fp)
   88804:	108015e4 	muli	r2,r2,87
   88808:	10c5883a 	add	r2,r2,r3
   8880c:	1004913a 	slli	r2,r2,4
   88810:	1105883a 	add	r2,r2,r4
   88814:	1080c804 	addi	r2,r2,800
   88818:	10800017 	ldw	r2,0(r2)
   8881c:	11008094 	ori	r4,r2,514
   88820:	e0fff017 	ldw	r3,-64(fp)
   88824:	288015e4 	muli	r2,r5,87
   88828:	1185883a 	add	r2,r2,r6
   8882c:	1004913a 	slli	r2,r2,4
   88830:	10c5883a 	add	r2,r2,r3
   88834:	1080c804 	addi	r2,r2,800
   88838:	11000015 	stw	r4,0(r2)
            	break;

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;

                for (s = 0; s < 4; ++s) {
   8883c:	e0bfec17 	ldw	r2,-80(fp)
   88840:	10800044 	addi	r2,r2,1
   88844:	e0bfec15 	stw	r2,-80(fp)
   88848:	e0bfec17 	ldw	r2,-80(fp)
   8884c:	10800110 	cmplti	r2,r2,4
   88850:	103e851e 	bne	r2,zero,88268 <edid_decode_v14+0x3274>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_85HZ | CVT_STANDARD_BLANKING);
                    if (d[2] & 0x01)
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_REDUCED_BLANKING);
                }

                break;
   88854:	0002ce06 	br	89390 <edid_decode_v14+0x439c>

            case 0xf7:
            	edid->descriptors[i].tag = DTAG_ESTABLISHED_TIMING_III;
   88858:	e0bfed17 	ldw	r2,-76(fp)
   8885c:	e0fff017 	ldw	r3,-64(fp)
   88860:	10815c24 	muli	r2,r2,1392
   88864:	10c5883a 	add	r2,r2,r3
   88868:	10c09a04 	addi	r3,r2,616
   8886c:	00803dc4 	movi	r2,247
   88870:	18800015 	stw	r2,0(r3)

            	eb_establish_timing(&edid->descriptors[i].timing_3[0], 640, 350, 85, c[6] & 0x80);
   88874:	e0bfed17 	ldw	r2,-76(fp)
   88878:	10815c24 	muli	r2,r2,1392
   8887c:	10c0d504 	addi	r3,r2,852
   88880:	e0bff017 	ldw	r2,-64(fp)
   88884:	1889883a 	add	r4,r3,r2
   88888:	e0bfef17 	ldw	r2,-68(fp)
   8888c:	10800184 	addi	r2,r2,6
   88890:	10800003 	ldbu	r2,0(r2)
   88894:	10803fcc 	andi	r2,r2,255
   88898:	1080200c 	andi	r2,r2,128
   8889c:	d8800015 	stw	r2,0(sp)
   888a0:	0140a004 	movi	r5,640
   888a4:	01805784 	movi	r6,350
   888a8:	01c01544 	movi	r7,85
   888ac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1], 640, 400, 85, c[6] & 0x40);
   888b0:	e0bfed17 	ldw	r2,-76(fp)
   888b4:	10815c24 	muli	r2,r2,1392
   888b8:	10c0d504 	addi	r3,r2,852
   888bc:	e0bff017 	ldw	r2,-64(fp)
   888c0:	1885883a 	add	r2,r3,r2
   888c4:	11000604 	addi	r4,r2,24
   888c8:	e0bfef17 	ldw	r2,-68(fp)
   888cc:	10800184 	addi	r2,r2,6
   888d0:	10800003 	ldbu	r2,0(r2)
   888d4:	10803fcc 	andi	r2,r2,255
   888d8:	1080100c 	andi	r2,r2,64
   888dc:	d8800015 	stw	r2,0(sp)
   888e0:	0140a004 	movi	r5,640
   888e4:	01806404 	movi	r6,400
   888e8:	01c01544 	movi	r7,85
   888ec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2], 720, 400, 85, c[6] & 0x20);
   888f0:	e0bfed17 	ldw	r2,-76(fp)
   888f4:	10815c24 	muli	r2,r2,1392
   888f8:	10c0d504 	addi	r3,r2,852
   888fc:	e0bff017 	ldw	r2,-64(fp)
   88900:	1885883a 	add	r2,r3,r2
   88904:	11000c04 	addi	r4,r2,48
   88908:	e0bfef17 	ldw	r2,-68(fp)
   8890c:	10800184 	addi	r2,r2,6
   88910:	10800003 	ldbu	r2,0(r2)
   88914:	10803fcc 	andi	r2,r2,255
   88918:	1080080c 	andi	r2,r2,32
   8891c:	d8800015 	stw	r2,0(sp)
   88920:	0140b404 	movi	r5,720
   88924:	01806404 	movi	r6,400
   88928:	01c01544 	movi	r7,85
   8892c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3], 640, 480, 85, c[6] & 0x10);
   88930:	e0bfed17 	ldw	r2,-76(fp)
   88934:	10815c24 	muli	r2,r2,1392
   88938:	10c0d504 	addi	r3,r2,852
   8893c:	e0bff017 	ldw	r2,-64(fp)
   88940:	1885883a 	add	r2,r3,r2
   88944:	11001204 	addi	r4,r2,72
   88948:	e0bfef17 	ldw	r2,-68(fp)
   8894c:	10800184 	addi	r2,r2,6
   88950:	10800003 	ldbu	r2,0(r2)
   88954:	10803fcc 	andi	r2,r2,255
   88958:	1080040c 	andi	r2,r2,16
   8895c:	d8800015 	stw	r2,0(sp)
   88960:	0140a004 	movi	r5,640
   88964:	01807804 	movi	r6,480
   88968:	01c01544 	movi	r7,85
   8896c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4], 848, 480, 60, c[6] & 0x08);
   88970:	e0bfed17 	ldw	r2,-76(fp)
   88974:	10815c24 	muli	r2,r2,1392
   88978:	10c0d504 	addi	r3,r2,852
   8897c:	e0bff017 	ldw	r2,-64(fp)
   88980:	1885883a 	add	r2,r3,r2
   88984:	11001804 	addi	r4,r2,96
   88988:	e0bfef17 	ldw	r2,-68(fp)
   8898c:	10800184 	addi	r2,r2,6
   88990:	10800003 	ldbu	r2,0(r2)
   88994:	10803fcc 	andi	r2,r2,255
   88998:	1080020c 	andi	r2,r2,8
   8899c:	d8800015 	stw	r2,0(sp)
   889a0:	0140d404 	movi	r5,848
   889a4:	01807804 	movi	r6,480
   889a8:	01c00f04 	movi	r7,60
   889ac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5], 800, 600, 85, c[6] & 0x04);
   889b0:	e0bfed17 	ldw	r2,-76(fp)
   889b4:	10815c24 	muli	r2,r2,1392
   889b8:	10c0d504 	addi	r3,r2,852
   889bc:	e0bff017 	ldw	r2,-64(fp)
   889c0:	1885883a 	add	r2,r3,r2
   889c4:	11001e04 	addi	r4,r2,120
   889c8:	e0bfef17 	ldw	r2,-68(fp)
   889cc:	10800184 	addi	r2,r2,6
   889d0:	10800003 	ldbu	r2,0(r2)
   889d4:	10803fcc 	andi	r2,r2,255
   889d8:	1080010c 	andi	r2,r2,4
   889dc:	d8800015 	stw	r2,0(sp)
   889e0:	0140c804 	movi	r5,800
   889e4:	01809604 	movi	r6,600
   889e8:	01c01544 	movi	r7,85
   889ec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6], 1024, 768, 85, c[6] & 0x02);
   889f0:	e0bfed17 	ldw	r2,-76(fp)
   889f4:	10815c24 	muli	r2,r2,1392
   889f8:	10c0d504 	addi	r3,r2,852
   889fc:	e0bff017 	ldw	r2,-64(fp)
   88a00:	1885883a 	add	r2,r3,r2
   88a04:	11002404 	addi	r4,r2,144
   88a08:	e0bfef17 	ldw	r2,-68(fp)
   88a0c:	10800184 	addi	r2,r2,6
   88a10:	10800003 	ldbu	r2,0(r2)
   88a14:	10803fcc 	andi	r2,r2,255
   88a18:	1080008c 	andi	r2,r2,2
   88a1c:	d8800015 	stw	r2,0(sp)
   88a20:	01410004 	movi	r5,1024
   88a24:	0180c004 	movi	r6,768
   88a28:	01c01544 	movi	r7,85
   88a2c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7], 1152, 864, 75, c[6] & 0x01);
   88a30:	e0bfed17 	ldw	r2,-76(fp)
   88a34:	10815c24 	muli	r2,r2,1392
   88a38:	10c0d504 	addi	r3,r2,852
   88a3c:	e0bff017 	ldw	r2,-64(fp)
   88a40:	1885883a 	add	r2,r3,r2
   88a44:	11002a04 	addi	r4,r2,168
   88a48:	e0bfef17 	ldw	r2,-68(fp)
   88a4c:	10800184 	addi	r2,r2,6
   88a50:	10800003 	ldbu	r2,0(r2)
   88a54:	10803fcc 	andi	r2,r2,255
   88a58:	1080004c 	andi	r2,r2,1
   88a5c:	d8800015 	stw	r2,0(sp)
   88a60:	01412004 	movi	r5,1152
   88a64:	0180d804 	movi	r6,864
   88a68:	01c012c4 	movi	r7,75
   88a6c:	00895740 	call	89574 <eb_establish_timing>

				eb_establish_timing_rb(&edid->descriptors[i].timing_3[0 + 1 * 8], 1280, 768, 60, c[7] & 0x80);
   88a70:	e0bfed17 	ldw	r2,-76(fp)
   88a74:	10815c24 	muli	r2,r2,1392
   88a78:	10c0d504 	addi	r3,r2,852
   88a7c:	e0bff017 	ldw	r2,-64(fp)
   88a80:	1885883a 	add	r2,r3,r2
   88a84:	11003004 	addi	r4,r2,192
   88a88:	e0bfef17 	ldw	r2,-68(fp)
   88a8c:	108001c4 	addi	r2,r2,7
   88a90:	10800003 	ldbu	r2,0(r2)
   88a94:	10803fcc 	andi	r2,r2,255
   88a98:	1080200c 	andi	r2,r2,128
   88a9c:	d8800015 	stw	r2,0(sp)
   88aa0:	01414004 	movi	r5,1280
   88aa4:	0180c004 	movi	r6,768
   88aa8:	01c00f04 	movi	r7,60
   88aac:	00894bc0 	call	894bc <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 1 * 8], 1280, 768, 60, c[7] & 0x40);
   88ab0:	e0bfed17 	ldw	r2,-76(fp)
   88ab4:	10815c24 	muli	r2,r2,1392
   88ab8:	10c0d504 	addi	r3,r2,852
   88abc:	e0bff017 	ldw	r2,-64(fp)
   88ac0:	1885883a 	add	r2,r3,r2
   88ac4:	11003604 	addi	r4,r2,216
   88ac8:	e0bfef17 	ldw	r2,-68(fp)
   88acc:	108001c4 	addi	r2,r2,7
   88ad0:	10800003 	ldbu	r2,0(r2)
   88ad4:	10803fcc 	andi	r2,r2,255
   88ad8:	1080100c 	andi	r2,r2,64
   88adc:	d8800015 	stw	r2,0(sp)
   88ae0:	01414004 	movi	r5,1280
   88ae4:	0180c004 	movi	r6,768
   88ae8:	01c00f04 	movi	r7,60
   88aec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 1 * 8], 1280, 768, 75, c[7] & 0x20);
   88af0:	e0bfed17 	ldw	r2,-76(fp)
   88af4:	10815c24 	muli	r2,r2,1392
   88af8:	10c0d504 	addi	r3,r2,852
   88afc:	e0bff017 	ldw	r2,-64(fp)
   88b00:	1885883a 	add	r2,r3,r2
   88b04:	11003c04 	addi	r4,r2,240
   88b08:	e0bfef17 	ldw	r2,-68(fp)
   88b0c:	108001c4 	addi	r2,r2,7
   88b10:	10800003 	ldbu	r2,0(r2)
   88b14:	10803fcc 	andi	r2,r2,255
   88b18:	1080080c 	andi	r2,r2,32
   88b1c:	d8800015 	stw	r2,0(sp)
   88b20:	01414004 	movi	r5,1280
   88b24:	0180c004 	movi	r6,768
   88b28:	01c012c4 	movi	r7,75
   88b2c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 1 * 8], 1280, 768, 85, c[7] & 0x10);
   88b30:	e0bfed17 	ldw	r2,-76(fp)
   88b34:	10815c24 	muli	r2,r2,1392
   88b38:	10c0d504 	addi	r3,r2,852
   88b3c:	e0bff017 	ldw	r2,-64(fp)
   88b40:	1885883a 	add	r2,r3,r2
   88b44:	11004204 	addi	r4,r2,264
   88b48:	e0bfef17 	ldw	r2,-68(fp)
   88b4c:	108001c4 	addi	r2,r2,7
   88b50:	10800003 	ldbu	r2,0(r2)
   88b54:	10803fcc 	andi	r2,r2,255
   88b58:	1080040c 	andi	r2,r2,16
   88b5c:	d8800015 	stw	r2,0(sp)
   88b60:	01414004 	movi	r5,1280
   88b64:	0180c004 	movi	r6,768
   88b68:	01c01544 	movi	r7,85
   88b6c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 1 * 8], 1280, 960, 60, c[7] & 0x08);
   88b70:	e0bfed17 	ldw	r2,-76(fp)
   88b74:	10815c24 	muli	r2,r2,1392
   88b78:	10c0d504 	addi	r3,r2,852
   88b7c:	e0bff017 	ldw	r2,-64(fp)
   88b80:	1885883a 	add	r2,r3,r2
   88b84:	11004804 	addi	r4,r2,288
   88b88:	e0bfef17 	ldw	r2,-68(fp)
   88b8c:	108001c4 	addi	r2,r2,7
   88b90:	10800003 	ldbu	r2,0(r2)
   88b94:	10803fcc 	andi	r2,r2,255
   88b98:	1080020c 	andi	r2,r2,8
   88b9c:	d8800015 	stw	r2,0(sp)
   88ba0:	01414004 	movi	r5,1280
   88ba4:	0180f004 	movi	r6,960
   88ba8:	01c00f04 	movi	r7,60
   88bac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 1 * 8], 1280, 960, 85, c[7] & 0x04);
   88bb0:	e0bfed17 	ldw	r2,-76(fp)
   88bb4:	10815c24 	muli	r2,r2,1392
   88bb8:	10c0d504 	addi	r3,r2,852
   88bbc:	e0bff017 	ldw	r2,-64(fp)
   88bc0:	1885883a 	add	r2,r3,r2
   88bc4:	11004e04 	addi	r4,r2,312
   88bc8:	e0bfef17 	ldw	r2,-68(fp)
   88bcc:	108001c4 	addi	r2,r2,7
   88bd0:	10800003 	ldbu	r2,0(r2)
   88bd4:	10803fcc 	andi	r2,r2,255
   88bd8:	1080010c 	andi	r2,r2,4
   88bdc:	d8800015 	stw	r2,0(sp)
   88be0:	01414004 	movi	r5,1280
   88be4:	0180f004 	movi	r6,960
   88be8:	01c01544 	movi	r7,85
   88bec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 1 * 8], 1280, 1024, 60, c[7] & 0x02);
   88bf0:	e0bfed17 	ldw	r2,-76(fp)
   88bf4:	10815c24 	muli	r2,r2,1392
   88bf8:	10c0d504 	addi	r3,r2,852
   88bfc:	e0bff017 	ldw	r2,-64(fp)
   88c00:	1885883a 	add	r2,r3,r2
   88c04:	11005404 	addi	r4,r2,336
   88c08:	e0bfef17 	ldw	r2,-68(fp)
   88c0c:	108001c4 	addi	r2,r2,7
   88c10:	10800003 	ldbu	r2,0(r2)
   88c14:	10803fcc 	andi	r2,r2,255
   88c18:	1080008c 	andi	r2,r2,2
   88c1c:	d8800015 	stw	r2,0(sp)
   88c20:	01414004 	movi	r5,1280
   88c24:	01810004 	movi	r6,1024
   88c28:	01c00f04 	movi	r7,60
   88c2c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 1 * 8], 1280, 1024, 85, c[7] & 0x01);
   88c30:	e0bfed17 	ldw	r2,-76(fp)
   88c34:	10815c24 	muli	r2,r2,1392
   88c38:	10c0d504 	addi	r3,r2,852
   88c3c:	e0bff017 	ldw	r2,-64(fp)
   88c40:	1885883a 	add	r2,r3,r2
   88c44:	11005a04 	addi	r4,r2,360
   88c48:	e0bfef17 	ldw	r2,-68(fp)
   88c4c:	108001c4 	addi	r2,r2,7
   88c50:	10800003 	ldbu	r2,0(r2)
   88c54:	10803fcc 	andi	r2,r2,255
   88c58:	1080004c 	andi	r2,r2,1
   88c5c:	d8800015 	stw	r2,0(sp)
   88c60:	01414004 	movi	r5,1280
   88c64:	01810004 	movi	r6,1024
   88c68:	01c01544 	movi	r7,85
   88c6c:	00895740 	call	89574 <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 2 * 8], 1360, 768, 60, c[8] & 0x80);
   88c70:	e0bfed17 	ldw	r2,-76(fp)
   88c74:	10815c24 	muli	r2,r2,1392
   88c78:	10c0d504 	addi	r3,r2,852
   88c7c:	e0bff017 	ldw	r2,-64(fp)
   88c80:	1885883a 	add	r2,r3,r2
   88c84:	11006004 	addi	r4,r2,384
   88c88:	e0bfef17 	ldw	r2,-68(fp)
   88c8c:	10800204 	addi	r2,r2,8
   88c90:	10800003 	ldbu	r2,0(r2)
   88c94:	10803fcc 	andi	r2,r2,255
   88c98:	1080200c 	andi	r2,r2,128
   88c9c:	d8800015 	stw	r2,0(sp)
   88ca0:	01415404 	movi	r5,1360
   88ca4:	0180c004 	movi	r6,768
   88ca8:	01c00f04 	movi	r7,60
   88cac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[1 + 2 * 8], 1440, 900, 60, c[8] & 0x40);
   88cb0:	e0bfed17 	ldw	r2,-76(fp)
   88cb4:	10815c24 	muli	r2,r2,1392
   88cb8:	10c0d504 	addi	r3,r2,852
   88cbc:	e0bff017 	ldw	r2,-64(fp)
   88cc0:	1885883a 	add	r2,r3,r2
   88cc4:	11006604 	addi	r4,r2,408
   88cc8:	e0bfef17 	ldw	r2,-68(fp)
   88ccc:	10800204 	addi	r2,r2,8
   88cd0:	10800003 	ldbu	r2,0(r2)
   88cd4:	10803fcc 	andi	r2,r2,255
   88cd8:	1080100c 	andi	r2,r2,64
   88cdc:	d8800015 	stw	r2,0(sp)
   88ce0:	01416804 	movi	r5,1440
   88ce4:	0180e104 	movi	r6,900
   88ce8:	01c00f04 	movi	r7,60
   88cec:	00894bc0 	call	894bc <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 2 * 8], 1440, 900, 60, c[8] & 0x20);
   88cf0:	e0bfed17 	ldw	r2,-76(fp)
   88cf4:	10815c24 	muli	r2,r2,1392
   88cf8:	10c0d504 	addi	r3,r2,852
   88cfc:	e0bff017 	ldw	r2,-64(fp)
   88d00:	1885883a 	add	r2,r3,r2
   88d04:	11006c04 	addi	r4,r2,432
   88d08:	e0bfef17 	ldw	r2,-68(fp)
   88d0c:	10800204 	addi	r2,r2,8
   88d10:	10800003 	ldbu	r2,0(r2)
   88d14:	10803fcc 	andi	r2,r2,255
   88d18:	1080080c 	andi	r2,r2,32
   88d1c:	d8800015 	stw	r2,0(sp)
   88d20:	01416804 	movi	r5,1440
   88d24:	0180e104 	movi	r6,900
   88d28:	01c00f04 	movi	r7,60
   88d2c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 2 * 8], 1440, 900, 75, c[8] & 0x10);
   88d30:	e0bfed17 	ldw	r2,-76(fp)
   88d34:	10815c24 	muli	r2,r2,1392
   88d38:	10c0d504 	addi	r3,r2,852
   88d3c:	e0bff017 	ldw	r2,-64(fp)
   88d40:	1885883a 	add	r2,r3,r2
   88d44:	11007204 	addi	r4,r2,456
   88d48:	e0bfef17 	ldw	r2,-68(fp)
   88d4c:	10800204 	addi	r2,r2,8
   88d50:	10800003 	ldbu	r2,0(r2)
   88d54:	10803fcc 	andi	r2,r2,255
   88d58:	1080040c 	andi	r2,r2,16
   88d5c:	d8800015 	stw	r2,0(sp)
   88d60:	01416804 	movi	r5,1440
   88d64:	0180e104 	movi	r6,900
   88d68:	01c012c4 	movi	r7,75
   88d6c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 2 * 8], 1440, 900, 85, c[8] & 0x08);
   88d70:	e0bfed17 	ldw	r2,-76(fp)
   88d74:	10815c24 	muli	r2,r2,1392
   88d78:	10c0d504 	addi	r3,r2,852
   88d7c:	e0bff017 	ldw	r2,-64(fp)
   88d80:	1885883a 	add	r2,r3,r2
   88d84:	11007804 	addi	r4,r2,480
   88d88:	e0bfef17 	ldw	r2,-68(fp)
   88d8c:	10800204 	addi	r2,r2,8
   88d90:	10800003 	ldbu	r2,0(r2)
   88d94:	10803fcc 	andi	r2,r2,255
   88d98:	1080020c 	andi	r2,r2,8
   88d9c:	d8800015 	stw	r2,0(sp)
   88da0:	01416804 	movi	r5,1440
   88da4:	0180e104 	movi	r6,900
   88da8:	01c01544 	movi	r7,85
   88dac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[5 + 2 * 8], 1400, 1050, 60, c[8] & 0x04);
   88db0:	e0bfed17 	ldw	r2,-76(fp)
   88db4:	10815c24 	muli	r2,r2,1392
   88db8:	10c0d504 	addi	r3,r2,852
   88dbc:	e0bff017 	ldw	r2,-64(fp)
   88dc0:	1885883a 	add	r2,r3,r2
   88dc4:	11007e04 	addi	r4,r2,504
   88dc8:	e0bfef17 	ldw	r2,-68(fp)
   88dcc:	10800204 	addi	r2,r2,8
   88dd0:	10800003 	ldbu	r2,0(r2)
   88dd4:	10803fcc 	andi	r2,r2,255
   88dd8:	1080010c 	andi	r2,r2,4
   88ddc:	d8800015 	stw	r2,0(sp)
   88de0:	01415e04 	movi	r5,1400
   88de4:	01810684 	movi	r6,1050
   88de8:	01c00f04 	movi	r7,60
   88dec:	00894bc0 	call	894bc <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 2 * 8], 1400, 1050, 60, c[8] & 0x02);
   88df0:	e0bfed17 	ldw	r2,-76(fp)
   88df4:	10815c24 	muli	r2,r2,1392
   88df8:	10c0d504 	addi	r3,r2,852
   88dfc:	e0bff017 	ldw	r2,-64(fp)
   88e00:	1885883a 	add	r2,r3,r2
   88e04:	11008404 	addi	r4,r2,528
   88e08:	e0bfef17 	ldw	r2,-68(fp)
   88e0c:	10800204 	addi	r2,r2,8
   88e10:	10800003 	ldbu	r2,0(r2)
   88e14:	10803fcc 	andi	r2,r2,255
   88e18:	1080008c 	andi	r2,r2,2
   88e1c:	d8800015 	stw	r2,0(sp)
   88e20:	01415e04 	movi	r5,1400
   88e24:	01810684 	movi	r6,1050
   88e28:	01c00f04 	movi	r7,60
   88e2c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 2 * 8], 1400, 1050, 75, c[8] & 0x01);
   88e30:	e0bfed17 	ldw	r2,-76(fp)
   88e34:	10815c24 	muli	r2,r2,1392
   88e38:	10c0d504 	addi	r3,r2,852
   88e3c:	e0bff017 	ldw	r2,-64(fp)
   88e40:	1885883a 	add	r2,r3,r2
   88e44:	11008a04 	addi	r4,r2,552
   88e48:	e0bfef17 	ldw	r2,-68(fp)
   88e4c:	10800204 	addi	r2,r2,8
   88e50:	10800003 	ldbu	r2,0(r2)
   88e54:	10803fcc 	andi	r2,r2,255
   88e58:	1080004c 	andi	r2,r2,1
   88e5c:	d8800015 	stw	r2,0(sp)
   88e60:	01415e04 	movi	r5,1400
   88e64:	01810684 	movi	r6,1050
   88e68:	01c012c4 	movi	r7,75
   88e6c:	00895740 	call	89574 <eb_establish_timing>

                eb_establish_timing(&edid->descriptors[i].timing_3[0 + 3 * 8], 1400, 1050, 85, c[9] & 0x80);
   88e70:	e0bfed17 	ldw	r2,-76(fp)
   88e74:	10815c24 	muli	r2,r2,1392
   88e78:	10c0d504 	addi	r3,r2,852
   88e7c:	e0bff017 	ldw	r2,-64(fp)
   88e80:	1885883a 	add	r2,r3,r2
   88e84:	11009004 	addi	r4,r2,576
   88e88:	e0bfef17 	ldw	r2,-68(fp)
   88e8c:	10800244 	addi	r2,r2,9
   88e90:	10800003 	ldbu	r2,0(r2)
   88e94:	10803fcc 	andi	r2,r2,255
   88e98:	1080200c 	andi	r2,r2,128
   88e9c:	d8800015 	stw	r2,0(sp)
   88ea0:	01415e04 	movi	r5,1400
   88ea4:	01810684 	movi	r6,1050
   88ea8:	01c01544 	movi	r7,85
   88eac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 3 * 8], 1680, 1050, 60, c[9] & 0x40);
   88eb0:	e0bfed17 	ldw	r2,-76(fp)
   88eb4:	10815c24 	muli	r2,r2,1392
   88eb8:	10c0d504 	addi	r3,r2,852
   88ebc:	e0bff017 	ldw	r2,-64(fp)
   88ec0:	1885883a 	add	r2,r3,r2
   88ec4:	11009604 	addi	r4,r2,600
   88ec8:	e0bfef17 	ldw	r2,-68(fp)
   88ecc:	10800244 	addi	r2,r2,9
   88ed0:	10800003 	ldbu	r2,0(r2)
   88ed4:	10803fcc 	andi	r2,r2,255
   88ed8:	1080100c 	andi	r2,r2,64
   88edc:	d8800015 	stw	r2,0(sp)
   88ee0:	0141a404 	movi	r5,1680
   88ee4:	01810684 	movi	r6,1050
   88ee8:	01c00f04 	movi	r7,60
   88eec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 3 * 8], 1680, 1050, 60, c[9] & 0x20);
   88ef0:	e0bfed17 	ldw	r2,-76(fp)
   88ef4:	10815c24 	muli	r2,r2,1392
   88ef8:	10c0d504 	addi	r3,r2,852
   88efc:	e0bff017 	ldw	r2,-64(fp)
   88f00:	1885883a 	add	r2,r3,r2
   88f04:	11009c04 	addi	r4,r2,624
   88f08:	e0bfef17 	ldw	r2,-68(fp)
   88f0c:	10800244 	addi	r2,r2,9
   88f10:	10800003 	ldbu	r2,0(r2)
   88f14:	10803fcc 	andi	r2,r2,255
   88f18:	1080080c 	andi	r2,r2,32
   88f1c:	d8800015 	stw	r2,0(sp)
   88f20:	0141a404 	movi	r5,1680
   88f24:	01810684 	movi	r6,1050
   88f28:	01c00f04 	movi	r7,60
   88f2c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 3 * 8], 1680, 1050, 75, c[9] & 0x10);
   88f30:	e0bfed17 	ldw	r2,-76(fp)
   88f34:	10815c24 	muli	r2,r2,1392
   88f38:	10c0d504 	addi	r3,r2,852
   88f3c:	e0bff017 	ldw	r2,-64(fp)
   88f40:	1885883a 	add	r2,r3,r2
   88f44:	1100a204 	addi	r4,r2,648
   88f48:	e0bfef17 	ldw	r2,-68(fp)
   88f4c:	10800244 	addi	r2,r2,9
   88f50:	10800003 	ldbu	r2,0(r2)
   88f54:	10803fcc 	andi	r2,r2,255
   88f58:	1080040c 	andi	r2,r2,16
   88f5c:	d8800015 	stw	r2,0(sp)
   88f60:	0141a404 	movi	r5,1680
   88f64:	01810684 	movi	r6,1050
   88f68:	01c012c4 	movi	r7,75
   88f6c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 3 * 8], 1680, 1050, 85, c[9] & 0x08);
   88f70:	e0bfed17 	ldw	r2,-76(fp)
   88f74:	10815c24 	muli	r2,r2,1392
   88f78:	10c0d504 	addi	r3,r2,852
   88f7c:	e0bff017 	ldw	r2,-64(fp)
   88f80:	1885883a 	add	r2,r3,r2
   88f84:	1100a804 	addi	r4,r2,672
   88f88:	e0bfef17 	ldw	r2,-68(fp)
   88f8c:	10800244 	addi	r2,r2,9
   88f90:	10800003 	ldbu	r2,0(r2)
   88f94:	10803fcc 	andi	r2,r2,255
   88f98:	1080020c 	andi	r2,r2,8
   88f9c:	d8800015 	stw	r2,0(sp)
   88fa0:	0141a404 	movi	r5,1680
   88fa4:	01810684 	movi	r6,1050
   88fa8:	01c01544 	movi	r7,85
   88fac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 3 * 8], 1600, 1200, 60, c[9] & 0x04);
   88fb0:	e0bfed17 	ldw	r2,-76(fp)
   88fb4:	10815c24 	muli	r2,r2,1392
   88fb8:	10c0d504 	addi	r3,r2,852
   88fbc:	e0bff017 	ldw	r2,-64(fp)
   88fc0:	1885883a 	add	r2,r3,r2
   88fc4:	1100ae04 	addi	r4,r2,696
   88fc8:	e0bfef17 	ldw	r2,-68(fp)
   88fcc:	10800244 	addi	r2,r2,9
   88fd0:	10800003 	ldbu	r2,0(r2)
   88fd4:	10803fcc 	andi	r2,r2,255
   88fd8:	1080010c 	andi	r2,r2,4
   88fdc:	d8800015 	stw	r2,0(sp)
   88fe0:	01419004 	movi	r5,1600
   88fe4:	01812c04 	movi	r6,1200
   88fe8:	01c00f04 	movi	r7,60
   88fec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 3 * 8], 1600, 1200, 65, c[9] & 0x02);
   88ff0:	e0bfed17 	ldw	r2,-76(fp)
   88ff4:	10815c24 	muli	r2,r2,1392
   88ff8:	10c0d504 	addi	r3,r2,852
   88ffc:	e0bff017 	ldw	r2,-64(fp)
   89000:	1885883a 	add	r2,r3,r2
   89004:	1100b404 	addi	r4,r2,720
   89008:	e0bfef17 	ldw	r2,-68(fp)
   8900c:	10800244 	addi	r2,r2,9
   89010:	10800003 	ldbu	r2,0(r2)
   89014:	10803fcc 	andi	r2,r2,255
   89018:	1080008c 	andi	r2,r2,2
   8901c:	d8800015 	stw	r2,0(sp)
   89020:	01419004 	movi	r5,1600
   89024:	01812c04 	movi	r6,1200
   89028:	01c01044 	movi	r7,65
   8902c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 3 * 8], 1600, 1200, 70, c[9] & 0x01);
   89030:	e0bfed17 	ldw	r2,-76(fp)
   89034:	10815c24 	muli	r2,r2,1392
   89038:	10c0d504 	addi	r3,r2,852
   8903c:	e0bff017 	ldw	r2,-64(fp)
   89040:	1885883a 	add	r2,r3,r2
   89044:	1100ba04 	addi	r4,r2,744
   89048:	e0bfef17 	ldw	r2,-68(fp)
   8904c:	10800244 	addi	r2,r2,9
   89050:	10800003 	ldbu	r2,0(r2)
   89054:	10803fcc 	andi	r2,r2,255
   89058:	1080004c 	andi	r2,r2,1
   8905c:	d8800015 	stw	r2,0(sp)
   89060:	01419004 	movi	r5,1600
   89064:	01812c04 	movi	r6,1200
   89068:	01c01184 	movi	r7,70
   8906c:	00895740 	call	89574 <eb_establish_timing>

               	eb_establish_timing(&edid->descriptors[i].timing_3[0 + 4 * 8], 1600, 1200, 75, c[10] & 0x80);
   89070:	e0bfed17 	ldw	r2,-76(fp)
   89074:	10815c24 	muli	r2,r2,1392
   89078:	10c0d504 	addi	r3,r2,852
   8907c:	e0bff017 	ldw	r2,-64(fp)
   89080:	1885883a 	add	r2,r3,r2
   89084:	1100c004 	addi	r4,r2,768
   89088:	e0bfef17 	ldw	r2,-68(fp)
   8908c:	10800284 	addi	r2,r2,10
   89090:	10800003 	ldbu	r2,0(r2)
   89094:	10803fcc 	andi	r2,r2,255
   89098:	1080200c 	andi	r2,r2,128
   8909c:	d8800015 	stw	r2,0(sp)
   890a0:	01419004 	movi	r5,1600
   890a4:	01812c04 	movi	r6,1200
   890a8:	01c012c4 	movi	r7,75
   890ac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 4 * 8], 1600, 1200, 85, c[10] & 0x40);
   890b0:	e0bfed17 	ldw	r2,-76(fp)
   890b4:	10815c24 	muli	r2,r2,1392
   890b8:	10c0d504 	addi	r3,r2,852
   890bc:	e0bff017 	ldw	r2,-64(fp)
   890c0:	1885883a 	add	r2,r3,r2
   890c4:	1100c604 	addi	r4,r2,792
   890c8:	e0bfef17 	ldw	r2,-68(fp)
   890cc:	10800284 	addi	r2,r2,10
   890d0:	10800003 	ldbu	r2,0(r2)
   890d4:	10803fcc 	andi	r2,r2,255
   890d8:	1080100c 	andi	r2,r2,64
   890dc:	d8800015 	stw	r2,0(sp)
   890e0:	01419004 	movi	r5,1600
   890e4:	01812c04 	movi	r6,1200
   890e8:	01c01544 	movi	r7,85
   890ec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 4 * 8], 1792, 1344, 60, c[10] & 0x20);
   890f0:	e0bfed17 	ldw	r2,-76(fp)
   890f4:	10815c24 	muli	r2,r2,1392
   890f8:	10c0d504 	addi	r3,r2,852
   890fc:	e0bff017 	ldw	r2,-64(fp)
   89100:	1885883a 	add	r2,r3,r2
   89104:	1100cc04 	addi	r4,r2,816
   89108:	e0bfef17 	ldw	r2,-68(fp)
   8910c:	10800284 	addi	r2,r2,10
   89110:	10800003 	ldbu	r2,0(r2)
   89114:	10803fcc 	andi	r2,r2,255
   89118:	1080080c 	andi	r2,r2,32
   8911c:	d8800015 	stw	r2,0(sp)
   89120:	0141c004 	movi	r5,1792
   89124:	01815004 	movi	r6,1344
   89128:	01c00f04 	movi	r7,60
   8912c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 4 * 8], 1792, 1344, 75, c[10] & 0x10);
   89130:	e0bfed17 	ldw	r2,-76(fp)
   89134:	10815c24 	muli	r2,r2,1392
   89138:	10c0d504 	addi	r3,r2,852
   8913c:	e0bff017 	ldw	r2,-64(fp)
   89140:	1885883a 	add	r2,r3,r2
   89144:	1100d204 	addi	r4,r2,840
   89148:	e0bfef17 	ldw	r2,-68(fp)
   8914c:	10800284 	addi	r2,r2,10
   89150:	10800003 	ldbu	r2,0(r2)
   89154:	10803fcc 	andi	r2,r2,255
   89158:	1080040c 	andi	r2,r2,16
   8915c:	d8800015 	stw	r2,0(sp)
   89160:	0141c004 	movi	r5,1792
   89164:	01815004 	movi	r6,1344
   89168:	01c012c4 	movi	r7,75
   8916c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 4 * 8], 1856, 1392, 60, c[10] & 0x08);
   89170:	e0bfed17 	ldw	r2,-76(fp)
   89174:	10815c24 	muli	r2,r2,1392
   89178:	10c0d504 	addi	r3,r2,852
   8917c:	e0bff017 	ldw	r2,-64(fp)
   89180:	1885883a 	add	r2,r3,r2
   89184:	1100d804 	addi	r4,r2,864
   89188:	e0bfef17 	ldw	r2,-68(fp)
   8918c:	10800284 	addi	r2,r2,10
   89190:	10800003 	ldbu	r2,0(r2)
   89194:	10803fcc 	andi	r2,r2,255
   89198:	1080020c 	andi	r2,r2,8
   8919c:	d8800015 	stw	r2,0(sp)
   891a0:	0141d004 	movi	r5,1856
   891a4:	01815c04 	movi	r6,1392
   891a8:	01c00f04 	movi	r7,60
   891ac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 4 * 8], 1856, 1392, 75, c[10] & 0x04);
   891b0:	e0bfed17 	ldw	r2,-76(fp)
   891b4:	10815c24 	muli	r2,r2,1392
   891b8:	10c0d504 	addi	r3,r2,852
   891bc:	e0bff017 	ldw	r2,-64(fp)
   891c0:	1885883a 	add	r2,r3,r2
   891c4:	1100de04 	addi	r4,r2,888
   891c8:	e0bfef17 	ldw	r2,-68(fp)
   891cc:	10800284 	addi	r2,r2,10
   891d0:	10800003 	ldbu	r2,0(r2)
   891d4:	10803fcc 	andi	r2,r2,255
   891d8:	1080010c 	andi	r2,r2,4
   891dc:	d8800015 	stw	r2,0(sp)
   891e0:	0141d004 	movi	r5,1856
   891e4:	01815c04 	movi	r6,1392
   891e8:	01c012c4 	movi	r7,75
   891ec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[6 + 4 * 8], 1920, 1200, 60, c[10] & 0x02);
   891f0:	e0bfed17 	ldw	r2,-76(fp)
   891f4:	10815c24 	muli	r2,r2,1392
   891f8:	10c0d504 	addi	r3,r2,852
   891fc:	e0bff017 	ldw	r2,-64(fp)
   89200:	1885883a 	add	r2,r3,r2
   89204:	1100e404 	addi	r4,r2,912
   89208:	e0bfef17 	ldw	r2,-68(fp)
   8920c:	10800284 	addi	r2,r2,10
   89210:	10800003 	ldbu	r2,0(r2)
   89214:	10803fcc 	andi	r2,r2,255
   89218:	1080008c 	andi	r2,r2,2
   8921c:	d8800015 	stw	r2,0(sp)
   89220:	0141e004 	movi	r5,1920
   89224:	01812c04 	movi	r6,1200
   89228:	01c00f04 	movi	r7,60
   8922c:	00894bc0 	call	894bc <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 4 * 8], 1920, 1200, 60, c[10] & 0x01);
   89230:	e0bfed17 	ldw	r2,-76(fp)
   89234:	10815c24 	muli	r2,r2,1392
   89238:	10c0d504 	addi	r3,r2,852
   8923c:	e0bff017 	ldw	r2,-64(fp)
   89240:	1885883a 	add	r2,r3,r2
   89244:	1100ea04 	addi	r4,r2,936
   89248:	e0bfef17 	ldw	r2,-68(fp)
   8924c:	10800284 	addi	r2,r2,10
   89250:	10800003 	ldbu	r2,0(r2)
   89254:	10803fcc 	andi	r2,r2,255
   89258:	1080004c 	andi	r2,r2,1
   8925c:	d8800015 	stw	r2,0(sp)
   89260:	0141e004 	movi	r5,1920
   89264:	01812c04 	movi	r6,1200
   89268:	01c00f04 	movi	r7,60
   8926c:	00895740 	call	89574 <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 5 * 8], 1920, 1200, 75, c[11] & 0x80);
   89270:	e0bfed17 	ldw	r2,-76(fp)
   89274:	10815c24 	muli	r2,r2,1392
   89278:	10c0d504 	addi	r3,r2,852
   8927c:	e0bff017 	ldw	r2,-64(fp)
   89280:	1885883a 	add	r2,r3,r2
   89284:	1100f004 	addi	r4,r2,960
   89288:	e0bfef17 	ldw	r2,-68(fp)
   8928c:	108002c4 	addi	r2,r2,11
   89290:	10800003 	ldbu	r2,0(r2)
   89294:	10803fcc 	andi	r2,r2,255
   89298:	1080200c 	andi	r2,r2,128
   8929c:	d8800015 	stw	r2,0(sp)
   892a0:	0141e004 	movi	r5,1920
   892a4:	01812c04 	movi	r6,1200
   892a8:	01c012c4 	movi	r7,75
   892ac:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 5 * 8], 1920, 1200, 85, c[11] & 0x40);
   892b0:	e0bfed17 	ldw	r2,-76(fp)
   892b4:	10815c24 	muli	r2,r2,1392
   892b8:	10c0d504 	addi	r3,r2,852
   892bc:	e0bff017 	ldw	r2,-64(fp)
   892c0:	1885883a 	add	r2,r3,r2
   892c4:	1100f604 	addi	r4,r2,984
   892c8:	e0bfef17 	ldw	r2,-68(fp)
   892cc:	108002c4 	addi	r2,r2,11
   892d0:	10800003 	ldbu	r2,0(r2)
   892d4:	10803fcc 	andi	r2,r2,255
   892d8:	1080100c 	andi	r2,r2,64
   892dc:	d8800015 	stw	r2,0(sp)
   892e0:	0141e004 	movi	r5,1920
   892e4:	01812c04 	movi	r6,1200
   892e8:	01c01544 	movi	r7,85
   892ec:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 5 * 8], 1920, 1440, 65, c[11] & 0x20);
   892f0:	e0bfed17 	ldw	r2,-76(fp)
   892f4:	10815c24 	muli	r2,r2,1392
   892f8:	10c0d504 	addi	r3,r2,852
   892fc:	e0bff017 	ldw	r2,-64(fp)
   89300:	1885883a 	add	r2,r3,r2
   89304:	1100fc04 	addi	r4,r2,1008
   89308:	e0bfef17 	ldw	r2,-68(fp)
   8930c:	108002c4 	addi	r2,r2,11
   89310:	10800003 	ldbu	r2,0(r2)
   89314:	10803fcc 	andi	r2,r2,255
   89318:	1080080c 	andi	r2,r2,32
   8931c:	d8800015 	stw	r2,0(sp)
   89320:	0141e004 	movi	r5,1920
   89324:	01816804 	movi	r6,1440
   89328:	01c01044 	movi	r7,65
   8932c:	00895740 	call	89574 <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 5 * 8], 1920, 1440, 75, c[11] & 0x10);
   89330:	e0bfed17 	ldw	r2,-76(fp)
   89334:	10815c24 	muli	r2,r2,1392
   89338:	10c0d504 	addi	r3,r2,852
   8933c:	e0bff017 	ldw	r2,-64(fp)
   89340:	1885883a 	add	r2,r3,r2
   89344:	11010204 	addi	r4,r2,1032
   89348:	e0bfef17 	ldw	r2,-68(fp)
   8934c:	108002c4 	addi	r2,r2,11
   89350:	10800003 	ldbu	r2,0(r2)
   89354:	10803fcc 	andi	r2,r2,255
   89358:	1080040c 	andi	r2,r2,16
   8935c:	d8800015 	stw	r2,0(sp)
   89360:	0141e004 	movi	r5,1920
   89364:	01816804 	movi	r6,1440
   89368:	01c012c4 	movi	r7,75
   8936c:	00895740 	call	89574 <eb_establish_timing>
                break;
   89370:	00000706 	br	89390 <edid_decode_v14+0x439c>

            case 0x10:
            	edid->descriptors[i].tag = DTAG_DUMMY;
   89374:	e0bfed17 	ldw	r2,-76(fp)
   89378:	e0fff017 	ldw	r3,-64(fp)
   8937c:	10815c24 	muli	r2,r2,1392
   89380:	10c5883a 	add	r2,r2,r3
   89384:	10c09a04 	addi	r3,r2,616
   89388:	00800404 	movi	r2,16
   8938c:	18800015 	stw	r2,0(r3)

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {
   89390:	e0bfed17 	ldw	r2,-76(fp)
   89394:	10800044 	addi	r2,r2,1
   89398:	e0bfed15 	stw	r2,-76(fp)
   8939c:	e0bfed17 	ldw	r2,-76(fp)
   893a0:	10800110 	cmplti	r2,r2,4
   893a4:	10336e1e 	bne	r2,zero,86160 <edid_decode_v14+0x116c>
            }
        }
    }

    // extension flag & checksum
    c = &edid_bin[0x7e];
   893a8:	e0bff117 	ldw	r2,-60(fp)
   893ac:	10801f84 	addi	r2,r2,126
   893b0:	e0bfef15 	stw	r2,-68(fp)

    edid->extensions = *c;
   893b4:	e0bfef17 	ldw	r2,-68(fp)
   893b8:	10800003 	ldbu	r2,0(r2)
   893bc:	10c03fcc 	andi	r3,r2,255
   893c0:	e0bff017 	ldw	r2,-64(fp)
   893c4:	10c60915 	stw	r3,6180(r2)

    if (edid->extensions != 0)
   893c8:	e0bff017 	ldw	r2,-64(fp)
   893cc:	10860917 	ldw	r2,6180(r2)
   893d0:	1005003a 	cmpeq	r2,r2,zero
   893d4:	1000031e 	bne	r2,zero,893e4 <edid_decode_v14+0x43f0>
    	edid_decode_extensions(edid, edid_bin);
   893d8:	e13ff017 	ldw	r4,-64(fp)
   893dc:	e17ff117 	ldw	r5,-60(fp)
   893e0:	0084efc0 	call	84efc <edid_decode_extensions>

    return 0;
   893e4:	e03fff15 	stw	zero,-4(fp)
   893e8:	e0bfff17 	ldw	r2,-4(fp)
}
   893ec:	e037883a 	mov	sp,fp
   893f0:	dfc00217 	ldw	ra,8(sp)
   893f4:	df000117 	ldw	fp,4(sp)
   893f8:	dc000017 	ldw	r16,0(sp)
   893fc:	dec00304 	addi	sp,sp,12
   89400:	f800283a 	ret

00089404 <eb_establish_timing_i>:
		et->rb = 0;
	}
}

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
   89404:	defffb04 	addi	sp,sp,-20
   89408:	de00012e 	bgeu	sp,et,89410 <eb_establish_timing_i+0xc>
   8940c:	003da0fa 	break	3
   89410:	df000415 	stw	fp,16(sp)
   89414:	df000404 	addi	fp,sp,16
   89418:	e13ffc15 	stw	r4,-16(fp)
   8941c:	e17ffd15 	stw	r5,-12(fp)
   89420:	e1bffe15 	stw	r6,-8(fp)
   89424:	e1ffff15 	stw	r7,-4(fp)
	if (valid) {
   89428:	e0800117 	ldw	r2,4(fp)
   8942c:	1005003a 	cmpeq	r2,r2,zero
   89430:	1000121e 	bne	r2,zero,8947c <eb_establish_timing_i+0x78>
		et->valid = 1;
   89434:	e0fffc17 	ldw	r3,-16(fp)
   89438:	00800044 	movi	r2,1
   8943c:	18800015 	stw	r2,0(r3)
		et->width = x;
   89440:	e0fffc17 	ldw	r3,-16(fp)
   89444:	e0bffd17 	ldw	r2,-12(fp)
   89448:	18800115 	stw	r2,4(r3)
		et->height = y;
   8944c:	e0fffc17 	ldw	r3,-16(fp)
   89450:	e0bffe17 	ldw	r2,-8(fp)
   89454:	18800215 	stw	r2,8(r3)
		et->refresh = r;
   89458:	e0fffc17 	ldw	r3,-16(fp)
   8945c:	e0bfff17 	ldw	r2,-4(fp)
   89460:	18800315 	stw	r2,12(r3)
		et->interlaced = 1;
   89464:	e0fffc17 	ldw	r3,-16(fp)
   89468:	00800044 	movi	r2,1
   8946c:	18800415 	stw	r2,16(r3)
		et->rb = 0;
   89470:	e0bffc17 	ldw	r2,-16(fp)
   89474:	10000515 	stw	zero,20(r2)
   89478:	00000c06 	br	894ac <eb_establish_timing_i+0xa8>
	} else {
		et->valid = 0;
   8947c:	e0bffc17 	ldw	r2,-16(fp)
   89480:	10000015 	stw	zero,0(r2)
		et->width = 0;
   89484:	e0bffc17 	ldw	r2,-16(fp)
   89488:	10000115 	stw	zero,4(r2)
		et->height = 0;
   8948c:	e0bffc17 	ldw	r2,-16(fp)
   89490:	10000215 	stw	zero,8(r2)
		et->refresh = 0;
   89494:	e0bffc17 	ldw	r2,-16(fp)
   89498:	10000315 	stw	zero,12(r2)
		et->interlaced = 0;
   8949c:	e0bffc17 	ldw	r2,-16(fp)
   894a0:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   894a4:	e0bffc17 	ldw	r2,-16(fp)
   894a8:	10000515 	stw	zero,20(r2)
	}
}
   894ac:	e037883a 	mov	sp,fp
   894b0:	df000017 	ldw	fp,0(sp)
   894b4:	dec00104 	addi	sp,sp,4
   894b8:	f800283a 	ret

000894bc <eb_establish_timing_rb>:

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
   894bc:	defffb04 	addi	sp,sp,-20
   894c0:	de00012e 	bgeu	sp,et,894c8 <eb_establish_timing_rb+0xc>
   894c4:	003da0fa 	break	3
   894c8:	df000415 	stw	fp,16(sp)
   894cc:	df000404 	addi	fp,sp,16
   894d0:	e13ffc15 	stw	r4,-16(fp)
   894d4:	e17ffd15 	stw	r5,-12(fp)
   894d8:	e1bffe15 	stw	r6,-8(fp)
   894dc:	e1ffff15 	stw	r7,-4(fp)
	if (valid) {
   894e0:	e0800117 	ldw	r2,4(fp)
   894e4:	1005003a 	cmpeq	r2,r2,zero
   894e8:	1000121e 	bne	r2,zero,89534 <eb_establish_timing_rb+0x78>
		et->valid = 1;
   894ec:	e0fffc17 	ldw	r3,-16(fp)
   894f0:	00800044 	movi	r2,1
   894f4:	18800015 	stw	r2,0(r3)
		et->width = x;
   894f8:	e0fffc17 	ldw	r3,-16(fp)
   894fc:	e0bffd17 	ldw	r2,-12(fp)
   89500:	18800115 	stw	r2,4(r3)
		et->height = y;
   89504:	e0fffc17 	ldw	r3,-16(fp)
   89508:	e0bffe17 	ldw	r2,-8(fp)
   8950c:	18800215 	stw	r2,8(r3)
		et->refresh = r;
   89510:	e0fffc17 	ldw	r3,-16(fp)
   89514:	e0bfff17 	ldw	r2,-4(fp)
   89518:	18800315 	stw	r2,12(r3)
		et->interlaced = 0;
   8951c:	e0bffc17 	ldw	r2,-16(fp)
   89520:	10000415 	stw	zero,16(r2)
		et->rb = 1;
   89524:	e0fffc17 	ldw	r3,-16(fp)
   89528:	00800044 	movi	r2,1
   8952c:	18800515 	stw	r2,20(r3)
   89530:	00000c06 	br	89564 <eb_establish_timing_rb+0xa8>
	} else {
		et->valid = 0;
   89534:	e0bffc17 	ldw	r2,-16(fp)
   89538:	10000015 	stw	zero,0(r2)
		et->width = 0;
   8953c:	e0bffc17 	ldw	r2,-16(fp)
   89540:	10000115 	stw	zero,4(r2)
		et->height = 0;
   89544:	e0bffc17 	ldw	r2,-16(fp)
   89548:	10000215 	stw	zero,8(r2)
		et->refresh = 0;
   8954c:	e0bffc17 	ldw	r2,-16(fp)
   89550:	10000315 	stw	zero,12(r2)
		et->interlaced = 0;
   89554:	e0bffc17 	ldw	r2,-16(fp)
   89558:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   8955c:	e0bffc17 	ldw	r2,-16(fp)
   89560:	10000515 	stw	zero,20(r2)
	}
}
   89564:	e037883a 	mov	sp,fp
   89568:	df000017 	ldw	fp,0(sp)
   8956c:	dec00104 	addi	sp,sp,4
   89570:	f800283a 	ret

00089574 <eb_establish_timing>:
	int interlaced;
	int rb;			// reduced blanking
};

static inline void eb_establish_timing(struct eb_established_timing *et, int x, int y, int r, int valid)
{
   89574:	defffb04 	addi	sp,sp,-20
   89578:	de00012e 	bgeu	sp,et,89580 <eb_establish_timing+0xc>
   8957c:	003da0fa 	break	3
   89580:	df000415 	stw	fp,16(sp)
   89584:	df000404 	addi	fp,sp,16
   89588:	e13ffc15 	stw	r4,-16(fp)
   8958c:	e17ffd15 	stw	r5,-12(fp)
   89590:	e1bffe15 	stw	r6,-8(fp)
   89594:	e1ffff15 	stw	r7,-4(fp)
	if (valid) {
   89598:	e0800117 	ldw	r2,4(fp)
   8959c:	1005003a 	cmpeq	r2,r2,zero
   895a0:	1000111e 	bne	r2,zero,895e8 <eb_establish_timing+0x74>
		et->valid = 1;
   895a4:	e0fffc17 	ldw	r3,-16(fp)
   895a8:	00800044 	movi	r2,1
   895ac:	18800015 	stw	r2,0(r3)
		et->width = x;
   895b0:	e0fffc17 	ldw	r3,-16(fp)
   895b4:	e0bffd17 	ldw	r2,-12(fp)
   895b8:	18800115 	stw	r2,4(r3)
		et->height = y;
   895bc:	e0fffc17 	ldw	r3,-16(fp)
   895c0:	e0bffe17 	ldw	r2,-8(fp)
   895c4:	18800215 	stw	r2,8(r3)
		et->refresh = r;
   895c8:	e0fffc17 	ldw	r3,-16(fp)
   895cc:	e0bfff17 	ldw	r2,-4(fp)
   895d0:	18800315 	stw	r2,12(r3)
		et->interlaced = 0;
   895d4:	e0bffc17 	ldw	r2,-16(fp)
   895d8:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   895dc:	e0bffc17 	ldw	r2,-16(fp)
   895e0:	10000515 	stw	zero,20(r2)
   895e4:	00000c06 	br	89618 <eb_establish_timing+0xa4>
	} else {
		et->valid = 0;
   895e8:	e0bffc17 	ldw	r2,-16(fp)
   895ec:	10000015 	stw	zero,0(r2)
		et->width = 0;
   895f0:	e0bffc17 	ldw	r2,-16(fp)
   895f4:	10000115 	stw	zero,4(r2)
		et->height = 0;
   895f8:	e0bffc17 	ldw	r2,-16(fp)
   895fc:	10000215 	stw	zero,8(r2)
		et->refresh = 0;
   89600:	e0bffc17 	ldw	r2,-16(fp)
   89604:	10000315 	stw	zero,12(r2)
		et->interlaced = 0;
   89608:	e0bffc17 	ldw	r2,-16(fp)
   8960c:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   89610:	e0bffc17 	ldw	r2,-16(fp)
   89614:	10000515 	stw	zero,20(r2)
	}
}
   89618:	e037883a 	mov	sp,fp
   8961c:	df000017 	ldw	fp,0(sp)
   89620:	dec00104 	addi	sp,sp,4
   89624:	f800283a 	ret

00089628 <edid_print_v14>:

void edid_print_v14(struct base_edid *edid)
{
   89628:	deffdb04 	addi	sp,sp,-148
   8962c:	de00012e 	bgeu	sp,et,89634 <edid_print_v14+0xc>
   89630:	003da0fa 	break	3
   89634:	dfc02415 	stw	ra,144(sp)
   89638:	df002315 	stw	fp,140(sp)
   8963c:	dc802215 	stw	r18,136(sp)
   89640:	dc402115 	stw	r17,132(sp)
   89644:	dc002015 	stw	r16,128(sp)
   89648:	df002004 	addi	fp,sp,128
   8964c:	e13fe615 	stw	r4,-104(fp)
	int i;

	printf("Base EDID Information ...\n\n");
   89650:	010002b4 	movhi	r4,10
   89654:	2133bc04 	addi	r4,r4,-12560
   89658:	008ef700 	call	8ef70 <puts>
	printf("vendor id    : %s\n", edid->id_mfg);
   8965c:	e17fe617 	ldw	r5,-104(fp)
   89660:	010002b4 	movhi	r4,10
   89664:	2133c304 	addi	r4,r4,-12532
   89668:	008ee340 	call	8ee34 <printf>
	printf("product code : %04x\n", edid->id_prod);
   8966c:	e0bfe617 	ldw	r2,-104(fp)
   89670:	11400117 	ldw	r5,4(r2)
   89674:	010002b4 	movhi	r4,10
   89678:	2133c804 	addi	r4,r4,-12512
   8967c:	008ee340 	call	8ee34 <printf>
	printf("serial       : %08x\n", edid->id_sn);
   89680:	e0bfe617 	ldw	r2,-104(fp)
   89684:	11400217 	ldw	r5,8(r2)
   89688:	010002b4 	movhi	r4,10
   8968c:	2133ce04 	addi	r4,r4,-12488
   89690:	008ee340 	call	8ee34 <printf>
	printf("mfg date     : year %04d week %02d\n", edid->mfg_year, edid->mfg_week);
   89694:	e0bfe617 	ldw	r2,-104(fp)
   89698:	11400417 	ldw	r5,16(r2)
   8969c:	e0bfe617 	ldw	r2,-104(fp)
   896a0:	11800317 	ldw	r6,12(r2)
   896a4:	010002b4 	movhi	r4,10
   896a8:	2133d404 	addi	r4,r4,-12464
   896ac:	008ee340 	call	8ee34 <printf>

	if (edid->model_year > 0)
   896b0:	e0bfe617 	ldw	r2,-104(fp)
   896b4:	10800517 	ldw	r2,20(r2)
   896b8:	10800050 	cmplti	r2,r2,1
   896bc:	1000051e 	bne	r2,zero,896d4 <edid_print_v14+0xac>
		printf("model year   : %04d\n", edid->model_year);
   896c0:	e0bfe617 	ldw	r2,-104(fp)
   896c4:	11400517 	ldw	r5,20(r2)
   896c8:	010002b4 	movhi	r4,10
   896cc:	2133dd04 	addi	r4,r4,-12428
   896d0:	008ee340 	call	8ee34 <printf>

	printf("EDID version : %d.%d\n", edid->ver_mj, edid->ver_mn);
   896d4:	e0bfe617 	ldw	r2,-104(fp)
   896d8:	11400617 	ldw	r5,24(r2)
   896dc:	e0bfe617 	ldw	r2,-104(fp)
   896e0:	11800717 	ldw	r6,28(r2)
   896e4:	010002b4 	movhi	r4,10
   896e8:	2133e304 	addi	r4,r4,-12404
   896ec:	008ee340 	call	8ee34 <printf>
	printf("extensions   : %d\n", edid->extensions);
   896f0:	e0bfe617 	ldw	r2,-104(fp)
   896f4:	11460917 	ldw	r5,6180(r2)
   896f8:	010002b4 	movhi	r4,10
   896fc:	2133e904 	addi	r4,r4,-12380
   89700:	008ee340 	call	8ee34 <printf>

	if (edid->input.digital_if != 0) {
   89704:	e0bfe617 	ldw	r2,-104(fp)
   89708:	10800817 	ldw	r2,32(r2)
   8970c:	1005003a 	cmpeq	r2,r2,zero
   89710:	1000651e 	bne	r2,zero,898a8 <edid_print_v14+0x280>
		printf("\ndigital input interface ...\n");
   89714:	010002b4 	movhi	r4,10
   89718:	2133ee04 	addi	r4,r4,-12360
   8971c:	008ef700 	call	8ef70 <puts>

		switch (edid->input.digital.depth) {
   89720:	e0bfe617 	ldw	r2,-104(fp)
   89724:	10800917 	ldw	r2,36(r2)
   89728:	e0bffe15 	stw	r2,-8(fp)
   8972c:	e0fffe17 	ldw	r3,-8(fp)
   89730:	188001e8 	cmpgeui	r2,r3,7
   89734:	1000281e 	bne	r2,zero,897d8 <edid_print_v14+0x1b0>
   89738:	e13ffe17 	ldw	r4,-8(fp)
   8973c:	e13ffe17 	ldw	r4,-8(fp)
   89740:	2105883a 	add	r2,r4,r4
   89744:	1087883a 	add	r3,r2,r2
   89748:	00800274 	movhi	r2,9
   8974c:	10a5d704 	addi	r2,r2,-26788
   89750:	1885883a 	add	r2,r3,r2
   89754:	10800017 	ldw	r2,0(r2)
   89758:	1000683a 	jmp	r2
   8975c:	000897d8 	cmpnei	zero,zero,8799
   89760:	00089778 	rdprs	zero,zero,8797
   89764:	00089788 	cmpgei	zero,zero,8798
   89768:	00089798 	cmpnei	zero,zero,8798
   8976c:	000897a8 	cmpgeui	zero,zero,8798
   89770:	000897b8 	rdprs	zero,zero,8798
   89774:	000897c8 	cmpgei	zero,zero,8799
		case 1:
			printf("  color depth : 6 bpp\n");
   89778:	010002b4 	movhi	r4,10
   8977c:	2133f604 	addi	r4,r4,-12328
   89780:	008ef700 	call	8ef70 <puts>
			break;
   89784:	00001906 	br	897ec <edid_print_v14+0x1c4>
		case 2:
			printf("  color depth : 8 bpp\n");
   89788:	010002b4 	movhi	r4,10
   8978c:	2133fc04 	addi	r4,r4,-12304
   89790:	008ef700 	call	8ef70 <puts>
			break;
   89794:	00001506 	br	897ec <edid_print_v14+0x1c4>
		case 3:
			printf("  color depth : 10 bpp\n");
   89798:	010002b4 	movhi	r4,10
   8979c:	21340204 	addi	r4,r4,-12280
   897a0:	008ef700 	call	8ef70 <puts>
			break;
   897a4:	00001106 	br	897ec <edid_print_v14+0x1c4>
		case 4:
			printf("  color depth : 12 bpp\n");
   897a8:	010002b4 	movhi	r4,10
   897ac:	21340804 	addi	r4,r4,-12256
   897b0:	008ef700 	call	8ef70 <puts>
			break;
   897b4:	00000d06 	br	897ec <edid_print_v14+0x1c4>
		case 5:
			printf("  color depth : 14 bpp\n");
   897b8:	010002b4 	movhi	r4,10
   897bc:	21340e04 	addi	r4,r4,-12232
   897c0:	008ef700 	call	8ef70 <puts>
			break;
   897c4:	00000906 	br	897ec <edid_print_v14+0x1c4>
		case 6:
			printf("  color depth : 16 bpp\n");
   897c8:	010002b4 	movhi	r4,10
   897cc:	21341404 	addi	r4,r4,-12208
   897d0:	008ef700 	call	8ef70 <puts>
			break;
   897d4:	00000506 	br	897ec <edid_print_v14+0x1c4>
		default:
			printf("  color depth : undefined (%d)\n", edid->input.digital.depth);
   897d8:	e0bfe617 	ldw	r2,-104(fp)
   897dc:	11400917 	ldw	r5,36(r2)
   897e0:	010002b4 	movhi	r4,10
   897e4:	21341a04 	addi	r4,r4,-12184
   897e8:	008ee340 	call	8ee34 <printf>
			break;
		}

		switch (edid->input.digital.interface) {
   897ec:	e0bfe617 	ldw	r2,-104(fp)
   897f0:	10800a17 	ldw	r2,40(r2)
   897f4:	e0bffd15 	stw	r2,-12(fp)
   897f8:	e0fffd17 	ldw	r3,-12(fp)
   897fc:	188001a8 	cmpgeui	r2,r3,6
   89800:	1000231e 	bne	r2,zero,89890 <edid_print_v14+0x268>
   89804:	e13ffd17 	ldw	r4,-12(fp)
   89808:	e13ffd17 	ldw	r4,-12(fp)
   8980c:	2105883a 	add	r2,r4,r4
   89810:	1087883a 	add	r3,r2,r2
   89814:	00800274 	movhi	r2,9
   89818:	10a60a04 	addi	r2,r2,-26584
   8981c:	1885883a 	add	r2,r3,r2
   89820:	10800017 	ldw	r2,0(r2)
   89824:	1000683a 	jmp	r2
   89828:	00089890 	cmplti	zero,zero,8802
   8982c:	00089840 	call	8984 <__alt_mem_onchip_memory2-0x7767c>
   89830:	00089850 	cmplti	zero,zero,8801
   89834:	00089860 	cmpeqi	zero,zero,8801
   89838:	00089870 	cmpltui	zero,zero,8801
   8983c:	00089880 	call	8988 <__alt_mem_onchip_memory2-0x77678>
		case 1:
			printf("  interface   : DVI\n");
   89840:	010002b4 	movhi	r4,10
   89844:	21342204 	addi	r4,r4,-12152
   89848:	008ef700 	call	8ef70 <puts>
			break;
   8984c:	00006c06 	br	89a00 <edid_print_v14+0x3d8>
		case 2:
			printf("  interface   : HDMI-a\n");
   89850:	010002b4 	movhi	r4,10
   89854:	21342704 	addi	r4,r4,-12132
   89858:	008ef700 	call	8ef70 <puts>
			break;
   8985c:	00006806 	br	89a00 <edid_print_v14+0x3d8>
		case 3:
			printf("  interface   : HDMI-b\n");
   89860:	010002b4 	movhi	r4,10
   89864:	21342d04 	addi	r4,r4,-12108
   89868:	008ef700 	call	8ef70 <puts>
			break;
   8986c:	00006406 	br	89a00 <edid_print_v14+0x3d8>
		case 4:
			printf("  interface   : MDDI\n");
   89870:	010002b4 	movhi	r4,10
   89874:	21343304 	addi	r4,r4,-12084
   89878:	008ef700 	call	8ef70 <puts>
			break;
   8987c:	00006006 	br	89a00 <edid_print_v14+0x3d8>
		case 5:
			printf("  interface   : DisplayPort\n");
   89880:	010002b4 	movhi	r4,10
   89884:	21343904 	addi	r4,r4,-12060
   89888:	008ef700 	call	8ef70 <puts>
			break;
   8988c:	00005c06 	br	89a00 <edid_print_v14+0x3d8>
		default:
			printf("  interface   : undefined (%d)\n", edid->input.digital.interface);
   89890:	e0bfe617 	ldw	r2,-104(fp)
   89894:	11400a17 	ldw	r5,40(r2)
   89898:	010002b4 	movhi	r4,10
   8989c:	21344004 	addi	r4,r4,-12032
   898a0:	008ee340 	call	8ee34 <printf>
   898a4:	00005606 	br	89a00 <edid_print_v14+0x3d8>
			break;
		}

	} else {
		printf("\nanalog input interface ...\n");
   898a8:	010002b4 	movhi	r4,10
   898ac:	21344804 	addi	r4,r4,-12000
   898b0:	008ef700 	call	8ef70 <puts>

		switch (edid->input.analog.level) {
   898b4:	e0bfe617 	ldw	r2,-104(fp)
   898b8:	10800917 	ldw	r2,36(r2)
   898bc:	e0bffc15 	stw	r2,-16(fp)
   898c0:	e0fffc17 	ldw	r3,-16(fp)
   898c4:	18800060 	cmpeqi	r2,r3,1
   898c8:	1000121e 	bne	r2,zero,89914 <edid_print_v14+0x2ec>
   898cc:	e13ffc17 	ldw	r4,-16(fp)
   898d0:	20800088 	cmpgei	r2,r4,2
   898d4:	1000041e 	bne	r2,zero,898e8 <edid_print_v14+0x2c0>
   898d8:	e0fffc17 	ldw	r3,-16(fp)
   898dc:	1805003a 	cmpeq	r2,r3,zero
   898e0:	1000081e 	bne	r2,zero,89904 <edid_print_v14+0x2dc>
   898e4:	00001606 	br	89940 <edid_print_v14+0x318>
   898e8:	e13ffc17 	ldw	r4,-16(fp)
   898ec:	208000a0 	cmpeqi	r2,r4,2
   898f0:	10000c1e 	bne	r2,zero,89924 <edid_print_v14+0x2fc>
   898f4:	e0fffc17 	ldw	r3,-16(fp)
   898f8:	188000e0 	cmpeqi	r2,r3,3
   898fc:	10000d1e 	bne	r2,zero,89934 <edid_print_v14+0x30c>
   89900:	00000f06 	br	89940 <edid_print_v14+0x318>
		case VIL_0P700_0P300_1P000:
			printf("  signal level    : 0.700 : 0.300 : 1.000 Vpp\n");
   89904:	010002b4 	movhi	r4,10
   89908:	21344f04 	addi	r4,r4,-11972
   8990c:	008ef700 	call	8ef70 <puts>
			break;
   89910:	00000b06 	br	89940 <edid_print_v14+0x318>
		case VIL_0P714_0P286_1P000:
			printf("  signal level    : 0.714 : 0.286 : 1.000 Vpp\n");
   89914:	010002b4 	movhi	r4,10
   89918:	21345b04 	addi	r4,r4,-11924
   8991c:	008ef700 	call	8ef70 <puts>
			break;
   89920:	00000706 	br	89940 <edid_print_v14+0x318>
		case VIL_1P000_0P400_1P400:
			printf("  signal level    : 1.000 : 0.400 : 1.400 Vpp\n");
   89924:	010002b4 	movhi	r4,10
   89928:	21346704 	addi	r4,r4,-11876
   8992c:	008ef700 	call	8ef70 <puts>
			break;
   89930:	00000306 	br	89940 <edid_print_v14+0x318>
		case VIL_0P700_0P000_0P700:
			printf("  signal level    : 0.700 : 0.000 : 0.700 Vpp\n");
   89934:	010002b4 	movhi	r4,10
   89938:	21347304 	addi	r4,r4,-11828
   8993c:	008ef700 	call	8ef70 <puts>
			break;
		}

		switch (edid->input.analog.setup) {
   89940:	e0bfe617 	ldw	r2,-104(fp)
   89944:	10800a17 	ldw	r2,40(r2)
   89948:	e0bffb15 	stw	r2,-20(fp)
   8994c:	e13ffb17 	ldw	r4,-20(fp)
   89950:	2005003a 	cmpeq	r2,r4,zero
   89954:	1000041e 	bne	r2,zero,89968 <edid_print_v14+0x340>
   89958:	e0fffb17 	ldw	r3,-20(fp)
   8995c:	18800060 	cmpeqi	r2,r3,1
   89960:	1000051e 	bne	r2,zero,89978 <edid_print_v14+0x350>
   89964:	00000706 	br	89984 <edid_print_v14+0x35c>
		case VIS_BLANK_LEVEL_EQ_BLACK_LEVEL:
			printf("  video setup     : blank level = black level\n");
   89968:	010002b4 	movhi	r4,10
   8996c:	21347f04 	addi	r4,r4,-11780
   89970:	008ef700 	call	8ef70 <puts>
			break;
   89974:	00000306 	br	89984 <edid_print_v14+0x35c>
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
   89978:	010002b4 	movhi	r4,10
   8997c:	21348b04 	addi	r4,r4,-11732
   89980:	008ef700 	call	8ef70 <puts>
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
   89984:	e0bfe617 	ldw	r2,-104(fp)
   89988:	10800b17 	ldw	r2,44(r2)
   8998c:	1140004c 	andi	r5,r2,1
   89990:	e0bfe617 	ldw	r2,-104(fp)
   89994:	10800b17 	ldw	r2,44(r2)
   89998:	1080008c 	andi	r2,r2,2
   8999c:	100cc03a 	cmpne	r6,r2,zero
   899a0:	e0bfe617 	ldw	r2,-104(fp)
   899a4:	10800b17 	ldw	r2,44(r2)
   899a8:	1080010c 	andi	r2,r2,4
   899ac:	100ec03a 	cmpne	r7,r2,zero
   899b0:	010002b4 	movhi	r4,10
   899b4:	21349904 	addi	r4,r4,-11676
   899b8:	008ee340 	call	8ee34 <printf>
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_H_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_G_VIDEO) ? 1 : 0);

		printf("  vsync serration : %s\n", (edid->input.analog.serrations & VISR_VSYNC) ? "supported" : "not supported");
   899bc:	e0bfe617 	ldw	r2,-104(fp)
   899c0:	10800c17 	ldw	r2,48(r2)
   899c4:	1080004c 	andi	r2,r2,1
   899c8:	10803fcc 	andi	r2,r2,255
   899cc:	1005003a 	cmpeq	r2,r2,zero
   899d0:	1000041e 	bne	r2,zero,899e4 <edid_print_v14+0x3bc>
   899d4:	010002b4 	movhi	r4,10
   899d8:	2134b004 	addi	r4,r4,-11584
   899dc:	e13ffa15 	stw	r4,-24(fp)
   899e0:	00000306 	br	899f0 <edid_print_v14+0x3c8>
   899e4:	008002b4 	movhi	r2,10
   899e8:	10b4b304 	addi	r2,r2,-11572
   899ec:	e0bffa15 	stw	r2,-24(fp)
   899f0:	010002b4 	movhi	r4,10
   899f4:	2134b704 	addi	r4,r4,-11556
   899f8:	e17ffa17 	ldw	r5,-24(fp)
   899fc:	008ee340 	call	8ee34 <printf>
	}

	if (edid->screen.size_defined) {
   89a00:	e0bfe617 	ldw	r2,-104(fp)
   89a04:	10800d17 	ldw	r2,52(r2)
   89a08:	1005003a 	cmpeq	r2,r2,zero
   89a0c:	1000081e 	bne	r2,zero,89a30 <edid_print_v14+0x408>
		printf("\nscreen size  : horizontal) %d (cm)  vertical) %d (cm)\n", edid->screen.size.horizontal, edid->screen.size.vertical);
   89a10:	e0bfe617 	ldw	r2,-104(fp)
   89a14:	11400f17 	ldw	r5,60(r2)
   89a18:	e0bfe617 	ldw	r2,-104(fp)
   89a1c:	11801017 	ldw	r6,64(r2)
   89a20:	010002b4 	movhi	r4,10
   89a24:	2134bd04 	addi	r4,r4,-11532
   89a28:	008ee340 	call	8ee34 <printf>
   89a2c:	00001f06 	br	89aac <edid_print_v14+0x484>
	} else if (edid->screen.aspect_defined == 1) {
   89a30:	e0bfe617 	ldw	r2,-104(fp)
   89a34:	10800e17 	ldw	r2,56(r2)
   89a38:	10800058 	cmpnei	r2,r2,1
   89a3c:	10000c1e 	bne	r2,zero,89a70 <edid_print_v14+0x448>
		printf("\naspect ratio : landscape) %.2f\n", edid->screen.aspect.landscape);
   89a40:	e0bfe617 	ldw	r2,-104(fp)
   89a44:	10800f17 	ldw	r2,60(r2)
   89a48:	1009883a 	mov	r4,r2
   89a4c:	008d5cc0 	call	8d5cc <__extendsfdf2>
   89a50:	100d883a 	mov	r6,r2
   89a54:	180f883a 	mov	r7,r3
   89a58:	010002b4 	movhi	r4,10
   89a5c:	2134cb04 	addi	r4,r4,-11476
   89a60:	300b883a 	mov	r5,r6
   89a64:	380d883a 	mov	r6,r7
   89a68:	008ee340 	call	8ee34 <printf>
   89a6c:	00000f06 	br	89aac <edid_print_v14+0x484>
	} else if (edid->screen.aspect_defined == 2) {
   89a70:	e0bfe617 	ldw	r2,-104(fp)
   89a74:	10800e17 	ldw	r2,56(r2)
   89a78:	10800098 	cmpnei	r2,r2,2
   89a7c:	10000b1e 	bne	r2,zero,89aac <edid_print_v14+0x484>
		printf("\naspect ratio : portrait) %.2f\n", edid->screen.aspect.portrait);
   89a80:	e0bfe617 	ldw	r2,-104(fp)
   89a84:	10801017 	ldw	r2,64(r2)
   89a88:	1009883a 	mov	r4,r2
   89a8c:	008d5cc0 	call	8d5cc <__extendsfdf2>
   89a90:	100d883a 	mov	r6,r2
   89a94:	180f883a 	mov	r7,r3
   89a98:	010002b4 	movhi	r4,10
   89a9c:	2134d404 	addi	r4,r4,-11440
   89aa0:	300b883a 	mov	r5,r6
   89aa4:	380d883a 	mov	r6,r7
   89aa8:	008ee340 	call	8ee34 <printf>
	}

	printf("\ngamma        : %.2f\n", edid->gamma);
   89aac:	e0bfe617 	ldw	r2,-104(fp)
   89ab0:	10801117 	ldw	r2,68(r2)
   89ab4:	1009883a 	mov	r4,r2
   89ab8:	008d5cc0 	call	8d5cc <__extendsfdf2>
   89abc:	100d883a 	mov	r6,r2
   89ac0:	180f883a 	mov	r7,r3
   89ac4:	010002b4 	movhi	r4,10
   89ac8:	2134dc04 	addi	r4,r4,-11408
   89acc:	300b883a 	mov	r5,r6
   89ad0:	380d883a 	mov	r6,r7
   89ad4:	008ee340 	call	8ee34 <printf>

	printf("\nfeatures ...\n");
   89ad8:	010002b4 	movhi	r4,10
   89adc:	2134e204 	addi	r4,r4,-11384
   89ae0:	008ef700 	call	8ef70 <puts>
	printf("  [PM] standby mode                     : %s\n", (edid->feature & FS_PM_STANDBY) ? "yes" : "no");
   89ae4:	e0bfe617 	ldw	r2,-104(fp)
   89ae8:	10801217 	ldw	r2,72(r2)
   89aec:	1080004c 	andi	r2,r2,1
   89af0:	10803fcc 	andi	r2,r2,255
   89af4:	1005003a 	cmpeq	r2,r2,zero
   89af8:	1000041e 	bne	r2,zero,89b0c <edid_print_v14+0x4e4>
   89afc:	00c002b4 	movhi	r3,10
   89b00:	18ee3c04 	addi	r3,r3,-18192
   89b04:	e0fff915 	stw	r3,-28(fp)
   89b08:	00000306 	br	89b18 <edid_print_v14+0x4f0>
   89b0c:	010002b4 	movhi	r4,10
   89b10:	212e3d04 	addi	r4,r4,-18188
   89b14:	e13ff915 	stw	r4,-28(fp)
   89b18:	010002b4 	movhi	r4,10
   89b1c:	2134e604 	addi	r4,r4,-11368
   89b20:	e17ff917 	ldw	r5,-28(fp)
   89b24:	008ee340 	call	8ee34 <printf>
	printf("  [PM] suspend mode                     : %s\n", (edid->feature & FS_PM_SUSPEND) ? "yes" : "no");
   89b28:	e0bfe617 	ldw	r2,-104(fp)
   89b2c:	10801217 	ldw	r2,72(r2)
   89b30:	1080008c 	andi	r2,r2,2
   89b34:	1005003a 	cmpeq	r2,r2,zero
   89b38:	1000041e 	bne	r2,zero,89b4c <edid_print_v14+0x524>
   89b3c:	008002b4 	movhi	r2,10
   89b40:	10ae3c04 	addi	r2,r2,-18192
   89b44:	e0bff815 	stw	r2,-32(fp)
   89b48:	00000306 	br	89b58 <edid_print_v14+0x530>
   89b4c:	00c002b4 	movhi	r3,10
   89b50:	18ee3d04 	addi	r3,r3,-18188
   89b54:	e0fff815 	stw	r3,-32(fp)
   89b58:	010002b4 	movhi	r4,10
   89b5c:	2134f204 	addi	r4,r4,-11320
   89b60:	e17ff817 	ldw	r5,-32(fp)
   89b64:	008ee340 	call	8ee34 <printf>
	printf("  [PM] active off                       : %s\n", (edid->feature & FS_PM_ACTIVE_OFF) ? "yes" : "no");
   89b68:	e0bfe617 	ldw	r2,-104(fp)
   89b6c:	10801217 	ldw	r2,72(r2)
   89b70:	1080010c 	andi	r2,r2,4
   89b74:	1005003a 	cmpeq	r2,r2,zero
   89b78:	1000041e 	bne	r2,zero,89b8c <edid_print_v14+0x564>
   89b7c:	010002b4 	movhi	r4,10
   89b80:	212e3c04 	addi	r4,r4,-18192
   89b84:	e13ff715 	stw	r4,-36(fp)
   89b88:	00000306 	br	89b98 <edid_print_v14+0x570>
   89b8c:	008002b4 	movhi	r2,10
   89b90:	10ae3d04 	addi	r2,r2,-18188
   89b94:	e0bff715 	stw	r2,-36(fp)
   89b98:	010002b4 	movhi	r4,10
   89b9c:	2134fe04 	addi	r4,r4,-11272
   89ba0:	e17ff717 	ldw	r5,-36(fp)
   89ba4:	008ee340 	call	8ee34 <printf>

	printf("  [DI] supported color encoding formats : ");
   89ba8:	010002b4 	movhi	r4,10
   89bac:	21350a04 	addi	r4,r4,-11224
   89bb0:	008ee340 	call	8ee34 <printf>
	if (edid->feature & FS_CEF_RGB444)
   89bb4:	e0bfe617 	ldw	r2,-104(fp)
   89bb8:	10801217 	ldw	r2,72(r2)
   89bbc:	1080100c 	andi	r2,r2,64
   89bc0:	1005003a 	cmpeq	r2,r2,zero
   89bc4:	1000031e 	bne	r2,zero,89bd4 <edid_print_v14+0x5ac>
		printf("RGB_4:4:4 ");
   89bc8:	010002b4 	movhi	r4,10
   89bcc:	21351504 	addi	r4,r4,-11180
   89bd0:	008ee340 	call	8ee34 <printf>
	if (edid->feature & FS_CEF_YCBCR444)
   89bd4:	e0bfe617 	ldw	r2,-104(fp)
   89bd8:	10801217 	ldw	r2,72(r2)
   89bdc:	1080200c 	andi	r2,r2,128
   89be0:	1005003a 	cmpeq	r2,r2,zero
   89be4:	1000031e 	bne	r2,zero,89bf4 <edid_print_v14+0x5cc>
		printf("YCbCr_4:4:4 ");
   89be8:	010002b4 	movhi	r4,10
   89bec:	21351804 	addi	r4,r4,-11168
   89bf0:	008ee340 	call	8ee34 <printf>
	if (edid->feature & FS_CEF_YCBCR422)
   89bf4:	e0bfe617 	ldw	r2,-104(fp)
   89bf8:	10801217 	ldw	r2,72(r2)
   89bfc:	1080400c 	andi	r2,r2,256
   89c00:	1005003a 	cmpeq	r2,r2,zero
   89c04:	1000031e 	bne	r2,zero,89c14 <edid_print_v14+0x5ec>
		printf("YCbCr_4:2:2 ");
   89c08:	010002b4 	movhi	r4,10
   89c0c:	21351c04 	addi	r4,r4,-11152
   89c10:	008ee340 	call	8ee34 <printf>
	printf("\n");
   89c14:	01000284 	movi	r4,10
   89c18:	008eeac0 	call	8eeac <putchar>

	if (edid->feature & FS_DCT_MONO_GRAY)
   89c1c:	e0bfe617 	ldw	r2,-104(fp)
   89c20:	10801217 	ldw	r2,72(r2)
   89c24:	1080020c 	andi	r2,r2,8
   89c28:	1005003a 	cmpeq	r2,r2,zero
   89c2c:	1000031e 	bne	r2,zero,89c3c <edid_print_v14+0x614>
		printf("  [AI] display color type               : monochrome or grayscale display\n");
   89c30:	010002b4 	movhi	r4,10
   89c34:	21352004 	addi	r4,r4,-11136
   89c38:	008ef700 	call	8ef70 <puts>
	if (edid->feature & FS_DCT_RGB)
   89c3c:	e0bfe617 	ldw	r2,-104(fp)
   89c40:	10801217 	ldw	r2,72(r2)
   89c44:	1080040c 	andi	r2,r2,16
   89c48:	1005003a 	cmpeq	r2,r2,zero
   89c4c:	1000031e 	bne	r2,zero,89c5c <edid_print_v14+0x634>
		printf("  [AI] display color type               : RGB\n");
   89c50:	010002b4 	movhi	r4,10
   89c54:	21353304 	addi	r4,r4,-11060
   89c58:	008ef700 	call	8ef70 <puts>
	if (edid->feature & FS_DCT_NON_RGB)
   89c5c:	e0bfe617 	ldw	r2,-104(fp)
   89c60:	10801217 	ldw	r2,72(r2)
   89c64:	1080080c 	andi	r2,r2,32
   89c68:	1005003a 	cmpeq	r2,r2,zero
   89c6c:	1000031e 	bne	r2,zero,89c7c <edid_print_v14+0x654>
		printf("  [AI] display color type               : non-RGB\n");
   89c70:	010002b4 	movhi	r4,10
   89c74:	21353f04 	addi	r4,r4,-11012
   89c78:	008ef700 	call	8ef70 <puts>

	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
   89c7c:	e0bfe617 	ldw	r2,-104(fp)
   89c80:	10801217 	ldw	r2,72(r2)
   89c84:	1080800c 	andi	r2,r2,512
   89c88:	1005003a 	cmpeq	r2,r2,zero
   89c8c:	1000041e 	bne	r2,zero,89ca0 <edid_print_v14+0x678>
   89c90:	00c002b4 	movhi	r3,10
   89c94:	18ee3c04 	addi	r3,r3,-18192
   89c98:	e0fff615 	stw	r3,-40(fp)
   89c9c:	00000306 	br	89cac <edid_print_v14+0x684>
   89ca0:	010002b4 	movhi	r4,10
   89ca4:	212e3d04 	addi	r4,r4,-18188
   89ca8:	e13ff615 	stw	r4,-40(fp)
   89cac:	010002b4 	movhi	r4,10
   89cb0:	21354c04 	addi	r4,r4,-10960
   89cb4:	e17ff617 	ldw	r5,-40(fp)
   89cb8:	008ee340 	call	8ee34 <printf>
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
   89cbc:	e0bfe617 	ldw	r2,-104(fp)
   89cc0:	10801217 	ldw	r2,72(r2)
   89cc4:	1081000c 	andi	r2,r2,1024
   89cc8:	1005003a 	cmpeq	r2,r2,zero
   89ccc:	1000041e 	bne	r2,zero,89ce0 <edid_print_v14+0x6b8>
   89cd0:	008002b4 	movhi	r2,10
   89cd4:	10ae3c04 	addi	r2,r2,-18192
   89cd8:	e0bff515 	stw	r2,-44(fp)
   89cdc:	00000306 	br	89cec <edid_print_v14+0x6c4>
   89ce0:	00c002b4 	movhi	r3,10
   89ce4:	18ee3d04 	addi	r3,r3,-18188
   89ce8:	e0fff515 	stw	r3,-44(fp)
   89cec:	010002b4 	movhi	r4,10
   89cf0:	21355804 	addi	r4,r4,-10912
   89cf4:	e17ff517 	ldw	r5,-44(fp)
   89cf8:	008ee340 	call	8ee34 <printf>
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");
   89cfc:	e0bfe617 	ldw	r2,-104(fp)
   89d00:	10801217 	ldw	r2,72(r2)
   89d04:	1082000c 	andi	r2,r2,2048
   89d08:	1005003a 	cmpeq	r2,r2,zero
   89d0c:	1000041e 	bne	r2,zero,89d20 <edid_print_v14+0x6f8>
   89d10:	010002b4 	movhi	r4,10
   89d14:	212e3c04 	addi	r4,r4,-18192
   89d18:	e13ff415 	stw	r4,-48(fp)
   89d1c:	00000306 	br	89d2c <edid_print_v14+0x704>
   89d20:	008002b4 	movhi	r2,10
   89d24:	10ae3d04 	addi	r2,r2,-18188
   89d28:	e0bff415 	stw	r2,-48(fp)
   89d2c:	010002b4 	movhi	r4,10
   89d30:	21356404 	addi	r4,r4,-10864
   89d34:	e17ff417 	ldw	r5,-48(fp)
   89d38:	008ee340 	call	8ee34 <printf>

	printf("\nestablished timing ...\n");
   89d3c:	010002b4 	movhi	r4,10
   89d40:	21357004 	addi	r4,r4,-10816
   89d44:	008ef700 	call	8ef70 <puts>
	for (i = 0; i < 17; ++i) {
   89d48:	e03fe515 	stw	zero,-108(fp)
   89d4c:	00003906 	br	89e34 <edid_print_v14+0x80c>
		if (edid->timing_1_2[i].valid)
   89d50:	e0bfe517 	ldw	r2,-108(fp)
   89d54:	e0ffe617 	ldw	r3,-104(fp)
   89d58:	10800624 	muli	r2,r2,24
   89d5c:	10c5883a 	add	r2,r2,r3
   89d60:	10801b04 	addi	r2,r2,108
   89d64:	10800017 	ldw	r2,0(r2)
   89d68:	1005003a 	cmpeq	r2,r2,zero
   89d6c:	10002e1e 	bne	r2,zero,89e28 <edid_print_v14+0x800>
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
   89d70:	e0bfe517 	ldw	r2,-108(fp)
   89d74:	e0ffe617 	ldw	r3,-104(fp)
   89d78:	10800624 	muli	r2,r2,24
   89d7c:	10c5883a 	add	r2,r2,r3
   89d80:	10801c04 	addi	r2,r2,112
   89d84:	10800017 	ldw	r2,0(r2)
   89d88:	e0bff315 	stw	r2,-52(fp)
   89d8c:	e0bfe517 	ldw	r2,-108(fp)
   89d90:	e0ffe617 	ldw	r3,-104(fp)
   89d94:	10800624 	muli	r2,r2,24
   89d98:	10c5883a 	add	r2,r2,r3
   89d9c:	10801d04 	addi	r2,r2,116
   89da0:	10800017 	ldw	r2,0(r2)
   89da4:	e0bff215 	stw	r2,-56(fp)
   89da8:	e0bfe517 	ldw	r2,-108(fp)
   89dac:	e0ffe617 	ldw	r3,-104(fp)
   89db0:	10800624 	muli	r2,r2,24
   89db4:	10c5883a 	add	r2,r2,r3
   89db8:	10801e04 	addi	r2,r2,120
   89dbc:	10800017 	ldw	r2,0(r2)
   89dc0:	e0bff115 	stw	r2,-60(fp)
   89dc4:	e0bfe517 	ldw	r2,-108(fp)
   89dc8:	e0ffe617 	ldw	r3,-104(fp)
   89dcc:	10800624 	muli	r2,r2,24
   89dd0:	10c5883a 	add	r2,r2,r3
   89dd4:	10801f04 	addi	r2,r2,124
   89dd8:	10800017 	ldw	r2,0(r2)
   89ddc:	1005003a 	cmpeq	r2,r2,zero
   89de0:	1000041e 	bne	r2,zero,89df4 <edid_print_v14+0x7cc>
   89de4:	00c002b4 	movhi	r3,10
   89de8:	18f57604 	addi	r3,r3,-10792
   89dec:	e0fff015 	stw	r3,-64(fp)
   89df0:	00000306 	br	89e00 <edid_print_v14+0x7d8>
   89df4:	010002b4 	movhi	r4,10
   89df8:	212ef104 	addi	r4,r4,-17468
   89dfc:	e13ff015 	stw	r4,-64(fp)
   89e00:	e0bff117 	ldw	r2,-60(fp)
   89e04:	d8800015 	stw	r2,0(sp)
   89e08:	e0fff017 	ldw	r3,-64(fp)
   89e0c:	d8c00115 	stw	r3,4(sp)
   89e10:	010002b4 	movhi	r4,10
   89e14:	21357704 	addi	r4,r4,-10788
   89e18:	e17fe517 	ldw	r5,-108(fp)
   89e1c:	e1bff317 	ldw	r6,-52(fp)
   89e20:	e1fff217 	ldw	r7,-56(fp)
   89e24:	008ee340 	call	8ee34 <printf>
	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");

	printf("\nestablished timing ...\n");
	for (i = 0; i < 17; ++i) {
   89e28:	e0bfe517 	ldw	r2,-108(fp)
   89e2c:	10800044 	addi	r2,r2,1
   89e30:	e0bfe515 	stw	r2,-108(fp)
   89e34:	e0bfe517 	ldw	r2,-108(fp)
   89e38:	10800450 	cmplti	r2,r2,17
   89e3c:	103fc41e 	bne	r2,zero,89d50 <edid_print_v14+0x728>
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
   89e40:	010002b4 	movhi	r4,10
   89e44:	21358004 	addi	r4,r4,-10752
   89e48:	008ef700 	call	8ef70 <puts>
	for (i = 0; i < 8; ++i) {
   89e4c:	e03fe515 	stw	zero,-108(fp)
   89e50:	00004506 	br	89f68 <edid_print_v14+0x940>
		if (edid->standard_timings[i].refresh_rate) {
   89e54:	e0bfe517 	ldw	r2,-108(fp)
   89e58:	e0ffe617 	ldw	r3,-104(fp)
   89e5c:	10800324 	muli	r2,r2,12
   89e60:	10c5883a 	add	r2,r2,r3
   89e64:	10808304 	addi	r2,r2,524
   89e68:	10800017 	ldw	r2,0(r2)
   89e6c:	1005003a 	cmpeq	r2,r2,zero
   89e70:	10003a1e 	bne	r2,zero,89f5c <edid_print_v14+0x934>
			printf("  [%02d] %03d @ %02d Hz ", i, edid->standard_timings[i].horizontal, edid->standard_timings[i].refresh_rate);
   89e74:	e0bfe517 	ldw	r2,-108(fp)
   89e78:	e0ffe617 	ldw	r3,-104(fp)
   89e7c:	10800324 	muli	r2,r2,12
   89e80:	10c5883a 	add	r2,r2,r3
   89e84:	10808104 	addi	r2,r2,516
   89e88:	11800017 	ldw	r6,0(r2)
   89e8c:	e0bfe517 	ldw	r2,-108(fp)
   89e90:	e0ffe617 	ldw	r3,-104(fp)
   89e94:	10800324 	muli	r2,r2,12
   89e98:	10c5883a 	add	r2,r2,r3
   89e9c:	10808304 	addi	r2,r2,524
   89ea0:	11c00017 	ldw	r7,0(r2)
   89ea4:	010002b4 	movhi	r4,10
   89ea8:	21358604 	addi	r4,r4,-10728
   89eac:	e17fe517 	ldw	r5,-108(fp)
   89eb0:	008ee340 	call	8ee34 <printf>
			switch (edid->standard_timings[i].aspect_ratio) {
   89eb4:	e0bfe517 	ldw	r2,-108(fp)
   89eb8:	e0ffe617 	ldw	r3,-104(fp)
   89ebc:	10800324 	muli	r2,r2,12
   89ec0:	10c5883a 	add	r2,r2,r3
   89ec4:	10808204 	addi	r2,r2,520
   89ec8:	10800017 	ldw	r2,0(r2)
   89ecc:	e0bfef15 	stw	r2,-68(fp)
   89ed0:	e13fef17 	ldw	r4,-68(fp)
   89ed4:	20800060 	cmpeqi	r2,r4,1
   89ed8:	1000121e 	bne	r2,zero,89f24 <edid_print_v14+0x8fc>
   89edc:	e0ffef17 	ldw	r3,-68(fp)
   89ee0:	18800088 	cmpgei	r2,r3,2
   89ee4:	1000041e 	bne	r2,zero,89ef8 <edid_print_v14+0x8d0>
   89ee8:	e13fef17 	ldw	r4,-68(fp)
   89eec:	2005003a 	cmpeq	r2,r4,zero
   89ef0:	1000081e 	bne	r2,zero,89f14 <edid_print_v14+0x8ec>
   89ef4:	00001706 	br	89f54 <edid_print_v14+0x92c>
   89ef8:	e0ffef17 	ldw	r3,-68(fp)
   89efc:	188000a0 	cmpeqi	r2,r3,2
   89f00:	10000c1e 	bne	r2,zero,89f34 <edid_print_v14+0x90c>
   89f04:	e13fef17 	ldw	r4,-68(fp)
   89f08:	208000e0 	cmpeqi	r2,r4,3
   89f0c:	10000d1e 	bne	r2,zero,89f44 <edid_print_v14+0x91c>
   89f10:	00001006 	br	89f54 <edid_print_v14+0x92c>
			case ST_AR_16_10:
				printf("16:10\n");
   89f14:	010002b4 	movhi	r4,10
   89f18:	21358d04 	addi	r4,r4,-10700
   89f1c:	008ef700 	call	8ef70 <puts>
				break;
   89f20:	00000e06 	br	89f5c <edid_print_v14+0x934>
			case ST_AR_4_3:
				printf("4:3\n");
   89f24:	010002b4 	movhi	r4,10
   89f28:	21358f04 	addi	r4,r4,-10692
   89f2c:	008ef700 	call	8ef70 <puts>
				break;
   89f30:	00000a06 	br	89f5c <edid_print_v14+0x934>
			case ST_AR_5_4:
				printf("5:4\n");
   89f34:	010002b4 	movhi	r4,10
   89f38:	21359004 	addi	r4,r4,-10688
   89f3c:	008ef700 	call	8ef70 <puts>
				break;
   89f40:	00000606 	br	89f5c <edid_print_v14+0x934>
			case ST_AR_16_9:
				printf("16:9\n");
   89f44:	010002b4 	movhi	r4,10
   89f48:	21359104 	addi	r4,r4,-10684
   89f4c:	008ef700 	call	8ef70 <puts>
				break;
   89f50:	00000206 	br	89f5c <edid_print_v14+0x934>
			default:
				printf("\n");
   89f54:	01000284 	movi	r4,10
   89f58:	008eeac0 	call	8eeac <putchar>
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
	for (i = 0; i < 8; ++i) {
   89f5c:	e0bfe517 	ldw	r2,-108(fp)
   89f60:	10800044 	addi	r2,r2,1
   89f64:	e0bfe515 	stw	r2,-108(fp)
   89f68:	e0bfe517 	ldw	r2,-108(fp)
   89f6c:	10800210 	cmplti	r2,r2,8
   89f70:	103fb81e 	bne	r2,zero,89e54 <edid_print_v14+0x82c>
				break;
			}
		}
	}

	printf("\ndescriptors ...\n");
   89f74:	010002b4 	movhi	r4,10
   89f78:	21359304 	addi	r4,r4,-10676
   89f7c:	008ef700 	call	8ef70 <puts>
	for (i = 0; i < 4; ++i) {
   89f80:	e03fe515 	stw	zero,-108(fp)
   89f84:	0003a606 	br	8ae20 <edid_print_v14+0x17f8>
    	if (edid->descriptors[i].type == DT_DETAILED_TIMING) {
   89f88:	e0bfe517 	ldw	r2,-108(fp)
   89f8c:	e0ffe617 	ldw	r3,-104(fp)
   89f90:	10815c24 	muli	r2,r2,1392
   89f94:	10c5883a 	add	r2,r2,r3
   89f98:	10809904 	addi	r2,r2,612
   89f9c:	10800017 	ldw	r2,0(r2)
   89fa0:	1004c03a 	cmpne	r2,r2,zero
   89fa4:	10019c1e 	bne	r2,zero,8a618 <edid_print_v14+0xff0>
    		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
   89fa8:	010002b4 	movhi	r4,10
   89fac:	2132cb04 	addi	r4,r4,-13524
   89fb0:	e17fe517 	ldw	r5,-108(fp)
   89fb4:	008ee340 	call	8ee34 <printf>

    		printf("      pixel clock   : %d (Hz)\n", edid->descriptors[i].detailed_timing.pixel_clock);
   89fb8:	e0bfe517 	ldw	r2,-108(fp)
   89fbc:	e0ffe617 	ldw	r3,-104(fp)
   89fc0:	10815c24 	muli	r2,r2,1392
   89fc4:	10c5883a 	add	r2,r2,r3
   89fc8:	10809b04 	addi	r2,r2,620
   89fcc:	11400017 	ldw	r5,0(r2)
   89fd0:	010002b4 	movhi	r4,10
   89fd4:	2132d604 	addi	r4,r4,-13480
   89fd8:	008ee340 	call	8ee34 <printf>
    		printf("      h addressible : %d (pixels)\n", edid->descriptors[i].detailed_timing.width);
   89fdc:	e0bfe517 	ldw	r2,-108(fp)
   89fe0:	e0ffe617 	ldw	r3,-104(fp)
   89fe4:	10815c24 	muli	r2,r2,1392
   89fe8:	10c5883a 	add	r2,r2,r3
   89fec:	10809c04 	addi	r2,r2,624
   89ff0:	11400017 	ldw	r5,0(r2)
   89ff4:	010002b4 	movhi	r4,10
   89ff8:	2132de04 	addi	r4,r4,-13448
   89ffc:	008ee340 	call	8ee34 <printf>
    		printf("        blank       : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank);
   8a000:	e0bfe517 	ldw	r2,-108(fp)
   8a004:	e0ffe617 	ldw	r3,-104(fp)
   8a008:	10815c24 	muli	r2,r2,1392
   8a00c:	10c5883a 	add	r2,r2,r3
   8a010:	10809e04 	addi	r2,r2,632
   8a014:	11400017 	ldw	r5,0(r2)
   8a018:	010002b4 	movhi	r4,10
   8a01c:	2132e704 	addi	r4,r4,-13412
   8a020:	008ee340 	call	8ee34 <printf>
    		printf("        fp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_fp);
   8a024:	e0bfe517 	ldw	r2,-108(fp)
   8a028:	e0ffe617 	ldw	r3,-104(fp)
   8a02c:	10815c24 	muli	r2,r2,1392
   8a030:	10c5883a 	add	r2,r2,r3
   8a034:	1080a004 	addi	r2,r2,640
   8a038:	11400017 	ldw	r5,0(r2)
   8a03c:	010002b4 	movhi	r4,10
   8a040:	2132f004 	addi	r4,r4,-13376
   8a044:	008ee340 	call	8ee34 <printf>
    		printf("        sync        : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_sync);
   8a048:	e0bfe517 	ldw	r2,-108(fp)
   8a04c:	e0ffe617 	ldw	r3,-104(fp)
   8a050:	10815c24 	muli	r2,r2,1392
   8a054:	10c5883a 	add	r2,r2,r3
   8a058:	1080a204 	addi	r2,r2,648
   8a05c:	11400017 	ldw	r5,0(r2)
   8a060:	010002b4 	movhi	r4,10
   8a064:	2132f904 	addi	r4,r4,-13340
   8a068:	008ee340 	call	8ee34 <printf>
    		printf("        bp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank - edid->descriptors[i].detailed_timing.h_fp - edid->descriptors[i].detailed_timing.h_sync);
   8a06c:	e0bfe517 	ldw	r2,-108(fp)
   8a070:	e0ffe617 	ldw	r3,-104(fp)
   8a074:	10815c24 	muli	r2,r2,1392
   8a078:	10c5883a 	add	r2,r2,r3
   8a07c:	10809e04 	addi	r2,r2,632
   8a080:	11000017 	ldw	r4,0(r2)
   8a084:	e0bfe517 	ldw	r2,-108(fp)
   8a088:	e0ffe617 	ldw	r3,-104(fp)
   8a08c:	10815c24 	muli	r2,r2,1392
   8a090:	10c5883a 	add	r2,r2,r3
   8a094:	1080a004 	addi	r2,r2,640
   8a098:	10800017 	ldw	r2,0(r2)
   8a09c:	2089c83a 	sub	r4,r4,r2
   8a0a0:	e0bfe517 	ldw	r2,-108(fp)
   8a0a4:	e0ffe617 	ldw	r3,-104(fp)
   8a0a8:	10815c24 	muli	r2,r2,1392
   8a0ac:	10c5883a 	add	r2,r2,r3
   8a0b0:	1080a204 	addi	r2,r2,648
   8a0b4:	10800017 	ldw	r2,0(r2)
   8a0b8:	208bc83a 	sub	r5,r4,r2
   8a0bc:	010002b4 	movhi	r4,10
   8a0c0:	21330204 	addi	r4,r4,-13304
   8a0c4:	008ee340 	call	8ee34 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.h_size);
   8a0c8:	e0bfe517 	ldw	r2,-108(fp)
   8a0cc:	e0ffe617 	ldw	r3,-104(fp)
   8a0d0:	10815c24 	muli	r2,r2,1392
   8a0d4:	10c5883a 	add	r2,r2,r3
   8a0d8:	1080a404 	addi	r2,r2,656
   8a0dc:	11400017 	ldw	r5,0(r2)
   8a0e0:	010002b4 	movhi	r4,10
   8a0e4:	21330b04 	addi	r4,r4,-13268
   8a0e8:	008ee340 	call	8ee34 <printf>
    		printf("      v addressible : %d (lines)\n", edid->descriptors[i].detailed_timing.height);
   8a0ec:	e0bfe517 	ldw	r2,-108(fp)
   8a0f0:	e0ffe617 	ldw	r3,-104(fp)
   8a0f4:	10815c24 	muli	r2,r2,1392
   8a0f8:	10c5883a 	add	r2,r2,r3
   8a0fc:	10809d04 	addi	r2,r2,628
   8a100:	11400017 	ldw	r5,0(r2)
   8a104:	010002b4 	movhi	r4,10
   8a108:	21331304 	addi	r4,r4,-13236
   8a10c:	008ee340 	call	8ee34 <printf>
    		printf("        blank       : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank);
   8a110:	e0bfe517 	ldw	r2,-108(fp)
   8a114:	e0ffe617 	ldw	r3,-104(fp)
   8a118:	10815c24 	muli	r2,r2,1392
   8a11c:	10c5883a 	add	r2,r2,r3
   8a120:	10809f04 	addi	r2,r2,636
   8a124:	11400017 	ldw	r5,0(r2)
   8a128:	010002b4 	movhi	r4,10
   8a12c:	21331c04 	addi	r4,r4,-13200
   8a130:	008ee340 	call	8ee34 <printf>
    		printf("        fp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_fp);
   8a134:	e0bfe517 	ldw	r2,-108(fp)
   8a138:	e0ffe617 	ldw	r3,-104(fp)
   8a13c:	10815c24 	muli	r2,r2,1392
   8a140:	10c5883a 	add	r2,r2,r3
   8a144:	1080a104 	addi	r2,r2,644
   8a148:	11400017 	ldw	r5,0(r2)
   8a14c:	010002b4 	movhi	r4,10
   8a150:	21332504 	addi	r4,r4,-13164
   8a154:	008ee340 	call	8ee34 <printf>
    		printf("        sync        : %d (lines)\n", edid->descriptors[i].detailed_timing.v_sync);
   8a158:	e0bfe517 	ldw	r2,-108(fp)
   8a15c:	e0ffe617 	ldw	r3,-104(fp)
   8a160:	10815c24 	muli	r2,r2,1392
   8a164:	10c5883a 	add	r2,r2,r3
   8a168:	1080a304 	addi	r2,r2,652
   8a16c:	11400017 	ldw	r5,0(r2)
   8a170:	010002b4 	movhi	r4,10
   8a174:	21332e04 	addi	r4,r4,-13128
   8a178:	008ee340 	call	8ee34 <printf>
    		printf("        bp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank - edid->descriptors[i].detailed_timing.v_fp - edid->descriptors[i].detailed_timing.v_sync);
   8a17c:	e0bfe517 	ldw	r2,-108(fp)
   8a180:	e0ffe617 	ldw	r3,-104(fp)
   8a184:	10815c24 	muli	r2,r2,1392
   8a188:	10c5883a 	add	r2,r2,r3
   8a18c:	10809f04 	addi	r2,r2,636
   8a190:	11000017 	ldw	r4,0(r2)
   8a194:	e0bfe517 	ldw	r2,-108(fp)
   8a198:	e0ffe617 	ldw	r3,-104(fp)
   8a19c:	10815c24 	muli	r2,r2,1392
   8a1a0:	10c5883a 	add	r2,r2,r3
   8a1a4:	1080a104 	addi	r2,r2,644
   8a1a8:	10800017 	ldw	r2,0(r2)
   8a1ac:	2089c83a 	sub	r4,r4,r2
   8a1b0:	e0bfe517 	ldw	r2,-108(fp)
   8a1b4:	e0ffe617 	ldw	r3,-104(fp)
   8a1b8:	10815c24 	muli	r2,r2,1392
   8a1bc:	10c5883a 	add	r2,r2,r3
   8a1c0:	1080a304 	addi	r2,r2,652
   8a1c4:	10800017 	ldw	r2,0(r2)
   8a1c8:	208bc83a 	sub	r5,r4,r2
   8a1cc:	010002b4 	movhi	r4,10
   8a1d0:	21333704 	addi	r4,r4,-13092
   8a1d4:	008ee340 	call	8ee34 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.v_size);
   8a1d8:	e0bfe517 	ldw	r2,-108(fp)
   8a1dc:	e0ffe617 	ldw	r3,-104(fp)
   8a1e0:	10815c24 	muli	r2,r2,1392
   8a1e4:	10c5883a 	add	r2,r2,r3
   8a1e8:	1080a504 	addi	r2,r2,660
   8a1ec:	11400017 	ldw	r5,0(r2)
   8a1f0:	010002b4 	movhi	r4,10
   8a1f4:	21330b04 	addi	r4,r4,-13268
   8a1f8:	008ee340 	call	8ee34 <printf>
    		printf("      border (L&R)  : %d (pixels)\n", edid->descriptors[i].detailed_timing.border_lr);
   8a1fc:	e0bfe517 	ldw	r2,-108(fp)
   8a200:	e0ffe617 	ldw	r3,-104(fp)
   8a204:	10815c24 	muli	r2,r2,1392
   8a208:	10c5883a 	add	r2,r2,r3
   8a20c:	1080a604 	addi	r2,r2,664
   8a210:	11400017 	ldw	r5,0(r2)
   8a214:	010002b4 	movhi	r4,10
   8a218:	21334004 	addi	r4,r4,-13056
   8a21c:	008ee340 	call	8ee34 <printf>
    		printf("      border (T&B)  : %d (lines)\n", edid->descriptors[i].detailed_timing.border_tb);
   8a220:	e0bfe517 	ldw	r2,-108(fp)
   8a224:	e0ffe617 	ldw	r3,-104(fp)
   8a228:	10815c24 	muli	r2,r2,1392
   8a22c:	10c5883a 	add	r2,r2,r3
   8a230:	1080a704 	addi	r2,r2,668
   8a234:	11400017 	ldw	r5,0(r2)
   8a238:	010002b4 	movhi	r4,10
   8a23c:	21334904 	addi	r4,r4,-13020
   8a240:	008ee340 	call	8ee34 <printf>
    		printf("      interlaced    : %d\n", edid->descriptors[i].detailed_timing.interlaced);
   8a244:	e0bfe517 	ldw	r2,-108(fp)
   8a248:	e0ffe617 	ldw	r3,-104(fp)
   8a24c:	10815c24 	muli	r2,r2,1392
   8a250:	10c5883a 	add	r2,r2,r3
   8a254:	1080a804 	addi	r2,r2,672
   8a258:	11400017 	ldw	r5,0(r2)
   8a25c:	010002b4 	movhi	r4,10
   8a260:	21335204 	addi	r4,r4,-12984
   8a264:	008ee340 	call	8ee34 <printf>

    		if (edid->descriptors[i].detailed_timing.stereo == STEREO_NONE) {
   8a268:	e0bfe517 	ldw	r2,-108(fp)
   8a26c:	e0ffe617 	ldw	r3,-104(fp)
   8a270:	10815c24 	muli	r2,r2,1392
   8a274:	10c5883a 	add	r2,r2,r3
   8a278:	1080a904 	addi	r2,r2,676
   8a27c:	10800017 	ldw	r2,0(r2)
   8a280:	1004c03a 	cmpne	r2,r2,zero
   8a284:	1000041e 	bne	r2,zero,8a298 <edid_print_v14+0xc70>
    			printf("      stereo        : none\n");
   8a288:	010002b4 	movhi	r4,10
   8a28c:	21335904 	addi	r4,r4,-12956
   8a290:	008ef700 	call	8ef70 <puts>
   8a294:	00004d06 	br	8a3cc <edid_print_v14+0xda4>
    		} else {
        		printf("      stereo        : ");
   8a298:	010002b4 	movhi	r4,10
   8a29c:	21336004 	addi	r4,r4,-12928
   8a2a0:	008ee340 	call	8ee34 <printf>

        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
   8a2a4:	e0bfe517 	ldw	r2,-108(fp)
   8a2a8:	e0ffe617 	ldw	r3,-104(fp)
   8a2ac:	10815c24 	muli	r2,r2,1392
   8a2b0:	10c5883a 	add	r2,r2,r3
   8a2b4:	1080a904 	addi	r2,r2,676
   8a2b8:	10800017 	ldw	r2,0(r2)
   8a2bc:	1080008c 	andi	r2,r2,2
   8a2c0:	1005003a 	cmpeq	r2,r2,zero
   8a2c4:	1000031e 	bne	r2,zero,8a2d4 <edid_print_v14+0xcac>
            		printf("field_seq_right ");
   8a2c8:	010002b4 	movhi	r4,10
   8a2cc:	21336604 	addi	r4,r4,-12904
   8a2d0:	008ee340 	call	8ee34 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
   8a2d4:	e0bfe517 	ldw	r2,-108(fp)
   8a2d8:	e0ffe617 	ldw	r3,-104(fp)
   8a2dc:	10815c24 	muli	r2,r2,1392
   8a2e0:	10c5883a 	add	r2,r2,r3
   8a2e4:	1080a904 	addi	r2,r2,676
   8a2e8:	10800017 	ldw	r2,0(r2)
   8a2ec:	1080010c 	andi	r2,r2,4
   8a2f0:	1005003a 	cmpeq	r2,r2,zero
   8a2f4:	1000031e 	bne	r2,zero,8a304 <edid_print_v14+0xcdc>
            		printf("field_seq_left ");
   8a2f8:	010002b4 	movhi	r4,10
   8a2fc:	21336b04 	addi	r4,r4,-12884
   8a300:	008ee340 	call	8ee34 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
   8a304:	e0bfe517 	ldw	r2,-108(fp)
   8a308:	e0ffe617 	ldw	r3,-104(fp)
   8a30c:	10815c24 	muli	r2,r2,1392
   8a310:	10c5883a 	add	r2,r2,r3
   8a314:	1080a904 	addi	r2,r2,676
   8a318:	10800017 	ldw	r2,0(r2)
   8a31c:	1080020c 	andi	r2,r2,8
   8a320:	1005003a 	cmpeq	r2,r2,zero
   8a324:	1000031e 	bne	r2,zero,8a334 <edid_print_v14+0xd0c>
            		printf("2way_interleave_right ");
   8a328:	010002b4 	movhi	r4,10
   8a32c:	21336f04 	addi	r4,r4,-12868
   8a330:	008ee340 	call	8ee34 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
   8a334:	e0bfe517 	ldw	r2,-108(fp)
   8a338:	e0ffe617 	ldw	r3,-104(fp)
   8a33c:	10815c24 	muli	r2,r2,1392
   8a340:	10c5883a 	add	r2,r2,r3
   8a344:	1080a904 	addi	r2,r2,676
   8a348:	10800017 	ldw	r2,0(r2)
   8a34c:	1080040c 	andi	r2,r2,16
   8a350:	1005003a 	cmpeq	r2,r2,zero
   8a354:	1000031e 	bne	r2,zero,8a364 <edid_print_v14+0xd3c>
            		printf("2way_interleave_left ");
   8a358:	010002b4 	movhi	r4,10
   8a35c:	21337504 	addi	r4,r4,-12844
   8a360:	008ee340 	call	8ee34 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_4WAY_INTERLEAVE)
   8a364:	e0bfe517 	ldw	r2,-108(fp)
   8a368:	e0ffe617 	ldw	r3,-104(fp)
   8a36c:	10815c24 	muli	r2,r2,1392
   8a370:	10c5883a 	add	r2,r2,r3
   8a374:	1080a904 	addi	r2,r2,676
   8a378:	10800017 	ldw	r2,0(r2)
   8a37c:	1080080c 	andi	r2,r2,32
   8a380:	1005003a 	cmpeq	r2,r2,zero
   8a384:	1000031e 	bne	r2,zero,8a394 <edid_print_v14+0xd6c>
            		printf("4way_interleave ");
   8a388:	010002b4 	movhi	r4,10
   8a38c:	21337b04 	addi	r4,r4,-12820
   8a390:	008ee340 	call	8ee34 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
   8a394:	e0bfe517 	ldw	r2,-108(fp)
   8a398:	e0ffe617 	ldw	r3,-104(fp)
   8a39c:	10815c24 	muli	r2,r2,1392
   8a3a0:	10c5883a 	add	r2,r2,r3
   8a3a4:	1080a904 	addi	r2,r2,676
   8a3a8:	10800017 	ldw	r2,0(r2)
   8a3ac:	1080100c 	andi	r2,r2,64
   8a3b0:	1005003a 	cmpeq	r2,r2,zero
   8a3b4:	1000031e 	bne	r2,zero,8a3c4 <edid_print_v14+0xd9c>
            		printf("side-by-side ");
   8a3b8:	010002b4 	movhi	r4,10
   8a3bc:	21338004 	addi	r4,r4,-12800
   8a3c0:	008ee340 	call	8ee34 <printf>

        		printf("\n");
   8a3c4:	01000284 	movi	r4,10
   8a3c8:	008eeac0 	call	8eeac <putchar>
    		}

    		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC) {
   8a3cc:	e0bfe517 	ldw	r2,-108(fp)
   8a3d0:	e0ffe617 	ldw	r3,-104(fp)
   8a3d4:	10815c24 	muli	r2,r2,1392
   8a3d8:	10c5883a 	add	r2,r2,r3
   8a3dc:	1080aa04 	addi	r2,r2,680
   8a3e0:	10800017 	ldw	r2,0(r2)
   8a3e4:	1080004c 	andi	r2,r2,1
   8a3e8:	10803fcc 	andi	r2,r2,255
   8a3ec:	1005003a 	cmpeq	r2,r2,zero
   8a3f0:	10003b1e 	bne	r2,zero,8a4e0 <edid_print_v14+0xeb8>

    			printf("      analog sync   : composite");
   8a3f4:	010002b4 	movhi	r4,10
   8a3f8:	21338404 	addi	r4,r4,-12784
   8a3fc:	008ee340 	call	8ee34 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC)
   8a400:	e0bfe517 	ldw	r2,-108(fp)
   8a404:	e0ffe617 	ldw	r3,-104(fp)
   8a408:	10815c24 	muli	r2,r2,1392
   8a40c:	10c5883a 	add	r2,r2,r3
   8a410:	1080aa04 	addi	r2,r2,680
   8a414:	10800017 	ldw	r2,0(r2)
   8a418:	1080004c 	andi	r2,r2,1
   8a41c:	10803fcc 	andi	r2,r2,255
   8a420:	1005003a 	cmpeq	r2,r2,zero
   8a424:	1000031e 	bne	r2,zero,8a434 <edid_print_v14+0xe0c>
            		printf(" bipolar");
   8a428:	010002b4 	movhi	r4,10
   8a42c:	21338c04 	addi	r4,r4,-12752
   8a430:	008ee340 	call	8ee34 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION) {
   8a434:	e0bfe517 	ldw	r2,-108(fp)
   8a438:	e0ffe617 	ldw	r3,-104(fp)
   8a43c:	10815c24 	muli	r2,r2,1392
   8a440:	10c5883a 	add	r2,r2,r3
   8a444:	1080aa04 	addi	r2,r2,680
   8a448:	10800017 	ldw	r2,0(r2)
   8a44c:	1080010c 	andi	r2,r2,4
   8a450:	1005003a 	cmpeq	r2,r2,zero
   8a454:	10001c1e 	bne	r2,zero,8a4c8 <edid_print_v14+0xea0>
            		printf(" with_serrations");
   8a458:	010002b4 	movhi	r4,10
   8a45c:	21338f04 	addi	r4,r4,-12740
   8a460:	008ee340 	call	8ee34 <printf>
        			if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_G)
   8a464:	e0bfe517 	ldw	r2,-108(fp)
   8a468:	e0ffe617 	ldw	r3,-104(fp)
   8a46c:	10815c24 	muli	r2,r2,1392
   8a470:	10c5883a 	add	r2,r2,r3
   8a474:	1080aa04 	addi	r2,r2,680
   8a478:	10800017 	ldw	r2,0(r2)
   8a47c:	1080020c 	andi	r2,r2,8
   8a480:	1005003a 	cmpeq	r2,r2,zero
   8a484:	1000031e 	bne	r2,zero,8a494 <edid_print_v14+0xe6c>
						printf(" syn_on_green");
   8a488:	010002b4 	movhi	r4,10
   8a48c:	21339404 	addi	r4,r4,-12720
   8a490:	008ee340 	call	8ee34 <printf>
					if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_RGB)
   8a494:	e0bfe517 	ldw	r2,-108(fp)
   8a498:	e0ffe617 	ldw	r3,-104(fp)
   8a49c:	10815c24 	muli	r2,r2,1392
   8a4a0:	10c5883a 	add	r2,r2,r3
   8a4a4:	1080aa04 	addi	r2,r2,680
   8a4a8:	10800017 	ldw	r2,0(r2)
   8a4ac:	1080040c 	andi	r2,r2,16
   8a4b0:	1005003a 	cmpeq	r2,r2,zero
   8a4b4:	1000071e 	bne	r2,zero,8a4d4 <edid_print_v14+0xeac>
						printf(" syn_on_rgb");
   8a4b8:	010002b4 	movhi	r4,10
   8a4bc:	21339804 	addi	r4,r4,-12704
   8a4c0:	008ee340 	call	8ee34 <printf>
   8a4c4:	00000306 	br	8a4d4 <edid_print_v14+0xeac>
        		} else {
            		printf(" without_serrations");
   8a4c8:	010002b4 	movhi	r4,10
   8a4cc:	21339b04 	addi	r4,r4,-12692
   8a4d0:	008ee340 	call	8ee34 <printf>
        		}

				printf("\n");
   8a4d4:	01000284 	movi	r4,10
   8a4d8:	008eeac0 	call	8eeac <putchar>
   8a4dc:	00024d06 	br	8ae14 <edid_print_v14+0x17ec>

    		} else if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SYNC) {
   8a4e0:	e0bfe517 	ldw	r2,-108(fp)
   8a4e4:	e0ffe617 	ldw	r3,-104(fp)
   8a4e8:	10815c24 	muli	r2,r2,1392
   8a4ec:	10c5883a 	add	r2,r2,r3
   8a4f0:	1080aa04 	addi	r2,r2,680
   8a4f4:	10800017 	ldw	r2,0(r2)
   8a4f8:	1080080c 	andi	r2,r2,32
   8a4fc:	1005003a 	cmpeq	r2,r2,zero
   8a500:	1000161e 	bne	r2,zero,8a55c <edid_print_v14+0xf34>

    			printf("      digital sync  : composite");
   8a504:	010002b4 	movhi	r4,10
   8a508:	2133a004 	addi	r4,r4,-12672
   8a50c:	008ee340 	call	8ee34 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SERRATION)
   8a510:	e0bfe517 	ldw	r2,-108(fp)
   8a514:	e0ffe617 	ldw	r3,-104(fp)
   8a518:	10815c24 	muli	r2,r2,1392
   8a51c:	10c5883a 	add	r2,r2,r3
   8a520:	1080aa04 	addi	r2,r2,680
   8a524:	10800017 	ldw	r2,0(r2)
   8a528:	1080100c 	andi	r2,r2,64
   8a52c:	1005003a 	cmpeq	r2,r2,zero
   8a530:	1000041e 	bne	r2,zero,8a544 <edid_print_v14+0xf1c>
            		printf(" with_serrations");
   8a534:	010002b4 	movhi	r4,10
   8a538:	21338f04 	addi	r4,r4,-12740
   8a53c:	008ee340 	call	8ee34 <printf>
   8a540:	00000306 	br	8a550 <edid_print_v14+0xf28>
        		else
        			printf(" without_serrations");
   8a544:	010002b4 	movhi	r4,10
   8a548:	21339b04 	addi	r4,r4,-12692
   8a54c:	008ee340 	call	8ee34 <printf>

        		printf("\n");
   8a550:	01000284 	movi	r4,10
   8a554:	008eeac0 	call	8eeac <putchar>
   8a558:	00022e06 	br	8ae14 <edid_print_v14+0x17ec>

    		} else if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_SYNC) {
   8a55c:	e0bfe517 	ldw	r2,-108(fp)
   8a560:	e0ffe617 	ldw	r3,-104(fp)
   8a564:	10815c24 	muli	r2,r2,1392
   8a568:	10c5883a 	add	r2,r2,r3
   8a56c:	1080aa04 	addi	r2,r2,680
   8a570:	10800017 	ldw	r2,0(r2)
   8a574:	1080200c 	andi	r2,r2,128
   8a578:	1005003a 	cmpeq	r2,r2,zero
   8a57c:	1002251e 	bne	r2,zero,8ae14 <edid_print_v14+0x17ec>

    			printf("      digital sync  : seperate");
   8a580:	010002b4 	movhi	r4,10
   8a584:	2133a804 	addi	r4,r4,-12640
   8a588:	008ee340 	call	8ee34 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_VSYNC_N)
   8a58c:	e0bfe517 	ldw	r2,-108(fp)
   8a590:	e0ffe617 	ldw	r3,-104(fp)
   8a594:	10815c24 	muli	r2,r2,1392
   8a598:	10c5883a 	add	r2,r2,r3
   8a59c:	1080aa04 	addi	r2,r2,680
   8a5a0:	10800017 	ldw	r2,0(r2)
   8a5a4:	1080400c 	andi	r2,r2,256
   8a5a8:	1005003a 	cmpeq	r2,r2,zero
   8a5ac:	1000041e 	bne	r2,zero,8a5c0 <edid_print_v14+0xf98>
					printf(" vsync_n");
   8a5b0:	010002b4 	movhi	r4,10
   8a5b4:	2133b004 	addi	r4,r4,-12608
   8a5b8:	008ee340 	call	8ee34 <printf>
   8a5bc:	00000306 	br	8a5cc <edid_print_v14+0xfa4>
				else
					printf(" vsync_p");
   8a5c0:	010002b4 	movhi	r4,10
   8a5c4:	2133b304 	addi	r4,r4,-12596
   8a5c8:	008ee340 	call	8ee34 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_HSYNC_N)
   8a5cc:	e0bfe517 	ldw	r2,-108(fp)
   8a5d0:	e0ffe617 	ldw	r3,-104(fp)
   8a5d4:	10815c24 	muli	r2,r2,1392
   8a5d8:	10c5883a 	add	r2,r2,r3
   8a5dc:	1080aa04 	addi	r2,r2,680
   8a5e0:	10800017 	ldw	r2,0(r2)
   8a5e4:	1081000c 	andi	r2,r2,1024
   8a5e8:	1005003a 	cmpeq	r2,r2,zero
   8a5ec:	1000041e 	bne	r2,zero,8a600 <edid_print_v14+0xfd8>
					printf(" hsync_n");
   8a5f0:	010002b4 	movhi	r4,10
   8a5f4:	2133b604 	addi	r4,r4,-12584
   8a5f8:	008ee340 	call	8ee34 <printf>
   8a5fc:	00000306 	br	8a60c <edid_print_v14+0xfe4>
				else
					printf(" hsync_p");
   8a600:	010002b4 	movhi	r4,10
   8a604:	2133b904 	addi	r4,r4,-12572
   8a608:	008ee340 	call	8ee34 <printf>

        		printf("\n");
   8a60c:	01000284 	movi	r4,10
   8a610:	008eeac0 	call	8eeac <putchar>
   8a614:	0001ff06 	br	8ae14 <edid_print_v14+0x17ec>
    		}

    	} else if (edid->descriptors[i].type == DT_DISPLAY_DESCRIPTOR) {
   8a618:	e0bfe517 	ldw	r2,-108(fp)
   8a61c:	e0ffe617 	ldw	r3,-104(fp)
   8a620:	10815c24 	muli	r2,r2,1392
   8a624:	10c5883a 	add	r2,r2,r3
   8a628:	10809904 	addi	r2,r2,612
   8a62c:	10800017 	ldw	r2,0(r2)
   8a630:	10800058 	cmpnei	r2,r2,1
   8a634:	1001f71e 	bne	r2,zero,8ae14 <edid_print_v14+0x17ec>

    		printf("\n  [%d] DD -- display descriptor\n", i);
   8a638:	010002b4 	movhi	r4,10
   8a63c:	21359804 	addi	r4,r4,-10656
   8a640:	e17fe517 	ldw	r5,-108(fp)
   8a644:	008ee340 	call	8ee34 <printf>

        	switch (edid->descriptors[i].tag) {  // tag
   8a648:	e0bfe517 	ldw	r2,-108(fp)
   8a64c:	e0ffe617 	ldw	r3,-104(fp)
   8a650:	10815c24 	muli	r2,r2,1392
   8a654:	10c5883a 	add	r2,r2,r3
   8a658:	10809a04 	addi	r2,r2,616
   8a65c:	10800017 	ldw	r2,0(r2)
   8a660:	10bfc244 	addi	r2,r2,-247
   8a664:	e0bfff15 	stw	r2,-4(fp)
   8a668:	e0ffff17 	ldw	r3,-4(fp)
   8a66c:	18800268 	cmpgeui	r2,r3,9
   8a670:	1001e81e 	bne	r2,zero,8ae14 <edid_print_v14+0x17ec>
   8a674:	e13fff17 	ldw	r4,-4(fp)
   8a678:	e13fff17 	ldw	r4,-4(fp)
   8a67c:	2105883a 	add	r2,r4,r4
   8a680:	1087883a 	add	r3,r2,r2
   8a684:	00800274 	movhi	r2,9
   8a688:	10a9a604 	addi	r2,r2,-22888
   8a68c:	1885883a 	add	r2,r3,r2
   8a690:	10800017 	ldw	r2,0(r2)
   8a694:	1000683a 	jmp	r2
   8a698:	0008ac84 	movi	zero,8882
   8a69c:	0008ac74 	movhi	zero,8881
   8a6a0:	0008ac64 	muli	zero,zero,8881
   8a6a4:	0008aaf0 	cmpltui	zero,zero,8875
   8a6a8:	0008a9c0 	call	8a9c <__alt_mem_onchip_memory2-0x77564>
   8a6ac:	0008a99c 	xori	zero,zero,8870
   8a6b0:	0008a704 	movi	zero,8860
   8a6b4:	0008a6e0 	cmpeqi	zero,zero,8859
   8a6b8:	0008a6bc 	xorhi	zero,zero,8858
            case DTAG_PRODUCT_SERIAL:
            	printf("      product serial : %s\n", edid->descriptors[i].serial);
   8a6bc:	e0bfe517 	ldw	r2,-108(fp)
   8a6c0:	10815c24 	muli	r2,r2,1392
   8a6c4:	10c09b04 	addi	r3,r2,620
   8a6c8:	e0bfe617 	ldw	r2,-104(fp)
   8a6cc:	188b883a 	add	r5,r3,r2
   8a6d0:	010002b4 	movhi	r4,10
   8a6d4:	2135a104 	addi	r4,r4,-10620
   8a6d8:	008ee340 	call	8ee34 <printf>
                break;
   8a6dc:	0001cd06 	br	8ae14 <edid_print_v14+0x17ec>
            case DTAG_DATA_STRING:
            	printf("      data string : %s\n", edid->descriptors[i].string);
   8a6e0:	e0bfe517 	ldw	r2,-108(fp)
   8a6e4:	10815c24 	muli	r2,r2,1392
   8a6e8:	10c09b04 	addi	r3,r2,620
   8a6ec:	e0bfe617 	ldw	r2,-104(fp)
   8a6f0:	188b883a 	add	r5,r3,r2
   8a6f4:	010002b4 	movhi	r4,10
   8a6f8:	2135a804 	addi	r4,r4,-10592
   8a6fc:	008ee340 	call	8ee34 <printf>
                break;
   8a700:	0001c406 	br	8ae14 <edid_print_v14+0x17ec>
            case DTAG_RANGE_LIMIT:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;
   8a704:	e0bfe517 	ldw	r2,-108(fp)
   8a708:	e0ffe617 	ldw	r3,-104(fp)
   8a70c:	10815c24 	muli	r2,r2,1392
   8a710:	10c5883a 	add	r2,r2,r3
   8a714:	10c09a04 	addi	r3,r2,616
   8a718:	00803f44 	movi	r2,253
   8a71c:	18800015 	stw	r2,0(r3)

        		printf("      range limits and additional timing ...\n");
   8a720:	010002b4 	movhi	r4,10
   8a724:	2135ae04 	addi	r4,r4,-10568
   8a728:	008ef700 	call	8ef70 <puts>

        		printf("      horizonatal rate minimum : %d (kHz)\n", edid->descriptors[i].range_limits.h_min);
   8a72c:	e0bfe517 	ldw	r2,-108(fp)
   8a730:	e0ffe617 	ldw	r3,-104(fp)
   8a734:	10815c24 	muli	r2,r2,1392
   8a738:	10c5883a 	add	r2,r2,r3
   8a73c:	10809f04 	addi	r2,r2,636
   8a740:	11400017 	ldw	r5,0(r2)
   8a744:	010002b4 	movhi	r4,10
   8a748:	2135ba04 	addi	r4,r4,-10520
   8a74c:	008ee340 	call	8ee34 <printf>
        		printf("      horizontal rate maximum  : %d (KHz)\n", edid->descriptors[i].range_limits.h_max);
   8a750:	e0bfe517 	ldw	r2,-108(fp)
   8a754:	e0ffe617 	ldw	r3,-104(fp)
   8a758:	10815c24 	muli	r2,r2,1392
   8a75c:	10c5883a 	add	r2,r2,r3
   8a760:	1080a004 	addi	r2,r2,640
   8a764:	11400017 	ldw	r5,0(r2)
   8a768:	010002b4 	movhi	r4,10
   8a76c:	2135c504 	addi	r4,r4,-10476
   8a770:	008ee340 	call	8ee34 <printf>

        		switch (edid->descriptors[i].range_limits.h_offset) {
   8a774:	e0bfe517 	ldw	r2,-108(fp)
   8a778:	e0ffe617 	ldw	r3,-104(fp)
   8a77c:	10815c24 	muli	r2,r2,1392
   8a780:	10c5883a 	add	r2,r2,r3
   8a784:	10809c04 	addi	r2,r2,624
   8a788:	10800017 	ldw	r2,0(r2)
   8a78c:	e0bfee15 	stw	r2,-72(fp)
   8a790:	e0ffee17 	ldw	r3,-72(fp)
   8a794:	18800060 	cmpeqi	r2,r3,1
   8a798:	10000b1e 	bne	r2,zero,8a7c8 <edid_print_v14+0x11a0>
   8a79c:	e13fee17 	ldw	r4,-72(fp)
   8a7a0:	208000a0 	cmpeqi	r2,r4,2
   8a7a4:	10000c1e 	bne	r2,zero,8a7d8 <edid_print_v14+0x11b0>
   8a7a8:	e0ffee17 	ldw	r3,-72(fp)
   8a7ac:	1805003a 	cmpeq	r2,r3,zero
   8a7b0:	1000011e 	bne	r2,zero,8a7b8 <edid_print_v14+0x1190>
   8a7b4:	00000b06 	br	8a7e4 <edid_print_v14+0x11bc>
            	case HRO_ZERO:
            		printf("      horizontal rate offset   : no offset\n");
   8a7b8:	010002b4 	movhi	r4,10
   8a7bc:	2135d004 	addi	r4,r4,-10432
   8a7c0:	008ef700 	call	8ef70 <puts>
            		break;
   8a7c4:	00000706 	br	8a7e4 <edid_print_v14+0x11bc>
            	case HRO_MAX_255_MIN_ZERO:
            		printf("      horizontal rate offset   : max)+255kHz\n");
   8a7c8:	010002b4 	movhi	r4,10
   8a7cc:	2135db04 	addi	r4,r4,-10388
   8a7d0:	008ef700 	call	8ef70 <puts>
            		break;
   8a7d4:	00000306 	br	8a7e4 <edid_print_v14+0x11bc>
            	case HRO_MAX_255_MIN_255:
            		printf("      horizontal rate offset   : max)+255kHz min)+255kHz\n");
   8a7d8:	010002b4 	movhi	r4,10
   8a7dc:	2135e704 	addi	r4,r4,-10340
   8a7e0:	008ef700 	call	8ef70 <puts>
            		break;
            	}

        		printf("      vertical rate minimum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_min);
   8a7e4:	e0bfe517 	ldw	r2,-108(fp)
   8a7e8:	e0ffe617 	ldw	r3,-104(fp)
   8a7ec:	10815c24 	muli	r2,r2,1392
   8a7f0:	10c5883a 	add	r2,r2,r3
   8a7f4:	10809d04 	addi	r2,r2,628
   8a7f8:	11400017 	ldw	r5,0(r2)
   8a7fc:	010002b4 	movhi	r4,10
   8a800:	2135f604 	addi	r4,r4,-10280
   8a804:	008ee340 	call	8ee34 <printf>
        		printf("      vertical rate maximum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_max);
   8a808:	e0bfe517 	ldw	r2,-108(fp)
   8a80c:	e0ffe617 	ldw	r3,-104(fp)
   8a810:	10815c24 	muli	r2,r2,1392
   8a814:	10c5883a 	add	r2,r2,r3
   8a818:	10809e04 	addi	r2,r2,632
   8a81c:	11400017 	ldw	r5,0(r2)
   8a820:	010002b4 	movhi	r4,10
   8a824:	21360104 	addi	r4,r4,-10236
   8a828:	008ee340 	call	8ee34 <printf>

        		switch (edid->descriptors[i].range_limits.v_offset) {
   8a82c:	e0bfe517 	ldw	r2,-108(fp)
   8a830:	e0ffe617 	ldw	r3,-104(fp)
   8a834:	10815c24 	muli	r2,r2,1392
   8a838:	10c5883a 	add	r2,r2,r3
   8a83c:	10809b04 	addi	r2,r2,620
   8a840:	10800017 	ldw	r2,0(r2)
   8a844:	e0bfed15 	stw	r2,-76(fp)
   8a848:	e13fed17 	ldw	r4,-76(fp)
   8a84c:	20800060 	cmpeqi	r2,r4,1
   8a850:	10000b1e 	bne	r2,zero,8a880 <edid_print_v14+0x1258>
   8a854:	e0ffed17 	ldw	r3,-76(fp)
   8a858:	188000a0 	cmpeqi	r2,r3,2
   8a85c:	10000c1e 	bne	r2,zero,8a890 <edid_print_v14+0x1268>
   8a860:	e13fed17 	ldw	r4,-76(fp)
   8a864:	2005003a 	cmpeq	r2,r4,zero
   8a868:	1000011e 	bne	r2,zero,8a870 <edid_print_v14+0x1248>
   8a86c:	00000b06 	br	8a89c <edid_print_v14+0x1274>
            	case VRO_ZERO:
            		printf("      vertical rate offset     : no offset\n");
   8a870:	010002b4 	movhi	r4,10
   8a874:	21360c04 	addi	r4,r4,-10192
   8a878:	008ef700 	call	8ef70 <puts>
            		break;
   8a87c:	00000706 	br	8a89c <edid_print_v14+0x1274>
            	case VRO_MAX_255_MIN_ZERO:
            		printf("      vertical rate offset     : max)+255Hz\n");
   8a880:	010002b4 	movhi	r4,10
   8a884:	21361704 	addi	r4,r4,-10148
   8a888:	008ef700 	call	8ef70 <puts>
            		break;
   8a88c:	00000306 	br	8a89c <edid_print_v14+0x1274>
            	case VRO_MAX_255_MIN_255:
            		printf("      vertical rate offset     : max)+255Hz && min)+255Hz\n");
   8a890:	010002b4 	movhi	r4,10
   8a894:	21362204 	addi	r4,r4,-10104
   8a898:	008ef700 	call	8ef70 <puts>
            		break;
            	}

        		printf("      pixel clock maximum      : %d (MHz)\n", edid->descriptors[i].range_limits.p_max);
   8a89c:	e0bfe517 	ldw	r2,-108(fp)
   8a8a0:	e0ffe617 	ldw	r3,-104(fp)
   8a8a4:	10815c24 	muli	r2,r2,1392
   8a8a8:	10c5883a 	add	r2,r2,r3
   8a8ac:	1080a104 	addi	r2,r2,644
   8a8b0:	11400017 	ldw	r5,0(r2)
   8a8b4:	010002b4 	movhi	r4,10
   8a8b8:	21363104 	addi	r4,r4,-10044
   8a8bc:	008ee340 	call	8ee34 <printf>

                // additional timing support flags
            	if (edid->descriptors[i].range_limits.timing_flags == 0) {
   8a8c0:	e0bfe517 	ldw	r2,-108(fp)
   8a8c4:	e0ffe617 	ldw	r3,-104(fp)
   8a8c8:	10815c24 	muli	r2,r2,1392
   8a8cc:	10c5883a 	add	r2,r2,r3
   8a8d0:	1080a204 	addi	r2,r2,648
   8a8d4:	10800017 	ldw	r2,0(r2)
   8a8d8:	1004c03a 	cmpne	r2,r2,zero
   8a8dc:	1000041e 	bne	r2,zero,8a8f0 <edid_print_v14+0x12c8>
            		printf("      additional timing flags  : none\n");
   8a8e0:	010002b4 	movhi	r4,10
   8a8e4:	21363c04 	addi	r4,r4,-10000
   8a8e8:	008ef700 	call	8ef70 <puts>
   8a8ec:	00014906 	br	8ae14 <edid_print_v14+0x17ec>
            	} else {
            		printf("      additional timing flags  : ");
   8a8f0:	010002b4 	movhi	r4,10
   8a8f4:	21364604 	addi	r4,r4,-9960
   8a8f8:	008ee340 	call	8ee34 <printf>

            		if (edid->descriptors[i].range_limits.timing_flags & TF_DEFAULT_GTF)
                		printf("default_GTF ");
            		if (edid->descriptors[i].range_limits.timing_flags & TF_RANGE_LIMITS)
   8a8fc:	e0bfe517 	ldw	r2,-108(fp)
   8a900:	e0ffe617 	ldw	r3,-104(fp)
   8a904:	10815c24 	muli	r2,r2,1392
   8a908:	10c5883a 	add	r2,r2,r3
   8a90c:	1080a204 	addi	r2,r2,648
   8a910:	10800017 	ldw	r2,0(r2)
   8a914:	1080004c 	andi	r2,r2,1
   8a918:	10803fcc 	andi	r2,r2,255
   8a91c:	1005003a 	cmpeq	r2,r2,zero
   8a920:	1000031e 	bne	r2,zero,8a930 <edid_print_v14+0x1308>
                		printf("none ");
   8a924:	010002b4 	movhi	r4,10
   8a928:	21364f04 	addi	r4,r4,-9924
   8a92c:	008ee340 	call	8ee34 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_SECOND_GTF)
   8a930:	e0bfe517 	ldw	r2,-108(fp)
   8a934:	e0ffe617 	ldw	r3,-104(fp)
   8a938:	10815c24 	muli	r2,r2,1392
   8a93c:	10c5883a 	add	r2,r2,r3
   8a940:	1080a204 	addi	r2,r2,648
   8a944:	10800017 	ldw	r2,0(r2)
   8a948:	1080008c 	andi	r2,r2,2
   8a94c:	1005003a 	cmpeq	r2,r2,zero
   8a950:	1000031e 	bne	r2,zero,8a960 <edid_print_v14+0x1338>
                		printf("second_GTF ");
   8a954:	010002b4 	movhi	r4,10
   8a958:	21365104 	addi	r4,r4,-9916
   8a95c:	008ee340 	call	8ee34 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_CVT)
   8a960:	e0bfe517 	ldw	r2,-108(fp)
   8a964:	e0ffe617 	ldw	r3,-104(fp)
   8a968:	10815c24 	muli	r2,r2,1392
   8a96c:	10c5883a 	add	r2,r2,r3
   8a970:	1080a204 	addi	r2,r2,648
   8a974:	10800017 	ldw	r2,0(r2)
   8a978:	1080010c 	andi	r2,r2,4
   8a97c:	1005003a 	cmpeq	r2,r2,zero
   8a980:	1000031e 	bne	r2,zero,8a990 <edid_print_v14+0x1368>
                		printf("CVT ");
   8a984:	010002b4 	movhi	r4,10
   8a988:	21365404 	addi	r4,r4,-9904
   8a98c:	008ee340 	call	8ee34 <printf>

            		printf("\n");
   8a990:	01000284 	movi	r4,10
   8a994:	008eeac0 	call	8eeac <putchar>
            	}

                break;
   8a998:	00011e06 	br	8ae14 <edid_print_v14+0x17ec>

            case DTAG_PRODUCT_NAME:
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
   8a99c:	e0bfe517 	ldw	r2,-108(fp)
   8a9a0:	10815c24 	muli	r2,r2,1392
   8a9a4:	10c09b04 	addi	r3,r2,620
   8a9a8:	e0bfe617 	ldw	r2,-104(fp)
   8a9ac:	188b883a 	add	r5,r3,r2
   8a9b0:	010002b4 	movhi	r4,10
   8a9b4:	2135a804 	addi	r4,r4,-10592
   8a9b8:	008ee340 	call	8ee34 <printf>
                break;
   8a9bc:	00011506 	br	8ae14 <edid_print_v14+0x17ec>
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");
   8a9c0:	010002b4 	movhi	r4,10
   8a9c4:	21365604 	addi	r4,r4,-9896
   8a9c8:	008ef700 	call	8ef70 <puts>

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
   8a9cc:	e0bfe517 	ldw	r2,-108(fp)
   8a9d0:	e0ffe617 	ldw	r3,-104(fp)
   8a9d4:	10815c24 	muli	r2,r2,1392
   8a9d8:	10c5883a 	add	r2,r2,r3
   8a9dc:	10809b04 	addi	r2,r2,620
   8a9e0:	14000017 	ldw	r16,0(r2)
   8a9e4:	e0bfe517 	ldw	r2,-108(fp)
   8a9e8:	e0ffe617 	ldw	r3,-104(fp)
   8a9ec:	10815c24 	muli	r2,r2,1392
   8a9f0:	10c5883a 	add	r2,r2,r3
   8a9f4:	10809c04 	addi	r2,r2,624
   8a9f8:	14400017 	ldw	r17,0(r2)
   8a9fc:	e0bfe517 	ldw	r2,-108(fp)
   8aa00:	e0ffe617 	ldw	r3,-104(fp)
   8aa04:	10815c24 	muli	r2,r2,1392
   8aa08:	10c5883a 	add	r2,r2,r3
   8aa0c:	10809d04 	addi	r2,r2,628
   8aa10:	14800017 	ldw	r18,0(r2)
   8aa14:	e0bfe517 	ldw	r2,-108(fp)
   8aa18:	e0ffe617 	ldw	r3,-104(fp)
   8aa1c:	10815c24 	muli	r2,r2,1392
   8aa20:	10c5883a 	add	r2,r2,r3
   8aa24:	10809e04 	addi	r2,r2,632
   8aa28:	10800017 	ldw	r2,0(r2)
   8aa2c:	1009883a 	mov	r4,r2
   8aa30:	008d5cc0 	call	8d5cc <__extendsfdf2>
   8aa34:	1009883a 	mov	r4,r2
   8aa38:	180b883a 	mov	r5,r3
   8aa3c:	d9000015 	stw	r4,0(sp)
   8aa40:	d9400115 	stw	r5,4(sp)
   8aa44:	010002b4 	movhi	r4,10
   8aa48:	21365c04 	addi	r4,r4,-9872
   8aa4c:	800b883a 	mov	r5,r16
   8aa50:	880d883a 	mov	r6,r17
   8aa54:	900f883a 	mov	r7,r18
   8aa58:	008ee340 	call	8ee34 <printf>
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
   8aa5c:	e0bfe517 	ldw	r2,-108(fp)
   8aa60:	e0ffe617 	ldw	r3,-104(fp)
   8aa64:	10815c24 	muli	r2,r2,1392
   8aa68:	10c5883a 	add	r2,r2,r3
   8aa6c:	10809f04 	addi	r2,r2,636
   8aa70:	14000017 	ldw	r16,0(r2)
   8aa74:	e0bfe517 	ldw	r2,-108(fp)
   8aa78:	e0ffe617 	ldw	r3,-104(fp)
   8aa7c:	10815c24 	muli	r2,r2,1392
   8aa80:	10c5883a 	add	r2,r2,r3
   8aa84:	1080a004 	addi	r2,r2,640
   8aa88:	14400017 	ldw	r17,0(r2)
   8aa8c:	e0bfe517 	ldw	r2,-108(fp)
   8aa90:	e0ffe617 	ldw	r3,-104(fp)
   8aa94:	10815c24 	muli	r2,r2,1392
   8aa98:	10c5883a 	add	r2,r2,r3
   8aa9c:	1080a104 	addi	r2,r2,644
   8aaa0:	14800017 	ldw	r18,0(r2)
   8aaa4:	e0bfe517 	ldw	r2,-108(fp)
   8aaa8:	e0ffe617 	ldw	r3,-104(fp)
   8aaac:	10815c24 	muli	r2,r2,1392
   8aab0:	10c5883a 	add	r2,r2,r3
   8aab4:	1080a204 	addi	r2,r2,648
   8aab8:	10800017 	ldw	r2,0(r2)
   8aabc:	1009883a 	mov	r4,r2
   8aac0:	008d5cc0 	call	8d5cc <__extendsfdf2>
   8aac4:	1009883a 	mov	r4,r2
   8aac8:	180b883a 	mov	r5,r3
   8aacc:	d9000015 	stw	r4,0(sp)
   8aad0:	d9400115 	stw	r5,4(sp)
   8aad4:	010002b4 	movhi	r4,10
   8aad8:	21366a04 	addi	r4,r4,-9816
   8aadc:	800b883a 	mov	r5,r16
   8aae0:	880d883a 	mov	r6,r17
   8aae4:	900f883a 	mov	r7,r18
   8aae8:	008ee340 	call	8ee34 <printf>
            		edid->descriptors[i].white_point[1].index,
					edid->descriptors[i].white_point[1].x,
					edid->descriptors[i].white_point[1].y,
					edid->descriptors[i].white_point[1].gamma);

                break;
   8aaec:	0000c906 	br	8ae14 <edid_print_v14+0x17ec>

            case DTAG_STANDARD_TIMING:
            {
            	int j;

            	printf("      extra standard timing ...\n");
   8aaf0:	010002b4 	movhi	r4,10
   8aaf4:	21367804 	addi	r4,r4,-9760
   8aaf8:	008ef700 	call	8ef70 <puts>

            	for (j = 0; j < 6; ++j) {
   8aafc:	e03fe415 	stw	zero,-112(fp)
   8ab00:	00005406 	br	8ac54 <edid_print_v14+0x162c>
            		if (edid->descriptors[i].extra_standard_timings[j].refresh_rate) {
   8ab04:	e13fe517 	ldw	r4,-108(fp)
   8ab08:	e0bfe417 	ldw	r2,-112(fp)
   8ab0c:	e17fe617 	ldw	r5,-104(fp)
   8ab10:	10c00324 	muli	r3,r2,12
   8ab14:	20815c24 	muli	r2,r4,1392
   8ab18:	1885883a 	add	r2,r3,r2
   8ab1c:	1145883a 	add	r2,r2,r5
   8ab20:	1080ae04 	addi	r2,r2,696
   8ab24:	10800017 	ldw	r2,0(r2)
   8ab28:	1005003a 	cmpeq	r2,r2,zero
   8ab2c:	1000461e 	bne	r2,zero,8ac48 <edid_print_v14+0x1620>
            			printf("  [%02d] %03d @ %02d Hz ", j + 9, edid->descriptors[i].extra_standard_timings[j].horizontal, edid->descriptors[i].extra_standard_timings[j].refresh_rate);
   8ab30:	e0bfe417 	ldw	r2,-112(fp)
   8ab34:	11800244 	addi	r6,r2,9
   8ab38:	e13fe517 	ldw	r4,-108(fp)
   8ab3c:	e0bfe417 	ldw	r2,-112(fp)
   8ab40:	e17fe617 	ldw	r5,-104(fp)
   8ab44:	10c00324 	muli	r3,r2,12
   8ab48:	20815c24 	muli	r2,r4,1392
   8ab4c:	1885883a 	add	r2,r3,r2
   8ab50:	1145883a 	add	r2,r2,r5
   8ab54:	1080ac04 	addi	r2,r2,688
   8ab58:	12000017 	ldw	r8,0(r2)
   8ab5c:	e13fe517 	ldw	r4,-108(fp)
   8ab60:	e0bfe417 	ldw	r2,-112(fp)
   8ab64:	e17fe617 	ldw	r5,-104(fp)
   8ab68:	10c00324 	muli	r3,r2,12
   8ab6c:	20815c24 	muli	r2,r4,1392
   8ab70:	1885883a 	add	r2,r3,r2
   8ab74:	1145883a 	add	r2,r2,r5
   8ab78:	1080ae04 	addi	r2,r2,696
   8ab7c:	11c00017 	ldw	r7,0(r2)
   8ab80:	010002b4 	movhi	r4,10
   8ab84:	21358604 	addi	r4,r4,-10728
   8ab88:	300b883a 	mov	r5,r6
   8ab8c:	400d883a 	mov	r6,r8
   8ab90:	008ee340 	call	8ee34 <printf>
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
   8ab94:	e13fe517 	ldw	r4,-108(fp)
   8ab98:	e0bfe417 	ldw	r2,-112(fp)
   8ab9c:	e17fe617 	ldw	r5,-104(fp)
   8aba0:	10c00324 	muli	r3,r2,12
   8aba4:	20815c24 	muli	r2,r4,1392
   8aba8:	1885883a 	add	r2,r3,r2
   8abac:	1145883a 	add	r2,r2,r5
   8abb0:	1080ad04 	addi	r2,r2,692
   8abb4:	10800017 	ldw	r2,0(r2)
   8abb8:	e0bfec15 	stw	r2,-80(fp)
   8abbc:	e0ffec17 	ldw	r3,-80(fp)
   8abc0:	18800060 	cmpeqi	r2,r3,1
   8abc4:	1000121e 	bne	r2,zero,8ac10 <edid_print_v14+0x15e8>
   8abc8:	e13fec17 	ldw	r4,-80(fp)
   8abcc:	20800088 	cmpgei	r2,r4,2
   8abd0:	1000041e 	bne	r2,zero,8abe4 <edid_print_v14+0x15bc>
   8abd4:	e0ffec17 	ldw	r3,-80(fp)
   8abd8:	1805003a 	cmpeq	r2,r3,zero
   8abdc:	1000081e 	bne	r2,zero,8ac00 <edid_print_v14+0x15d8>
   8abe0:	00001706 	br	8ac40 <edid_print_v14+0x1618>
   8abe4:	e13fec17 	ldw	r4,-80(fp)
   8abe8:	208000a0 	cmpeqi	r2,r4,2
   8abec:	10000c1e 	bne	r2,zero,8ac20 <edid_print_v14+0x15f8>
   8abf0:	e0ffec17 	ldw	r3,-80(fp)
   8abf4:	188000e0 	cmpeqi	r2,r3,3
   8abf8:	10000d1e 	bne	r2,zero,8ac30 <edid_print_v14+0x1608>
   8abfc:	00001006 	br	8ac40 <edid_print_v14+0x1618>
            			case ST_AR_16_10:
            				printf("16:10\n");
   8ac00:	010002b4 	movhi	r4,10
   8ac04:	21358d04 	addi	r4,r4,-10700
   8ac08:	008ef700 	call	8ef70 <puts>
            				break;
   8ac0c:	00000e06 	br	8ac48 <edid_print_v14+0x1620>
            			case ST_AR_4_3:
            				printf("4:3\n");
   8ac10:	010002b4 	movhi	r4,10
   8ac14:	21358f04 	addi	r4,r4,-10692
   8ac18:	008ef700 	call	8ef70 <puts>
            				break;
   8ac1c:	00000a06 	br	8ac48 <edid_print_v14+0x1620>
            			case ST_AR_5_4:
            				printf("5:4\n");
   8ac20:	010002b4 	movhi	r4,10
   8ac24:	21359004 	addi	r4,r4,-10688
   8ac28:	008ef700 	call	8ef70 <puts>
            				break;
   8ac2c:	00000606 	br	8ac48 <edid_print_v14+0x1620>
            			case ST_AR_16_9:
            				printf("16:9\n");
   8ac30:	010002b4 	movhi	r4,10
   8ac34:	21359104 	addi	r4,r4,-10684
   8ac38:	008ef700 	call	8ef70 <puts>
            				break;
   8ac3c:	00000206 	br	8ac48 <edid_print_v14+0x1620>
            			default:
            				printf("\n");
   8ac40:	01000284 	movi	r4,10
   8ac44:	008eeac0 	call	8eeac <putchar>
            {
            	int j;

            	printf("      extra standard timing ...\n");

            	for (j = 0; j < 6; ++j) {
   8ac48:	e0bfe417 	ldw	r2,-112(fp)
   8ac4c:	10800044 	addi	r2,r2,1
   8ac50:	e0bfe415 	stw	r2,-112(fp)
   8ac54:	e0bfe417 	ldw	r2,-112(fp)
   8ac58:	10800190 	cmplti	r2,r2,6
   8ac5c:	103fa91e 	bne	r2,zero,8ab04 <edid_print_v14+0x14dc>
            				break;
            			}
            		}
            	}

                break;
   8ac60:	00006c06 	br	8ae14 <edid_print_v14+0x17ec>
            }

            case DTAG_DCM_DATA:
            	// display color management data
            	printf("      DCM -- display color management data ... (skipped)\n");
   8ac64:	010002b4 	movhi	r4,10
   8ac68:	21368004 	addi	r4,r4,-9728
   8ac6c:	008ef700 	call	8ef70 <puts>
            	break;
   8ac70:	00006806 	br	8ae14 <edid_print_v14+0x17ec>

            case DTAG_CVT_TIMING:
            	printf("      CVT -- coordinated video timing ... (skipped)\n");
   8ac74:	010002b4 	movhi	r4,10
   8ac78:	21368f04 	addi	r4,r4,-9668
   8ac7c:	008ef700 	call	8ef70 <puts>
                break;
   8ac80:	00006406 	br	8ae14 <edid_print_v14+0x17ec>
            case DTAG_ESTABLISHED_TIMING_III:
            {
            	int j ;

            	printf("      established timing 3 ...\n");
   8ac84:	010002b4 	movhi	r4,10
   8ac88:	21369c04 	addi	r4,r4,-9616
   8ac8c:	008ef700 	call	8ef70 <puts>

            	for (j = 0; j < 17; ++j) {
   8ac90:	e03fe315 	stw	zero,-116(fp)
   8ac94:	00005c06 	br	8ae08 <edid_print_v14+0x17e0>
            		if (edid->descriptors[i].timing_3[j].valid)
   8ac98:	e13fe517 	ldw	r4,-108(fp)
   8ac9c:	e0bfe317 	ldw	r2,-116(fp)
   8aca0:	e17fe617 	ldw	r5,-104(fp)
   8aca4:	10c00624 	muli	r3,r2,24
   8aca8:	20815c24 	muli	r2,r4,1392
   8acac:	1885883a 	add	r2,r3,r2
   8acb0:	1145883a 	add	r2,r2,r5
   8acb4:	1080d504 	addi	r2,r2,852
   8acb8:	10800017 	ldw	r2,0(r2)
   8acbc:	1005003a 	cmpeq	r2,r2,zero
   8acc0:	10004e1e 	bne	r2,zero,8adfc <edid_print_v14+0x17d4>
            			printf("  [%02d] %03d x %03d @ %02d Hz %s %s\n", i, edid->descriptors[i].timing_3[j].width, edid->descriptors[i].timing_3[j].height, edid->descriptors[i].timing_3[j].refresh, edid->descriptors[i].timing_3[j].interlaced ? "I" : " ", edid->descriptors[i].timing_3[j].rb ? "RB" : " ");
   8acc4:	e13fe517 	ldw	r4,-108(fp)
   8acc8:	e0bfe317 	ldw	r2,-116(fp)
   8accc:	e17fe617 	ldw	r5,-104(fp)
   8acd0:	10c00624 	muli	r3,r2,24
   8acd4:	20815c24 	muli	r2,r4,1392
   8acd8:	1885883a 	add	r2,r3,r2
   8acdc:	1145883a 	add	r2,r2,r5
   8ace0:	1080d604 	addi	r2,r2,856
   8ace4:	10800017 	ldw	r2,0(r2)
   8ace8:	e0bfeb15 	stw	r2,-84(fp)
   8acec:	e13fe517 	ldw	r4,-108(fp)
   8acf0:	e0bfe317 	ldw	r2,-116(fp)
   8acf4:	e17fe617 	ldw	r5,-104(fp)
   8acf8:	10c00624 	muli	r3,r2,24
   8acfc:	20815c24 	muli	r2,r4,1392
   8ad00:	1885883a 	add	r2,r3,r2
   8ad04:	1145883a 	add	r2,r2,r5
   8ad08:	1080d704 	addi	r2,r2,860
   8ad0c:	10800017 	ldw	r2,0(r2)
   8ad10:	e0bfea15 	stw	r2,-88(fp)
   8ad14:	e13fe517 	ldw	r4,-108(fp)
   8ad18:	e0bfe317 	ldw	r2,-116(fp)
   8ad1c:	e17fe617 	ldw	r5,-104(fp)
   8ad20:	10c00624 	muli	r3,r2,24
   8ad24:	20815c24 	muli	r2,r4,1392
   8ad28:	1885883a 	add	r2,r3,r2
   8ad2c:	1145883a 	add	r2,r2,r5
   8ad30:	1080d804 	addi	r2,r2,864
   8ad34:	10800017 	ldw	r2,0(r2)
   8ad38:	e0bfe915 	stw	r2,-92(fp)
   8ad3c:	e13fe517 	ldw	r4,-108(fp)
   8ad40:	e0bfe317 	ldw	r2,-116(fp)
   8ad44:	e17fe617 	ldw	r5,-104(fp)
   8ad48:	10c00624 	muli	r3,r2,24
   8ad4c:	20815c24 	muli	r2,r4,1392
   8ad50:	1885883a 	add	r2,r3,r2
   8ad54:	1145883a 	add	r2,r2,r5
   8ad58:	1080d904 	addi	r2,r2,868
   8ad5c:	10800017 	ldw	r2,0(r2)
   8ad60:	1005003a 	cmpeq	r2,r2,zero
   8ad64:	1000041e 	bne	r2,zero,8ad78 <edid_print_v14+0x1750>
   8ad68:	010002b4 	movhi	r4,10
   8ad6c:	2136a404 	addi	r4,r4,-9584
   8ad70:	e13fe815 	stw	r4,-96(fp)
   8ad74:	00000306 	br	8ad84 <edid_print_v14+0x175c>
   8ad78:	008002b4 	movhi	r2,10
   8ad7c:	10aef104 	addi	r2,r2,-17468
   8ad80:	e0bfe815 	stw	r2,-96(fp)
   8ad84:	e13fe517 	ldw	r4,-108(fp)
   8ad88:	e0bfe317 	ldw	r2,-116(fp)
   8ad8c:	e17fe617 	ldw	r5,-104(fp)
   8ad90:	10c00624 	muli	r3,r2,24
   8ad94:	20815c24 	muli	r2,r4,1392
   8ad98:	1885883a 	add	r2,r3,r2
   8ad9c:	1145883a 	add	r2,r2,r5
   8ada0:	1080da04 	addi	r2,r2,872
   8ada4:	10800017 	ldw	r2,0(r2)
   8ada8:	1005003a 	cmpeq	r2,r2,zero
   8adac:	1000041e 	bne	r2,zero,8adc0 <edid_print_v14+0x1798>
   8adb0:	00c002b4 	movhi	r3,10
   8adb4:	18f6a504 	addi	r3,r3,-9580
   8adb8:	e0ffe715 	stw	r3,-100(fp)
   8adbc:	00000306 	br	8adcc <edid_print_v14+0x17a4>
   8adc0:	010002b4 	movhi	r4,10
   8adc4:	212ef104 	addi	r4,r4,-17468
   8adc8:	e13fe715 	stw	r4,-100(fp)
   8adcc:	e0bfe917 	ldw	r2,-92(fp)
   8add0:	d8800015 	stw	r2,0(sp)
   8add4:	e0ffe817 	ldw	r3,-96(fp)
   8add8:	d8c00115 	stw	r3,4(sp)
   8addc:	e13fe717 	ldw	r4,-100(fp)
   8ade0:	d9000215 	stw	r4,8(sp)
   8ade4:	010002b4 	movhi	r4,10
   8ade8:	2136a604 	addi	r4,r4,-9576
   8adec:	e17fe517 	ldw	r5,-108(fp)
   8adf0:	e1bfeb17 	ldw	r6,-84(fp)
   8adf4:	e1ffea17 	ldw	r7,-88(fp)
   8adf8:	008ee340 	call	8ee34 <printf>
            {
            	int j ;

            	printf("      established timing 3 ...\n");

            	for (j = 0; j < 17; ++j) {
   8adfc:	e0bfe317 	ldw	r2,-116(fp)
   8ae00:	10800044 	addi	r2,r2,1
   8ae04:	e0bfe315 	stw	r2,-116(fp)
   8ae08:	e0bfe317 	ldw	r2,-116(fp)
   8ae0c:	10800450 	cmplti	r2,r2,17
   8ae10:	103fa11e 	bne	r2,zero,8ac98 <edid_print_v14+0x1670>
			}
		}
	}

	printf("\ndescriptors ...\n");
	for (i = 0; i < 4; ++i) {
   8ae14:	e0bfe517 	ldw	r2,-108(fp)
   8ae18:	10800044 	addi	r2,r2,1
   8ae1c:	e0bfe515 	stw	r2,-108(fp)
   8ae20:	e0bfe517 	ldw	r2,-108(fp)
   8ae24:	10800110 	cmplti	r2,r2,4
   8ae28:	103c571e 	bne	r2,zero,89f88 <edid_print_v14+0x960>
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
   8ae2c:	e03fe515 	stw	zero,-108(fp)
   8ae30:	00000f06 	br	8ae70 <edid_print_v14+0x1848>
		switch (edid->ext_data[i].ext_tag) {
   8ae34:	e0bfe517 	ldw	r2,-108(fp)
   8ae38:	e0ffe617 	ldw	r3,-104(fp)
   8ae3c:	10816f24 	muli	r2,r2,1468
   8ae40:	10c5883a 	add	r2,r2,r3
   8ae44:	10860b04 	addi	r2,r2,6188
   8ae48:	10800017 	ldw	r2,0(r2)
   8ae4c:	108000a0 	cmpeqi	r2,r2,2
   8ae50:	1000011e 	bne	r2,zero,8ae58 <edid_print_v14+0x1830>
   8ae54:	00000306 	br	8ae64 <edid_print_v14+0x183c>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
   8ae58:	e13fe617 	ldw	r4,-104(fp)
   8ae5c:	e17fe517 	ldw	r5,-108(fp)
   8ae60:	00835500 	call	83550 <edid_print_cea>
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
   8ae64:	e0bfe517 	ldw	r2,-108(fp)
   8ae68:	10800044 	addi	r2,r2,1
   8ae6c:	e0bfe515 	stw	r2,-108(fp)
   8ae70:	e0bfe517 	ldw	r2,-108(fp)
   8ae74:	10800210 	cmplti	r2,r2,8
   8ae78:	103fee1e 	bne	r2,zero,8ae34 <edid_print_v14+0x180c>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
			break;
		}
	}
}
   8ae7c:	e037883a 	mov	sp,fp
   8ae80:	dfc00417 	ldw	ra,16(sp)
   8ae84:	df000317 	ldw	fp,12(sp)
   8ae88:	dc800217 	ldw	r18,8(sp)
   8ae8c:	dc400117 	ldw	r17,4(sp)
   8ae90:	dc000017 	ldw	r16,0(sp)
   8ae94:	dec00504 	addi	sp,sp,20
   8ae98:	f800283a 	ret

0008ae9c <reg_read>:
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
   8ae9c:	defff804 	addi	sp,sp,-32
   8aea0:	de00012e 	bgeu	sp,et,8aea8 <reg_read+0xc>
   8aea4:	003da0fa 	break	3
   8aea8:	dfc00715 	stw	ra,28(sp)
   8aeac:	df000615 	stw	fp,24(sp)
   8aeb0:	df000604 	addi	fp,sp,24
   8aeb4:	e13ffc15 	stw	r4,-16(fp)
   8aeb8:	e17ffd15 	stw	r5,-12(fp)
   8aebc:	e1bffe15 	stw	r6,-8(fp)
	bool r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8 *)data);
   8aec0:	e0bffc17 	ldw	r2,-16(fp)
   8aec4:	10800017 	ldw	r2,0(r2)
   8aec8:	11803fcc 	andi	r6,r2,255
   8aecc:	3180201c 	xori	r6,r6,128
   8aed0:	31bfe004 	addi	r6,r6,-128
   8aed4:	e0bffd17 	ldw	r2,-12(fp)
   8aed8:	11c03fcc 	andi	r7,r2,255
   8aedc:	e0bffe17 	ldw	r2,-8(fp)
   8aee0:	d8800015 	stw	r2,0(sp)
   8aee4:	01000434 	movhi	r4,16
   8aee8:	21041004 	addi	r4,r4,4160
   8aeec:	01400434 	movhi	r5,16
   8aef0:	29441404 	addi	r5,r5,4176
   8aef4:	008b3ec0 	call	8b3ec <I2C_Read>
   8aef8:	e0bffb15 	stw	r2,-20(fp)
	if (!r)
   8aefc:	e0bffb17 	ldw	r2,-20(fp)
   8af00:	1004c03a 	cmpne	r2,r2,zero
   8af04:	1000031e 	bne	r2,zero,8af14 <reg_read+0x78>
		return -1;
   8af08:	00bfffc4 	movi	r2,-1
   8af0c:	e0bfff15 	stw	r2,-4(fp)
   8af10:	00000106 	br	8af18 <reg_read+0x7c>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8af14:	e03fff15 	stw	zero,-4(fp)
   8af18:	e0bfff17 	ldw	r2,-4(fp)
}
   8af1c:	e037883a 	mov	sp,fp
   8af20:	dfc00117 	ldw	ra,4(sp)
   8af24:	df000017 	ldw	fp,0(sp)
   8af28:	dec00204 	addi	sp,sp,8
   8af2c:	f800283a 	ret

0008af30 <reg_write>:

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
   8af30:	defff804 	addi	sp,sp,-32
   8af34:	de00012e 	bgeu	sp,et,8af3c <reg_write+0xc>
   8af38:	003da0fa 	break	3
   8af3c:	dfc00715 	stw	ra,28(sp)
   8af40:	df000615 	stw	fp,24(sp)
   8af44:	df000604 	addi	fp,sp,24
   8af48:	e13ffc15 	stw	r4,-16(fp)
   8af4c:	e17ffd15 	stw	r5,-12(fp)
   8af50:	e1bffe15 	stw	r6,-8(fp)
	//printf("[%02x] <- %02x\n", reg, data);

	bool r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8)data);
   8af54:	e0bffc17 	ldw	r2,-16(fp)
   8af58:	10800017 	ldw	r2,0(r2)
   8af5c:	11803fcc 	andi	r6,r2,255
   8af60:	3180201c 	xori	r6,r6,128
   8af64:	31bfe004 	addi	r6,r6,-128
   8af68:	e0bffd17 	ldw	r2,-12(fp)
   8af6c:	11c03fcc 	andi	r7,r2,255
   8af70:	e0bffe17 	ldw	r2,-8(fp)
   8af74:	10803fcc 	andi	r2,r2,255
   8af78:	d8800015 	stw	r2,0(sp)
   8af7c:	01000434 	movhi	r4,16
   8af80:	21041004 	addi	r4,r4,4160
   8af84:	01400434 	movhi	r5,16
   8af88:	29441404 	addi	r5,r5,4176
   8af8c:	008b30c0 	call	8b30c <I2C_Write>
   8af90:	e0bffb15 	stw	r2,-20(fp)
	if (!r)
   8af94:	e0bffb17 	ldw	r2,-20(fp)
   8af98:	1004c03a 	cmpne	r2,r2,zero
   8af9c:	1000031e 	bne	r2,zero,8afac <reg_write+0x7c>
		return -1;
   8afa0:	00bfffc4 	movi	r2,-1
   8afa4:	e0bfff15 	stw	r2,-4(fp)
   8afa8:	00000106 	br	8afb0 <reg_write+0x80>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8afac:	e03fff15 	stw	zero,-4(fp)
   8afb0:	e0bfff17 	ldw	r2,-4(fp)
}
   8afb4:	e037883a 	mov	sp,fp
   8afb8:	dfc00117 	ldw	ra,4(sp)
   8afbc:	df000017 	ldw	fp,0(sp)
   8afc0:	dec00204 	addi	sp,sp,8
   8afc4:	f800283a 	ret

0008afc8 <reg_update_bits>:

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
   8afc8:	defff604 	addi	sp,sp,-40
   8afcc:	de00012e 	bgeu	sp,et,8afd4 <reg_update_bits+0xc>
   8afd0:	003da0fa 	break	3
   8afd4:	dfc00915 	stw	ra,36(sp)
   8afd8:	df000815 	stw	fp,32(sp)
   8afdc:	df000804 	addi	fp,sp,32
   8afe0:	e13ffb15 	stw	r4,-20(fp)
   8afe4:	e17ffc15 	stw	r5,-16(fp)
   8afe8:	e1bffd15 	stw	r6,-12(fp)
   8afec:	e1fffe15 	stw	r7,-8(fp)
	bool r = 0;
   8aff0:	e03ff915 	stw	zero,-28(fp)
	alt_u8 regv = 0;
   8aff4:	e03ffa05 	stb	zero,-24(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   8aff8:	e0bffb17 	ldw	r2,-20(fp)
   8affc:	10800017 	ldw	r2,0(r2)
   8b000:	11803fcc 	andi	r6,r2,255
   8b004:	3180201c 	xori	r6,r6,128
   8b008:	31bfe004 	addi	r6,r6,-128
   8b00c:	e0bffc17 	ldw	r2,-16(fp)
   8b010:	11c03fcc 	andi	r7,r2,255
   8b014:	e0bffa04 	addi	r2,fp,-24
   8b018:	d8800015 	stw	r2,0(sp)
   8b01c:	01000434 	movhi	r4,16
   8b020:	21041004 	addi	r4,r4,4160
   8b024:	01400434 	movhi	r5,16
   8b028:	29441404 	addi	r5,r5,4176
   8b02c:	008b3ec0 	call	8b3ec <I2C_Read>
   8b030:	e0bff915 	stw	r2,-28(fp)
	if (!r)
   8b034:	e0bff917 	ldw	r2,-28(fp)
   8b038:	1004c03a 	cmpne	r2,r2,zero
   8b03c:	1000031e 	bne	r2,zero,8b04c <reg_update_bits+0x84>
		return -1;
   8b040:	00bfffc4 	movi	r2,-1
   8b044:	e0bfff15 	stw	r2,-4(fp)
   8b048:	00002506 	br	8b0e0 <reg_update_bits+0x118>

	regv &= ~((alt_u8)mask);
   8b04c:	e0bffd17 	ldw	r2,-12(fp)
   8b050:	0084303a 	nor	r2,zero,r2
   8b054:	1007883a 	mov	r3,r2
   8b058:	e0bffa03 	ldbu	r2,-24(fp)
   8b05c:	1884703a 	and	r2,r3,r2
   8b060:	e0bffa05 	stb	r2,-24(fp)

	regv |= ((alt_u8)data & (alt_u8)mask);
   8b064:	e0bffe17 	ldw	r2,-8(fp)
   8b068:	1007883a 	mov	r3,r2
   8b06c:	e0bffd17 	ldw	r2,-12(fp)
   8b070:	1884703a 	and	r2,r3,r2
   8b074:	1007883a 	mov	r3,r2
   8b078:	e0bffa03 	ldbu	r2,-24(fp)
   8b07c:	1884b03a 	or	r2,r3,r2
   8b080:	e0bffa05 	stb	r2,-24(fp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   8b084:	e0bffb17 	ldw	r2,-20(fp)
   8b088:	10800017 	ldw	r2,0(r2)
   8b08c:	11803fcc 	andi	r6,r2,255
   8b090:	3180201c 	xori	r6,r6,128
   8b094:	31bfe004 	addi	r6,r6,-128
   8b098:	e0bffc17 	ldw	r2,-16(fp)
   8b09c:	11c03fcc 	andi	r7,r2,255
   8b0a0:	e0bffa03 	ldbu	r2,-24(fp)
   8b0a4:	10803fcc 	andi	r2,r2,255
   8b0a8:	d8800015 	stw	r2,0(sp)
   8b0ac:	01000434 	movhi	r4,16
   8b0b0:	21041004 	addi	r4,r4,4160
   8b0b4:	01400434 	movhi	r5,16
   8b0b8:	29441404 	addi	r5,r5,4176
   8b0bc:	008b30c0 	call	8b30c <I2C_Write>
   8b0c0:	e0bff915 	stw	r2,-28(fp)
	if (!r)
   8b0c4:	e0bff917 	ldw	r2,-28(fp)
   8b0c8:	1004c03a 	cmpne	r2,r2,zero
   8b0cc:	1000031e 	bne	r2,zero,8b0dc <reg_update_bits+0x114>
		return -1;
   8b0d0:	00bfffc4 	movi	r2,-1
   8b0d4:	e0bfff15 	stw	r2,-4(fp)
   8b0d8:	00000106 	br	8b0e0 <reg_update_bits+0x118>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8b0dc:	e03fff15 	stw	zero,-4(fp)
   8b0e0:	e0bfff17 	ldw	r2,-4(fp)
}
   8b0e4:	e037883a 	mov	sp,fp
   8b0e8:	dfc00117 	ldw	ra,4(sp)
   8b0ec:	df000017 	ldw	fp,0(sp)
   8b0f0:	dec00204 	addi	sp,sp,8
   8b0f4:	f800283a 	ret

0008b0f8 <reg_or_bits>:

int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
   8b0f8:	defff704 	addi	sp,sp,-36
   8b0fc:	de00012e 	bgeu	sp,et,8b104 <reg_or_bits+0xc>
   8b100:	003da0fa 	break	3
   8b104:	dfc00815 	stw	ra,32(sp)
   8b108:	df000715 	stw	fp,28(sp)
   8b10c:	df000704 	addi	fp,sp,28
   8b110:	e13ffc15 	stw	r4,-16(fp)
   8b114:	e17ffd15 	stw	r5,-12(fp)
   8b118:	e1bffe15 	stw	r6,-8(fp)
	bool r = 0;
   8b11c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 regv = 0;
   8b120:	e03ffb05 	stb	zero,-20(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   8b124:	e0bffc17 	ldw	r2,-16(fp)
   8b128:	10800017 	ldw	r2,0(r2)
   8b12c:	11803fcc 	andi	r6,r2,255
   8b130:	3180201c 	xori	r6,r6,128
   8b134:	31bfe004 	addi	r6,r6,-128
   8b138:	e0bffd17 	ldw	r2,-12(fp)
   8b13c:	11c03fcc 	andi	r7,r2,255
   8b140:	e0bffb04 	addi	r2,fp,-20
   8b144:	d8800015 	stw	r2,0(sp)
   8b148:	01000434 	movhi	r4,16
   8b14c:	21041004 	addi	r4,r4,4160
   8b150:	01400434 	movhi	r5,16
   8b154:	29441404 	addi	r5,r5,4176
   8b158:	008b3ec0 	call	8b3ec <I2C_Read>
   8b15c:	e0bffa15 	stw	r2,-24(fp)
	if (!r)
   8b160:	e0bffa17 	ldw	r2,-24(fp)
   8b164:	1004c03a 	cmpne	r2,r2,zero
   8b168:	1000031e 	bne	r2,zero,8b178 <reg_or_bits+0x80>
		return -1;
   8b16c:	00bfffc4 	movi	r2,-1
   8b170:	e0bfff15 	stw	r2,-4(fp)
   8b174:	00001c06 	br	8b1e8 <reg_or_bits+0xf0>

	regv |= (alt_u8)data;
   8b178:	e0bffe17 	ldw	r2,-8(fp)
   8b17c:	1007883a 	mov	r3,r2
   8b180:	e0bffb03 	ldbu	r2,-20(fp)
   8b184:	1884b03a 	or	r2,r3,r2
   8b188:	e0bffb05 	stb	r2,-20(fp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   8b18c:	e0bffc17 	ldw	r2,-16(fp)
   8b190:	10800017 	ldw	r2,0(r2)
   8b194:	11803fcc 	andi	r6,r2,255
   8b198:	3180201c 	xori	r6,r6,128
   8b19c:	31bfe004 	addi	r6,r6,-128
   8b1a0:	e0bffd17 	ldw	r2,-12(fp)
   8b1a4:	11c03fcc 	andi	r7,r2,255
   8b1a8:	e0bffb03 	ldbu	r2,-20(fp)
   8b1ac:	10803fcc 	andi	r2,r2,255
   8b1b0:	d8800015 	stw	r2,0(sp)
   8b1b4:	01000434 	movhi	r4,16
   8b1b8:	21041004 	addi	r4,r4,4160
   8b1bc:	01400434 	movhi	r5,16
   8b1c0:	29441404 	addi	r5,r5,4176
   8b1c4:	008b30c0 	call	8b30c <I2C_Write>
   8b1c8:	e0bffa15 	stw	r2,-24(fp)
	if (!r)
   8b1cc:	e0bffa17 	ldw	r2,-24(fp)
   8b1d0:	1004c03a 	cmpne	r2,r2,zero
   8b1d4:	1000031e 	bne	r2,zero,8b1e4 <reg_or_bits+0xec>
		return -1;
   8b1d8:	00bfffc4 	movi	r2,-1
   8b1dc:	e0bfff15 	stw	r2,-4(fp)
   8b1e0:	00000106 	br	8b1e8 <reg_or_bits+0xf0>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8b1e4:	e03fff15 	stw	zero,-4(fp)
   8b1e8:	e0bfff17 	ldw	r2,-4(fp)
}
   8b1ec:	e037883a 	mov	sp,fp
   8b1f0:	dfc00117 	ldw	ra,4(sp)
   8b1f4:	df000017 	ldw	fp,0(sp)
   8b1f8:	dec00204 	addi	sp,sp,8
   8b1fc:	f800283a 	ret

0008b200 <reg_clear_bits>:

int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
   8b200:	defff704 	addi	sp,sp,-36
   8b204:	de00012e 	bgeu	sp,et,8b20c <reg_clear_bits+0xc>
   8b208:	003da0fa 	break	3
   8b20c:	dfc00815 	stw	ra,32(sp)
   8b210:	df000715 	stw	fp,28(sp)
   8b214:	df000704 	addi	fp,sp,28
   8b218:	e13ffc15 	stw	r4,-16(fp)
   8b21c:	e17ffd15 	stw	r5,-12(fp)
   8b220:	e1bffe15 	stw	r6,-8(fp)
	bool r = 0;
   8b224:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 regv = 0;
   8b228:	e03ffb05 	stb	zero,-20(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   8b22c:	e0bffc17 	ldw	r2,-16(fp)
   8b230:	10800017 	ldw	r2,0(r2)
   8b234:	11803fcc 	andi	r6,r2,255
   8b238:	3180201c 	xori	r6,r6,128
   8b23c:	31bfe004 	addi	r6,r6,-128
   8b240:	e0bffd17 	ldw	r2,-12(fp)
   8b244:	11c03fcc 	andi	r7,r2,255
   8b248:	e0bffb04 	addi	r2,fp,-20
   8b24c:	d8800015 	stw	r2,0(sp)
   8b250:	01000434 	movhi	r4,16
   8b254:	21041004 	addi	r4,r4,4160
   8b258:	01400434 	movhi	r5,16
   8b25c:	29441404 	addi	r5,r5,4176
   8b260:	008b3ec0 	call	8b3ec <I2C_Read>
   8b264:	e0bffa15 	stw	r2,-24(fp)
	if (!r)
   8b268:	e0bffa17 	ldw	r2,-24(fp)
   8b26c:	1004c03a 	cmpne	r2,r2,zero
   8b270:	1000031e 	bne	r2,zero,8b280 <reg_clear_bits+0x80>
		return -1;
   8b274:	00bfffc4 	movi	r2,-1
   8b278:	e0bfff15 	stw	r2,-4(fp)
   8b27c:	00001d06 	br	8b2f4 <reg_clear_bits+0xf4>

	regv &= ~((alt_u8)mask);
   8b280:	e0bffe17 	ldw	r2,-8(fp)
   8b284:	0084303a 	nor	r2,zero,r2
   8b288:	1007883a 	mov	r3,r2
   8b28c:	e0bffb03 	ldbu	r2,-20(fp)
   8b290:	1884703a 	and	r2,r3,r2
   8b294:	e0bffb05 	stb	r2,-20(fp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   8b298:	e0bffc17 	ldw	r2,-16(fp)
   8b29c:	10800017 	ldw	r2,0(r2)
   8b2a0:	11803fcc 	andi	r6,r2,255
   8b2a4:	3180201c 	xori	r6,r6,128
   8b2a8:	31bfe004 	addi	r6,r6,-128
   8b2ac:	e0bffd17 	ldw	r2,-12(fp)
   8b2b0:	11c03fcc 	andi	r7,r2,255
   8b2b4:	e0bffb03 	ldbu	r2,-20(fp)
   8b2b8:	10803fcc 	andi	r2,r2,255
   8b2bc:	d8800015 	stw	r2,0(sp)
   8b2c0:	01000434 	movhi	r4,16
   8b2c4:	21041004 	addi	r4,r4,4160
   8b2c8:	01400434 	movhi	r5,16
   8b2cc:	29441404 	addi	r5,r5,4176
   8b2d0:	008b30c0 	call	8b30c <I2C_Write>
   8b2d4:	e0bffa15 	stw	r2,-24(fp)
	if (!r)
   8b2d8:	e0bffa17 	ldw	r2,-24(fp)
   8b2dc:	1004c03a 	cmpne	r2,r2,zero
   8b2e0:	1000031e 	bne	r2,zero,8b2f0 <reg_clear_bits+0xf0>
		return -1;
   8b2e4:	00bfffc4 	movi	r2,-1
   8b2e8:	e0bfff15 	stw	r2,-4(fp)
   8b2ec:	00000106 	br	8b2f4 <reg_clear_bits+0xf4>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8b2f0:	e03fff15 	stw	zero,-4(fp)
   8b2f4:	e0bfff17 	ldw	r2,-4(fp)
}
   8b2f8:	e037883a 	mov	sp,fp
   8b2fc:	dfc00117 	ldw	ra,4(sp)
   8b300:	df000017 	ldw	fp,0(sp)
   8b304:	dec00204 	addi	sp,sp,8
   8b308:	f800283a 	ret

0008b30c <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   8b30c:	defff804 	addi	sp,sp,-32
   8b310:	de00012e 	bgeu	sp,et,8b318 <I2C_Write+0xc>
   8b314:	003da0fa 	break	3
   8b318:	dfc00715 	stw	ra,28(sp)
   8b31c:	df000615 	stw	fp,24(sp)
   8b320:	df000604 	addi	fp,sp,24
   8b324:	e13ffb15 	stw	r4,-20(fp)
   8b328:	e17ffc15 	stw	r5,-16(fp)
   8b32c:	e0800217 	ldw	r2,8(fp)
   8b330:	e1bffd05 	stb	r6,-12(fp)
   8b334:	e1fffe05 	stb	r7,-8(fp)
   8b338:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   8b33c:	00800044 	movi	r2,1
   8b340:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8b344:	e13ffb17 	ldw	r4,-20(fp)
   8b348:	e17ffc17 	ldw	r5,-16(fp)
   8b34c:	008b65c0 	call	8b65c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8b350:	e0bffd03 	ldbu	r2,-12(fp)
   8b354:	11803fcc 	andi	r6,r2,255
   8b358:	e13ffb17 	ldw	r4,-20(fp)
   8b35c:	e17ffc17 	ldw	r5,-16(fp)
   8b360:	008b76c0 	call	8b76c <i2c_write>
   8b364:	1004c03a 	cmpne	r2,r2,zero
   8b368:	1000011e 	bne	r2,zero,8b370 <I2C_Write+0x64>
        bSuccess = FALSE;
   8b36c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   8b370:	e0bffa17 	ldw	r2,-24(fp)
   8b374:	1005003a 	cmpeq	r2,r2,zero
   8b378:	1000071e 	bne	r2,zero,8b398 <I2C_Write+0x8c>
   8b37c:	e1bffe03 	ldbu	r6,-8(fp)
   8b380:	e13ffb17 	ldw	r4,-20(fp)
   8b384:	e17ffc17 	ldw	r5,-16(fp)
   8b388:	008b76c0 	call	8b76c <i2c_write>
   8b38c:	1004c03a 	cmpne	r2,r2,zero
   8b390:	1000011e 	bne	r2,zero,8b398 <I2C_Write+0x8c>
        bSuccess = FALSE;
   8b394:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
   8b398:	e0bffa17 	ldw	r2,-24(fp)
   8b39c:	1005003a 	cmpeq	r2,r2,zero
   8b3a0:	1000071e 	bne	r2,zero,8b3c0 <I2C_Write+0xb4>
   8b3a4:	e1bfff03 	ldbu	r6,-4(fp)
   8b3a8:	e13ffb17 	ldw	r4,-20(fp)
   8b3ac:	e17ffc17 	ldw	r5,-16(fp)
   8b3b0:	008b76c0 	call	8b76c <i2c_write>
   8b3b4:	1004c03a 	cmpne	r2,r2,zero
   8b3b8:	1000011e 	bne	r2,zero,8b3c0 <I2C_Write+0xb4>
        bSuccess = FALSE;
   8b3bc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   8b3c0:	e13ffb17 	ldw	r4,-20(fp)
   8b3c4:	e17ffc17 	ldw	r5,-16(fp)
   8b3c8:	008b6ec0 	call	8b6ec <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   8b3cc:	0106d604 	movi	r4,7000
   8b3d0:	009880c0 	call	9880c <usleep>

    return bSuccess;
   8b3d4:	e0bffa17 	ldw	r2,-24(fp)


}
   8b3d8:	e037883a 	mov	sp,fp
   8b3dc:	dfc00117 	ldw	ra,4(sp)
   8b3e0:	df000017 	ldw	fp,0(sp)
   8b3e4:	dec00204 	addi	sp,sp,8
   8b3e8:	f800283a 	ret

0008b3ec <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   8b3ec:	defff904 	addi	sp,sp,-28
   8b3f0:	de00012e 	bgeu	sp,et,8b3f8 <I2C_Read+0xc>
   8b3f4:	003da0fa 	break	3
   8b3f8:	dfc00615 	stw	ra,24(sp)
   8b3fc:	df000515 	stw	fp,20(sp)
   8b400:	df000504 	addi	fp,sp,20
   8b404:	e13ffc15 	stw	r4,-16(fp)
   8b408:	e17ffd15 	stw	r5,-12(fp)
   8b40c:	e1bffe05 	stb	r6,-8(fp)
   8b410:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
   8b414:	00800044 	movi	r2,1
   8b418:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8b41c:	e13ffc17 	ldw	r4,-16(fp)
   8b420:	e17ffd17 	ldw	r5,-12(fp)
   8b424:	008b65c0 	call	8b65c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8b428:	e0bffe03 	ldbu	r2,-8(fp)
   8b42c:	11803fcc 	andi	r6,r2,255
   8b430:	e13ffc17 	ldw	r4,-16(fp)
   8b434:	e17ffd17 	ldw	r5,-12(fp)
   8b438:	008b76c0 	call	8b76c <i2c_write>
   8b43c:	1004c03a 	cmpne	r2,r2,zero
   8b440:	1000011e 	bne	r2,zero,8b448 <I2C_Read+0x5c>
        bSuccess = FALSE;
   8b444:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   8b448:	e0bffb17 	ldw	r2,-20(fp)
   8b44c:	1005003a 	cmpeq	r2,r2,zero
   8b450:	1000071e 	bne	r2,zero,8b470 <I2C_Read+0x84>
   8b454:	e1bfff03 	ldbu	r6,-4(fp)
   8b458:	e13ffc17 	ldw	r4,-16(fp)
   8b45c:	e17ffd17 	ldw	r5,-12(fp)
   8b460:	008b76c0 	call	8b76c <i2c_write>
   8b464:	1004c03a 	cmpne	r2,r2,zero
   8b468:	1000011e 	bne	r2,zero,8b470 <I2C_Read+0x84>
        bSuccess = FALSE;
   8b46c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
   8b470:	e13ffc17 	ldw	r4,-16(fp)
   8b474:	e17ffd17 	ldw	r5,-12(fp)
   8b478:	008b65c0 	call	8b65c <i2c_start>
    DeviceAddr |= 1; // Read
   8b47c:	e0bffe03 	ldbu	r2,-8(fp)
   8b480:	10800054 	ori	r2,r2,1
   8b484:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8b488:	e0bffb17 	ldw	r2,-20(fp)
   8b48c:	1005003a 	cmpeq	r2,r2,zero
   8b490:	1000081e 	bne	r2,zero,8b4b4 <I2C_Read+0xc8>
   8b494:	e0bffe03 	ldbu	r2,-8(fp)
   8b498:	11803fcc 	andi	r6,r2,255
   8b49c:	e13ffc17 	ldw	r4,-16(fp)
   8b4a0:	e17ffd17 	ldw	r5,-12(fp)
   8b4a4:	008b76c0 	call	8b76c <i2c_write>
   8b4a8:	1004c03a 	cmpne	r2,r2,zero
   8b4ac:	1000011e 	bne	r2,zero,8b4b4 <I2C_Read+0xc8>
        bSuccess = FALSE;
   8b4b0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8b4b4:	e0bffb17 	ldw	r2,-20(fp)
   8b4b8:	1005003a 	cmpeq	r2,r2,zero
   8b4bc:	1000051e 	bne	r2,zero,8b4d4 <I2C_Read+0xe8>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   8b4c0:	e13ffc17 	ldw	r4,-16(fp)
   8b4c4:	e17ffd17 	ldw	r5,-12(fp)
   8b4c8:	e1800217 	ldw	r6,8(fp)
   8b4cc:	000f883a 	mov	r7,zero
   8b4d0:	008b8980 	call	8b898 <i2c_read>
    }
    i2c_stop(clk_base, data_base);
   8b4d4:	e13ffc17 	ldw	r4,-16(fp)
   8b4d8:	e17ffd17 	ldw	r5,-12(fp)
   8b4dc:	008b6ec0 	call	8b6ec <i2c_stop>

    return bSuccess;
   8b4e0:	e0bffb17 	ldw	r2,-20(fp)
}
   8b4e4:	e037883a 	mov	sp,fp
   8b4e8:	dfc00117 	ldw	ra,4(sp)
   8b4ec:	df000017 	ldw	fp,0(sp)
   8b4f0:	dec00204 	addi	sp,sp,8
   8b4f4:	f800283a 	ret

0008b4f8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 szData[], alt_u16 len){
   8b4f8:	defff704 	addi	sp,sp,-36
   8b4fc:	de00012e 	bgeu	sp,et,8b504 <I2C_MultipleRead+0xc>
   8b500:	003da0fa 	break	3
   8b504:	dfc00815 	stw	ra,32(sp)
   8b508:	df000715 	stw	fp,28(sp)
   8b50c:	df000704 	addi	fp,sp,28
   8b510:	e13ffb15 	stw	r4,-20(fp)
   8b514:	e17ffc15 	stw	r5,-16(fp)
   8b518:	e0800317 	ldw	r2,12(fp)
   8b51c:	e1bffd05 	stb	r6,-12(fp)
   8b520:	e1fffe05 	stb	r7,-8(fp)
   8b524:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   8b528:	00800044 	movi	r2,1
   8b52c:	e0bff915 	stw	r2,-28(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8b530:	e13ffb17 	ldw	r4,-20(fp)
   8b534:	e17ffc17 	ldw	r5,-16(fp)
   8b538:	008b65c0 	call	8b65c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8b53c:	e0bffd03 	ldbu	r2,-12(fp)
   8b540:	11803fcc 	andi	r6,r2,255
   8b544:	e13ffb17 	ldw	r4,-20(fp)
   8b548:	e17ffc17 	ldw	r5,-16(fp)
   8b54c:	008b76c0 	call	8b76c <i2c_write>
   8b550:	1004c03a 	cmpne	r2,r2,zero
   8b554:	1000011e 	bne	r2,zero,8b55c <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
   8b558:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   8b55c:	e0bff917 	ldw	r2,-28(fp)
   8b560:	1005003a 	cmpeq	r2,r2,zero
   8b564:	1000071e 	bne	r2,zero,8b584 <I2C_MultipleRead+0x8c>
   8b568:	e1bffe03 	ldbu	r6,-8(fp)
   8b56c:	e13ffb17 	ldw	r4,-20(fp)
   8b570:	e17ffc17 	ldw	r5,-16(fp)
   8b574:	008b76c0 	call	8b76c <i2c_write>
   8b578:	1004c03a 	cmpne	r2,r2,zero
   8b57c:	1000011e 	bne	r2,zero,8b584 <I2C_MultipleRead+0x8c>
        bSuccess = FALSE;
   8b580:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess)
   8b584:	e0bff917 	ldw	r2,-28(fp)
   8b588:	1005003a 	cmpeq	r2,r2,zero
   8b58c:	1000031e 	bne	r2,zero,8b59c <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
   8b590:	e13ffb17 	ldw	r4,-20(fp)
   8b594:	e17ffc17 	ldw	r5,-16(fp)
   8b598:	008b65c0 	call	8b65c <i2c_start>
    DeviceAddr |= 1; // Read
   8b59c:	e0bffd03 	ldbu	r2,-12(fp)
   8b5a0:	10800054 	ori	r2,r2,1
   8b5a4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8b5a8:	e0bff917 	ldw	r2,-28(fp)
   8b5ac:	1005003a 	cmpeq	r2,r2,zero
   8b5b0:	1000081e 	bne	r2,zero,8b5d4 <I2C_MultipleRead+0xdc>
   8b5b4:	e0bffd03 	ldbu	r2,-12(fp)
   8b5b8:	11803fcc 	andi	r6,r2,255
   8b5bc:	e13ffb17 	ldw	r4,-20(fp)
   8b5c0:	e17ffc17 	ldw	r5,-16(fp)
   8b5c4:	008b76c0 	call	8b76c <i2c_write>
   8b5c8:	1004c03a 	cmpne	r2,r2,zero
   8b5cc:	1000011e 	bne	r2,zero,8b5d4 <I2C_MultipleRead+0xdc>
        bSuccess = FALSE;
   8b5d0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8b5d4:	e0bff917 	ldw	r2,-28(fp)
   8b5d8:	1005003a 	cmpeq	r2,r2,zero
   8b5dc:	1000161e 	bne	r2,zero,8b638 <I2C_MultipleRead+0x140>
        for(i=0;i<len && bSuccess;i++){
   8b5e0:	e03ffa15 	stw	zero,-24(fp)
   8b5e4:	00000e06 	br	8b620 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   8b5e8:	e0bffa17 	ldw	r2,-24(fp)
   8b5ec:	1007883a 	mov	r3,r2
   8b5f0:	e0800217 	ldw	r2,8(fp)
   8b5f4:	188d883a 	add	r6,r3,r2
   8b5f8:	e0bfff0b 	ldhu	r2,-4(fp)
   8b5fc:	10ffffc4 	addi	r3,r2,-1
   8b600:	e0bffa17 	ldw	r2,-24(fp)
   8b604:	188ec03a 	cmpne	r7,r3,r2
   8b608:	e13ffb17 	ldw	r4,-20(fp)
   8b60c:	e17ffc17 	ldw	r5,-16(fp)
   8b610:	008b8980 	call	8b898 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   8b614:	e0bffa17 	ldw	r2,-24(fp)
   8b618:	10800044 	addi	r2,r2,1
   8b61c:	e0bffa15 	stw	r2,-24(fp)
   8b620:	e0ffff0b 	ldhu	r3,-4(fp)
   8b624:	e0bffa17 	ldw	r2,-24(fp)
   8b628:	10c0030e 	bge	r2,r3,8b638 <I2C_MultipleRead+0x140>
   8b62c:	e0bff917 	ldw	r2,-28(fp)
   8b630:	1004c03a 	cmpne	r2,r2,zero
   8b634:	103fec1e 	bne	r2,zero,8b5e8 <I2C_MultipleRead+0xf0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }
    }
    i2c_stop(clk_base, data_base);
   8b638:	e13ffb17 	ldw	r4,-20(fp)
   8b63c:	e17ffc17 	ldw	r5,-16(fp)
   8b640:	008b6ec0 	call	8b6ec <i2c_stop>

    return bSuccess;
   8b644:	e0bff917 	ldw	r2,-28(fp)

}
   8b648:	e037883a 	mov	sp,fp
   8b64c:	dfc00117 	ldw	ra,4(sp)
   8b650:	df000017 	ldw	fp,0(sp)
   8b654:	dec00204 	addi	sp,sp,8
   8b658:	f800283a 	ret

0008b65c <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   8b65c:	defffc04 	addi	sp,sp,-16
   8b660:	de00012e 	bgeu	sp,et,8b668 <i2c_start+0xc>
   8b664:	003da0fa 	break	3
   8b668:	dfc00315 	stw	ra,12(sp)
   8b66c:	df000215 	stw	fp,8(sp)
   8b670:	df000204 	addi	fp,sp,8
   8b674:	e13ffe15 	stw	r4,-8(fp)
   8b678:	e17fff15 	stw	r5,-4(fp)

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   8b67c:	e0bfff17 	ldw	r2,-4(fp)
   8b680:	10800104 	addi	r2,r2,4
   8b684:	1007883a 	mov	r3,r2
   8b688:	00800044 	movi	r2,1
   8b68c:	18800035 	stwio	r2,0(r3)



    // start condition
    SDA_HIGH(data_base); // data high
   8b690:	e0bfff17 	ldw	r2,-4(fp)
   8b694:	1007883a 	mov	r3,r2
   8b698:	00800044 	movi	r2,1
   8b69c:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
   8b6a0:	e0bffe17 	ldw	r2,-8(fp)
   8b6a4:	1007883a 	mov	r3,r2
   8b6a8:	00800044 	movi	r2,1
   8b6ac:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
   8b6b0:	01000044 	movi	r4,1
   8b6b4:	009880c0 	call	9880c <usleep>

    SDA_LOW(data_base); // data low
   8b6b8:	e0bfff17 	ldw	r2,-4(fp)
   8b6bc:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
   8b6c0:	01000044 	movi	r4,1
   8b6c4:	009880c0 	call	9880c <usleep>
    SCL_LOW(clk_base); // clock low
   8b6c8:	e0bffe17 	ldw	r2,-8(fp)
   8b6cc:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
   8b6d0:	01000044 	movi	r4,1
   8b6d4:	009880c0 	call	9880c <usleep>
}
   8b6d8:	e037883a 	mov	sp,fp
   8b6dc:	dfc00117 	ldw	ra,4(sp)
   8b6e0:	df000017 	ldw	fp,0(sp)
   8b6e4:	dec00204 	addi	sp,sp,8
   8b6e8:	f800283a 	ret

0008b6ec <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   8b6ec:	defffc04 	addi	sp,sp,-16
   8b6f0:	de00012e 	bgeu	sp,et,8b6f8 <i2c_stop+0xc>
   8b6f4:	003da0fa 	break	3
   8b6f8:	dfc00315 	stw	ra,12(sp)
   8b6fc:	df000215 	stw	fp,8(sp)
   8b700:	df000204 	addi	fp,sp,8
   8b704:	e13ffe15 	stw	r4,-8(fp)
   8b708:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
   8b70c:	e0bfff17 	ldw	r2,-4(fp)
   8b710:	10800104 	addi	r2,r2,4
   8b714:	1007883a 	mov	r3,r2
   8b718:	00800044 	movi	r2,1
   8b71c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
   8b720:	e0bfff17 	ldw	r2,-4(fp)
   8b724:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
   8b728:	e0bffe17 	ldw	r2,-8(fp)
   8b72c:	1007883a 	mov	r3,r2
   8b730:	00800044 	movi	r2,1
   8b734:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
   8b738:	01000044 	movi	r4,1
   8b73c:	009880c0 	call	9880c <usleep>
    SDA_HIGH(data_base); // data high
   8b740:	e0bfff17 	ldw	r2,-4(fp)
   8b744:	1007883a 	mov	r3,r2
   8b748:	00800044 	movi	r2,1
   8b74c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
   8b750:	01000044 	movi	r4,1
   8b754:	009880c0 	call	9880c <usleep>



}
   8b758:	e037883a 	mov	sp,fp
   8b75c:	dfc00117 	ldw	ra,4(sp)
   8b760:	df000017 	ldw	fp,0(sp)
   8b764:	dec00204 	addi	sp,sp,8
   8b768:	f800283a 	ret

0008b76c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   8b76c:	defff804 	addi	sp,sp,-32
   8b770:	de00012e 	bgeu	sp,et,8b778 <i2c_write+0xc>
   8b774:	003da0fa 	break	3
   8b778:	dfc00715 	stw	ra,28(sp)
   8b77c:	df000615 	stw	fp,24(sp)
   8b780:	df000604 	addi	fp,sp,24
   8b784:	e13ffd15 	stw	r4,-12(fp)
   8b788:	e17ffe15 	stw	r5,-8(fp)
   8b78c:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
   8b790:	00bfe004 	movi	r2,-128
   8b794:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
   8b798:	e0bffe17 	ldw	r2,-8(fp)
   8b79c:	10800104 	addi	r2,r2,4
   8b7a0:	1007883a 	mov	r3,r2
   8b7a4:	00800044 	movi	r2,1
   8b7a8:	18800035 	stwio	r2,0(r3)

    for(i=0;i<8;i++){
   8b7ac:	e03ffa15 	stw	zero,-24(fp)
   8b7b0:	00001f06 	br	8b830 <i2c_write+0xc4>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   8b7b4:	e0bffd17 	ldw	r2,-12(fp)
   8b7b8:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   8b7bc:	e0ffff03 	ldbu	r3,-4(fp)
   8b7c0:	e0bffc03 	ldbu	r2,-16(fp)
   8b7c4:	1884703a 	and	r2,r3,r2
   8b7c8:	10803fcc 	andi	r2,r2,255
   8b7cc:	1005003a 	cmpeq	r2,r2,zero
   8b7d0:	1000051e 	bne	r2,zero,8b7e8 <i2c_write+0x7c>
            SDA_HIGH(data_base);
   8b7d4:	e0bffe17 	ldw	r2,-8(fp)
   8b7d8:	1007883a 	mov	r3,r2
   8b7dc:	00800044 	movi	r2,1
   8b7e0:	18800035 	stwio	r2,0(r3)
   8b7e4:	00000206 	br	8b7f0 <i2c_write+0x84>
        }else{
            SDA_LOW(data_base);
   8b7e8:	e0bffe17 	ldw	r2,-8(fp)
   8b7ec:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   8b7f0:	e0bffc03 	ldbu	r2,-16(fp)
   8b7f4:	1004d07a 	srli	r2,r2,1
   8b7f8:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
   8b7fc:	e0bffd17 	ldw	r2,-12(fp)
   8b800:	1007883a 	mov	r3,r2
   8b804:	00800044 	movi	r2,1
   8b808:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
   8b80c:	01000044 	movi	r4,1
   8b810:	009880c0 	call	9880c <usleep>
        SCL_LOW(clk_base);
   8b814:	e0bffd17 	ldw	r2,-12(fp)
   8b818:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
   8b81c:	01000044 	movi	r4,1
   8b820:	009880c0 	call	9880c <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
   8b824:	e0bffa17 	ldw	r2,-24(fp)
   8b828:	10800044 	addi	r2,r2,1
   8b82c:	e0bffa15 	stw	r2,-24(fp)
   8b830:	e0bffa17 	ldw	r2,-24(fp)
   8b834:	10800210 	cmplti	r2,r2,8
   8b838:	103fde1e 	bne	r2,zero,8b7b4 <i2c_write+0x48>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   8b83c:	e0bffe17 	ldw	r2,-8(fp)
   8b840:	10800104 	addi	r2,r2,4
   8b844:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
   8b848:	e0bffd17 	ldw	r2,-12(fp)
   8b84c:	1007883a 	mov	r3,r2
   8b850:	00800044 	movi	r2,1
   8b854:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
   8b858:	01000044 	movi	r4,1
   8b85c:	009880c0 	call	9880c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   8b860:	e0bffe17 	ldw	r2,-8(fp)
   8b864:	10800037 	ldwio	r2,0(r2)
   8b868:	1005003a 	cmpeq	r2,r2,zero
   8b86c:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
   8b870:	e0bffd17 	ldw	r2,-12(fp)
   8b874:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
   8b878:	01000044 	movi	r4,1
   8b87c:	009880c0 	call	9880c <usleep>
    return bAck;
   8b880:	e0bffb17 	ldw	r2,-20(fp)
}
   8b884:	e037883a 	mov	sp,fp
   8b888:	dfc00117 	ldw	ra,4(sp)
   8b88c:	df000017 	ldw	fp,0(sp)
   8b890:	dec00204 	addi	sp,sp,8
   8b894:	f800283a 	ret

0008b898 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   8b898:	defff804 	addi	sp,sp,-32
   8b89c:	de00012e 	bgeu	sp,et,8b8a4 <i2c_read+0xc>
   8b8a0:	003da0fa 	break	3
   8b8a4:	dfc00715 	stw	ra,28(sp)
   8b8a8:	df000615 	stw	fp,24(sp)
   8b8ac:	df000604 	addi	fp,sp,24
   8b8b0:	e13ffc15 	stw	r4,-16(fp)
   8b8b4:	e17ffd15 	stw	r5,-12(fp)
   8b8b8:	e1bffe15 	stw	r6,-8(fp)
   8b8bc:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
   8b8c0:	e03ffb05 	stb	zero,-20(fp)
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
   8b8c4:	e0bffd17 	ldw	r2,-12(fp)
   8b8c8:	10800104 	addi	r2,r2,4
   8b8cc:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
   8b8d0:	e0bffc17 	ldw	r2,-16(fp)
   8b8d4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
   8b8d8:	01000044 	movi	r4,1
   8b8dc:	009880c0 	call	9880c <usleep>

    for(i=0;i<8;i++){
   8b8e0:	e03ffa15 	stw	zero,-24(fp)
   8b8e4:	00001706 	br	8b944 <i2c_read+0xac>
        Data <<= 1;
   8b8e8:	e0bffb03 	ldbu	r2,-20(fp)
   8b8ec:	1085883a 	add	r2,r2,r2
   8b8f0:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
   8b8f4:	e0bffc17 	ldw	r2,-16(fp)
   8b8f8:	1007883a 	mov	r3,r2
   8b8fc:	00800044 	movi	r2,1
   8b900:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
   8b904:	01000044 	movi	r4,1
   8b908:	009880c0 	call	9880c <usleep>
        if (SDA_READ(data_base))  // read data
   8b90c:	e0bffd17 	ldw	r2,-12(fp)
   8b910:	10800037 	ldwio	r2,0(r2)
   8b914:	1005003a 	cmpeq	r2,r2,zero
   8b918:	1000031e 	bne	r2,zero,8b928 <i2c_read+0x90>
            Data |= 0x01;
   8b91c:	e0bffb03 	ldbu	r2,-20(fp)
   8b920:	10800054 	ori	r2,r2,1
   8b924:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log
   8b928:	e0bffc17 	ldw	r2,-16(fp)
   8b92c:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
   8b930:	01000044 	movi	r4,1
   8b934:	009880c0 	call	9880c <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   8b938:	e0bffa17 	ldw	r2,-24(fp)
   8b93c:	10800044 	addi	r2,r2,1
   8b940:	e0bffa15 	stw	r2,-24(fp)
   8b944:	e0bffa17 	ldw	r2,-24(fp)
   8b948:	10800210 	cmplti	r2,r2,8
   8b94c:	103fe61e 	bne	r2,zero,8b8e8 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   8b950:	e0bffc17 	ldw	r2,-16(fp)
   8b954:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   8b958:	e0bffd17 	ldw	r2,-12(fp)
   8b95c:	10800104 	addi	r2,r2,4
   8b960:	1007883a 	mov	r3,r2
   8b964:	00800044 	movi	r2,1
   8b968:	18800035 	stwio	r2,0(r3)
    if (bAck)
   8b96c:	e0bfff17 	ldw	r2,-4(fp)
   8b970:	1005003a 	cmpeq	r2,r2,zero
   8b974:	1000031e 	bne	r2,zero,8b984 <i2c_read+0xec>
        SDA_LOW(data_base);
   8b978:	e0bffd17 	ldw	r2,-12(fp)
   8b97c:	10000035 	stwio	zero,0(r2)
   8b980:	00000406 	br	8b994 <i2c_read+0xfc>
    else
        SDA_HIGH(data_base);
   8b984:	e0bffd17 	ldw	r2,-12(fp)
   8b988:	1007883a 	mov	r3,r2
   8b98c:	00800044 	movi	r2,1
   8b990:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
   8b994:	e0bffc17 	ldw	r2,-16(fp)
   8b998:	1007883a 	mov	r3,r2
   8b99c:	00800044 	movi	r2,1
   8b9a0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
   8b9a4:	01000044 	movi	r4,1
   8b9a8:	009880c0 	call	9880c <usleep>
    SCL_LOW(clk_base); // clock low
   8b9ac:	e0bffc17 	ldw	r2,-16(fp)
   8b9b0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
   8b9b4:	01000044 	movi	r4,1
   8b9b8:	009880c0 	call	9880c <usleep>
    SDA_LOW(data_base);  // data low
   8b9bc:	e0bffd17 	ldw	r2,-12(fp)
   8b9c0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
   8b9c4:	01000044 	movi	r4,1
   8b9c8:	009880c0 	call	9880c <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
   8b9cc:	e0fffe17 	ldw	r3,-8(fp)
   8b9d0:	e0bffb03 	ldbu	r2,-20(fp)
   8b9d4:	18800005 	stb	r2,0(r3)
}
   8b9d8:	e037883a 	mov	sp,fp
   8b9dc:	dfc00117 	ldw	ra,4(sp)
   8b9e0:	df000017 	ldw	fp,0(sp)
   8b9e4:	dec00204 	addi	sp,sp,8
   8b9e8:	f800283a 	ret

0008b9ec <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   8b9ec:	defff704 	addi	sp,sp,-36
   8b9f0:	de00012e 	bgeu	sp,et,8b9f8 <I2CL_Write+0xc>
   8b9f4:	003da0fa 	break	3
   8b9f8:	dfc00815 	stw	ra,32(sp)
   8b9fc:	df000715 	stw	fp,28(sp)
   8ba00:	df000704 	addi	fp,sp,28
   8ba04:	e13ffb15 	stw	r4,-20(fp)
   8ba08:	e17ffc15 	stw	r5,-16(fp)
   8ba0c:	e0800217 	ldw	r2,8(fp)
   8ba10:	e1bffd05 	stb	r6,-12(fp)
   8ba14:	e1fffe0d 	sth	r7,-8(fp)
   8ba18:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   8ba1c:	00800044 	movi	r2,1
   8ba20:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   8ba24:	e0bffe0b 	ldhu	r2,-8(fp)
   8ba28:	1004d23a 	srli	r2,r2,8
   8ba2c:	1007883a 	mov	r3,r2
   8ba30:	00bfffc4 	movi	r2,-1
   8ba34:	1884703a 	and	r2,r3,r2
   8ba38:	e0bff945 	stb	r2,-27(fp)
    AddrLow  = ControlAddr & 0xFF;
   8ba3c:	e0bffe0b 	ldhu	r2,-8(fp)
   8ba40:	1007883a 	mov	r3,r2
   8ba44:	00bfffc4 	movi	r2,-1
   8ba48:	1884703a 	and	r2,r3,r2
   8ba4c:	e0bff905 	stb	r2,-28(fp)

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8ba50:	e13ffb17 	ldw	r4,-20(fp)
   8ba54:	e17ffc17 	ldw	r5,-16(fp)
   8ba58:	008b65c0 	call	8b65c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8ba5c:	e0bffd03 	ldbu	r2,-12(fp)
   8ba60:	11803fcc 	andi	r6,r2,255
   8ba64:	e13ffb17 	ldw	r4,-20(fp)
   8ba68:	e17ffc17 	ldw	r5,-16(fp)
   8ba6c:	008b76c0 	call	8b76c <i2c_write>
   8ba70:	1004c03a 	cmpne	r2,r2,zero
   8ba74:	1000011e 	bne	r2,zero,8ba7c <I2CL_Write+0x90>
        bSuccess = FALSE;
   8ba78:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   8ba7c:	e0bffa17 	ldw	r2,-24(fp)
   8ba80:	1005003a 	cmpeq	r2,r2,zero
   8ba84:	1000071e 	bne	r2,zero,8baa4 <I2CL_Write+0xb8>
   8ba88:	e1bff943 	ldbu	r6,-27(fp)
   8ba8c:	e13ffb17 	ldw	r4,-20(fp)
   8ba90:	e17ffc17 	ldw	r5,-16(fp)
   8ba94:	008b76c0 	call	8b76c <i2c_write>
   8ba98:	1004c03a 	cmpne	r2,r2,zero
   8ba9c:	1000011e 	bne	r2,zero,8baa4 <I2CL_Write+0xb8>
        bSuccess = FALSE;
   8baa0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   8baa4:	e0bffa17 	ldw	r2,-24(fp)
   8baa8:	1005003a 	cmpeq	r2,r2,zero
   8baac:	1000071e 	bne	r2,zero,8bacc <I2CL_Write+0xe0>
   8bab0:	e1bff903 	ldbu	r6,-28(fp)
   8bab4:	e13ffb17 	ldw	r4,-20(fp)
   8bab8:	e17ffc17 	ldw	r5,-16(fp)
   8babc:	008b76c0 	call	8b76c <i2c_write>
   8bac0:	1004c03a 	cmpne	r2,r2,zero
   8bac4:	1000011e 	bne	r2,zero,8bacc <I2CL_Write+0xe0>
        bSuccess = FALSE;
   8bac8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
   8bacc:	e0bffa17 	ldw	r2,-24(fp)
   8bad0:	1005003a 	cmpeq	r2,r2,zero
   8bad4:	1000071e 	bne	r2,zero,8baf4 <I2CL_Write+0x108>
   8bad8:	e1bfff03 	ldbu	r6,-4(fp)
   8badc:	e13ffb17 	ldw	r4,-20(fp)
   8bae0:	e17ffc17 	ldw	r5,-16(fp)
   8bae4:	008b76c0 	call	8b76c <i2c_write>
   8bae8:	1004c03a 	cmpne	r2,r2,zero
   8baec:	1000011e 	bne	r2,zero,8baf4 <I2CL_Write+0x108>
        bSuccess = FALSE;
   8baf0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   8baf4:	e13ffb17 	ldw	r4,-20(fp)
   8baf8:	e17ffc17 	ldw	r5,-16(fp)
   8bafc:	008b6ec0 	call	8b6ec <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   8bb00:	0106d604 	movi	r4,7000
   8bb04:	009880c0 	call	9880c <usleep>

    return bSuccess;
   8bb08:	e0bffa17 	ldw	r2,-24(fp)

}
   8bb0c:	e037883a 	mov	sp,fp
   8bb10:	dfc00117 	ldw	ra,4(sp)
   8bb14:	df000017 	ldw	fp,0(sp)
   8bb18:	dec00204 	addi	sp,sp,8
   8bb1c:	f800283a 	ret

0008bb20 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   8bb20:	defff804 	addi	sp,sp,-32
   8bb24:	de00012e 	bgeu	sp,et,8bb2c <I2CL_Read+0xc>
   8bb28:	003da0fa 	break	3
   8bb2c:	dfc00715 	stw	ra,28(sp)
   8bb30:	df000615 	stw	fp,24(sp)
   8bb34:	df000604 	addi	fp,sp,24
   8bb38:	e13ffc15 	stw	r4,-16(fp)
   8bb3c:	e17ffd15 	stw	r5,-12(fp)
   8bb40:	e1bffe05 	stb	r6,-8(fp)
   8bb44:	e1ffff0d 	sth	r7,-4(fp)
    bool bSuccess = TRUE;
   8bb48:	00800044 	movi	r2,1
   8bb4c:	e0bffb15 	stw	r2,-20(fp)
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   8bb50:	e0bfff0b 	ldhu	r2,-4(fp)
   8bb54:	1004d23a 	srli	r2,r2,8
   8bb58:	1007883a 	mov	r3,r2
   8bb5c:	00bfffc4 	movi	r2,-1
   8bb60:	1884703a 	and	r2,r3,r2
   8bb64:	e0bffa45 	stb	r2,-23(fp)
    AddrLow  = ControlAddr & 0xFF;
   8bb68:	e0bfff0b 	ldhu	r2,-4(fp)
   8bb6c:	1007883a 	mov	r3,r2
   8bb70:	00bfffc4 	movi	r2,-1
   8bb74:	1884703a 	and	r2,r3,r2
   8bb78:	e0bffa05 	stb	r2,-24(fp)

    i2c_start(clk_base, data_base);
   8bb7c:	e13ffc17 	ldw	r4,-16(fp)
   8bb80:	e17ffd17 	ldw	r5,-12(fp)
   8bb84:	008b65c0 	call	8b65c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8bb88:	e0bffe03 	ldbu	r2,-8(fp)
   8bb8c:	11803fcc 	andi	r6,r2,255
   8bb90:	e13ffc17 	ldw	r4,-16(fp)
   8bb94:	e17ffd17 	ldw	r5,-12(fp)
   8bb98:	008b76c0 	call	8b76c <i2c_write>
   8bb9c:	1004c03a 	cmpne	r2,r2,zero
   8bba0:	1000011e 	bne	r2,zero,8bba8 <I2CL_Read+0x88>
        bSuccess = FALSE;
   8bba4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   8bba8:	e0bffb17 	ldw	r2,-20(fp)
   8bbac:	1005003a 	cmpeq	r2,r2,zero
   8bbb0:	1000071e 	bne	r2,zero,8bbd0 <I2CL_Read+0xb0>
   8bbb4:	e1bffa43 	ldbu	r6,-23(fp)
   8bbb8:	e13ffc17 	ldw	r4,-16(fp)
   8bbbc:	e17ffd17 	ldw	r5,-12(fp)
   8bbc0:	008b76c0 	call	8b76c <i2c_write>
   8bbc4:	1004c03a 	cmpne	r2,r2,zero
   8bbc8:	1000011e 	bne	r2,zero,8bbd0 <I2CL_Read+0xb0>
        bSuccess = FALSE;
   8bbcc:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   8bbd0:	e0bffb17 	ldw	r2,-20(fp)
   8bbd4:	1005003a 	cmpeq	r2,r2,zero
   8bbd8:	1000071e 	bne	r2,zero,8bbf8 <I2CL_Read+0xd8>
   8bbdc:	e1bffa03 	ldbu	r6,-24(fp)
   8bbe0:	e13ffc17 	ldw	r4,-16(fp)
   8bbe4:	e17ffd17 	ldw	r5,-12(fp)
   8bbe8:	008b76c0 	call	8b76c <i2c_write>
   8bbec:	1004c03a 	cmpne	r2,r2,zero
   8bbf0:	1000011e 	bne	r2,zero,8bbf8 <I2CL_Read+0xd8>
        bSuccess = FALSE;
   8bbf4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
   8bbf8:	e13ffc17 	ldw	r4,-16(fp)
   8bbfc:	e17ffd17 	ldw	r5,-12(fp)
   8bc00:	008b65c0 	call	8b65c <i2c_start>
    DeviceAddr |= 1; // Read
   8bc04:	e0bffe03 	ldbu	r2,-8(fp)
   8bc08:	10800054 	ori	r2,r2,1
   8bc0c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8bc10:	e0bffb17 	ldw	r2,-20(fp)
   8bc14:	1005003a 	cmpeq	r2,r2,zero
   8bc18:	1000081e 	bne	r2,zero,8bc3c <I2CL_Read+0x11c>
   8bc1c:	e0bffe03 	ldbu	r2,-8(fp)
   8bc20:	11803fcc 	andi	r6,r2,255
   8bc24:	e13ffc17 	ldw	r4,-16(fp)
   8bc28:	e17ffd17 	ldw	r5,-12(fp)
   8bc2c:	008b76c0 	call	8b76c <i2c_write>
   8bc30:	1004c03a 	cmpne	r2,r2,zero
   8bc34:	1000011e 	bne	r2,zero,8bc3c <I2CL_Read+0x11c>
        bSuccess = FALSE;
   8bc38:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8bc3c:	e0bffb17 	ldw	r2,-20(fp)
   8bc40:	1005003a 	cmpeq	r2,r2,zero
   8bc44:	1000051e 	bne	r2,zero,8bc5c <I2CL_Read+0x13c>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   8bc48:	e13ffc17 	ldw	r4,-16(fp)
   8bc4c:	e17ffd17 	ldw	r5,-12(fp)
   8bc50:	e1800217 	ldw	r6,8(fp)
   8bc54:	000f883a 	mov	r7,zero
   8bc58:	008b8980 	call	8b898 <i2c_read>
    }
    i2c_stop(clk_base, data_base);
   8bc5c:	e13ffc17 	ldw	r4,-16(fp)
   8bc60:	e17ffd17 	ldw	r5,-12(fp)
   8bc64:	008b6ec0 	call	8b6ec <i2c_stop>

    return bSuccess;
   8bc68:	e0bffb17 	ldw	r2,-20(fp)
}
   8bc6c:	e037883a 	mov	sp,fp
   8bc70:	dfc00117 	ldw	ra,4(sp)
   8bc74:	df000017 	ldw	fp,0(sp)
   8bc78:	dec00204 	addi	sp,sp,8
   8bc7c:	f800283a 	ret

0008bc80 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
   8bc80:	defff604 	addi	sp,sp,-40
   8bc84:	de00012e 	bgeu	sp,et,8bc8c <I2CL_MultipleRead+0xc>
   8bc88:	003da0fa 	break	3
   8bc8c:	dfc00915 	stw	ra,36(sp)
   8bc90:	df000815 	stw	fp,32(sp)
   8bc94:	df000804 	addi	fp,sp,32
   8bc98:	e13ffb15 	stw	r4,-20(fp)
   8bc9c:	e17ffc15 	stw	r5,-16(fp)
   8bca0:	e1fffe15 	stw	r7,-8(fp)
   8bca4:	e0800217 	ldw	r2,8(fp)
   8bca8:	e1bffd05 	stb	r6,-12(fp)
   8bcac:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   8bcb0:	00800044 	movi	r2,1
   8bcb4:	e0bff915 	stw	r2,-28(fp)
    alt_u8 ControlAddr = 0;
   8bcb8:	e03ff885 	stb	zero,-30(fp)
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   8bcbc:	e0bff883 	ldbu	r2,-30(fp)
   8bcc0:	1005d23a 	srai	r2,r2,8
   8bcc4:	1007883a 	mov	r3,r2
   8bcc8:	00bfffc4 	movi	r2,-1
   8bccc:	1884703a 	and	r2,r3,r2
   8bcd0:	e0bff845 	stb	r2,-31(fp)
    AddrLow  = ControlAddr & 0xFF;
   8bcd4:	e0bff883 	ldbu	r2,-30(fp)
   8bcd8:	e0bff805 	stb	r2,-32(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8bcdc:	e13ffb17 	ldw	r4,-20(fp)
   8bce0:	e17ffc17 	ldw	r5,-16(fp)
   8bce4:	008b65c0 	call	8b65c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8bce8:	e0bffd03 	ldbu	r2,-12(fp)
   8bcec:	11803fcc 	andi	r6,r2,255
   8bcf0:	e13ffb17 	ldw	r4,-20(fp)
   8bcf4:	e17ffc17 	ldw	r5,-16(fp)
   8bcf8:	008b76c0 	call	8b76c <i2c_write>
   8bcfc:	1004c03a 	cmpne	r2,r2,zero
   8bd00:	1000011e 	bne	r2,zero,8bd08 <I2CL_MultipleRead+0x88>
        bSuccess = FALSE;
   8bd04:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   8bd08:	e0bff917 	ldw	r2,-28(fp)
   8bd0c:	1005003a 	cmpeq	r2,r2,zero
   8bd10:	1000071e 	bne	r2,zero,8bd30 <I2CL_MultipleRead+0xb0>
   8bd14:	e1bff843 	ldbu	r6,-31(fp)
   8bd18:	e13ffb17 	ldw	r4,-20(fp)
   8bd1c:	e17ffc17 	ldw	r5,-16(fp)
   8bd20:	008b76c0 	call	8b76c <i2c_write>
   8bd24:	1004c03a 	cmpne	r2,r2,zero
   8bd28:	1000011e 	bne	r2,zero,8bd30 <I2CL_MultipleRead+0xb0>
        bSuccess = FALSE;
   8bd2c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   8bd30:	e0bff917 	ldw	r2,-28(fp)
   8bd34:	1005003a 	cmpeq	r2,r2,zero
   8bd38:	1000071e 	bne	r2,zero,8bd58 <I2CL_MultipleRead+0xd8>
   8bd3c:	e1bff803 	ldbu	r6,-32(fp)
   8bd40:	e13ffb17 	ldw	r4,-20(fp)
   8bd44:	e17ffc17 	ldw	r5,-16(fp)
   8bd48:	008b76c0 	call	8b76c <i2c_write>
   8bd4c:	1004c03a 	cmpne	r2,r2,zero
   8bd50:	1000011e 	bne	r2,zero,8bd58 <I2CL_MultipleRead+0xd8>
        bSuccess = FALSE;
   8bd54:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess)
   8bd58:	e0bff917 	ldw	r2,-28(fp)
   8bd5c:	1005003a 	cmpeq	r2,r2,zero
   8bd60:	1000031e 	bne	r2,zero,8bd70 <I2CL_MultipleRead+0xf0>
        i2c_start(clk_base, data_base);  // restart
   8bd64:	e13ffb17 	ldw	r4,-20(fp)
   8bd68:	e17ffc17 	ldw	r5,-16(fp)
   8bd6c:	008b65c0 	call	8b65c <i2c_start>
    DeviceAddr |= 1; // Read
   8bd70:	e0bffd03 	ldbu	r2,-12(fp)
   8bd74:	10800054 	ori	r2,r2,1
   8bd78:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8bd7c:	e0bff917 	ldw	r2,-28(fp)
   8bd80:	1005003a 	cmpeq	r2,r2,zero
   8bd84:	1000081e 	bne	r2,zero,8bda8 <I2CL_MultipleRead+0x128>
   8bd88:	e0bffd03 	ldbu	r2,-12(fp)
   8bd8c:	11803fcc 	andi	r6,r2,255
   8bd90:	e13ffb17 	ldw	r4,-20(fp)
   8bd94:	e17ffc17 	ldw	r5,-16(fp)
   8bd98:	008b76c0 	call	8b76c <i2c_write>
   8bd9c:	1004c03a 	cmpne	r2,r2,zero
   8bda0:	1000011e 	bne	r2,zero,8bda8 <I2CL_MultipleRead+0x128>
        bSuccess = FALSE;
   8bda4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8bda8:	e0bff917 	ldw	r2,-28(fp)
   8bdac:	1005003a 	cmpeq	r2,r2,zero
   8bdb0:	1000161e 	bne	r2,zero,8be0c <I2CL_MultipleRead+0x18c>
        for(i=0;i<len && bSuccess;i++){
   8bdb4:	e03ffa15 	stw	zero,-24(fp)
   8bdb8:	00000e06 	br	8bdf4 <I2CL_MultipleRead+0x174>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   8bdbc:	e0bffa17 	ldw	r2,-24(fp)
   8bdc0:	1007883a 	mov	r3,r2
   8bdc4:	e0bffe17 	ldw	r2,-8(fp)
   8bdc8:	188d883a 	add	r6,r3,r2
   8bdcc:	e0bfff0b 	ldhu	r2,-4(fp)
   8bdd0:	10ffffc4 	addi	r3,r2,-1
   8bdd4:	e0bffa17 	ldw	r2,-24(fp)
   8bdd8:	188ec03a 	cmpne	r7,r3,r2
   8bddc:	e13ffb17 	ldw	r4,-20(fp)
   8bde0:	e17ffc17 	ldw	r5,-16(fp)
   8bde4:	008b8980 	call	8b898 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   8bde8:	e0bffa17 	ldw	r2,-24(fp)
   8bdec:	10800044 	addi	r2,r2,1
   8bdf0:	e0bffa15 	stw	r2,-24(fp)
   8bdf4:	e0ffff0b 	ldhu	r3,-4(fp)
   8bdf8:	e0bffa17 	ldw	r2,-24(fp)
   8bdfc:	10c0030e 	bge	r2,r3,8be0c <I2CL_MultipleRead+0x18c>
   8be00:	e0bff917 	ldw	r2,-28(fp)
   8be04:	1004c03a 	cmpne	r2,r2,zero
   8be08:	103fec1e 	bne	r2,zero,8bdbc <I2CL_MultipleRead+0x13c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }
    }
    i2c_stop(clk_base, data_base);
   8be0c:	e13ffb17 	ldw	r4,-20(fp)
   8be10:	e17ffc17 	ldw	r5,-16(fp)
   8be14:	008b6ec0 	call	8b6ec <i2c_stop>

    return bSuccess;
   8be18:	e0bff917 	ldw	r2,-28(fp)

}
   8be1c:	e037883a 	mov	sp,fp
   8be20:	dfc00117 	ldw	ra,4(sp)
   8be24:	df000017 	ldw	fp,0(sp)
   8be28:	dec00204 	addi	sp,sp,8
   8be2c:	f800283a 	ret

0008be30 <bin_dump>:
#define ADV7513_SALVE_ADDR8		((alt_u8)(ADV7513_SALVE_ADDR7) << 1)		// 0x72)PD-low 0x7A)PD-high

#define ADV7513_EDID_ADDR8		0x7e

static int bin_dump(const alt_u8 *buf, int len)
{
   8be30:	deffee04 	addi	sp,sp,-72
   8be34:	de00012e 	bgeu	sp,et,8be3c <bin_dump+0xc>
   8be38:	003da0fa 	break	3
   8be3c:	dfc01115 	stw	ra,68(sp)
   8be40:	df001015 	stw	fp,64(sp)
   8be44:	df001004 	addi	fp,sp,64
   8be48:	e13ffb15 	stw	r4,-20(fp)
   8be4c:	e17ffc15 	stw	r5,-16(fp)
	int r, c;
	const alt_u8 *p = buf;
   8be50:	e0bffb17 	ldw	r2,-20(fp)
   8be54:	e0bff815 	stw	r2,-32(fp)

	int rows = len / 16;
   8be58:	e0bffc17 	ldw	r2,-16(fp)
   8be5c:	e0bffe15 	stw	r2,-8(fp)
   8be60:	e0fffe17 	ldw	r3,-8(fp)
   8be64:	1804403a 	cmpge	r2,r3,zero
   8be68:	1000031e 	bne	r2,zero,8be78 <bin_dump+0x48>
   8be6c:	e0bffe17 	ldw	r2,-8(fp)
   8be70:	108003c4 	addi	r2,r2,15
   8be74:	e0bffe15 	stw	r2,-8(fp)
   8be78:	e0fffe17 	ldw	r3,-8(fp)
   8be7c:	1805d13a 	srai	r2,r3,4
   8be80:	e0bff715 	stw	r2,-36(fp)
	int cols = len % 16;
   8be84:	e0fffc17 	ldw	r3,-16(fp)
   8be88:	00a00034 	movhi	r2,32768
   8be8c:	108003c4 	addi	r2,r2,15
   8be90:	1886703a 	and	r3,r3,r2
   8be94:	e0ffff15 	stw	r3,-4(fp)
   8be98:	e0ffff17 	ldw	r3,-4(fp)
   8be9c:	1804403a 	cmpge	r2,r3,zero
   8bea0:	10000a1e 	bne	r2,zero,8becc <bin_dump+0x9c>
   8bea4:	e0bfff17 	ldw	r2,-4(fp)
   8bea8:	10bfffc4 	addi	r2,r2,-1
   8beac:	e0bfff15 	stw	r2,-4(fp)
   8beb0:	00bffc04 	movi	r2,-16
   8beb4:	e0ffff17 	ldw	r3,-4(fp)
   8beb8:	1886b03a 	or	r3,r3,r2
   8bebc:	e0ffff15 	stw	r3,-4(fp)
   8bec0:	e0bfff17 	ldw	r2,-4(fp)
   8bec4:	10800044 	addi	r2,r2,1
   8bec8:	e0bfff15 	stw	r2,-4(fp)
   8becc:	e0ffff17 	ldw	r3,-4(fp)
   8bed0:	e0fff615 	stw	r3,-40(fp)

	if (len <= 0)
   8bed4:	e0bffc17 	ldw	r2,-16(fp)
   8bed8:	10800048 	cmpgei	r2,r2,1
   8bedc:	1000021e 	bne	r2,zero,8bee8 <bin_dump+0xb8>
		return 0;
   8bee0:	e03ffd15 	stw	zero,-12(fp)
   8bee4:	00008506 	br	8c0fc <bin_dump+0x2cc>

	for (r = 0; r < rows; ++r, p += 16) {
   8bee8:	e03ffa15 	stw	zero,-24(fp)
   8beec:	00005806 	br	8c050 <bin_dump+0x220>
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8bef0:	e0bffa17 	ldw	r2,-24(fp)
   8bef4:	100a913a 	slli	r5,r2,4
   8bef8:	e0bff817 	ldw	r2,-32(fp)
   8befc:	10800003 	ldbu	r2,0(r2)
   8bf00:	11803fcc 	andi	r6,r2,255
   8bf04:	e0bff817 	ldw	r2,-32(fp)
   8bf08:	10800044 	addi	r2,r2,1
   8bf0c:	10800003 	ldbu	r2,0(r2)
   8bf10:	11c03fcc 	andi	r7,r2,255
   8bf14:	e0bff817 	ldw	r2,-32(fp)
   8bf18:	10800084 	addi	r2,r2,2
   8bf1c:	10800003 	ldbu	r2,0(r2)
   8bf20:	11003fcc 	andi	r4,r2,255
   8bf24:	e0bff817 	ldw	r2,-32(fp)
   8bf28:	108000c4 	addi	r2,r2,3
   8bf2c:	10800003 	ldbu	r2,0(r2)
   8bf30:	12003fcc 	andi	r8,r2,255
   8bf34:	e0bff817 	ldw	r2,-32(fp)
   8bf38:	10800104 	addi	r2,r2,4
   8bf3c:	10800003 	ldbu	r2,0(r2)
   8bf40:	12403fcc 	andi	r9,r2,255
   8bf44:	e0bff817 	ldw	r2,-32(fp)
   8bf48:	10800144 	addi	r2,r2,5
   8bf4c:	10800003 	ldbu	r2,0(r2)
   8bf50:	12803fcc 	andi	r10,r2,255
   8bf54:	e0bff817 	ldw	r2,-32(fp)
   8bf58:	10800184 	addi	r2,r2,6
   8bf5c:	10800003 	ldbu	r2,0(r2)
   8bf60:	10c03fcc 	andi	r3,r2,255
   8bf64:	e0bff817 	ldw	r2,-32(fp)
   8bf68:	108001c4 	addi	r2,r2,7
   8bf6c:	10800003 	ldbu	r2,0(r2)
   8bf70:	10803fcc 	andi	r2,r2,255
   8bf74:	d9000015 	stw	r4,0(sp)
   8bf78:	da000115 	stw	r8,4(sp)
   8bf7c:	da400215 	stw	r9,8(sp)
   8bf80:	da800315 	stw	r10,12(sp)
   8bf84:	d8c00415 	stw	r3,16(sp)
   8bf88:	d8800515 	stw	r2,20(sp)
   8bf8c:	010002b4 	movhi	r4,10
   8bf90:	2136b004 	addi	r4,r4,-9536
   8bf94:	008ee340 	call	8ee34 <printf>
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8bf98:	e0bff817 	ldw	r2,-32(fp)
   8bf9c:	10800204 	addi	r2,r2,8
   8bfa0:	10800003 	ldbu	r2,0(r2)
   8bfa4:	11403fcc 	andi	r5,r2,255
   8bfa8:	e0bff817 	ldw	r2,-32(fp)
   8bfac:	10800244 	addi	r2,r2,9
   8bfb0:	10800003 	ldbu	r2,0(r2)
   8bfb4:	11803fcc 	andi	r6,r2,255
   8bfb8:	e0bff817 	ldw	r2,-32(fp)
   8bfbc:	10800284 	addi	r2,r2,10
   8bfc0:	10800003 	ldbu	r2,0(r2)
   8bfc4:	11c03fcc 	andi	r7,r2,255
   8bfc8:	e0bff817 	ldw	r2,-32(fp)
   8bfcc:	108002c4 	addi	r2,r2,11
   8bfd0:	10800003 	ldbu	r2,0(r2)
   8bfd4:	11003fcc 	andi	r4,r2,255
   8bfd8:	e0bff817 	ldw	r2,-32(fp)
   8bfdc:	10800304 	addi	r2,r2,12
   8bfe0:	10800003 	ldbu	r2,0(r2)
   8bfe4:	12003fcc 	andi	r8,r2,255
   8bfe8:	e0bff817 	ldw	r2,-32(fp)
   8bfec:	10800344 	addi	r2,r2,13
   8bff0:	10800003 	ldbu	r2,0(r2)
   8bff4:	12403fcc 	andi	r9,r2,255
   8bff8:	e0bff817 	ldw	r2,-32(fp)
   8bffc:	10800384 	addi	r2,r2,14
   8c000:	10800003 	ldbu	r2,0(r2)
   8c004:	10c03fcc 	andi	r3,r2,255
   8c008:	e0bff817 	ldw	r2,-32(fp)
   8c00c:	108003c4 	addi	r2,r2,15
   8c010:	10800003 	ldbu	r2,0(r2)
   8c014:	10803fcc 	andi	r2,r2,255
   8c018:	d9000015 	stw	r4,0(sp)
   8c01c:	da000115 	stw	r8,4(sp)
   8c020:	da400215 	stw	r9,8(sp)
   8c024:	d8c00315 	stw	r3,12(sp)
   8c028:	d8800415 	stw	r2,16(sp)
   8c02c:	010002b4 	movhi	r4,10
   8c030:	2136bd04 	addi	r4,r4,-9484
   8c034:	008ee340 	call	8ee34 <printf>
	int cols = len % 16;

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
   8c038:	e0bffa17 	ldw	r2,-24(fp)
   8c03c:	10800044 	addi	r2,r2,1
   8c040:	e0bffa15 	stw	r2,-24(fp)
   8c044:	e0bff817 	ldw	r2,-32(fp)
   8c048:	10800404 	addi	r2,r2,16
   8c04c:	e0bff815 	stw	r2,-32(fp)
   8c050:	e0fffa17 	ldw	r3,-24(fp)
   8c054:	e0bff717 	ldw	r2,-36(fp)
   8c058:	18bfa516 	blt	r3,r2,8bef0 <bin_dump+0xc0>

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
	}

	if (cols > 0) {
   8c05c:	e0bff617 	ldw	r2,-40(fp)
   8c060:	10800050 	cmplti	r2,r2,1
   8c064:	1000231e 	bne	r2,zero,8c0f4 <bin_dump+0x2c4>
		printf("%04x | ", (rows - 1) * 16);
   8c068:	e0bff717 	ldw	r2,-36(fp)
   8c06c:	1004913a 	slli	r2,r2,4
   8c070:	117ffc04 	addi	r5,r2,-16
   8c074:	010002b4 	movhi	r4,10
   8c078:	2136c804 	addi	r4,r4,-9440
   8c07c:	008ee340 	call	8ee34 <printf>
		for (c = 0; c < cols; ++c, ++p) {
   8c080:	e03ff915 	stw	zero,-28(fp)
   8c084:	00001606 	br	8c0e0 <bin_dump+0x2b0>
			if (c == 8) {
   8c088:	e0bff917 	ldw	r2,-28(fp)
   8c08c:	10800218 	cmpnei	r2,r2,8
   8c090:	1000071e 	bne	r2,zero,8c0b0 <bin_dump+0x280>
				printf("- %02x ", *p);
   8c094:	e0bff817 	ldw	r2,-32(fp)
   8c098:	10800003 	ldbu	r2,0(r2)
   8c09c:	11403fcc 	andi	r5,r2,255
   8c0a0:	010002b4 	movhi	r4,10
   8c0a4:	2136ca04 	addi	r4,r4,-9432
   8c0a8:	008ee340 	call	8ee34 <printf>
   8c0ac:	00000606 	br	8c0c8 <bin_dump+0x298>
			} else {
				printf("%02x ", *p);
   8c0b0:	e0bff817 	ldw	r2,-32(fp)
   8c0b4:	10800003 	ldbu	r2,0(r2)
   8c0b8:	11403fcc 	andi	r5,r2,255
   8c0bc:	010002b4 	movhi	r4,10
   8c0c0:	2136cc04 	addi	r4,r4,-9424
   8c0c4:	008ee340 	call	8ee34 <printf>
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
	}

	if (cols > 0) {
		printf("%04x | ", (rows - 1) * 16);
		for (c = 0; c < cols; ++c, ++p) {
   8c0c8:	e0bff917 	ldw	r2,-28(fp)
   8c0cc:	10800044 	addi	r2,r2,1
   8c0d0:	e0bff915 	stw	r2,-28(fp)
   8c0d4:	e0bff817 	ldw	r2,-32(fp)
   8c0d8:	10800044 	addi	r2,r2,1
   8c0dc:	e0bff815 	stw	r2,-32(fp)
   8c0e0:	e0fff917 	ldw	r3,-28(fp)
   8c0e4:	e0bff617 	ldw	r2,-40(fp)
   8c0e8:	18bfe716 	blt	r3,r2,8c088 <bin_dump+0x258>
				printf("- %02x ", *p);
			} else {
				printf("%02x ", *p);
			}
		}
		printf("\n");
   8c0ec:	01000284 	movi	r4,10
   8c0f0:	008eeac0 	call	8eeac <putchar>
	}

	return len;
   8c0f4:	e0bffc17 	ldw	r2,-16(fp)
   8c0f8:	e0bffd15 	stw	r2,-12(fp)
   8c0fc:	e0bffd17 	ldw	r2,-12(fp)
}
   8c100:	e037883a 	mov	sp,fp
   8c104:	dfc00117 	ldw	ra,4(sp)
   8c108:	df000017 	ldw	fp,0(sp)
   8c10c:	dec00204 	addi	sp,sp,8
   8c110:	f800283a 	ret

0008c114 <adv7513_int_handler>:

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
static void adv7513_int_handler(void *context)
{
   8c114:	deffaf04 	addi	sp,sp,-324
   8c118:	de00012e 	bgeu	sp,et,8c120 <adv7513_int_handler+0xc>
   8c11c:	003da0fa 	break	3
   8c120:	dfc05015 	stw	ra,320(sp)
   8c124:	df004f15 	stw	fp,316(sp)
   8c128:	df004f04 	addi	fp,sp,316
   8c12c:	e13fff15 	stw	r4,-4(fp)
	struct hdmi_encoder *ec = (struct hdmi_encoder *)context;
   8c130:	e0bfff17 	ldw	r2,-4(fp)
   8c134:	e0bfb615 	stw	r2,-296(fp)
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_N_BASE) & HDMI_TX_INT_MASK;
   8c138:	00800434 	movhi	r2,16
   8c13c:	10840b04 	addi	r2,r2,4140
   8c140:	10800037 	ldwio	r2,0(r2)
   8c144:	1080004c 	andi	r2,r2,1
   8c148:	e0bfb515 	stw	r2,-300(fp)
	//if (irq_status == 0)
	//	return;

	// clear system irq flag
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_N_BASE, 0x00);
   8c14c:	00800434 	movhi	r2,16
   8c150:	10840b04 	addi	r2,r2,4140
   8c154:	10000035 	stwio	zero,0(r2)

	// reload adv7513 int mask value
	adv7513_long_to_int_mask(&int_mask, ec->int_mask);
   8c158:	e0bfb617 	ldw	r2,-296(fp)
   8c15c:	11400617 	ldw	r5,24(r2)
   8c160:	e13fb804 	addi	r4,fp,-288
   8c164:	008c48c0 	call	8c48c <adv7513_long_to_int_mask>

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
   8c168:	e1bfb704 	addi	r6,fp,-292
   8c16c:	e13fb617 	ldw	r4,-296(fp)
   8c170:	014024c4 	movi	r5,147
   8c174:	008ae9c0 	call	8ae9c <reg_read>
   8c178:	e0bfb415 	stw	r2,-304(fp)
	if (r != 0)
   8c17c:	e0bfb417 	ldw	r2,-304(fp)
   8c180:	1004c03a 	cmpne	r2,r2,zero
   8c184:	1000bc1e 	bne	r2,zero,8c478 <adv7513_int_handler+0x364>
		return;
	int_status.reg93 = regv;
   8c188:	e0bfb703 	ldbu	r2,-292(fp)
   8c18c:	10803fcc 	andi	r2,r2,255
   8c190:	e0bfbb15 	stw	r2,-276(fp)

	r = reg_read(ec, 0x96, &regv);
   8c194:	e1bfb704 	addi	r6,fp,-292
   8c198:	e13fb617 	ldw	r4,-296(fp)
   8c19c:	01402584 	movi	r5,150
   8c1a0:	008ae9c0 	call	8ae9c <reg_read>
   8c1a4:	e0bfb415 	stw	r2,-304(fp)
	if (r != 0)
   8c1a8:	e0bfb417 	ldw	r2,-304(fp)
   8c1ac:	1004c03a 	cmpne	r2,r2,zero
   8c1b0:	1000b11e 	bne	r2,zero,8c478 <adv7513_int_handler+0x364>
		return;
	int_status.reg96 = regv;
   8c1b4:	e0bfb703 	ldbu	r2,-292(fp)
   8c1b8:	10803fcc 	andi	r2,r2,255
   8c1bc:	e0bfbc15 	stw	r2,-272(fp)

	r = reg_read(ec, 0x97, &regv);
   8c1c0:	e1bfb704 	addi	r6,fp,-292
   8c1c4:	e13fb617 	ldw	r4,-296(fp)
   8c1c8:	014025c4 	movi	r5,151
   8c1cc:	008ae9c0 	call	8ae9c <reg_read>
   8c1d0:	e0bfb415 	stw	r2,-304(fp)
	if (r != 0)
   8c1d4:	e0bfb417 	ldw	r2,-304(fp)
   8c1d8:	1004c03a 	cmpne	r2,r2,zero
   8c1dc:	1000a61e 	bne	r2,zero,8c478 <adv7513_int_handler+0x364>
		return;
	int_status.reg97 = regv;
   8c1e0:	e0bfb703 	ldbu	r2,-292(fp)
   8c1e4:	10803fcc 	andi	r2,r2,255
   8c1e8:	e0bfbd15 	stw	r2,-268(fp)

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
   8c1ec:	e13fb617 	ldw	r4,-296(fp)
   8c1f0:	01402484 	movi	r5,146
   8c1f4:	000d883a 	mov	r6,zero
   8c1f8:	008af300 	call	8af30 <reg_write>
	reg_write(ec, 0x94, 0);
   8c1fc:	e13fb617 	ldw	r4,-296(fp)
   8c200:	01402504 	movi	r5,148
   8c204:	000d883a 	mov	r6,zero
   8c208:	008af300 	call	8af30 <reg_write>
	reg_write(ec, 0x95, 0);
   8c20c:	e13fb617 	ldw	r4,-296(fp)
   8c210:	01402544 	movi	r5,149
   8c214:	000d883a 	mov	r6,zero
   8c218:	008af300 	call	8af30 <reg_write>

	// clear adv7513 int status
	if (int_status.reg93 != 0) {
   8c21c:	e0bfbb17 	ldw	r2,-276(fp)
   8c220:	1005003a 	cmpeq	r2,r2,zero
   8c224:	1000041e 	bne	r2,zero,8c238 <adv7513_int_handler+0x124>
		reg_write(ec, 0x93, 0xff);
   8c228:	e13fb617 	ldw	r4,-296(fp)
   8c22c:	014024c4 	movi	r5,147
   8c230:	01803fc4 	movi	r6,255
   8c234:	008af300 	call	8af30 <reg_write>
	}

	if (int_status.reg96 != 0) {
   8c238:	e0bfbc17 	ldw	r2,-272(fp)
   8c23c:	1005003a 	cmpeq	r2,r2,zero
   8c240:	1000041e 	bne	r2,zero,8c254 <adv7513_int_handler+0x140>
		reg_write(ec, 0x96, 0xff);
   8c244:	e13fb617 	ldw	r4,-296(fp)
   8c248:	01402584 	movi	r5,150
   8c24c:	01803fc4 	movi	r6,255
   8c250:	008af300 	call	8af30 <reg_write>
	}

	if (int_status.reg97 != 0) {
   8c254:	e0bfbd17 	ldw	r2,-268(fp)
   8c258:	1005003a 	cmpeq	r2,r2,zero
   8c25c:	1000041e 	bne	r2,zero,8c270 <adv7513_int_handler+0x15c>
		reg_write(ec, 0x97, 0xff);
   8c260:	e13fb617 	ldw	r4,-296(fp)
   8c264:	014025c4 	movi	r5,151
   8c268:	01803fc4 	movi	r6,255
   8c26c:	008af300 	call	8af30 <reg_write>

	// -------------------------------------------------------
	// handle adv7513 interrupt events
	// WARNING: this should be an application level task ...
	//
	if (int_status.reg96_bits.monitor_sense || int_status.reg96_bits.hpd) {
   8c270:	e0bfbc17 	ldw	r2,-272(fp)
   8c274:	1080100c 	andi	r2,r2,64
   8c278:	1004c03a 	cmpne	r2,r2,zero
   8c27c:	1000041e 	bne	r2,zero,8c290 <adv7513_int_handler+0x17c>
   8c280:	e0bfbc17 	ldw	r2,-272(fp)
   8c284:	1080200c 	andi	r2,r2,128
   8c288:	1005003a 	cmpeq	r2,r2,zero
   8c28c:	10005b1e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>

		alt_u8 edid[256];
		int dvi_mode = 0;
   8c290:	e03fb315 	stw	zero,-308(fp)
		int pwr_state = 0;
   8c294:	e03fbe15 	stw	zero,-264(fp)
		int pwron_retry_count = 200;
   8c298:	00803204 	movi	r2,200
   8c29c:	e0bfb215 	stw	r2,-312(fp)
		int m_sense_retry_count = 30;
   8c2a0:	00800784 	movi	r2,30
   8c2a4:	e0bfb115 	stw	r2,-316(fp)

		while (m_sense_retry_count-- > 0) {
   8c2a8:	00000d06 	br	8c2e0 <adv7513_int_handler+0x1cc>
			r = reg_read(ec, ADV7513_REG_STATUS, &regv);
   8c2ac:	e1bfb704 	addi	r6,fp,-292
   8c2b0:	e13fb617 	ldw	r4,-296(fp)
   8c2b4:	01401084 	movi	r5,66
   8c2b8:	008ae9c0 	call	8ae9c <reg_read>
   8c2bc:	e0bfb415 	stw	r2,-304(fp)
			if (r != 0)
   8c2c0:	e0bfb417 	ldw	r2,-304(fp)
   8c2c4:	1004c03a 	cmpne	r2,r2,zero
   8c2c8:	10004c1e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>
				goto __unplugged_iret;

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
   8c2cc:	e0bfb703 	ldbu	r2,-292(fp)
   8c2d0:	10803fcc 	andi	r2,r2,255
   8c2d4:	1080180c 	andi	r2,r2,96
   8c2d8:	10801820 	cmpeqi	r2,r2,96
   8c2dc:	1000091e 	bne	r2,zero,8c304 <adv7513_int_handler+0x1f0>
		int dvi_mode = 0;
		int pwr_state = 0;
		int pwron_retry_count = 200;
		int m_sense_retry_count = 30;

		while (m_sense_retry_count-- > 0) {
   8c2e0:	e0bfb117 	ldw	r2,-316(fp)
   8c2e4:	10800048 	cmpgei	r2,r2,1
   8c2e8:	1007883a 	mov	r3,r2
   8c2ec:	e0bfb117 	ldw	r2,-316(fp)
   8c2f0:	10bfffc4 	addi	r2,r2,-1
   8c2f4:	e0bfb115 	stw	r2,-316(fp)
   8c2f8:	18803fcc 	andi	r2,r3,255
   8c2fc:	1004c03a 	cmpne	r2,r2,zero
   8c300:	103fea1e 	bne	r2,zero,8c2ac <adv7513_int_handler+0x198>

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
				break;
		}

		if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) != ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
   8c304:	e0bfb703 	ldbu	r2,-292(fp)
   8c308:	10803fcc 	andi	r2,r2,255
   8c30c:	1080180c 	andi	r2,r2,96
   8c310:	10801818 	cmpnei	r2,r2,96
   8c314:	1000391e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>
			goto __unplugged_iret;

		// now we have both HPD and monitor-sense signal asserted

		// power up the hdmi-encoder ...
		r = adv7513_do_hpd_powerup(ec);
   8c318:	e13fb617 	ldw	r4,-296(fp)
   8c31c:	00804c80 	call	804c8 <adv7513_do_hpd_powerup>
   8c320:	e0bfb415 	stw	r2,-304(fp)
		if (r != 0)
   8c324:	e0bfb417 	ldw	r2,-304(fp)
   8c328:	1004c03a 	cmpne	r2,r2,zero
   8c32c:	1000331e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>
			goto __unplugged_iret;

		// readback edid data
		r = adv7513_edid_read(ec, edid, 0);
   8c330:	e17fbf04 	addi	r5,fp,-260
   8c334:	e13fb617 	ldw	r4,-296(fp)
   8c338:	000d883a 	mov	r6,zero
   8c33c:	00808640 	call	80864 <adv7513_edid_read>
   8c340:	e0bfb415 	stw	r2,-304(fp)
		if (r != 0)
   8c344:	e0bfb417 	ldw	r2,-304(fp)
   8c348:	1005003a 	cmpeq	r2,r2,zero
   8c34c:	1000021e 	bne	r2,zero,8c358 <adv7513_int_handler+0x244>
			dvi_mode = 1;
   8c350:	00800044 	movi	r2,1
   8c354:	e0bfb315 	stw	r2,-308(fp)

		if (edid[0x7e] == 0)
   8c358:	e0bfde83 	ldbu	r2,-134(fp)
   8c35c:	10803fcc 	andi	r2,r2,255
   8c360:	1004c03a 	cmpne	r2,r2,zero
   8c364:	1000171e 	bne	r2,zero,8c3c4 <adv7513_int_handler+0x2b0>
			dvi_mode = 1;
   8c368:	00800044 	movi	r2,1
   8c36c:	e0bfb315 	stw	r2,-308(fp)

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
   8c370:	00001406 	br	8c3c4 <adv7513_int_handler+0x2b0>
			r = adv7513_chip_init(ec, dvi_mode);
   8c374:	e13fb617 	ldw	r4,-296(fp)
   8c378:	e17fb317 	ldw	r5,-308(fp)
   8c37c:	0081b840 	call	81b84 <adv7513_chip_init>
   8c380:	e0bfb415 	stw	r2,-304(fp)
			if (r != 0)
   8c384:	e0bfb417 	ldw	r2,-304(fp)
   8c388:	1004c03a 	cmpne	r2,r2,zero
   8c38c:	10001b1e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>
				goto __unplugged_iret;

			r = adv7513_power_state(ec, &pwr_state);
   8c390:	e17fbe04 	addi	r5,fp,-264
   8c394:	e13fb617 	ldw	r4,-296(fp)
   8c398:	00807100 	call	80710 <adv7513_power_state>
   8c39c:	e0bfb415 	stw	r2,-304(fp)
			if (r != 0)
   8c3a0:	e0bfb417 	ldw	r2,-304(fp)
   8c3a4:	1004c03a 	cmpne	r2,r2,zero
   8c3a8:	1000141e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>
				goto __unplugged_iret;

			if (pwr_state != 0)
   8c3ac:	e0bfbe17 	ldw	r2,-264(fp)
   8c3b0:	1004c03a 	cmpne	r2,r2,zero
   8c3b4:	1000061e 	bne	r2,zero,8c3d0 <adv7513_int_handler+0x2bc>
				break;
			--pwron_retry_count;
   8c3b8:	e0bfb217 	ldw	r2,-312(fp)
   8c3bc:	10bfffc4 	addi	r2,r2,-1
   8c3c0:	e0bfb215 	stw	r2,-312(fp)

		if (edid[0x7e] == 0)
			dvi_mode = 1;

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
   8c3c4:	e0bfb217 	ldw	r2,-312(fp)
   8c3c8:	10800048 	cmpgei	r2,r2,1
   8c3cc:	103fe91e 	bne	r2,zero,8c374 <adv7513_int_handler+0x260>
			if (pwr_state != 0)
				break;
			--pwron_retry_count;
		}

		r = adv7513_power_state(ec, &pwr_state);
   8c3d0:	e17fbe04 	addi	r5,fp,-264
   8c3d4:	e13fb617 	ldw	r4,-296(fp)
   8c3d8:	00807100 	call	80710 <adv7513_power_state>
   8c3dc:	e0bfb415 	stw	r2,-304(fp)
		if (r != 0)
   8c3e0:	e0bfb417 	ldw	r2,-304(fp)
   8c3e4:	1004c03a 	cmpne	r2,r2,zero
   8c3e8:	1000041e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>
			goto __unplugged_iret;

		if (pwr_state == 0)
   8c3ec:	e0bfbe17 	ldw	r2,-264(fp)
   8c3f0:	1005003a 	cmpeq	r2,r2,zero
   8c3f4:	1000011e 	bne	r2,zero,8c3fc <adv7513_int_handler+0x2e8>
			goto __unplugged_iret;

		goto __plugged_iret;
   8c3f8:	00001006 	br	8c43c <adv7513_int_handler+0x328>
	}

__unplugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
   8c3fc:	e0bfb817 	ldw	r2,-288(fp)
   8c400:	100d883a 	mov	r6,r2
   8c404:	e13fb617 	ldw	r4,-296(fp)
   8c408:	01402484 	movi	r5,146
   8c40c:	008af300 	call	8af30 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94);
   8c410:	e0bfb917 	ldw	r2,-284(fp)
   8c414:	100d883a 	mov	r6,r2
   8c418:	e13fb617 	ldw	r4,-296(fp)
   8c41c:	01402504 	movi	r5,148
   8c420:	008af300 	call	8af30 <reg_write>
	reg_write(ec, 0x95, int_mask.reg95);
   8c424:	e0bfba17 	ldw	r2,-280(fp)
   8c428:	100d883a 	mov	r6,r2
   8c42c:	e13fb617 	ldw	r4,-296(fp)
   8c430:	01402544 	movi	r5,149
   8c434:	008af300 	call	8af30 <reg_write>

	return;
   8c438:	00000f06 	br	8c478 <adv7513_int_handler+0x364>

__plugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
   8c43c:	e0bfb817 	ldw	r2,-288(fp)
   8c440:	100d883a 	mov	r6,r2
   8c444:	e13fb617 	ldw	r4,-296(fp)
   8c448:	01402484 	movi	r5,146
   8c44c:	008af300 	call	8af30 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94 & 0xbf);  // disable sending monitor-sense interrupt since it is already connected
   8c450:	e0bfb917 	ldw	r2,-284(fp)
   8c454:	11802fcc 	andi	r6,r2,191
   8c458:	e13fb617 	ldw	r4,-296(fp)
   8c45c:	01402504 	movi	r5,148
   8c460:	008af300 	call	8af30 <reg_write>
	reg_write(ec, 0x95, int_mask.reg95);
   8c464:	e0bfba17 	ldw	r2,-280(fp)
   8c468:	100d883a 	mov	r6,r2
   8c46c:	e13fb617 	ldw	r4,-296(fp)
   8c470:	01402544 	movi	r5,149
   8c474:	008af300 	call	8af30 <reg_write>

	return;
}
   8c478:	e037883a 	mov	sp,fp
   8c47c:	dfc00117 	ldw	ra,4(sp)
   8c480:	df000017 	ldw	fp,0(sp)
   8c484:	dec00204 	addi	sp,sp,8
   8c488:	f800283a 	ret

0008c48c <adv7513_long_to_int_mask>:
{
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
}

static inline void adv7513_long_to_int_mask(struct adv7513_int_mask *mask, unsigned int long_val)
{
   8c48c:	defffd04 	addi	sp,sp,-12
   8c490:	de00012e 	bgeu	sp,et,8c498 <adv7513_long_to_int_mask+0xc>
   8c494:	003da0fa 	break	3
   8c498:	df000215 	stw	fp,8(sp)
   8c49c:	df000204 	addi	fp,sp,8
   8c4a0:	e13ffe15 	stw	r4,-8(fp)
   8c4a4:	e17fff15 	stw	r5,-4(fp)
	mask->reg92 = (long_val >> 16) & 0xff;
   8c4a8:	e0bfff17 	ldw	r2,-4(fp)
   8c4ac:	1004d43a 	srli	r2,r2,16
   8c4b0:	10c03fcc 	andi	r3,r2,255
   8c4b4:	e0bffe17 	ldw	r2,-8(fp)
   8c4b8:	10c00015 	stw	r3,0(r2)
	mask->reg94 = (long_val >> 8) & 0xff;
   8c4bc:	e0bfff17 	ldw	r2,-4(fp)
   8c4c0:	1004d23a 	srli	r2,r2,8
   8c4c4:	10c03fcc 	andi	r3,r2,255
   8c4c8:	e0bffe17 	ldw	r2,-8(fp)
   8c4cc:	10c00115 	stw	r3,4(r2)
	mask->reg95 = long_val & 0xff;
   8c4d0:	e0bfff17 	ldw	r2,-4(fp)
   8c4d4:	10c03fcc 	andi	r3,r2,255
   8c4d8:	e0bffe17 	ldw	r2,-8(fp)
   8c4dc:	10c00215 	stw	r3,8(r2)
}
   8c4e0:	e037883a 	mov	sp,fp
   8c4e4:	df000017 	ldw	fp,0(sp)
   8c4e8:	dec00104 	addi	sp,sp,4
   8c4ec:	f800283a 	ret

0008c4f0 <adv7513_int_setup>:

int adv7513_int_setup(struct hdmi_encoder *ec, const struct adv7513_int_mask *mask, alt_isr_func isr)
{
   8c4f0:	defff804 	addi	sp,sp,-32
   8c4f4:	de00012e 	bgeu	sp,et,8c4fc <adv7513_int_setup+0xc>
   8c4f8:	003da0fa 	break	3
   8c4fc:	dfc00715 	stw	ra,28(sp)
   8c500:	df000615 	stw	fp,24(sp)
   8c504:	df000604 	addi	fp,sp,24
   8c508:	e13ffc15 	stw	r4,-16(fp)
   8c50c:	e17ffd15 	stw	r5,-12(fp)
   8c510:	e1bffe15 	stw	r6,-8(fp)
	int r = 0;
   8c514:	e03ffb15 	stw	zero,-20(fp)

	//printf("adv7513_int_setup()\n");

	ec->int_mask = adv7513_int_mask_to_long(mask);
   8c518:	e13ffd17 	ldw	r4,-12(fp)
   8c51c:	008c7700 	call	8c770 <adv7513_int_mask_to_long>
   8c520:	1007883a 	mov	r3,r2
   8c524:	e0bffc17 	ldw	r2,-16(fp)
   8c528:	10c00615 	stw	r3,24(r2)

	// disable HDMI_TX_INT
	alt_ic_irq_disable(HDMI_TX_INT_N_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_N_IRQ);
   8c52c:	0009883a 	mov	r4,zero
   8c530:	01400084 	movi	r5,2
   8c534:	0097e900 	call	97e90 <alt_ic_irq_disable>

	r = reg_write(ec, 0x92, 0);
   8c538:	e13ffc17 	ldw	r4,-16(fp)
   8c53c:	01402484 	movi	r5,146
   8c540:	000d883a 	mov	r6,zero
   8c544:	008af300 	call	8af30 <reg_write>
   8c548:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   8c54c:	e0bffb17 	ldw	r2,-20(fp)
   8c550:	1005003a 	cmpeq	r2,r2,zero
   8c554:	1000031e 	bne	r2,zero,8c564 <adv7513_int_setup+0x74>
		return -1;
   8c558:	00bfffc4 	movi	r2,-1
   8c55c:	e0bfff15 	stw	r2,-4(fp)
   8c560:	00007d06 	br	8c758 <adv7513_int_setup+0x268>

	r = reg_write(ec, 0x94, 0);
   8c564:	e13ffc17 	ldw	r4,-16(fp)
   8c568:	01402504 	movi	r5,148
   8c56c:	000d883a 	mov	r6,zero
   8c570:	008af300 	call	8af30 <reg_write>
   8c574:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   8c578:	e0bffb17 	ldw	r2,-20(fp)
   8c57c:	1005003a 	cmpeq	r2,r2,zero
   8c580:	1000031e 	bne	r2,zero,8c590 <adv7513_int_setup+0xa0>
		return -1;
   8c584:	00bfffc4 	movi	r2,-1
   8c588:	e0bfff15 	stw	r2,-4(fp)
   8c58c:	00007206 	br	8c758 <adv7513_int_setup+0x268>

	r = reg_write(ec, 0x95, 0);
   8c590:	e13ffc17 	ldw	r4,-16(fp)
   8c594:	01402544 	movi	r5,149
   8c598:	000d883a 	mov	r6,zero
   8c59c:	008af300 	call	8af30 <reg_write>
   8c5a0:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   8c5a4:	e0bffb17 	ldw	r2,-20(fp)
   8c5a8:	1005003a 	cmpeq	r2,r2,zero
   8c5ac:	1000031e 	bne	r2,zero,8c5bc <adv7513_int_setup+0xcc>
		return -1;
   8c5b0:	00bfffc4 	movi	r2,-1
   8c5b4:	e0bfff15 	stw	r2,-4(fp)
   8c5b8:	00006706 	br	8c758 <adv7513_int_setup+0x268>

	// clear int flags
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_N_BASE, 0x00);
   8c5bc:	00800434 	movhi	r2,16
   8c5c0:	10840b04 	addi	r2,r2,4140
   8c5c4:	10000035 	stwio	zero,0(r2)

	r = reg_write(ec, 0x93, 0xff);
   8c5c8:	e13ffc17 	ldw	r4,-16(fp)
   8c5cc:	014024c4 	movi	r5,147
   8c5d0:	01803fc4 	movi	r6,255
   8c5d4:	008af300 	call	8af30 <reg_write>
   8c5d8:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   8c5dc:	e0bffb17 	ldw	r2,-20(fp)
   8c5e0:	1005003a 	cmpeq	r2,r2,zero
   8c5e4:	1000031e 	bne	r2,zero,8c5f4 <adv7513_int_setup+0x104>
		return -1;
   8c5e8:	00bfffc4 	movi	r2,-1
   8c5ec:	e0bfff15 	stw	r2,-4(fp)
   8c5f0:	00005906 	br	8c758 <adv7513_int_setup+0x268>

	r = reg_write(ec, 0x96, 0xff);
   8c5f4:	e13ffc17 	ldw	r4,-16(fp)
   8c5f8:	01402584 	movi	r5,150
   8c5fc:	01803fc4 	movi	r6,255
   8c600:	008af300 	call	8af30 <reg_write>
   8c604:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   8c608:	e0bffb17 	ldw	r2,-20(fp)
   8c60c:	1005003a 	cmpeq	r2,r2,zero
   8c610:	1000031e 	bne	r2,zero,8c620 <adv7513_int_setup+0x130>
		return -1;
   8c614:	00bfffc4 	movi	r2,-1
   8c618:	e0bfff15 	stw	r2,-4(fp)
   8c61c:	00004e06 	br	8c758 <adv7513_int_setup+0x268>

	r = reg_write(ec, 0x97, 0xff);
   8c620:	e13ffc17 	ldw	r4,-16(fp)
   8c624:	014025c4 	movi	r5,151
   8c628:	01803fc4 	movi	r6,255
   8c62c:	008af300 	call	8af30 <reg_write>
   8c630:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   8c634:	e0bffb17 	ldw	r2,-20(fp)
   8c638:	1005003a 	cmpeq	r2,r2,zero
   8c63c:	1000031e 	bne	r2,zero,8c64c <adv7513_int_setup+0x15c>
		return -1;
   8c640:	00bfffc4 	movi	r2,-1
   8c644:	e0bfff15 	stw	r2,-4(fp)
   8c648:	00004306 	br	8c758 <adv7513_int_setup+0x268>

	// enable interrupt
	if (ec->int_mask > 0) {
   8c64c:	e0bffc17 	ldw	r2,-16(fp)
   8c650:	10800617 	ldw	r2,24(r2)
   8c654:	1005003a 	cmpeq	r2,r2,zero
   8c658:	10003e1e 	bne	r2,zero,8c754 <adv7513_int_setup+0x264>
		// register isr
		if (isr) {
   8c65c:	e0bffe17 	ldw	r2,-8(fp)
   8c660:	1005003a 	cmpeq	r2,r2,zero
   8c664:	10000d1e 	bne	r2,zero,8c69c <adv7513_int_setup+0x1ac>
			// register interrupt handler
			r = alt_ic_isr_register(HDMI_TX_INT_N_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_N_IRQ, isr, ec, NULL);
   8c668:	d8000015 	stw	zero,0(sp)
   8c66c:	0009883a 	mov	r4,zero
   8c670:	01400084 	movi	r5,2
   8c674:	e1bffe17 	ldw	r6,-8(fp)
   8c678:	e1fffc17 	ldw	r7,-16(fp)
   8c67c:	0097d940 	call	97d94 <alt_ic_isr_register>
   8c680:	e0bffb15 	stw	r2,-20(fp)
			if (r != 0)
   8c684:	e0bffb17 	ldw	r2,-20(fp)
   8c688:	1005003a 	cmpeq	r2,r2,zero
   8c68c:	1000031e 	bne	r2,zero,8c69c <adv7513_int_setup+0x1ac>
				return -1;
   8c690:	00bfffc4 	movi	r2,-1
   8c694:	e0bfff15 	stw	r2,-4(fp)
   8c698:	00002f06 	br	8c758 <adv7513_int_setup+0x268>
		}

		// enable interrupts
		r = reg_write(ec, 0x92, mask->reg92);
   8c69c:	e0bffd17 	ldw	r2,-12(fp)
   8c6a0:	10800017 	ldw	r2,0(r2)
   8c6a4:	100d883a 	mov	r6,r2
   8c6a8:	e13ffc17 	ldw	r4,-16(fp)
   8c6ac:	01402484 	movi	r5,146
   8c6b0:	008af300 	call	8af30 <reg_write>
   8c6b4:	e0bffb15 	stw	r2,-20(fp)
		if (r != 0)
   8c6b8:	e0bffb17 	ldw	r2,-20(fp)
   8c6bc:	1005003a 	cmpeq	r2,r2,zero
   8c6c0:	1000031e 	bne	r2,zero,8c6d0 <adv7513_int_setup+0x1e0>
			return -1;
   8c6c4:	00bfffc4 	movi	r2,-1
   8c6c8:	e0bfff15 	stw	r2,-4(fp)
   8c6cc:	00002206 	br	8c758 <adv7513_int_setup+0x268>

		r = reg_write(ec, 0x94, mask->reg94);
   8c6d0:	e0bffd17 	ldw	r2,-12(fp)
   8c6d4:	10800117 	ldw	r2,4(r2)
   8c6d8:	100d883a 	mov	r6,r2
   8c6dc:	e13ffc17 	ldw	r4,-16(fp)
   8c6e0:	01402504 	movi	r5,148
   8c6e4:	008af300 	call	8af30 <reg_write>
   8c6e8:	e0bffb15 	stw	r2,-20(fp)
		if (r != 0)
   8c6ec:	e0bffb17 	ldw	r2,-20(fp)
   8c6f0:	1005003a 	cmpeq	r2,r2,zero
   8c6f4:	1000031e 	bne	r2,zero,8c704 <adv7513_int_setup+0x214>
			return -1;
   8c6f8:	00bfffc4 	movi	r2,-1
   8c6fc:	e0bfff15 	stw	r2,-4(fp)
   8c700:	00001506 	br	8c758 <adv7513_int_setup+0x268>

		r = reg_write(ec, 0x95, mask->reg95);
   8c704:	e0bffd17 	ldw	r2,-12(fp)
   8c708:	10800217 	ldw	r2,8(r2)
   8c70c:	100d883a 	mov	r6,r2
   8c710:	e13ffc17 	ldw	r4,-16(fp)
   8c714:	01402544 	movi	r5,149
   8c718:	008af300 	call	8af30 <reg_write>
   8c71c:	e0bffb15 	stw	r2,-20(fp)
		if (r != 0)
   8c720:	e0bffb17 	ldw	r2,-20(fp)
   8c724:	1005003a 	cmpeq	r2,r2,zero
   8c728:	1000031e 	bne	r2,zero,8c738 <adv7513_int_setup+0x248>
			return -1;
   8c72c:	00bfffc4 	movi	r2,-1
   8c730:	e0bfff15 	stw	r2,-4(fp)
   8c734:	00000806 	br	8c758 <adv7513_int_setup+0x268>

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(HDMI_TX_INT_N_BASE, HDMI_TX_INT_MASK); // 0x01: enable bit0
   8c738:	00c00434 	movhi	r3,16
   8c73c:	18c40a04 	addi	r3,r3,4136
   8c740:	00800044 	movi	r2,1
   8c744:	18800035 	stwio	r2,0(r3)

		alt_ic_irq_enable(HDMI_TX_INT_N_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_N_IRQ);
   8c748:	0009883a 	mov	r4,zero
   8c74c:	01400084 	movi	r5,2
   8c750:	0097dec0 	call	97dec <alt_ic_irq_enable>
	}

	return 0;
   8c754:	e03fff15 	stw	zero,-4(fp)
   8c758:	e0bfff17 	ldw	r2,-4(fp)
}
   8c75c:	e037883a 	mov	sp,fp
   8c760:	dfc00117 	ldw	ra,4(sp)
   8c764:	df000017 	ldw	fp,0(sp)
   8c768:	dec00204 	addi	sp,sp,8
   8c76c:	f800283a 	ret

0008c770 <adv7513_int_mask_to_long>:
		unsigned int reg97;
	};
};

static inline unsigned int adv7513_int_mask_to_long(const struct adv7513_int_mask *mask)
{
   8c770:	defffe04 	addi	sp,sp,-8
   8c774:	de00012e 	bgeu	sp,et,8c77c <adv7513_int_mask_to_long+0xc>
   8c778:	003da0fa 	break	3
   8c77c:	df000115 	stw	fp,4(sp)
   8c780:	df000104 	addi	fp,sp,4
   8c784:	e13fff15 	stw	r4,-4(fp)
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
   8c788:	e0bfff17 	ldw	r2,-4(fp)
   8c78c:	10800017 	ldw	r2,0(r2)
   8c790:	1006943a 	slli	r3,r2,16
   8c794:	e0bfff17 	ldw	r2,-4(fp)
   8c798:	10800117 	ldw	r2,4(r2)
   8c79c:	1004923a 	slli	r2,r2,8
   8c7a0:	1886b03a 	or	r3,r3,r2
   8c7a4:	e0bfff17 	ldw	r2,-4(fp)
   8c7a8:	10800217 	ldw	r2,8(r2)
   8c7ac:	1884b03a 	or	r2,r3,r2
}
   8c7b0:	e037883a 	mov	sp,fp
   8c7b4:	df000017 	ldw	fp,0(sp)
   8c7b8:	dec00104 	addi	sp,sp,4
   8c7bc:	f800283a 	ret

0008c7c0 <cmd_help>:

static void cmd_help()
{
   8c7c0:	defffe04 	addi	sp,sp,-8
   8c7c4:	de00012e 	bgeu	sp,et,8c7cc <cmd_help+0xc>
   8c7c8:	003da0fa 	break	3
   8c7cc:	dfc00115 	stw	ra,4(sp)
   8c7d0:	df000015 	stw	fp,0(sp)
   8c7d4:	d839883a 	mov	fp,sp
	printf("  d         perform register-space dump of the ADV7513 encoder\n");
   8c7d8:	010002b4 	movhi	r4,10
   8c7dc:	2136ce04 	addi	r4,r4,-9416
   8c7e0:	008ef700 	call	8ef70 <puts>
	printf("  e         display EDID raw data of currently connected monitor\n");
   8c7e4:	010002b4 	movhi	r4,10
   8c7e8:	2136de04 	addi	r4,r4,-9352
   8c7ec:	008ef700 	call	8ef70 <puts>
	printf("  e p       display EDID raw data of currently connected monitor\n");
   8c7f0:	010002b4 	movhi	r4,10
   8c7f4:	2136ef04 	addi	r4,r4,-9284
   8c7f8:	008ef700 	call	8ef70 <puts>
	printf("            and decode it in the human readable format\n");
   8c7fc:	010002b4 	movhi	r4,10
   8c800:	21370004 	addi	r4,r4,-9216
   8c804:	008ef700 	call	8ef70 <puts>
	printf("  m         display current VIC and mode info (not exactly accurate)\n");
   8c808:	010002b4 	movhi	r4,10
   8c80c:	21370e04 	addi	r4,r4,-9160
   8c810:	008ef700 	call	8ef70 <puts>
	printf("  o         power off the HDMI encoder\n");
   8c814:	010002b4 	movhi	r4,10
   8c818:	21372004 	addi	r4,r4,-9088
   8c81c:	008ef700 	call	8ef70 <puts>
	printf("  i         power up the HDMI encoder and initialize it in HDMI mode\n");
   8c820:	010002b4 	movhi	r4,10
   8c824:	21372a04 	addi	r4,r4,-9048
   8c828:	008ef700 	call	8ef70 <puts>
	printf("  v         power up the HDMI encoder and initialize it in DVI mode\n");
   8c82c:	010002b4 	movhi	r4,10
   8c830:	21373c04 	addi	r4,r4,-8976
   8c834:	008ef700 	call	8ef70 <puts>
	printf("  r hh      readback HDMI encoder register at address hh (2-digit hex)\n");
   8c838:	010002b4 	movhi	r4,10
   8c83c:	21374d04 	addi	r4,r4,-8908
   8c840:	008ef700 	call	8ef70 <puts>
	printf("  w hh vv   write HDMI encoder register value vv (2-digit hex) to address hh\n");
   8c844:	010002b4 	movhi	r4,10
   8c848:	21375f04 	addi	r4,r4,-8836
   8c84c:	008ef700 	call	8ef70 <puts>
	printf("            (note that hh should be exactly a 2-digit hex number)\n");
   8c850:	010002b4 	movhi	r4,10
   8c854:	21377304 	addi	r4,r4,-8756
   8c858:	008ef700 	call	8ef70 <puts>
}
   8c85c:	e037883a 	mov	sp,fp
   8c860:	dfc00117 	ldw	ra,4(sp)
   8c864:	df000017 	ldw	fp,0(sp)
   8c868:	dec00204 	addi	sp,sp,8
   8c86c:	f800283a 	ret

0008c870 <main>:
};

alt_u8 edid[256];

int main(int argc, const char *argv[])
{
   8c870:	deee1804 	addi	sp,sp,-18336
   8c874:	de00012e 	bgeu	sp,et,8c87c <main+0xc>
   8c878:	003da0fa 	break	3
   8c87c:	dfd1e715 	stw	ra,18332(sp)
   8c880:	df11e615 	stw	fp,18328(sp)
   8c884:	df11e604 	addi	fp,sp,18328
   8c888:	e13ffe15 	stw	r4,-8(fp)
   8c88c:	e17fff15 	stw	r5,-4(fp)
	int r = 0, rr = 0;
   8c890:	e02e1c15 	stw	zero,-18320(fp)
   8c894:	e02e1b15 	stw	zero,-18324(fp)

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));
   8c898:	e0ae1d04 	addi	r2,fp,-18316
   8c89c:	10000015 	stw	zero,0(r2)
   8c8a0:	10000115 	stw	zero,4(r2)
   8c8a4:	10000215 	stw	zero,8(r2)

	printf("\n===== c5g/de1-77 adv7513 hdmi encoder demo =====\n");
   8c8a8:	010002b4 	movhi	r4,10
   8c8ac:	21378404 	addi	r4,r4,-8688
   8c8b0:	008ef700 	call	8ef70 <puts>

	r = adv7513_chip_identify(&encoder);
   8c8b4:	010002b4 	movhi	r4,10
   8c8b8:	213ab104 	addi	r4,r4,-5436
   8c8bc:	008023c0 	call	8023c <adv7513_chip_identify>
   8c8c0:	e0ae1c15 	stw	r2,-18320(fp)
	if (r != 0) {
   8c8c4:	e0ae1c17 	ldw	r2,-18320(fp)
   8c8c8:	1005003a 	cmpeq	r2,r2,zero
   8c8cc:	1000071e 	bne	r2,zero,8c8ec <main+0x7c>
		printf("[err] failed to do chip-identification! (%d)\n", r);
   8c8d0:	010002b4 	movhi	r4,10
   8c8d4:	21379104 	addi	r4,r4,-8636
   8c8d8:	e16e1c17 	ldw	r5,-18320(fp)
   8c8dc:	008ee340 	call	8ee34 <printf>
		rr = -1;
   8c8e0:	00bfffc4 	movi	r2,-1
   8c8e4:	e0ae1b15 	stw	r2,-18324(fp)
		goto _safe_exit;
   8c8e8:	0001ac06 	br	8cf9c <main+0x72c>
	}

	if ((encoder.chip_id[0] == 0x11) && (encoder.chip_id[1] == 0x75)) {
   8c8ec:	008002b4 	movhi	r2,10
   8c8f0:	10bab104 	addi	r2,r2,-5436
   8c8f4:	10800703 	ldbu	r2,28(r2)
   8c8f8:	10803fcc 	andi	r2,r2,255
   8c8fc:	10800458 	cmpnei	r2,r2,17
   8c900:	1000161e 	bne	r2,zero,8c95c <main+0xec>
   8c904:	008002b4 	movhi	r2,10
   8c908:	10bab104 	addi	r2,r2,-5436
   8c90c:	10800743 	ldbu	r2,29(r2)
   8c910:	10803fcc 	andi	r2,r2,255
   8c914:	10801d58 	cmpnei	r2,r2,117
   8c918:	1000101e 	bne	r2,zero,8c95c <main+0xec>
		printf("encoder chip : ADV%02x%02x rev: 0x%02x\n", encoder.chip_id[1], encoder.chip_id[0], encoder.chip_rev[0]);
   8c91c:	008002b4 	movhi	r2,10
   8c920:	10bab104 	addi	r2,r2,-5436
   8c924:	10800743 	ldbu	r2,29(r2)
   8c928:	11403fcc 	andi	r5,r2,255
   8c92c:	008002b4 	movhi	r2,10
   8c930:	10bab104 	addi	r2,r2,-5436
   8c934:	10800703 	ldbu	r2,28(r2)
   8c938:	11803fcc 	andi	r6,r2,255
   8c93c:	008002b4 	movhi	r2,10
   8c940:	10bab104 	addi	r2,r2,-5436
   8c944:	10800803 	ldbu	r2,32(r2)
   8c948:	11c03fcc 	andi	r7,r2,255
   8c94c:	010002b4 	movhi	r4,10
   8c950:	21379d04 	addi	r4,r4,-8588
   8c954:	008ee340 	call	8ee34 <printf>
		printf("[err] failed to do chip-identification! (%d)\n", r);
		rr = -1;
		goto _safe_exit;
	}

	if ((encoder.chip_id[0] == 0x11) && (encoder.chip_id[1] == 0x75)) {
   8c958:	00000f06 	br	8c998 <main+0x128>
		printf("encoder chip : ADV%02x%02x rev: 0x%02x\n", encoder.chip_id[1], encoder.chip_id[0], encoder.chip_rev[0]);
	} else {
		printf("encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", encoder.chip_id[0], encoder.chip_id[1], encoder.chip_rev[0]);
   8c95c:	008002b4 	movhi	r2,10
   8c960:	10bab104 	addi	r2,r2,-5436
   8c964:	10800703 	ldbu	r2,28(r2)
   8c968:	11403fcc 	andi	r5,r2,255
   8c96c:	008002b4 	movhi	r2,10
   8c970:	10bab104 	addi	r2,r2,-5436
   8c974:	10800743 	ldbu	r2,29(r2)
   8c978:	11803fcc 	andi	r6,r2,255
   8c97c:	008002b4 	movhi	r2,10
   8c980:	10bab104 	addi	r2,r2,-5436
   8c984:	10800803 	ldbu	r2,32(r2)
   8c988:	11c03fcc 	andi	r7,r2,255
   8c98c:	010002b4 	movhi	r4,10
   8c990:	2137a704 	addi	r4,r4,-8548
   8c994:	008ee340 	call	8ee34 <printf>
	}

	ie_mask.reg94_bits.hpd = 1;
   8c998:	e0ae1e17 	ldw	r2,-18312(fp)
   8c99c:	10802014 	ori	r2,r2,128
   8c9a0:	e0ae1e15 	stw	r2,-18312(fp)
	ie_mask.reg94_bits.monitor_sense = 1;
   8c9a4:	e0ae1e17 	ldw	r2,-18312(fp)
   8c9a8:	10801014 	ori	r2,r2,64
   8c9ac:	e0ae1e15 	stw	r2,-18312(fp)

	r = adv7513_int_setup(&encoder, &ie_mask, adv7513_int_handler);
   8c9b0:	e16e1d04 	addi	r5,fp,-18316
   8c9b4:	010002b4 	movhi	r4,10
   8c9b8:	213ab104 	addi	r4,r4,-5436
   8c9bc:	01800274 	movhi	r6,9
   8c9c0:	31b04504 	addi	r6,r6,-16108
   8c9c4:	008c4f00 	call	8c4f0 <adv7513_int_setup>
   8c9c8:	e0ae1c15 	stw	r2,-18320(fp)
	if (r != 0) {
   8c9cc:	e0ae1c17 	ldw	r2,-18320(fp)
   8c9d0:	1005003a 	cmpeq	r2,r2,zero
   8c9d4:	1000071e 	bne	r2,zero,8c9f4 <main+0x184>
		printf("[err] failed to do HDMI_TX_INT interrupt setup! (%d)\n", r);
   8c9d8:	010002b4 	movhi	r4,10
   8c9dc:	2137b504 	addi	r4,r4,-8492
   8c9e0:	e16e1c17 	ldw	r5,-18320(fp)
   8c9e4:	008ee340 	call	8ee34 <printf>
		rr = -1;
   8c9e8:	00bfffc4 	movi	r2,-1
   8c9ec:	e0ae1b15 	stw	r2,-18324(fp)
		goto _safe_exit;
   8c9f0:	00016a06 	br	8cf9c <main+0x72c>
	} else {
		printf("success to setup HDMI_TX_INT interrupt handler.\n");
   8c9f4:	010002b4 	movhi	r4,10
   8c9f8:	2137c304 	addi	r4,r4,-8436
   8c9fc:	008ef700 	call	8ef70 <puts>
	}

	adv7513_kick_up(&encoder);
   8ca00:	010002b4 	movhi	r4,10
   8ca04:	213ab104 	addi	r4,r4,-5436
   8ca08:	00806500 	call	80650 <adv7513_kick_up>

	printf("\noperation hints ...\n");
   8ca0c:	010002b4 	movhi	r4,10
   8ca10:	2137cf04 	addi	r4,r4,-8388
   8ca14:	008ef700 	call	8ef70 <puts>
	printf(" - please wait for monitor sync ...\n");
   8ca18:	010002b4 	movhi	r4,10
   8ca1c:	2137d504 	addi	r4,r4,-8364
   8ca20:	008ef700 	call	8ef70 <puts>
	printf("   the pattern will be auto sent out to your monitor.\n");
   8ca24:	010002b4 	movhi	r4,10
   8ca28:	2137de04 	addi	r4,r4,-8328
   8ca2c:	008ef700 	call	8ef70 <puts>
	printf(" - press onboard push-button KEY1 can switch current display mode.\n");
   8ca30:	010002b4 	movhi	r4,10
   8ca34:	2137ec04 	addi	r4,r4,-8272
   8ca38:	008ef700 	call	8ef70 <puts>
	printf(" - type \"h\" in the command line prompt to see available commands.\n");
   8ca3c:	010002b4 	movhi	r4,10
   8ca40:	2137fd04 	addi	r4,r4,-8204
   8ca44:	008ef700 	call	8ef70 <puts>

	printf("\na breif summary of commands for quick start up ...\n");
   8ca48:	010002b4 	movhi	r4,10
   8ca4c:	21380e04 	addi	r4,r4,-8136
   8ca50:	008ef700 	call	8ef70 <puts>
	printf("  d         perform register-space dump of the ADV7513 encoder\n");
   8ca54:	010002b4 	movhi	r4,10
   8ca58:	2136ce04 	addi	r4,r4,-9416
   8ca5c:	008ef700 	call	8ef70 <puts>
	printf("  e         display EDID raw data of currently connected monitor\n");
   8ca60:	010002b4 	movhi	r4,10
   8ca64:	2136de04 	addi	r4,r4,-9352
   8ca68:	008ef700 	call	8ef70 <puts>
	printf("  e p       display EDID raw data of currently connected monitor\n");
   8ca6c:	010002b4 	movhi	r4,10
   8ca70:	2136ef04 	addi	r4,r4,-9284
   8ca74:	008ef700 	call	8ef70 <puts>
	printf("            and decode it in the human readable format\n");
   8ca78:	010002b4 	movhi	r4,10
   8ca7c:	21370004 	addi	r4,r4,-9216
   8ca80:	008ef700 	call	8ef70 <puts>
	printf("  m         display current VIC and mode info (not exactly accurate)\n");
   8ca84:	010002b4 	movhi	r4,10
   8ca88:	21370e04 	addi	r4,r4,-9160
   8ca8c:	008ef700 	call	8ef70 <puts>
	printf("  o         power off the HDMI encoder\n");
   8ca90:	010002b4 	movhi	r4,10
   8ca94:	21372004 	addi	r4,r4,-9088
   8ca98:	008ef700 	call	8ef70 <puts>
	printf("  i         power up the HDMI encoder and initialize it in HDMI mode\n");
   8ca9c:	010002b4 	movhi	r4,10
   8caa0:	21372a04 	addi	r4,r4,-9048
   8caa4:	008ef700 	call	8ef70 <puts>
   8caa8:	00000006 	br	8caac <main+0x23c>

	// interactive command line mode -- used in local develop-testing
	while (1) {

		char cmd[80] = {0};
   8caac:	e12e2704 	addi	r4,fp,-18276
   8cab0:	01801404 	movi	r6,80
   8cab4:	000b883a 	mov	r5,zero
   8cab8:	008ed9c0 	call	8ed9c <memset>

		printf("\ncommand (h for help) > ");
   8cabc:	010002b4 	movhi	r4,10
   8cac0:	21381b04 	addi	r4,r4,-8084
   8cac4:	008ee340 	call	8ee34 <printf>

		fgets(cmd, 256, stdin);
   8cac8:	008002b4 	movhi	r2,10
   8cacc:	1081b804 	addi	r2,r2,1760
   8cad0:	10800017 	ldw	r2,0(r2)
   8cad4:	11800117 	ldw	r6,4(r2)
   8cad8:	e12e2704 	addi	r4,fp,-18276
   8cadc:	01404004 	movi	r5,256
   8cae0:	008e0000 	call	8e000 <fgets>

		if (cmd[0] == 'd') {
   8cae4:	e0ae2703 	ldbu	r2,-18276(fp)
   8cae8:	10803fcc 	andi	r2,r2,255
   8caec:	1080201c 	xori	r2,r2,128
   8caf0:	10bfe004 	addi	r2,r2,-128
   8caf4:	10801918 	cmpnei	r2,r2,100
   8caf8:	1000131e 	bne	r2,zero,8cb48 <main+0x2d8>
			alt_u8 regs[256];

			r = adv7513_regmap_dump(&encoder, regs, 0);
   8cafc:	e16e3b04 	addi	r5,fp,-18196
   8cb00:	010002b4 	movhi	r4,10
   8cb04:	213ab104 	addi	r4,r4,-5436
   8cb08:	000d883a 	mov	r6,zero
   8cb0c:	00809400 	call	80940 <adv7513_regmap_dump>
   8cb10:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cb14:	e0ae1c17 	ldw	r2,-18320(fp)
   8cb18:	1005003a 	cmpeq	r2,r2,zero
   8cb1c:	1000041e 	bne	r2,zero,8cb30 <main+0x2c0>
				printf("[err] failed to read HDMI encoder regs! (%d)\n", r);
   8cb20:	010002b4 	movhi	r4,10
   8cb24:	21382204 	addi	r4,r4,-8056
   8cb28:	e16e1c17 	ldw	r5,-18320(fp)
   8cb2c:	008ee340 	call	8ee34 <printf>
			}

			printf("\n\n");
   8cb30:	010002b4 	movhi	r4,10
   8cb34:	21382e04 	addi	r4,r4,-8008
   8cb38:	008ef700 	call	8ef70 <puts>
			bin_dump(regs, 256);
   8cb3c:	e12e3b04 	addi	r4,fp,-18196
   8cb40:	01404004 	movi	r5,256
   8cb44:	008be300 	call	8be30 <bin_dump>
		}

		if (cmd[0] == 'e') {
   8cb48:	e0ae2703 	ldbu	r2,-18276(fp)
   8cb4c:	10803fcc 	andi	r2,r2,255
   8cb50:	1080201c 	xori	r2,r2,128
   8cb54:	10bfe004 	addi	r2,r2,-128
   8cb58:	10801958 	cmpnei	r2,r2,101
   8cb5c:	10002c1e 	bne	r2,zero,8cc10 <main+0x3a0>
			r = adv7513_edid_read(&encoder, edid, 0);
   8cb60:	010002b4 	movhi	r4,10
   8cb64:	213ab104 	addi	r4,r4,-5436
   8cb68:	014002b4 	movhi	r5,10
   8cb6c:	29497f04 	addi	r5,r5,9724
   8cb70:	000d883a 	mov	r6,zero
   8cb74:	00808640 	call	80864 <adv7513_edid_read>
   8cb78:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cb7c:	e0ae1c17 	ldw	r2,-18320(fp)
   8cb80:	1005003a 	cmpeq	r2,r2,zero
   8cb84:	1000041e 	bne	r2,zero,8cb98 <main+0x328>
				printf("[err] failed to read edid data! (%d)\n", r);
   8cb88:	010002b4 	movhi	r4,10
   8cb8c:	21382f04 	addi	r4,r4,-8004
   8cb90:	e16e1c17 	ldw	r5,-18320(fp)
   8cb94:	008ee340 	call	8ee34 <printf>
			}

			printf("\n\n");
   8cb98:	010002b4 	movhi	r4,10
   8cb9c:	21382e04 	addi	r4,r4,-8008
   8cba0:	008ef700 	call	8ef70 <puts>
			bin_dump(edid, 256);
   8cba4:	010002b4 	movhi	r4,10
   8cba8:	21097f04 	addi	r4,r4,9724
   8cbac:	01404004 	movi	r5,256
   8cbb0:	008be300 	call	8be30 <bin_dump>

			printf("\n");
   8cbb4:	01000284 	movi	r4,10
   8cbb8:	008eeac0 	call	8eeac <putchar>
			if (cmd[2] == 'p') {
   8cbbc:	e0ae2783 	ldbu	r2,-18274(fp)
   8cbc0:	10803fcc 	andi	r2,r2,255
   8cbc4:	1080201c 	xori	r2,r2,128
   8cbc8:	10bfe004 	addi	r2,r2,-128
   8cbcc:	10801c18 	cmpnei	r2,r2,112
   8cbd0:	10000f1e 	bne	r2,zero,8cc10 <main+0x3a0>
				struct base_edid edid_info;

				r = edid_decode_v14(&edid_info, edid);
   8cbd4:	e12e7b04 	addi	r4,fp,-17940
   8cbd8:	014002b4 	movhi	r5,10
   8cbdc:	29497f04 	addi	r5,r5,9724
   8cbe0:	0084ff40 	call	84ff4 <edid_decode_v14>
   8cbe4:	e0ae1c15 	stw	r2,-18320(fp)
				if (r != 0) {
   8cbe8:	e0ae1c17 	ldw	r2,-18320(fp)
   8cbec:	1005003a 	cmpeq	r2,r2,zero
   8cbf0:	1000051e 	bne	r2,zero,8cc08 <main+0x398>
					printf("[err] failed to decode edid data! (%d)\n", r);
   8cbf4:	010002b4 	movhi	r4,10
   8cbf8:	21383904 	addi	r4,r4,-7964
   8cbfc:	e16e1c17 	ldw	r5,-18320(fp)
   8cc00:	008ee340 	call	8ee34 <printf>
   8cc04:	00000206 	br	8cc10 <main+0x3a0>
				} else {
					edid_print_v14(&edid_info);
   8cc08:	e12e7b04 	addi	r4,fp,-17940
   8cc0c:	00896280 	call	89628 <edid_print_v14>
				}
			}
		}

		if (cmd[0] == 'i') {
   8cc10:	e0ae2703 	ldbu	r2,-18276(fp)
   8cc14:	10803fcc 	andi	r2,r2,255
   8cc18:	1080201c 	xori	r2,r2,128
   8cc1c:	10bfe004 	addi	r2,r2,-128
   8cc20:	10801a58 	cmpnei	r2,r2,105
   8cc24:	1000221e 	bne	r2,zero,8ccb0 <main+0x440>
			printf("\n\n");
   8cc28:	010002b4 	movhi	r4,10
   8cc2c:	21382e04 	addi	r4,r4,-8008
   8cc30:	008ef700 	call	8ef70 <puts>

			r = adv7513_do_hpd_powerup(&encoder);
   8cc34:	010002b4 	movhi	r4,10
   8cc38:	213ab104 	addi	r4,r4,-5436
   8cc3c:	00804c80 	call	804c8 <adv7513_do_hpd_powerup>
   8cc40:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cc44:	e0ae1c17 	ldw	r2,-18320(fp)
   8cc48:	1005003a 	cmpeq	r2,r2,zero
   8cc4c:	1000051e 	bne	r2,zero,8cc64 <main+0x3f4>
				printf("[err] failed to do HDMI encoder power up! (%d)", r);
   8cc50:	010002b4 	movhi	r4,10
   8cc54:	21384304 	addi	r4,r4,-7924
   8cc58:	e16e1c17 	ldw	r5,-18320(fp)
   8cc5c:	008ee340 	call	8ee34 <printf>
   8cc60:	00000306 	br	8cc70 <main+0x400>
			} else {
				printf("[hpd] done HDMI encoder power up.\n");
   8cc64:	010002b4 	movhi	r4,10
   8cc68:	21384f04 	addi	r4,r4,-7876
   8cc6c:	008ef700 	call	8ef70 <puts>
			}

			r = adv7513_chip_init(&encoder, 0);
   8cc70:	010002b4 	movhi	r4,10
   8cc74:	213ab104 	addi	r4,r4,-5436
   8cc78:	000b883a 	mov	r5,zero
   8cc7c:	0081b840 	call	81b84 <adv7513_chip_init>
   8cc80:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cc84:	e0ae1c17 	ldw	r2,-18320(fp)
   8cc88:	1005003a 	cmpeq	r2,r2,zero
   8cc8c:	1000051e 	bne	r2,zero,8cca4 <main+0x434>
				printf("[err] failed to do HDMI encoder initialization! (%d)\n", r);
   8cc90:	010002b4 	movhi	r4,10
   8cc94:	21385804 	addi	r4,r4,-7840
   8cc98:	e16e1c17 	ldw	r5,-18320(fp)
   8cc9c:	008ee340 	call	8ee34 <printf>
   8cca0:	00000306 	br	8ccb0 <main+0x440>
			} else {
				printf("[hpd] done HDMI encoder initialization.\n");
   8cca4:	010002b4 	movhi	r4,10
   8cca8:	21386604 	addi	r4,r4,-7784
   8ccac:	008ef700 	call	8ef70 <puts>
			}
		}

		if (cmd[0] == 'v') {
   8ccb0:	e0ae2703 	ldbu	r2,-18276(fp)
   8ccb4:	10803fcc 	andi	r2,r2,255
   8ccb8:	1080201c 	xori	r2,r2,128
   8ccbc:	10bfe004 	addi	r2,r2,-128
   8ccc0:	10801d98 	cmpnei	r2,r2,118
   8ccc4:	1000221e 	bne	r2,zero,8cd50 <main+0x4e0>
			printf("\n\n");
   8ccc8:	010002b4 	movhi	r4,10
   8cccc:	21382e04 	addi	r4,r4,-8008
   8ccd0:	008ef700 	call	8ef70 <puts>

			r = adv7513_do_hpd_powerup(&encoder);
   8ccd4:	010002b4 	movhi	r4,10
   8ccd8:	213ab104 	addi	r4,r4,-5436
   8ccdc:	00804c80 	call	804c8 <adv7513_do_hpd_powerup>
   8cce0:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cce4:	e0ae1c17 	ldw	r2,-18320(fp)
   8cce8:	1005003a 	cmpeq	r2,r2,zero
   8ccec:	1000051e 	bne	r2,zero,8cd04 <main+0x494>
				printf("[err] failed to do HDMI encoder power up! (%d)\n", r);
   8ccf0:	010002b4 	movhi	r4,10
   8ccf4:	21387004 	addi	r4,r4,-7744
   8ccf8:	e16e1c17 	ldw	r5,-18320(fp)
   8ccfc:	008ee340 	call	8ee34 <printf>
   8cd00:	00000306 	br	8cd10 <main+0x4a0>
			} else {
				printf("[hpd] done HDMI encoder power up.\n");
   8cd04:	010002b4 	movhi	r4,10
   8cd08:	21384f04 	addi	r4,r4,-7876
   8cd0c:	008ef700 	call	8ef70 <puts>
			}

			r = adv7513_chip_init(&encoder, 1);
   8cd10:	010002b4 	movhi	r4,10
   8cd14:	213ab104 	addi	r4,r4,-5436
   8cd18:	01400044 	movi	r5,1
   8cd1c:	0081b840 	call	81b84 <adv7513_chip_init>
   8cd20:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cd24:	e0ae1c17 	ldw	r2,-18320(fp)
   8cd28:	1005003a 	cmpeq	r2,r2,zero
   8cd2c:	1000051e 	bne	r2,zero,8cd44 <main+0x4d4>
				printf("[err] failed to do HDMI encoder initialization! (%d)\n", r);
   8cd30:	010002b4 	movhi	r4,10
   8cd34:	21385804 	addi	r4,r4,-7840
   8cd38:	e16e1c17 	ldw	r5,-18320(fp)
   8cd3c:	008ee340 	call	8ee34 <printf>
   8cd40:	00000306 	br	8cd50 <main+0x4e0>
			} else {
				printf("[hpd] done HDMI encoder initialization.\n");
   8cd44:	010002b4 	movhi	r4,10
   8cd48:	21386604 	addi	r4,r4,-7784
   8cd4c:	008ef700 	call	8ef70 <puts>
			}
		}

		if (cmd[0] == 'm') {
   8cd50:	e0ae2703 	ldbu	r2,-18276(fp)
   8cd54:	10803fcc 	andi	r2,r2,255
   8cd58:	1080201c 	xori	r2,r2,128
   8cd5c:	10bfe004 	addi	r2,r2,-128
   8cd60:	10801b58 	cmpnei	r2,r2,109
   8cd64:	1000131e 	bne	r2,zero,8cdb4 <main+0x544>
			int vic;
			const char *mode = 0;
   8cd68:	e02e2115 	stw	zero,-18300(fp)

			r = adv7513_mode_state(&encoder, &vic, &mode);
   8cd6c:	e16e2004 	addi	r5,fp,-18304
   8cd70:	e1ae2104 	addi	r6,fp,-18300
   8cd74:	010002b4 	movhi	r4,10
   8cd78:	213ab104 	addi	r4,r4,-5436
   8cd7c:	008078c0 	call	8078c <adv7513_mode_state>
   8cd80:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cd84:	e0ae1c17 	ldw	r2,-18320(fp)
   8cd88:	1005003a 	cmpeq	r2,r2,zero
   8cd8c:	1000041e 	bne	r2,zero,8cda0 <main+0x530>
				printf("[err] failed to read HDMI encoder regs! (%d)\n", r);
   8cd90:	010002b4 	movhi	r4,10
   8cd94:	21382204 	addi	r4,r4,-8056
   8cd98:	e16e1c17 	ldw	r5,-18320(fp)
   8cd9c:	008ee340 	call	8ee34 <printf>
			}

			printf("\n\ncurrent mode : VIC)%d %s\n", vic, mode);
   8cda0:	e16e2017 	ldw	r5,-18304(fp)
   8cda4:	e1ae2117 	ldw	r6,-18300(fp)
   8cda8:	010002b4 	movhi	r4,10
   8cdac:	21387c04 	addi	r4,r4,-7696
   8cdb0:	008ee340 	call	8ee34 <printf>
		}

		if (cmd[0] == 'r') {
   8cdb4:	e0ae2703 	ldbu	r2,-18276(fp)
   8cdb8:	10803fcc 	andi	r2,r2,255
   8cdbc:	1080201c 	xori	r2,r2,128
   8cdc0:	10bfe004 	addi	r2,r2,-128
   8cdc4:	10801c98 	cmpnei	r2,r2,114
   8cdc8:	10001c1e 	bne	r2,zero,8ce3c <main+0x5cc>
			alt_u8 regv = 0;
   8cdcc:	e02e2205 	stb	zero,-18296(fp)
			alt_u8 reg = 0;
   8cdd0:	e02e1a85 	stb	zero,-18326(fp)

			reg = (alt_u8)strtoul(&cmd[2], 0, 16);
   8cdd4:	e0ae2704 	addi	r2,fp,-18276
   8cdd8:	11000084 	addi	r4,r2,2
   8cddc:	000b883a 	mov	r5,zero
   8cde0:	01800404 	movi	r6,16
   8cde4:	008f6800 	call	8f680 <strtoul>
   8cde8:	e0ae1a85 	stb	r2,-18326(fp)

			printf("\n\n");
   8cdec:	010002b4 	movhi	r4,10
   8cdf0:	21382e04 	addi	r4,r4,-8008
   8cdf4:	008ef700 	call	8ef70 <puts>
			if (reg_read(&encoder, reg, &regv) == 0) {
   8cdf8:	e16e1a83 	ldbu	r5,-18326(fp)
   8cdfc:	e1ae2204 	addi	r6,fp,-18296
   8ce00:	010002b4 	movhi	r4,10
   8ce04:	213ab104 	addi	r4,r4,-5436
   8ce08:	008ae9c0 	call	8ae9c <reg_read>
   8ce0c:	1004c03a 	cmpne	r2,r2,zero
   8ce10:	1000071e 	bne	r2,zero,8ce30 <main+0x5c0>
				printf("[%02x] %02x\n", reg, regv);
   8ce14:	e16e1a83 	ldbu	r5,-18326(fp)
   8ce18:	e0ae2203 	ldbu	r2,-18296(fp)
   8ce1c:	11803fcc 	andi	r6,r2,255
   8ce20:	010002b4 	movhi	r4,10
   8ce24:	21388304 	addi	r4,r4,-7668
   8ce28:	008ee340 	call	8ee34 <printf>
   8ce2c:	00000306 	br	8ce3c <main+0x5cc>
			} else {
				printf("[err] i2c error!\n");
   8ce30:	010002b4 	movhi	r4,10
   8ce34:	21388704 	addi	r4,r4,-7652
   8ce38:	008ef700 	call	8ef70 <puts>
			}
		}

		if (cmd[0] == 'w') {
   8ce3c:	e0ae2703 	ldbu	r2,-18276(fp)
   8ce40:	10803fcc 	andi	r2,r2,255
   8ce44:	1080201c 	xori	r2,r2,128
   8ce48:	10bfe004 	addi	r2,r2,-128
   8ce4c:	10801dd8 	cmpnei	r2,r2,119
   8ce50:	10002f1e 	bne	r2,zero,8cf10 <main+0x6a0>
			alt_u8 regv = 0;
   8ce54:	e02e1a45 	stb	zero,-18327(fp)
			alt_u8 reg = 0;
   8ce58:	e02e1a05 	stb	zero,-18328(fp)
			char arg1[8] = {0};
   8ce5c:	e02e2315 	stw	zero,-18292(fp)
   8ce60:	e02e2415 	stw	zero,-18288(fp)
			char arg2[8] = {0};
   8ce64:	e02e2515 	stw	zero,-18284(fp)
   8ce68:	e02e2615 	stw	zero,-18280(fp)

			strncpy(arg1, &cmd[2], 2);
   8ce6c:	e0ae2704 	addi	r2,fp,-18276
   8ce70:	11400084 	addi	r5,r2,2
   8ce74:	e12e2304 	addi	r4,fp,-18292
   8ce78:	01800084 	movi	r6,2
   8ce7c:	008f3940 	call	8f394 <strncpy>
			strncpy(arg2, &cmd[5], 2);
   8ce80:	e0ae2704 	addi	r2,fp,-18276
   8ce84:	11400144 	addi	r5,r2,5
   8ce88:	e12e2504 	addi	r4,fp,-18284
   8ce8c:	01800084 	movi	r6,2
   8ce90:	008f3940 	call	8f394 <strncpy>

			reg = (alt_u8)strtoul(arg1, 0, 16);
   8ce94:	e12e2304 	addi	r4,fp,-18292
   8ce98:	000b883a 	mov	r5,zero
   8ce9c:	01800404 	movi	r6,16
   8cea0:	008f6800 	call	8f680 <strtoul>
   8cea4:	e0ae1a05 	stb	r2,-18328(fp)
			regv = (alt_u8)strtoul(arg2, 0, 16);
   8cea8:	e12e2504 	addi	r4,fp,-18284
   8ceac:	000b883a 	mov	r5,zero
   8ceb0:	01800404 	movi	r6,16
   8ceb4:	008f6800 	call	8f680 <strtoul>
   8ceb8:	e0ae1a45 	stb	r2,-18327(fp)

			printf("\n\n");
   8cebc:	010002b4 	movhi	r4,10
   8cec0:	21382e04 	addi	r4,r4,-8008
   8cec4:	008ef700 	call	8ef70 <puts>
			if (reg_write(&encoder, reg, regv) == 0) {
   8cec8:	e16e1a03 	ldbu	r5,-18328(fp)
   8cecc:	e1ae1a43 	ldbu	r6,-18327(fp)
   8ced0:	010002b4 	movhi	r4,10
   8ced4:	213ab104 	addi	r4,r4,-5436
   8ced8:	008af300 	call	8af30 <reg_write>
   8cedc:	1004c03a 	cmpne	r2,r2,zero
   8cee0:	1000061e 	bne	r2,zero,8cefc <main+0x68c>
				printf("[%02x] <- %02x (done)\n", reg, regv);
   8cee4:	e16e1a03 	ldbu	r5,-18328(fp)
   8cee8:	e1ae1a43 	ldbu	r6,-18327(fp)
   8ceec:	010002b4 	movhi	r4,10
   8cef0:	21388c04 	addi	r4,r4,-7632
   8cef4:	008ee340 	call	8ee34 <printf>
   8cef8:	00000506 	br	8cf10 <main+0x6a0>
			} else {
				printf("[%02x] <- %02x (i2c error)\n", reg, regv);
   8cefc:	e16e1a03 	ldbu	r5,-18328(fp)
   8cf00:	e1ae1a43 	ldbu	r6,-18327(fp)
   8cf04:	010002b4 	movhi	r4,10
   8cf08:	21389204 	addi	r4,r4,-7608
   8cf0c:	008ee340 	call	8ee34 <printf>
			}
		}

		if (cmd[0] == 'o') {
   8cf10:	e0ae2703 	ldbu	r2,-18276(fp)
   8cf14:	10803fcc 	andi	r2,r2,255
   8cf18:	1080201c 	xori	r2,r2,128
   8cf1c:	10bfe004 	addi	r2,r2,-128
   8cf20:	10801bd8 	cmpnei	r2,r2,111
   8cf24:	1000121e 	bne	r2,zero,8cf70 <main+0x700>
			printf("\n\n");
   8cf28:	010002b4 	movhi	r4,10
   8cf2c:	21382e04 	addi	r4,r4,-8008
   8cf30:	008ef700 	call	8ef70 <puts>

			r = adv7513_do_hpd_powerdown(&encoder);
   8cf34:	010002b4 	movhi	r4,10
   8cf38:	213ab104 	addi	r4,r4,-5436
   8cf3c:	00806b00 	call	806b0 <adv7513_do_hpd_powerdown>
   8cf40:	e0ae1c15 	stw	r2,-18320(fp)
			if (r != 0) {
   8cf44:	e0ae1c17 	ldw	r2,-18320(fp)
   8cf48:	1005003a 	cmpeq	r2,r2,zero
   8cf4c:	1000051e 	bne	r2,zero,8cf64 <main+0x6f4>
				printf("[err] failed to do HDMI encoder power off! (%d)\n", r);
   8cf50:	010002b4 	movhi	r4,10
   8cf54:	21389904 	addi	r4,r4,-7580
   8cf58:	e16e1c17 	ldw	r5,-18320(fp)
   8cf5c:	008ee340 	call	8ee34 <printf>
   8cf60:	00000306 	br	8cf70 <main+0x700>
			} else {
				printf("[hpd] done HDMI encoder power off setting.\n");
   8cf64:	010002b4 	movhi	r4,10
   8cf68:	2138a604 	addi	r4,r4,-7528
   8cf6c:	008ef700 	call	8ef70 <puts>
			}

			//usleep(100000);
		}

		if (cmd[0] == 'h') {
   8cf70:	e0ae2703 	ldbu	r2,-18276(fp)
   8cf74:	10803fcc 	andi	r2,r2,255
   8cf78:	1080201c 	xori	r2,r2,128
   8cf7c:	10bfe004 	addi	r2,r2,-128
   8cf80:	10801a18 	cmpnei	r2,r2,104
   8cf84:	103ec91e 	bne	r2,zero,8caac <main+0x23c>
			printf("\n\n");
   8cf88:	010002b4 	movhi	r4,10
   8cf8c:	21382e04 	addi	r4,r4,-8008
   8cf90:	008ef700 	call	8ef70 <puts>
			cmd_help();
   8cf94:	008c7c00 	call	8c7c0 <cmd_help>
		}
	}
   8cf98:	003ec406 	br	8caac <main+0x23c>

_safe_exit:

	printf("\nprogram exit!\n");
   8cf9c:	010002b4 	movhi	r4,10
   8cfa0:	2138b104 	addi	r4,r4,-7484
   8cfa4:	008ef700 	call	8ef70 <puts>

	return rr;
   8cfa8:	e0ae1b17 	ldw	r2,-18324(fp)
}
   8cfac:	e037883a 	mov	sp,fp
   8cfb0:	dfc00117 	ldw	ra,4(sp)
   8cfb4:	df000017 	ldw	fp,0(sp)
   8cfb8:	dec00204 	addi	sp,sp,8
   8cfbc:	f800283a 	ret

0008cfc0 <_fpadd_parts>:
   8cfc0:	21c00017 	ldw	r7,0(r4)
   8cfc4:	02000044 	movi	r8,1
   8cfc8:	41c0332e 	bgeu	r8,r7,8d098 <_fpadd_parts+0xd8>
   8cfcc:	28800017 	ldw	r2,0(r5)
   8cfd0:	4080462e 	bgeu	r8,r2,8d0ec <_fpadd_parts+0x12c>
   8cfd4:	00c00104 	movi	r3,4
   8cfd8:	38c06b26 	beq	r7,r3,8d188 <_fpadd_parts+0x1c8>
   8cfdc:	10c04326 	beq	r2,r3,8d0ec <_fpadd_parts+0x12c>
   8cfe0:	00c00084 	movi	r3,2
   8cfe4:	10c02e26 	beq	r2,r3,8d0a0 <_fpadd_parts+0xe0>
   8cfe8:	38c04026 	beq	r7,r3,8d0ec <_fpadd_parts+0x12c>
   8cfec:	22800217 	ldw	r10,8(r4)
   8cff0:	28c00217 	ldw	r3,8(r5)
   8cff4:	23000317 	ldw	r12,12(r4)
   8cff8:	2a400317 	ldw	r9,12(r5)
   8cffc:	50cfc83a 	sub	r7,r10,r3
   8d000:	3817883a 	mov	r11,r7
   8d004:	38004f16 	blt	r7,zero,8d144 <_fpadd_parts+0x184>
   8d008:	008007c4 	movi	r2,31
   8d00c:	11c03316 	blt	r2,r7,8d0dc <_fpadd_parts+0x11c>
   8d010:	02c0540e 	bge	zero,r11,8d164 <_fpadd_parts+0x1a4>
   8d014:	41c4983a 	sll	r2,r8,r7
   8d018:	49c6d83a 	srl	r3,r9,r7
   8d01c:	10bfffc4 	addi	r2,r2,-1
   8d020:	4884703a 	and	r2,r9,r2
   8d024:	1004c03a 	cmpne	r2,r2,zero
   8d028:	1892b03a 	or	r9,r3,r2
   8d02c:	20c00117 	ldw	r3,4(r4)
   8d030:	28800117 	ldw	r2,4(r5)
   8d034:	18803c26 	beq	r3,r2,8d128 <_fpadd_parts+0x168>
   8d038:	18002f26 	beq	r3,zero,8d0f8 <_fpadd_parts+0x138>
   8d03c:	4b05c83a 	sub	r2,r9,r12
   8d040:	10004216 	blt	r2,zero,8d14c <_fpadd_parts+0x18c>
   8d044:	32800215 	stw	r10,8(r6)
   8d048:	30800315 	stw	r2,12(r6)
   8d04c:	30000115 	stw	zero,4(r6)
   8d050:	31000317 	ldw	r4,12(r6)
   8d054:	01d00034 	movhi	r7,16384
   8d058:	39ffff84 	addi	r7,r7,-2
   8d05c:	20bfffc4 	addi	r2,r4,-1
   8d060:	2007883a 	mov	r3,r4
   8d064:	38800836 	bltu	r7,r2,8d088 <_fpadd_parts+0xc8>
   8d068:	31400217 	ldw	r5,8(r6)
   8d06c:	18c9883a 	add	r4,r3,r3
   8d070:	20bfffc4 	addi	r2,r4,-1
   8d074:	297fffc4 	addi	r5,r5,-1
   8d078:	2007883a 	mov	r3,r4
   8d07c:	38bffb2e 	bgeu	r7,r2,8d06c <_fpadd_parts+0xac>
   8d080:	31400215 	stw	r5,8(r6)
   8d084:	31000315 	stw	r4,12(r6)
   8d088:	008000c4 	movi	r2,3
   8d08c:	30800015 	stw	r2,0(r6)
   8d090:	20001b16 	blt	r4,zero,8d100 <_fpadd_parts+0x140>
   8d094:	3009883a 	mov	r4,r6
   8d098:	2005883a 	mov	r2,r4
   8d09c:	f800283a 	ret
   8d0a0:	38fffd1e 	bne	r7,r3,8d098 <_fpadd_parts+0xd8>
   8d0a4:	31c00015 	stw	r7,0(r6)
   8d0a8:	20800117 	ldw	r2,4(r4)
   8d0ac:	30800115 	stw	r2,4(r6)
   8d0b0:	20c00217 	ldw	r3,8(r4)
   8d0b4:	30c00215 	stw	r3,8(r6)
   8d0b8:	20800317 	ldw	r2,12(r4)
   8d0bc:	30800315 	stw	r2,12(r6)
   8d0c0:	20c00117 	ldw	r3,4(r4)
   8d0c4:	28800117 	ldw	r2,4(r5)
   8d0c8:	3009883a 	mov	r4,r6
   8d0cc:	1886703a 	and	r3,r3,r2
   8d0d0:	2005883a 	mov	r2,r4
   8d0d4:	30c00115 	stw	r3,4(r6)
   8d0d8:	f800283a 	ret
   8d0dc:	1a801716 	blt	r3,r10,8d13c <_fpadd_parts+0x17c>
   8d0e0:	1815883a 	mov	r10,r3
   8d0e4:	0019883a 	mov	r12,zero
   8d0e8:	003fd006 	br	8d02c <_fpadd_parts+0x6c>
   8d0ec:	2809883a 	mov	r4,r5
   8d0f0:	2005883a 	mov	r2,r4
   8d0f4:	f800283a 	ret
   8d0f8:	6245c83a 	sub	r2,r12,r9
   8d0fc:	003fd006 	br	8d040 <_fpadd_parts+0x80>
   8d100:	30800217 	ldw	r2,8(r6)
   8d104:	2006d07a 	srli	r3,r4,1
   8d108:	2100004c 	andi	r4,r4,1
   8d10c:	10800044 	addi	r2,r2,1
   8d110:	1906b03a 	or	r3,r3,r4
   8d114:	3009883a 	mov	r4,r6
   8d118:	30800215 	stw	r2,8(r6)
   8d11c:	2005883a 	mov	r2,r4
   8d120:	30c00315 	stw	r3,12(r6)
   8d124:	f800283a 	ret
   8d128:	4b09883a 	add	r4,r9,r12
   8d12c:	30c00115 	stw	r3,4(r6)
   8d130:	32800215 	stw	r10,8(r6)
   8d134:	31000315 	stw	r4,12(r6)
   8d138:	003fd306 	br	8d088 <_fpadd_parts+0xc8>
   8d13c:	0013883a 	mov	r9,zero
   8d140:	003fba06 	br	8d02c <_fpadd_parts+0x6c>
   8d144:	01cfc83a 	sub	r7,zero,r7
   8d148:	003faf06 	br	8d008 <_fpadd_parts+0x48>
   8d14c:	0089c83a 	sub	r4,zero,r2
   8d150:	00800044 	movi	r2,1
   8d154:	30800115 	stw	r2,4(r6)
   8d158:	32800215 	stw	r10,8(r6)
   8d15c:	31000315 	stw	r4,12(r6)
   8d160:	003fbb06 	br	8d050 <_fpadd_parts+0x90>
   8d164:	583fb126 	beq	r11,zero,8d02c <_fpadd_parts+0x6c>
   8d168:	41c4983a 	sll	r2,r8,r7
   8d16c:	61c6d83a 	srl	r3,r12,r7
   8d170:	51d5883a 	add	r10,r10,r7
   8d174:	10bfffc4 	addi	r2,r2,-1
   8d178:	6084703a 	and	r2,r12,r2
   8d17c:	1004c03a 	cmpne	r2,r2,zero
   8d180:	1898b03a 	or	r12,r3,r2
   8d184:	003fa906 	br	8d02c <_fpadd_parts+0x6c>
   8d188:	11ffc31e 	bne	r2,r7,8d098 <_fpadd_parts+0xd8>
   8d18c:	28c00117 	ldw	r3,4(r5)
   8d190:	20800117 	ldw	r2,4(r4)
   8d194:	10ffc026 	beq	r2,r3,8d098 <_fpadd_parts+0xd8>
   8d198:	010002b4 	movhi	r4,10
   8d19c:	2138b504 	addi	r4,r4,-7468
   8d1a0:	003fbd06 	br	8d098 <_fpadd_parts+0xd8>

0008d1a4 <__subsf3>:
   8d1a4:	deffef04 	addi	sp,sp,-68
   8d1a8:	dcc00f15 	stw	r19,60(sp)
   8d1ac:	dcc00204 	addi	r19,sp,8
   8d1b0:	dc400e15 	stw	r17,56(sp)
   8d1b4:	d9000015 	stw	r4,0(sp)
   8d1b8:	d9400115 	stw	r5,4(sp)
   8d1bc:	d809883a 	mov	r4,sp
   8d1c0:	980b883a 	mov	r5,r19
   8d1c4:	dc400604 	addi	r17,sp,24
   8d1c8:	dfc01015 	stw	ra,64(sp)
   8d1cc:	008dadc0 	call	8dadc <__unpack_f>
   8d1d0:	d9000104 	addi	r4,sp,4
   8d1d4:	880b883a 	mov	r5,r17
   8d1d8:	008dadc0 	call	8dadc <__unpack_f>
   8d1dc:	d8800717 	ldw	r2,28(sp)
   8d1e0:	9809883a 	mov	r4,r19
   8d1e4:	880b883a 	mov	r5,r17
   8d1e8:	d9800a04 	addi	r6,sp,40
   8d1ec:	1080005c 	xori	r2,r2,1
   8d1f0:	d8800715 	stw	r2,28(sp)
   8d1f4:	008cfc00 	call	8cfc0 <_fpadd_parts>
   8d1f8:	1009883a 	mov	r4,r2
   8d1fc:	008d97c0 	call	8d97c <__pack_f>
   8d200:	dfc01017 	ldw	ra,64(sp)
   8d204:	dcc00f17 	ldw	r19,60(sp)
   8d208:	dc400e17 	ldw	r17,56(sp)
   8d20c:	dec01104 	addi	sp,sp,68
   8d210:	f800283a 	ret

0008d214 <__addsf3>:
   8d214:	deffef04 	addi	sp,sp,-68
   8d218:	dcc00f15 	stw	r19,60(sp)
   8d21c:	dcc00204 	addi	r19,sp,8
   8d220:	dc400e15 	stw	r17,56(sp)
   8d224:	d9000015 	stw	r4,0(sp)
   8d228:	d9400115 	stw	r5,4(sp)
   8d22c:	d809883a 	mov	r4,sp
   8d230:	980b883a 	mov	r5,r19
   8d234:	dc400604 	addi	r17,sp,24
   8d238:	dfc01015 	stw	ra,64(sp)
   8d23c:	008dadc0 	call	8dadc <__unpack_f>
   8d240:	d9000104 	addi	r4,sp,4
   8d244:	880b883a 	mov	r5,r17
   8d248:	008dadc0 	call	8dadc <__unpack_f>
   8d24c:	d9800a04 	addi	r6,sp,40
   8d250:	9809883a 	mov	r4,r19
   8d254:	880b883a 	mov	r5,r17
   8d258:	008cfc00 	call	8cfc0 <_fpadd_parts>
   8d25c:	1009883a 	mov	r4,r2
   8d260:	008d97c0 	call	8d97c <__pack_f>
   8d264:	dfc01017 	ldw	ra,64(sp)
   8d268:	dcc00f17 	ldw	r19,60(sp)
   8d26c:	dc400e17 	ldw	r17,56(sp)
   8d270:	dec01104 	addi	sp,sp,68
   8d274:	f800283a 	ret

0008d278 <__mulsf3>:
   8d278:	deffef04 	addi	sp,sp,-68
   8d27c:	dc400f15 	stw	r17,60(sp)
   8d280:	dc400204 	addi	r17,sp,8
   8d284:	dc000e15 	stw	r16,56(sp)
   8d288:	d9000015 	stw	r4,0(sp)
   8d28c:	d9400115 	stw	r5,4(sp)
   8d290:	d809883a 	mov	r4,sp
   8d294:	880b883a 	mov	r5,r17
   8d298:	dc000604 	addi	r16,sp,24
   8d29c:	dfc01015 	stw	ra,64(sp)
   8d2a0:	008dadc0 	call	8dadc <__unpack_f>
   8d2a4:	d9000104 	addi	r4,sp,4
   8d2a8:	800b883a 	mov	r5,r16
   8d2ac:	008dadc0 	call	8dadc <__unpack_f>
   8d2b0:	d9000217 	ldw	r4,8(sp)
   8d2b4:	00800044 	movi	r2,1
   8d2b8:	01400104 	movi	r5,4
   8d2bc:	1100142e 	bgeu	r2,r4,8d310 <__mulsf3+0x98>
   8d2c0:	d8c00617 	ldw	r3,24(sp)
   8d2c4:	10c0052e 	bgeu	r2,r3,8d2dc <__mulsf3+0x64>
   8d2c8:	21400f26 	beq	r4,r5,8d308 <__mulsf3+0x90>
   8d2cc:	19405d26 	beq	r3,r5,8d444 <__mulsf3+0x1cc>
   8d2d0:	00800084 	movi	r2,2
   8d2d4:	20800e26 	beq	r4,r2,8d310 <__mulsf3+0x98>
   8d2d8:	1880181e 	bne	r3,r2,8d33c <__mulsf3+0xc4>
   8d2dc:	d8c00717 	ldw	r3,28(sp)
   8d2e0:	d8800317 	ldw	r2,12(sp)
   8d2e4:	8009883a 	mov	r4,r16
   8d2e8:	10c4c03a 	cmpne	r2,r2,r3
   8d2ec:	d8800715 	stw	r2,28(sp)
   8d2f0:	008d97c0 	call	8d97c <__pack_f>
   8d2f4:	dfc01017 	ldw	ra,64(sp)
   8d2f8:	dc400f17 	ldw	r17,60(sp)
   8d2fc:	dc000e17 	ldw	r16,56(sp)
   8d300:	dec01104 	addi	sp,sp,68
   8d304:	f800283a 	ret
   8d308:	00800084 	movi	r2,2
   8d30c:	18804f26 	beq	r3,r2,8d44c <__mulsf3+0x1d4>
   8d310:	d8800317 	ldw	r2,12(sp)
   8d314:	d8c00717 	ldw	r3,28(sp)
   8d318:	8809883a 	mov	r4,r17
   8d31c:	10c4c03a 	cmpne	r2,r2,r3
   8d320:	d8800315 	stw	r2,12(sp)
   8d324:	008d97c0 	call	8d97c <__pack_f>
   8d328:	dfc01017 	ldw	ra,64(sp)
   8d32c:	dc400f17 	ldw	r17,60(sp)
   8d330:	dc000e17 	ldw	r16,56(sp)
   8d334:	dec01104 	addi	sp,sp,68
   8d338:	f800283a 	ret
   8d33c:	d8800517 	ldw	r2,20(sp)
   8d340:	da000917 	ldw	r8,36(sp)
   8d344:	0013883a 	mov	r9,zero
   8d348:	0007883a 	mov	r3,zero
   8d34c:	480f883a 	mov	r7,r9
   8d350:	180b883a 	mov	r5,r3
   8d354:	400d883a 	mov	r6,r8
   8d358:	1009883a 	mov	r4,r2
   8d35c:	008d8640 	call	8d864 <__muldi3>
   8d360:	da800417 	ldw	r10,16(sp)
   8d364:	d9800817 	ldw	r6,32(sp)
   8d368:	da400317 	ldw	r9,12(sp)
   8d36c:	52800084 	addi	r10,r10,2
   8d370:	3295883a 	add	r10,r6,r10
   8d374:	d9800717 	ldw	r6,28(sp)
   8d378:	180b883a 	mov	r5,r3
   8d37c:	180f883a 	mov	r7,r3
   8d380:	4992c03a 	cmpne	r9,r9,r6
   8d384:	da400b15 	stw	r9,44(sp)
   8d388:	1007883a 	mov	r3,r2
   8d38c:	da800c15 	stw	r10,48(sp)
   8d390:	2800070e 	bge	r5,zero,8d3b0 <__mulsf3+0x138>
   8d394:	2880004c 	andi	r2,r5,1
   8d398:	1005003a 	cmpeq	r2,r2,zero
   8d39c:	500d883a 	mov	r6,r10
   8d3a0:	10001e26 	beq	r2,zero,8d41c <__mulsf3+0x1a4>
   8d3a4:	380ed07a 	srli	r7,r7,1
   8d3a8:	31800044 	addi	r6,r6,1
   8d3ac:	d9800c15 	stw	r6,48(sp)
   8d3b0:	01100034 	movhi	r4,16384
   8d3b4:	213fffc4 	addi	r4,r4,-1
   8d3b8:	21c00b36 	bltu	r4,r7,8d3e8 <__mulsf3+0x170>
   8d3bc:	d8800c17 	ldw	r2,48(sp)
   8d3c0:	00000206 	br	8d3cc <__mulsf3+0x154>
   8d3c4:	18c7883a 	add	r3,r3,r3
   8d3c8:	21c00636 	bltu	r4,r7,8d3e4 <__mulsf3+0x16c>
   8d3cc:	10bfffc4 	addi	r2,r2,-1
   8d3d0:	39cf883a 	add	r7,r7,r7
   8d3d4:	183ffb0e 	bge	r3,zero,8d3c4 <__mulsf3+0x14c>
   8d3d8:	39c00054 	ori	r7,r7,1
   8d3dc:	18c7883a 	add	r3,r3,r3
   8d3e0:	21fffa2e 	bgeu	r4,r7,8d3cc <__mulsf3+0x154>
   8d3e4:	d8800c15 	stw	r2,48(sp)
   8d3e8:	39001fcc 	andi	r4,r7,127
   8d3ec:	00801004 	movi	r2,64
   8d3f0:	20800d26 	beq	r4,r2,8d428 <__mulsf3+0x1b0>
   8d3f4:	008000c4 	movi	r2,3
   8d3f8:	d9000a04 	addi	r4,sp,40
   8d3fc:	d9c00d15 	stw	r7,52(sp)
   8d400:	d8800a15 	stw	r2,40(sp)
   8d404:	008d97c0 	call	8d97c <__pack_f>
   8d408:	dfc01017 	ldw	ra,64(sp)
   8d40c:	dc400f17 	ldw	r17,60(sp)
   8d410:	dc000e17 	ldw	r16,56(sp)
   8d414:	dec01104 	addi	sp,sp,68
   8d418:	f800283a 	ret
   8d41c:	1804d07a 	srli	r2,r3,1
   8d420:	10e00034 	orhi	r3,r2,32768
   8d424:	003fdf06 	br	8d3a4 <__mulsf3+0x12c>
   8d428:	3880200c 	andi	r2,r7,128
   8d42c:	103ff11e 	bne	r2,zero,8d3f4 <__mulsf3+0x17c>
   8d430:	183ff026 	beq	r3,zero,8d3f4 <__mulsf3+0x17c>
   8d434:	3907883a 	add	r3,r7,r4
   8d438:	00bfe004 	movi	r2,-128
   8d43c:	188e703a 	and	r7,r3,r2
   8d440:	003fec06 	br	8d3f4 <__mulsf3+0x17c>
   8d444:	00800084 	movi	r2,2
   8d448:	20bfa41e 	bne	r4,r2,8d2dc <__mulsf3+0x64>
   8d44c:	010002b4 	movhi	r4,10
   8d450:	2138b504 	addi	r4,r4,-7468
   8d454:	003fb306 	br	8d324 <__mulsf3+0xac>

0008d458 <__divsf3>:
   8d458:	defff304 	addi	sp,sp,-52
   8d45c:	dc400b15 	stw	r17,44(sp)
   8d460:	dc400204 	addi	r17,sp,8
   8d464:	dc000a15 	stw	r16,40(sp)
   8d468:	d9000015 	stw	r4,0(sp)
   8d46c:	d9400115 	stw	r5,4(sp)
   8d470:	d809883a 	mov	r4,sp
   8d474:	880b883a 	mov	r5,r17
   8d478:	dc000604 	addi	r16,sp,24
   8d47c:	dfc00c15 	stw	ra,48(sp)
   8d480:	008dadc0 	call	8dadc <__unpack_f>
   8d484:	d9000104 	addi	r4,sp,4
   8d488:	800b883a 	mov	r5,r16
   8d48c:	008dadc0 	call	8dadc <__unpack_f>
   8d490:	d9000217 	ldw	r4,8(sp)
   8d494:	00800044 	movi	r2,1
   8d498:	01800104 	movi	r6,4
   8d49c:	11000a2e 	bgeu	r2,r4,8d4c8 <__divsf3+0x70>
   8d4a0:	d9400617 	ldw	r5,24(sp)
   8d4a4:	1140432e 	bgeu	r2,r5,8d5b4 <__divsf3+0x15c>
   8d4a8:	d8800317 	ldw	r2,12(sp)
   8d4ac:	d8c00717 	ldw	r3,28(sp)
   8d4b0:	10c4f03a 	xor	r2,r2,r3
   8d4b4:	d8800315 	stw	r2,12(sp)
   8d4b8:	21800226 	beq	r4,r6,8d4c4 <__divsf3+0x6c>
   8d4bc:	00800084 	movi	r2,2
   8d4c0:	2080101e 	bne	r4,r2,8d504 <__divsf3+0xac>
   8d4c4:	29000726 	beq	r5,r4,8d4e4 <__divsf3+0x8c>
   8d4c8:	8809883a 	mov	r4,r17
   8d4cc:	008d97c0 	call	8d97c <__pack_f>
   8d4d0:	dfc00c17 	ldw	ra,48(sp)
   8d4d4:	dc400b17 	ldw	r17,44(sp)
   8d4d8:	dc000a17 	ldw	r16,40(sp)
   8d4dc:	dec00d04 	addi	sp,sp,52
   8d4e0:	f800283a 	ret
   8d4e4:	010002b4 	movhi	r4,10
   8d4e8:	2138b504 	addi	r4,r4,-7468
   8d4ec:	008d97c0 	call	8d97c <__pack_f>
   8d4f0:	dfc00c17 	ldw	ra,48(sp)
   8d4f4:	dc400b17 	ldw	r17,44(sp)
   8d4f8:	dc000a17 	ldw	r16,40(sp)
   8d4fc:	dec00d04 	addi	sp,sp,52
   8d500:	f800283a 	ret
   8d504:	29802d26 	beq	r5,r6,8d5bc <__divsf3+0x164>
   8d508:	28801a26 	beq	r5,r2,8d574 <__divsf3+0x11c>
   8d50c:	d8c00417 	ldw	r3,16(sp)
   8d510:	d8800817 	ldw	r2,32(sp)
   8d514:	d9000517 	ldw	r4,20(sp)
   8d518:	d9800917 	ldw	r6,36(sp)
   8d51c:	1885c83a 	sub	r2,r3,r2
   8d520:	d8800415 	stw	r2,16(sp)
   8d524:	2180032e 	bgeu	r4,r6,8d534 <__divsf3+0xdc>
   8d528:	10bfffc4 	addi	r2,r2,-1
   8d52c:	d8800415 	stw	r2,16(sp)
   8d530:	2109883a 	add	r4,r4,r4
   8d534:	01500034 	movhi	r5,16384
   8d538:	0007883a 	mov	r3,zero
   8d53c:	0005883a 	mov	r2,zero
   8d540:	01c007c4 	movi	r7,31
   8d544:	10800044 	addi	r2,r2,1
   8d548:	21800236 	bltu	r4,r6,8d554 <__divsf3+0xfc>
   8d54c:	1946b03a 	or	r3,r3,r5
   8d550:	2189c83a 	sub	r4,r4,r6
   8d554:	280ad07a 	srli	r5,r5,1
   8d558:	2109883a 	add	r4,r4,r4
   8d55c:	11fff91e 	bne	r2,r7,8d544 <__divsf3+0xec>
   8d560:	19401fcc 	andi	r5,r3,127
   8d564:	00801004 	movi	r2,64
   8d568:	28800a26 	beq	r5,r2,8d594 <__divsf3+0x13c>
   8d56c:	d8c00515 	stw	r3,20(sp)
   8d570:	003fd506 	br	8d4c8 <__divsf3+0x70>
   8d574:	8809883a 	mov	r4,r17
   8d578:	d9800215 	stw	r6,8(sp)
   8d57c:	008d97c0 	call	8d97c <__pack_f>
   8d580:	dfc00c17 	ldw	ra,48(sp)
   8d584:	dc400b17 	ldw	r17,44(sp)
   8d588:	dc000a17 	ldw	r16,40(sp)
   8d58c:	dec00d04 	addi	sp,sp,52
   8d590:	f800283a 	ret
   8d594:	1880200c 	andi	r2,r3,128
   8d598:	103ff41e 	bne	r2,zero,8d56c <__divsf3+0x114>
   8d59c:	203ff326 	beq	r4,zero,8d56c <__divsf3+0x114>
   8d5a0:	1947883a 	add	r3,r3,r5
   8d5a4:	00bfe004 	movi	r2,-128
   8d5a8:	1886703a 	and	r3,r3,r2
   8d5ac:	d8c00515 	stw	r3,20(sp)
   8d5b0:	003fc506 	br	8d4c8 <__divsf3+0x70>
   8d5b4:	8009883a 	mov	r4,r16
   8d5b8:	003fc406 	br	8d4cc <__divsf3+0x74>
   8d5bc:	8809883a 	mov	r4,r17
   8d5c0:	d8000515 	stw	zero,20(sp)
   8d5c4:	d8000415 	stw	zero,16(sp)
   8d5c8:	003fc006 	br	8d4cc <__divsf3+0x74>

0008d5cc <__extendsfdf2>:
   8d5cc:	defff904 	addi	sp,sp,-28
   8d5d0:	d9000115 	stw	r4,4(sp)
   8d5d4:	d9400204 	addi	r5,sp,8
   8d5d8:	d9000104 	addi	r4,sp,4
   8d5dc:	dfc00615 	stw	ra,24(sp)
   8d5e0:	008dadc0 	call	8dadc <__unpack_f>
   8d5e4:	d9c00517 	ldw	r7,20(sp)
   8d5e8:	0011883a 	mov	r8,zero
   8d5ec:	400697ba 	slli	r3,r8,30
   8d5f0:	3812d0ba 	srli	r9,r7,2
   8d5f4:	380497ba 	slli	r2,r7,30
   8d5f8:	d9000217 	ldw	r4,8(sp)
   8d5fc:	d9400317 	ldw	r5,12(sp)
   8d600:	d9800417 	ldw	r6,16(sp)
   8d604:	48c6b03a 	or	r3,r9,r3
   8d608:	100f883a 	mov	r7,r2
   8d60c:	d8c00015 	stw	r3,0(sp)
   8d610:	008d6e00 	call	8d6e0 <__make_dp>
   8d614:	dfc00617 	ldw	ra,24(sp)
   8d618:	dec00704 	addi	sp,sp,28
   8d61c:	f800283a 	ret

0008d620 <__floatunsisf>:
   8d620:	defff904 	addi	sp,sp,-28
   8d624:	dc400515 	stw	r17,20(sp)
   8d628:	dc000415 	stw	r16,16(sp)
   8d62c:	dfc00615 	stw	ra,24(sp)
   8d630:	04400784 	movi	r17,30
   8d634:	2021883a 	mov	r16,r4
   8d638:	d8000115 	stw	zero,4(sp)
   8d63c:	2000091e 	bne	r4,zero,8d664 <__floatunsisf+0x44>
   8d640:	00800084 	movi	r2,2
   8d644:	d8800015 	stw	r2,0(sp)
   8d648:	d809883a 	mov	r4,sp
   8d64c:	008d97c0 	call	8d97c <__pack_f>
   8d650:	dfc00617 	ldw	ra,24(sp)
   8d654:	dc400517 	ldw	r17,20(sp)
   8d658:	dc000417 	ldw	r16,16(sp)
   8d65c:	dec00704 	addi	sp,sp,28
   8d660:	f800283a 	ret
   8d664:	008000c4 	movi	r2,3
   8d668:	d9000315 	stw	r4,12(sp)
   8d66c:	d8800015 	stw	r2,0(sp)
   8d670:	dc400215 	stw	r17,8(sp)
   8d674:	008d8fc0 	call	8d8fc <__clzsi2>
   8d678:	117fffc4 	addi	r5,r2,-1
   8d67c:	0147c83a 	sub	r3,zero,r5
   8d680:	00800044 	movi	r2,1
   8d684:	10c4983a 	sll	r2,r2,r3
   8d688:	80c6d83a 	srl	r3,r16,r3
   8d68c:	8949c83a 	sub	r4,r17,r5
   8d690:	10bfffc4 	addi	r2,r2,-1
   8d694:	8084703a 	and	r2,r16,r2
   8d698:	1004c03a 	cmpne	r2,r2,zero
   8d69c:	1886b03a 	or	r3,r3,r2
   8d6a0:	28000c16 	blt	r5,zero,8d6d4 <__floatunsisf+0xb4>
   8d6a4:	8144983a 	sll	r2,r16,r5
   8d6a8:	8947c83a 	sub	r3,r17,r5
   8d6ac:	283fe626 	beq	r5,zero,8d648 <__floatunsisf+0x28>
   8d6b0:	d809883a 	mov	r4,sp
   8d6b4:	d8800315 	stw	r2,12(sp)
   8d6b8:	d8c00215 	stw	r3,8(sp)
   8d6bc:	008d97c0 	call	8d97c <__pack_f>
   8d6c0:	dfc00617 	ldw	ra,24(sp)
   8d6c4:	dc400517 	ldw	r17,20(sp)
   8d6c8:	dc000417 	ldw	r16,16(sp)
   8d6cc:	dec00704 	addi	sp,sp,28
   8d6d0:	f800283a 	ret
   8d6d4:	d8c00315 	stw	r3,12(sp)
   8d6d8:	d9000215 	stw	r4,8(sp)
   8d6dc:	003fda06 	br	8d648 <__floatunsisf+0x28>

0008d6e0 <__make_dp>:
   8d6e0:	defff904 	addi	sp,sp,-28
   8d6e4:	d8c00717 	ldw	r3,28(sp)
   8d6e8:	d9000015 	stw	r4,0(sp)
   8d6ec:	d809883a 	mov	r4,sp
   8d6f0:	dfc00515 	stw	ra,20(sp)
   8d6f4:	d9c00615 	stw	r7,24(sp)
   8d6f8:	d9400115 	stw	r5,4(sp)
   8d6fc:	d9800215 	stw	r6,8(sp)
   8d700:	d8c00415 	stw	r3,16(sp)
   8d704:	d9c00315 	stw	r7,12(sp)
   8d708:	008dba40 	call	8dba4 <__pack_d>
   8d70c:	dfc00517 	ldw	ra,20(sp)
   8d710:	dec00704 	addi	sp,sp,28
   8d714:	f800283a 	ret

0008d718 <udivmodsi4>:
   8d718:	29001b2e 	bgeu	r5,r4,8d788 <udivmodsi4+0x70>
   8d71c:	28001a16 	blt	r5,zero,8d788 <udivmodsi4+0x70>
   8d720:	00800044 	movi	r2,1
   8d724:	0007883a 	mov	r3,zero
   8d728:	01c007c4 	movi	r7,31
   8d72c:	00000306 	br	8d73c <udivmodsi4+0x24>
   8d730:	19c01326 	beq	r3,r7,8d780 <udivmodsi4+0x68>
   8d734:	18c00044 	addi	r3,r3,1
   8d738:	28000416 	blt	r5,zero,8d74c <udivmodsi4+0x34>
   8d73c:	294b883a 	add	r5,r5,r5
   8d740:	1085883a 	add	r2,r2,r2
   8d744:	293ffa36 	bltu	r5,r4,8d730 <udivmodsi4+0x18>
   8d748:	10000d26 	beq	r2,zero,8d780 <udivmodsi4+0x68>
   8d74c:	0007883a 	mov	r3,zero
   8d750:	21400236 	bltu	r4,r5,8d75c <udivmodsi4+0x44>
   8d754:	2149c83a 	sub	r4,r4,r5
   8d758:	1886b03a 	or	r3,r3,r2
   8d75c:	1004d07a 	srli	r2,r2,1
   8d760:	280ad07a 	srli	r5,r5,1
   8d764:	103ffa1e 	bne	r2,zero,8d750 <udivmodsi4+0x38>
   8d768:	30000226 	beq	r6,zero,8d774 <udivmodsi4+0x5c>
   8d76c:	2005883a 	mov	r2,r4
   8d770:	f800283a 	ret
   8d774:	1809883a 	mov	r4,r3
   8d778:	2005883a 	mov	r2,r4
   8d77c:	f800283a 	ret
   8d780:	0007883a 	mov	r3,zero
   8d784:	003ff806 	br	8d768 <udivmodsi4+0x50>
   8d788:	00800044 	movi	r2,1
   8d78c:	0007883a 	mov	r3,zero
   8d790:	003fef06 	br	8d750 <udivmodsi4+0x38>

0008d794 <__divsi3>:
   8d794:	defffe04 	addi	sp,sp,-8
   8d798:	dc000015 	stw	r16,0(sp)
   8d79c:	dfc00115 	stw	ra,4(sp)
   8d7a0:	0021883a 	mov	r16,zero
   8d7a4:	20000c16 	blt	r4,zero,8d7d8 <__divsi3+0x44>
   8d7a8:	000d883a 	mov	r6,zero
   8d7ac:	28000e16 	blt	r5,zero,8d7e8 <__divsi3+0x54>
   8d7b0:	008d7180 	call	8d718 <udivmodsi4>
   8d7b4:	1007883a 	mov	r3,r2
   8d7b8:	8005003a 	cmpeq	r2,r16,zero
   8d7bc:	1000011e 	bne	r2,zero,8d7c4 <__divsi3+0x30>
   8d7c0:	00c7c83a 	sub	r3,zero,r3
   8d7c4:	1805883a 	mov	r2,r3
   8d7c8:	dfc00117 	ldw	ra,4(sp)
   8d7cc:	dc000017 	ldw	r16,0(sp)
   8d7d0:	dec00204 	addi	sp,sp,8
   8d7d4:	f800283a 	ret
   8d7d8:	0109c83a 	sub	r4,zero,r4
   8d7dc:	04000044 	movi	r16,1
   8d7e0:	000d883a 	mov	r6,zero
   8d7e4:	283ff20e 	bge	r5,zero,8d7b0 <__divsi3+0x1c>
   8d7e8:	014bc83a 	sub	r5,zero,r5
   8d7ec:	8021003a 	cmpeq	r16,r16,zero
   8d7f0:	003fef06 	br	8d7b0 <__divsi3+0x1c>

0008d7f4 <__modsi3>:
   8d7f4:	deffff04 	addi	sp,sp,-4
   8d7f8:	dfc00015 	stw	ra,0(sp)
   8d7fc:	01800044 	movi	r6,1
   8d800:	2807883a 	mov	r3,r5
   8d804:	20000416 	blt	r4,zero,8d818 <__modsi3+0x24>
   8d808:	28000c16 	blt	r5,zero,8d83c <__modsi3+0x48>
   8d80c:	dfc00017 	ldw	ra,0(sp)
   8d810:	dec00104 	addi	sp,sp,4
   8d814:	008d7181 	jmpi	8d718 <udivmodsi4>
   8d818:	0109c83a 	sub	r4,zero,r4
   8d81c:	28000b16 	blt	r5,zero,8d84c <__modsi3+0x58>
   8d820:	180b883a 	mov	r5,r3
   8d824:	01800044 	movi	r6,1
   8d828:	008d7180 	call	8d718 <udivmodsi4>
   8d82c:	0085c83a 	sub	r2,zero,r2
   8d830:	dfc00017 	ldw	ra,0(sp)
   8d834:	dec00104 	addi	sp,sp,4
   8d838:	f800283a 	ret
   8d83c:	014bc83a 	sub	r5,zero,r5
   8d840:	dfc00017 	ldw	ra,0(sp)
   8d844:	dec00104 	addi	sp,sp,4
   8d848:	008d7181 	jmpi	8d718 <udivmodsi4>
   8d84c:	0147c83a 	sub	r3,zero,r5
   8d850:	003ff306 	br	8d820 <__modsi3+0x2c>

0008d854 <__udivsi3>:
   8d854:	000d883a 	mov	r6,zero
   8d858:	008d7181 	jmpi	8d718 <udivmodsi4>

0008d85c <__umodsi3>:
   8d85c:	01800044 	movi	r6,1
   8d860:	008d7181 	jmpi	8d718 <udivmodsi4>

0008d864 <__muldi3>:
   8d864:	2011883a 	mov	r8,r4
   8d868:	427fffcc 	andi	r9,r8,65535
   8d86c:	4018d43a 	srli	r12,r8,16
   8d870:	32bfffcc 	andi	r10,r6,65535
   8d874:	3016d43a 	srli	r11,r6,16
   8d878:	4a85383a 	mul	r2,r9,r10
   8d87c:	6295383a 	mul	r10,r12,r10
   8d880:	4ad3383a 	mul	r9,r9,r11
   8d884:	113fffcc 	andi	r4,r2,65535
   8d888:	1004d43a 	srli	r2,r2,16
   8d88c:	4a93883a 	add	r9,r9,r10
   8d890:	3807883a 	mov	r3,r7
   8d894:	1245883a 	add	r2,r2,r9
   8d898:	280f883a 	mov	r7,r5
   8d89c:	180b883a 	mov	r5,r3
   8d8a0:	1006943a 	slli	r3,r2,16
   8d8a4:	defffd04 	addi	sp,sp,-12
   8d8a8:	dc800215 	stw	r18,8(sp)
   8d8ac:	1907883a 	add	r3,r3,r4
   8d8b0:	dc400115 	stw	r17,4(sp)
   8d8b4:	dc000015 	stw	r16,0(sp)
   8d8b8:	4165383a 	mul	r18,r8,r5
   8d8bc:	31e3383a 	mul	r17,r6,r7
   8d8c0:	1012d43a 	srli	r9,r2,16
   8d8c4:	62d9383a 	mul	r12,r12,r11
   8d8c8:	181f883a 	mov	r15,r3
   8d8cc:	1280022e 	bgeu	r2,r10,8d8d8 <__muldi3+0x74>
   8d8d0:	00800074 	movhi	r2,1
   8d8d4:	6099883a 	add	r12,r12,r2
   8d8d8:	624d883a 	add	r6,r12,r9
   8d8dc:	9187883a 	add	r3,r18,r6
   8d8e0:	88c7883a 	add	r3,r17,r3
   8d8e4:	7805883a 	mov	r2,r15
   8d8e8:	dc800217 	ldw	r18,8(sp)
   8d8ec:	dc400117 	ldw	r17,4(sp)
   8d8f0:	dc000017 	ldw	r16,0(sp)
   8d8f4:	dec00304 	addi	sp,sp,12
   8d8f8:	f800283a 	ret

0008d8fc <__clzsi2>:
   8d8fc:	00bfffd4 	movui	r2,65535
   8d900:	11000e36 	bltu	r2,r4,8d93c <__clzsi2+0x40>
   8d904:	00803fc4 	movi	r2,255
   8d908:	01400204 	movi	r5,8
   8d90c:	0007883a 	mov	r3,zero
   8d910:	11001036 	bltu	r2,r4,8d954 <__clzsi2+0x58>
   8d914:	000b883a 	mov	r5,zero
   8d918:	20c6d83a 	srl	r3,r4,r3
   8d91c:	008002b4 	movhi	r2,10
   8d920:	10b8b904 	addi	r2,r2,-7452
   8d924:	1887883a 	add	r3,r3,r2
   8d928:	18800003 	ldbu	r2,0(r3)
   8d92c:	00c00804 	movi	r3,32
   8d930:	2885883a 	add	r2,r5,r2
   8d934:	1885c83a 	sub	r2,r3,r2
   8d938:	f800283a 	ret
   8d93c:	01400404 	movi	r5,16
   8d940:	00804034 	movhi	r2,256
   8d944:	10bfffc4 	addi	r2,r2,-1
   8d948:	2807883a 	mov	r3,r5
   8d94c:	113ff22e 	bgeu	r2,r4,8d918 <__clzsi2+0x1c>
   8d950:	01400604 	movi	r5,24
   8d954:	2807883a 	mov	r3,r5
   8d958:	20c6d83a 	srl	r3,r4,r3
   8d95c:	008002b4 	movhi	r2,10
   8d960:	10b8b904 	addi	r2,r2,-7452
   8d964:	1887883a 	add	r3,r3,r2
   8d968:	18800003 	ldbu	r2,0(r3)
   8d96c:	00c00804 	movi	r3,32
   8d970:	2885883a 	add	r2,r5,r2
   8d974:	1885c83a 	sub	r2,r3,r2
   8d978:	f800283a 	ret

0008d97c <__pack_f>:
   8d97c:	20c00017 	ldw	r3,0(r4)
   8d980:	01c00044 	movi	r7,1
   8d984:	21800317 	ldw	r6,12(r4)
   8d988:	21400117 	ldw	r5,4(r4)
   8d98c:	38c02d2e 	bgeu	r7,r3,8da44 <__pack_f+0xc8>
   8d990:	00800104 	movi	r2,4
   8d994:	18802826 	beq	r3,r2,8da38 <__pack_f+0xbc>
   8d998:	00800084 	movi	r2,2
   8d99c:	18800126 	beq	r3,r2,8d9a4 <__pack_f+0x28>
   8d9a0:	3000101e 	bne	r6,zero,8d9e4 <__pack_f+0x68>
   8d9a4:	000d883a 	mov	r6,zero
   8d9a8:	0007883a 	mov	r3,zero
   8d9ac:	19003fcc 	andi	r4,r3,255
   8d9b0:	200895fa 	slli	r4,r4,23
   8d9b4:	00c02034 	movhi	r3,128
   8d9b8:	18ffffc4 	addi	r3,r3,-1
   8d9bc:	30c6703a 	and	r3,r6,r3
   8d9c0:	10a0002c 	andhi	r2,r2,32768
   8d9c4:	10c4b03a 	or	r2,r2,r3
   8d9c8:	280a97fa 	slli	r5,r5,31
   8d9cc:	1104b03a 	or	r2,r2,r4
   8d9d0:	00e00034 	movhi	r3,32768
   8d9d4:	18ffffc4 	addi	r3,r3,-1
   8d9d8:	10c4703a 	and	r2,r2,r3
   8d9dc:	1144b03a 	or	r2,r2,r5
   8d9e0:	f800283a 	ret
   8d9e4:	21000217 	ldw	r4,8(r4)
   8d9e8:	00bfe084 	movi	r2,-126
   8d9ec:	20801b16 	blt	r4,r2,8da5c <__pack_f+0xe0>
   8d9f0:	00801fc4 	movi	r2,127
   8d9f4:	11001016 	blt	r2,r4,8da38 <__pack_f+0xbc>
   8d9f8:	308e703a 	and	r7,r6,r2
   8d9fc:	2087883a 	add	r3,r4,r2
   8da00:	00801004 	movi	r2,64
   8da04:	38800526 	beq	r7,r2,8da1c <__pack_f+0xa0>
   8da08:	31800fc4 	addi	r6,r6,63
   8da0c:	30000716 	blt	r6,zero,8da2c <__pack_f+0xb0>
   8da10:	300490ba 	slli	r2,r6,2
   8da14:	100cd27a 	srli	r6,r2,9
   8da18:	003fe406 	br	8d9ac <__pack_f+0x30>
   8da1c:	3080200c 	andi	r2,r6,128
   8da20:	103ffa26 	beq	r2,zero,8da0c <__pack_f+0x90>
   8da24:	31cd883a 	add	r6,r6,r7
   8da28:	003ff806 	br	8da0c <__pack_f+0x90>
   8da2c:	300cd07a 	srli	r6,r6,1
   8da30:	18c00044 	addi	r3,r3,1
   8da34:	003ff606 	br	8da10 <__pack_f+0x94>
   8da38:	000d883a 	mov	r6,zero
   8da3c:	00ffffc4 	movi	r3,-1
   8da40:	003fda06 	br	8d9ac <__pack_f+0x30>
   8da44:	31800434 	orhi	r6,r6,16
   8da48:	00802034 	movhi	r2,128
   8da4c:	10bfffc4 	addi	r2,r2,-1
   8da50:	308c703a 	and	r6,r6,r2
   8da54:	00ffffc4 	movi	r3,-1
   8da58:	003fd406 	br	8d9ac <__pack_f+0x30>
   8da5c:	1109c83a 	sub	r4,r2,r4
   8da60:	00800644 	movi	r2,25
   8da64:	11001216 	blt	r2,r4,8dab0 <__pack_f+0x134>
   8da68:	3904983a 	sll	r2,r7,r4
   8da6c:	3106d83a 	srl	r3,r6,r4
   8da70:	10bfffc4 	addi	r2,r2,-1
   8da74:	3084703a 	and	r2,r6,r2
   8da78:	1004c03a 	cmpne	r2,r2,zero
   8da7c:	1886b03a 	or	r3,r3,r2
   8da80:	19001fcc 	andi	r4,r3,127
   8da84:	00801004 	movi	r2,64
   8da88:	20800c26 	beq	r4,r2,8dabc <__pack_f+0x140>
   8da8c:	18c00fc4 	addi	r3,r3,63
   8da90:	00900034 	movhi	r2,16384
   8da94:	10bfffc4 	addi	r2,r2,-1
   8da98:	180cd1fa 	srli	r6,r3,7
   8da9c:	10c7803a 	cmpltu	r3,r2,r3
   8daa0:	00802034 	movhi	r2,128
   8daa4:	10bfffc4 	addi	r2,r2,-1
   8daa8:	308c703a 	and	r6,r6,r2
   8daac:	003fbf06 	br	8d9ac <__pack_f+0x30>
   8dab0:	0007883a 	mov	r3,zero
   8dab4:	000d883a 	mov	r6,zero
   8dab8:	003ff906 	br	8daa0 <__pack_f+0x124>
   8dabc:	1880200c 	andi	r2,r3,128
   8dac0:	10000126 	beq	r2,zero,8dac8 <__pack_f+0x14c>
   8dac4:	1907883a 	add	r3,r3,r4
   8dac8:	180cd1fa 	srli	r6,r3,7
   8dacc:	00900034 	movhi	r2,16384
   8dad0:	10bfffc4 	addi	r2,r2,-1
   8dad4:	10c7803a 	cmpltu	r3,r2,r3
   8dad8:	003ff106 	br	8daa0 <__pack_f+0x124>

0008dadc <__unpack_f>:
   8dadc:	21800017 	ldw	r6,0(r4)
   8dae0:	00c02034 	movhi	r3,128
   8dae4:	18ffffc4 	addi	r3,r3,-1
   8dae8:	3004d5fa 	srli	r2,r6,23
   8daec:	3008d7fa 	srli	r4,r6,31
   8daf0:	30ce703a 	and	r7,r6,r3
   8daf4:	10c03fcc 	andi	r3,r2,255
   8daf8:	29000115 	stw	r4,4(r5)
   8dafc:	1800131e 	bne	r3,zero,8db4c <__unpack_f+0x70>
   8db00:	38000f26 	beq	r7,zero,8db40 <__unpack_f+0x64>
   8db04:	380691fa 	slli	r3,r7,7
   8db08:	01bfe084 	movi	r6,-126
   8db0c:	008000c4 	movi	r2,3
   8db10:	01100034 	movhi	r4,16384
   8db14:	213fffc4 	addi	r4,r4,-1
   8db18:	28800015 	stw	r2,0(r5)
   8db1c:	29800215 	stw	r6,8(r5)
   8db20:	20c00536 	bltu	r4,r3,8db38 <__unpack_f+0x5c>
   8db24:	3005883a 	mov	r2,r6
   8db28:	18c7883a 	add	r3,r3,r3
   8db2c:	10bfffc4 	addi	r2,r2,-1
   8db30:	20fffd2e 	bgeu	r4,r3,8db28 <__unpack_f+0x4c>
   8db34:	28800215 	stw	r2,8(r5)
   8db38:	28c00315 	stw	r3,12(r5)
   8db3c:	f800283a 	ret
   8db40:	00800084 	movi	r2,2
   8db44:	28800015 	stw	r2,0(r5)
   8db48:	f800283a 	ret
   8db4c:	00803fc4 	movi	r2,255
   8db50:	18800826 	beq	r3,r2,8db74 <__unpack_f+0x98>
   8db54:	380491fa 	slli	r2,r7,7
   8db58:	18ffe044 	addi	r3,r3,-127
   8db5c:	28c00215 	stw	r3,8(r5)
   8db60:	10900034 	orhi	r2,r2,16384
   8db64:	28800315 	stw	r2,12(r5)
   8db68:	008000c4 	movi	r2,3
   8db6c:	28800015 	stw	r2,0(r5)
   8db70:	f800283a 	ret
   8db74:	3800031e 	bne	r7,zero,8db84 <__unpack_f+0xa8>
   8db78:	00800104 	movi	r2,4
   8db7c:	28800015 	stw	r2,0(r5)
   8db80:	f800283a 	ret
   8db84:	3080042c 	andhi	r2,r6,16
   8db88:	10000426 	beq	r2,zero,8db9c <__unpack_f+0xc0>
   8db8c:	00800044 	movi	r2,1
   8db90:	28800015 	stw	r2,0(r5)
   8db94:	29c00315 	stw	r7,12(r5)
   8db98:	f800283a 	ret
   8db9c:	28000015 	stw	zero,0(r5)
   8dba0:	003ffc06 	br	8db94 <__unpack_f+0xb8>

0008dba4 <__pack_d>:
   8dba4:	20c00017 	ldw	r3,0(r4)
   8dba8:	defffd04 	addi	sp,sp,-12
   8dbac:	dc000015 	stw	r16,0(sp)
   8dbb0:	dc800215 	stw	r18,8(sp)
   8dbb4:	dc400115 	stw	r17,4(sp)
   8dbb8:	00800044 	movi	r2,1
   8dbbc:	22000317 	ldw	r8,12(r4)
   8dbc0:	001f883a 	mov	r15,zero
   8dbc4:	22400417 	ldw	r9,16(r4)
   8dbc8:	24000117 	ldw	r16,4(r4)
   8dbcc:	10c0552e 	bgeu	r2,r3,8dd24 <__pack_d+0x180>
   8dbd0:	00800104 	movi	r2,4
   8dbd4:	18804f26 	beq	r3,r2,8dd14 <__pack_d+0x170>
   8dbd8:	00800084 	movi	r2,2
   8dbdc:	18800226 	beq	r3,r2,8dbe8 <__pack_d+0x44>
   8dbe0:	4244b03a 	or	r2,r8,r9
   8dbe4:	10001a1e 	bne	r2,zero,8dc50 <__pack_d+0xac>
   8dbe8:	000d883a 	mov	r6,zero
   8dbec:	000f883a 	mov	r7,zero
   8dbf0:	0011883a 	mov	r8,zero
   8dbf4:	00800434 	movhi	r2,16
   8dbf8:	10bfffc4 	addi	r2,r2,-1
   8dbfc:	301d883a 	mov	r14,r6
   8dc00:	3884703a 	and	r2,r7,r2
   8dc04:	400a953a 	slli	r5,r8,20
   8dc08:	79bffc2c 	andhi	r6,r15,65520
   8dc0c:	308cb03a 	or	r6,r6,r2
   8dc10:	00e00434 	movhi	r3,32784
   8dc14:	18ffffc4 	addi	r3,r3,-1
   8dc18:	800497fa 	slli	r2,r16,31
   8dc1c:	30c6703a 	and	r3,r6,r3
   8dc20:	1946b03a 	or	r3,r3,r5
   8dc24:	01600034 	movhi	r5,32768
   8dc28:	297fffc4 	addi	r5,r5,-1
   8dc2c:	194a703a 	and	r5,r3,r5
   8dc30:	288ab03a 	or	r5,r5,r2
   8dc34:	2807883a 	mov	r3,r5
   8dc38:	7005883a 	mov	r2,r14
   8dc3c:	dc800217 	ldw	r18,8(sp)
   8dc40:	dc400117 	ldw	r17,4(sp)
   8dc44:	dc000017 	ldw	r16,0(sp)
   8dc48:	dec00304 	addi	sp,sp,12
   8dc4c:	f800283a 	ret
   8dc50:	21000217 	ldw	r4,8(r4)
   8dc54:	00bf0084 	movi	r2,-1022
   8dc58:	20803f16 	blt	r4,r2,8dd58 <__pack_d+0x1b4>
   8dc5c:	0080ffc4 	movi	r2,1023
   8dc60:	11002c16 	blt	r2,r4,8dd14 <__pack_d+0x170>
   8dc64:	00803fc4 	movi	r2,255
   8dc68:	408c703a 	and	r6,r8,r2
   8dc6c:	00802004 	movi	r2,128
   8dc70:	0007883a 	mov	r3,zero
   8dc74:	000f883a 	mov	r7,zero
   8dc78:	2280ffc4 	addi	r10,r4,1023
   8dc7c:	30801e26 	beq	r6,r2,8dcf8 <__pack_d+0x154>
   8dc80:	00801fc4 	movi	r2,127
   8dc84:	4089883a 	add	r4,r8,r2
   8dc88:	220d803a 	cmpltu	r6,r4,r8
   8dc8c:	324d883a 	add	r6,r6,r9
   8dc90:	2011883a 	mov	r8,r4
   8dc94:	3013883a 	mov	r9,r6
   8dc98:	00880034 	movhi	r2,8192
   8dc9c:	10bfffc4 	addi	r2,r2,-1
   8dca0:	12400d36 	bltu	r2,r9,8dcd8 <__pack_d+0x134>
   8dca4:	4804963a 	slli	r2,r9,24
   8dca8:	400cd23a 	srli	r6,r8,8
   8dcac:	480ed23a 	srli	r7,r9,8
   8dcb0:	013fffc4 	movi	r4,-1
   8dcb4:	118cb03a 	or	r6,r2,r6
   8dcb8:	01400434 	movhi	r5,16
   8dcbc:	297fffc4 	addi	r5,r5,-1
   8dcc0:	3104703a 	and	r2,r6,r4
   8dcc4:	3946703a 	and	r3,r7,r5
   8dcc8:	5201ffcc 	andi	r8,r10,2047
   8dccc:	100d883a 	mov	r6,r2
   8dcd0:	180f883a 	mov	r7,r3
   8dcd4:	003fc706 	br	8dbf4 <__pack_d+0x50>
   8dcd8:	480897fa 	slli	r4,r9,31
   8dcdc:	4004d07a 	srli	r2,r8,1
   8dce0:	4806d07a 	srli	r3,r9,1
   8dce4:	52800044 	addi	r10,r10,1
   8dce8:	2084b03a 	or	r2,r4,r2
   8dcec:	1011883a 	mov	r8,r2
   8dcf0:	1813883a 	mov	r9,r3
   8dcf4:	003feb06 	br	8dca4 <__pack_d+0x100>
   8dcf8:	383fe11e 	bne	r7,zero,8dc80 <__pack_d+0xdc>
   8dcfc:	01004004 	movi	r4,256
   8dd00:	4104703a 	and	r2,r8,r4
   8dd04:	10c4b03a 	or	r2,r2,r3
   8dd08:	103fe326 	beq	r2,zero,8dc98 <__pack_d+0xf4>
   8dd0c:	3005883a 	mov	r2,r6
   8dd10:	003fdc06 	br	8dc84 <__pack_d+0xe0>
   8dd14:	000d883a 	mov	r6,zero
   8dd18:	000f883a 	mov	r7,zero
   8dd1c:	0201ffc4 	movi	r8,2047
   8dd20:	003fb406 	br	8dbf4 <__pack_d+0x50>
   8dd24:	0005883a 	mov	r2,zero
   8dd28:	00c00234 	movhi	r3,8
   8dd2c:	408cb03a 	or	r6,r8,r2
   8dd30:	48ceb03a 	or	r7,r9,r3
   8dd34:	013fffc4 	movi	r4,-1
   8dd38:	01400434 	movhi	r5,16
   8dd3c:	297fffc4 	addi	r5,r5,-1
   8dd40:	3104703a 	and	r2,r6,r4
   8dd44:	3946703a 	and	r3,r7,r5
   8dd48:	100d883a 	mov	r6,r2
   8dd4c:	180f883a 	mov	r7,r3
   8dd50:	0201ffc4 	movi	r8,2047
   8dd54:	003fa706 	br	8dbf4 <__pack_d+0x50>
   8dd58:	1109c83a 	sub	r4,r2,r4
   8dd5c:	00800e04 	movi	r2,56
   8dd60:	11004316 	blt	r2,r4,8de70 <__pack_d+0x2cc>
   8dd64:	21fff804 	addi	r7,r4,-32
   8dd68:	38004516 	blt	r7,zero,8de80 <__pack_d+0x2dc>
   8dd6c:	49d8d83a 	srl	r12,r9,r7
   8dd70:	001b883a 	mov	r13,zero
   8dd74:	0023883a 	mov	r17,zero
   8dd78:	01400044 	movi	r5,1
   8dd7c:	0025883a 	mov	r18,zero
   8dd80:	38004716 	blt	r7,zero,8dea0 <__pack_d+0x2fc>
   8dd84:	29d6983a 	sll	r11,r5,r7
   8dd88:	0015883a 	mov	r10,zero
   8dd8c:	00bfffc4 	movi	r2,-1
   8dd90:	5089883a 	add	r4,r10,r2
   8dd94:	588b883a 	add	r5,r11,r2
   8dd98:	228d803a 	cmpltu	r6,r4,r10
   8dd9c:	314b883a 	add	r5,r6,r5
   8dda0:	4104703a 	and	r2,r8,r4
   8dda4:	4946703a 	and	r3,r9,r5
   8dda8:	10c4b03a 	or	r2,r2,r3
   8ddac:	10000226 	beq	r2,zero,8ddb8 <__pack_d+0x214>
   8ddb0:	04400044 	movi	r17,1
   8ddb4:	0025883a 	mov	r18,zero
   8ddb8:	00803fc4 	movi	r2,255
   8ddbc:	644eb03a 	or	r7,r12,r17
   8ddc0:	3892703a 	and	r9,r7,r2
   8ddc4:	00802004 	movi	r2,128
   8ddc8:	6c90b03a 	or	r8,r13,r18
   8ddcc:	0015883a 	mov	r10,zero
   8ddd0:	48801626 	beq	r9,r2,8de2c <__pack_d+0x288>
   8ddd4:	01001fc4 	movi	r4,127
   8ddd8:	3905883a 	add	r2,r7,r4
   8dddc:	11cd803a 	cmpltu	r6,r2,r7
   8dde0:	320d883a 	add	r6,r6,r8
   8dde4:	100f883a 	mov	r7,r2
   8dde8:	00840034 	movhi	r2,4096
   8ddec:	10bfffc4 	addi	r2,r2,-1
   8ddf0:	3011883a 	mov	r8,r6
   8ddf4:	0007883a 	mov	r3,zero
   8ddf8:	11801b36 	bltu	r2,r6,8de68 <__pack_d+0x2c4>
   8ddfc:	4004963a 	slli	r2,r8,24
   8de00:	3808d23a 	srli	r4,r7,8
   8de04:	400ad23a 	srli	r5,r8,8
   8de08:	1813883a 	mov	r9,r3
   8de0c:	1108b03a 	or	r4,r2,r4
   8de10:	00bfffc4 	movi	r2,-1
   8de14:	00c00434 	movhi	r3,16
   8de18:	18ffffc4 	addi	r3,r3,-1
   8de1c:	208c703a 	and	r6,r4,r2
   8de20:	28ce703a 	and	r7,r5,r3
   8de24:	4a01ffcc 	andi	r8,r9,2047
   8de28:	003f7206 	br	8dbf4 <__pack_d+0x50>
   8de2c:	503fe91e 	bne	r10,zero,8ddd4 <__pack_d+0x230>
   8de30:	01004004 	movi	r4,256
   8de34:	3904703a 	and	r2,r7,r4
   8de38:	0007883a 	mov	r3,zero
   8de3c:	10c4b03a 	or	r2,r2,r3
   8de40:	10000626 	beq	r2,zero,8de5c <__pack_d+0x2b8>
   8de44:	3a45883a 	add	r2,r7,r9
   8de48:	11cd803a 	cmpltu	r6,r2,r7
   8de4c:	320d883a 	add	r6,r6,r8
   8de50:	100f883a 	mov	r7,r2
   8de54:	3011883a 	mov	r8,r6
   8de58:	0007883a 	mov	r3,zero
   8de5c:	00840034 	movhi	r2,4096
   8de60:	10bfffc4 	addi	r2,r2,-1
   8de64:	123fe52e 	bgeu	r2,r8,8ddfc <__pack_d+0x258>
   8de68:	00c00044 	movi	r3,1
   8de6c:	003fe306 	br	8ddfc <__pack_d+0x258>
   8de70:	0009883a 	mov	r4,zero
   8de74:	0013883a 	mov	r9,zero
   8de78:	000b883a 	mov	r5,zero
   8de7c:	003fe406 	br	8de10 <__pack_d+0x26c>
   8de80:	4a47883a 	add	r3,r9,r9
   8de84:	008007c4 	movi	r2,31
   8de88:	1105c83a 	sub	r2,r2,r4
   8de8c:	1886983a 	sll	r3,r3,r2
   8de90:	4118d83a 	srl	r12,r8,r4
   8de94:	491ad83a 	srl	r13,r9,r4
   8de98:	1b18b03a 	or	r12,r3,r12
   8de9c:	003fb506 	br	8dd74 <__pack_d+0x1d0>
   8dea0:	2806d07a 	srli	r3,r5,1
   8dea4:	008007c4 	movi	r2,31
   8dea8:	1105c83a 	sub	r2,r2,r4
   8deac:	1896d83a 	srl	r11,r3,r2
   8deb0:	2914983a 	sll	r10,r5,r4
   8deb4:	003fb506 	br	8dd8c <__pack_d+0x1e8>

0008deb8 <_fgets_r>:
   8deb8:	defff804 	addi	sp,sp,-32
   8debc:	00800044 	movi	r2,1
   8dec0:	dd800615 	stw	r22,24(sp)
   8dec4:	dd400515 	stw	r21,20(sp)
   8dec8:	dc400115 	stw	r17,4(sp)
   8decc:	dc000015 	stw	r16,0(sp)
   8ded0:	dfc00715 	stw	ra,28(sp)
   8ded4:	dd000415 	stw	r20,16(sp)
   8ded8:	dcc00315 	stw	r19,12(sp)
   8dedc:	dc800215 	stw	r18,8(sp)
   8dee0:	3021883a 	mov	r16,r6
   8dee4:	282d883a 	mov	r22,r5
   8dee8:	3823883a 	mov	r17,r7
   8deec:	202b883a 	mov	r21,r4
   8def0:	1180410e 	bge	r2,r6,8dff8 <_fgets_r+0x140>
   8def4:	20000226 	beq	r4,zero,8df00 <_fgets_r+0x48>
   8def8:	20800e17 	ldw	r2,56(r4)
   8defc:	10002e26 	beq	r2,zero,8dfb8 <_fgets_r+0x100>
   8df00:	853fffc4 	addi	r20,r16,-1
   8df04:	b027883a 	mov	r19,r22
   8df08:	88800117 	ldw	r2,4(r17)
   8df0c:	a809883a 	mov	r4,r21
   8df10:	880b883a 	mov	r5,r17
   8df14:	100d883a 	mov	r6,r2
   8df18:	1000031e 	bne	r2,zero,8df28 <_fgets_r+0x70>
   8df1c:	008ef840 	call	8ef84 <__srefill_r>
   8df20:	1000341e 	bne	r2,zero,8dff4 <_fgets_r+0x13c>
   8df24:	89800117 	ldw	r6,4(r17)
   8df28:	01400284 	movi	r5,10
   8df2c:	3021883a 	mov	r16,r6
   8df30:	8c800017 	ldw	r18,0(r17)
   8df34:	a180012e 	bgeu	r20,r6,8df3c <_fgets_r+0x84>
   8df38:	a021883a 	mov	r16,r20
   8df3c:	9009883a 	mov	r4,r18
   8df40:	800d883a 	mov	r6,r16
   8df44:	008eba40 	call	8eba4 <memchr>
   8df48:	1007883a 	mov	r3,r2
   8df4c:	900b883a 	mov	r5,r18
   8df50:	9809883a 	mov	r4,r19
   8df54:	800d883a 	mov	r6,r16
   8df58:	1000191e 	bne	r2,zero,8dfc0 <_fgets_r+0x108>
   8df5c:	88800117 	ldw	r2,4(r17)
   8df60:	88c00017 	ldw	r3,0(r17)
   8df64:	9c27883a 	add	r19,r19,r16
   8df68:	1405c83a 	sub	r2,r2,r16
   8df6c:	1c07883a 	add	r3,r3,r16
   8df70:	88c00015 	stw	r3,0(r17)
   8df74:	88800115 	stw	r2,4(r17)
   8df78:	008ecfc0 	call	8ecfc <memcpy>
   8df7c:	a407c83a 	sub	r3,r20,r16
   8df80:	1829883a 	mov	r20,r3
   8df84:	183fe01e 	bne	r3,zero,8df08 <_fgets_r+0x50>
   8df88:	98000005 	stb	zero,0(r19)
   8df8c:	b005883a 	mov	r2,r22
   8df90:	dfc00717 	ldw	ra,28(sp)
   8df94:	dd800617 	ldw	r22,24(sp)
   8df98:	dd400517 	ldw	r21,20(sp)
   8df9c:	dd000417 	ldw	r20,16(sp)
   8dfa0:	dcc00317 	ldw	r19,12(sp)
   8dfa4:	dc800217 	ldw	r18,8(sp)
   8dfa8:	dc400117 	ldw	r17,4(sp)
   8dfac:	dc000017 	ldw	r16,0(sp)
   8dfb0:	dec00804 	addi	sp,sp,32
   8dfb4:	f800283a 	ret
   8dfb8:	008e08c0 	call	8e08c <__sinit>
   8dfbc:	003fd006 	br	8df00 <_fgets_r+0x48>
   8dfc0:	88800117 	ldw	r2,4(r17)
   8dfc4:	18c00044 	addi	r3,r3,1
   8dfc8:	1ca1c83a 	sub	r16,r3,r18
   8dfcc:	1405c83a 	sub	r2,r2,r16
   8dfd0:	800d883a 	mov	r6,r16
   8dfd4:	88c00015 	stw	r3,0(r17)
   8dfd8:	88800115 	stw	r2,4(r17)
   8dfdc:	900b883a 	mov	r5,r18
   8dfe0:	9809883a 	mov	r4,r19
   8dfe4:	008ecfc0 	call	8ecfc <memcpy>
   8dfe8:	9c21883a 	add	r16,r19,r16
   8dfec:	80000005 	stb	zero,0(r16)
   8dff0:	003fe606 	br	8df8c <_fgets_r+0xd4>
   8dff4:	9dbfe41e 	bne	r19,r22,8df88 <_fgets_r+0xd0>
   8dff8:	002d883a 	mov	r22,zero
   8dffc:	003fe306 	br	8df8c <_fgets_r+0xd4>

0008e000 <fgets>:
   8e000:	008002b4 	movhi	r2,10
   8e004:	1081b804 	addi	r2,r2,1760
   8e008:	2013883a 	mov	r9,r4
   8e00c:	11000017 	ldw	r4,0(r2)
   8e010:	2805883a 	mov	r2,r5
   8e014:	300f883a 	mov	r7,r6
   8e018:	480b883a 	mov	r5,r9
   8e01c:	100d883a 	mov	r6,r2
   8e020:	008deb81 	jmpi	8deb8 <_fgets_r>

0008e024 <std>:
   8e024:	00800274 	movhi	r2,9
   8e028:	10bc7504 	addi	r2,r2,-3628
   8e02c:	20800b15 	stw	r2,44(r4)
   8e030:	00800274 	movhi	r2,9
   8e034:	10bcb004 	addi	r2,r2,-3392
   8e038:	20800815 	stw	r2,32(r4)
   8e03c:	00c00274 	movhi	r3,9
   8e040:	18fc9104 	addi	r3,r3,-3516
   8e044:	00800274 	movhi	r2,9
   8e048:	10bc7704 	addi	r2,r2,-3620
   8e04c:	2140030d 	sth	r5,12(r4)
   8e050:	2180038d 	sth	r6,14(r4)
   8e054:	20c00915 	stw	r3,36(r4)
   8e058:	20800a15 	stw	r2,40(r4)
   8e05c:	20000015 	stw	zero,0(r4)
   8e060:	20000115 	stw	zero,4(r4)
   8e064:	20000215 	stw	zero,8(r4)
   8e068:	20000415 	stw	zero,16(r4)
   8e06c:	20000515 	stw	zero,20(r4)
   8e070:	20000615 	stw	zero,24(r4)
   8e074:	21000715 	stw	r4,28(r4)
   8e078:	f800283a 	ret

0008e07c <__sfp_lock_acquire>:
   8e07c:	f800283a 	ret

0008e080 <__sfp_lock_release>:
   8e080:	f800283a 	ret

0008e084 <__sinit_lock_acquire>:
   8e084:	f800283a 	ret

0008e088 <__sinit_lock_release>:
   8e088:	f800283a 	ret

0008e08c <__sinit>:
   8e08c:	20800e17 	ldw	r2,56(r4)
   8e090:	defffd04 	addi	sp,sp,-12
   8e094:	dc400115 	stw	r17,4(sp)
   8e098:	dc000015 	stw	r16,0(sp)
   8e09c:	dfc00215 	stw	ra,8(sp)
   8e0a0:	04400044 	movi	r17,1
   8e0a4:	01400104 	movi	r5,4
   8e0a8:	000d883a 	mov	r6,zero
   8e0ac:	2021883a 	mov	r16,r4
   8e0b0:	2200bb04 	addi	r8,r4,748
   8e0b4:	200f883a 	mov	r7,r4
   8e0b8:	10000526 	beq	r2,zero,8e0d0 <__sinit+0x44>
   8e0bc:	dfc00217 	ldw	ra,8(sp)
   8e0c0:	dc400117 	ldw	r17,4(sp)
   8e0c4:	dc000017 	ldw	r16,0(sp)
   8e0c8:	dec00304 	addi	sp,sp,12
   8e0cc:	f800283a 	ret
   8e0d0:	21000117 	ldw	r4,4(r4)
   8e0d4:	00800274 	movhi	r2,9
   8e0d8:	10b85c04 	addi	r2,r2,-7824
   8e0dc:	00c000c4 	movi	r3,3
   8e0e0:	80800f15 	stw	r2,60(r16)
   8e0e4:	80c0b915 	stw	r3,740(r16)
   8e0e8:	8200ba15 	stw	r8,744(r16)
   8e0ec:	84400e15 	stw	r17,56(r16)
   8e0f0:	8000b815 	stw	zero,736(r16)
   8e0f4:	008e0240 	call	8e024 <std>
   8e0f8:	81000217 	ldw	r4,8(r16)
   8e0fc:	880d883a 	mov	r6,r17
   8e100:	800f883a 	mov	r7,r16
   8e104:	01400284 	movi	r5,10
   8e108:	008e0240 	call	8e024 <std>
   8e10c:	81000317 	ldw	r4,12(r16)
   8e110:	800f883a 	mov	r7,r16
   8e114:	01400484 	movi	r5,18
   8e118:	01800084 	movi	r6,2
   8e11c:	dfc00217 	ldw	ra,8(sp)
   8e120:	dc400117 	ldw	r17,4(sp)
   8e124:	dc000017 	ldw	r16,0(sp)
   8e128:	dec00304 	addi	sp,sp,12
   8e12c:	008e0241 	jmpi	8e024 <std>

0008e130 <__fp_lock>:
   8e130:	0005883a 	mov	r2,zero
   8e134:	f800283a 	ret

0008e138 <__fp_unlock>:
   8e138:	0005883a 	mov	r2,zero
   8e13c:	f800283a 	ret

0008e140 <__fp_unlock_all>:
   8e140:	008002b4 	movhi	r2,10
   8e144:	1081b804 	addi	r2,r2,1760
   8e148:	11000017 	ldw	r4,0(r2)
   8e14c:	01400274 	movhi	r5,9
   8e150:	29784e04 	addi	r5,r5,-7880
   8e154:	008e3ac1 	jmpi	8e3ac <_fwalk>

0008e158 <__fp_lock_all>:
   8e158:	008002b4 	movhi	r2,10
   8e15c:	1081b804 	addi	r2,r2,1760
   8e160:	11000017 	ldw	r4,0(r2)
   8e164:	01400274 	movhi	r5,9
   8e168:	29784c04 	addi	r5,r5,-7888
   8e16c:	008e3ac1 	jmpi	8e3ac <_fwalk>

0008e170 <_cleanup_r>:
   8e170:	01400274 	movhi	r5,9
   8e174:	294c3304 	addi	r5,r5,12492
   8e178:	008e3ac1 	jmpi	8e3ac <_fwalk>

0008e17c <_cleanup>:
   8e17c:	008002b4 	movhi	r2,10
   8e180:	1081b904 	addi	r2,r2,1764
   8e184:	11000017 	ldw	r4,0(r2)
   8e188:	008e1701 	jmpi	8e170 <_cleanup_r>

0008e18c <__sfmoreglue>:
   8e18c:	defffc04 	addi	sp,sp,-16
   8e190:	dc400115 	stw	r17,4(sp)
   8e194:	2c401724 	muli	r17,r5,92
   8e198:	dc800215 	stw	r18,8(sp)
   8e19c:	2825883a 	mov	r18,r5
   8e1a0:	89400304 	addi	r5,r17,12
   8e1a4:	dc000015 	stw	r16,0(sp)
   8e1a8:	dfc00315 	stw	ra,12(sp)
   8e1ac:	008e4640 	call	8e464 <_malloc_r>
   8e1b0:	0021883a 	mov	r16,zero
   8e1b4:	880d883a 	mov	r6,r17
   8e1b8:	000b883a 	mov	r5,zero
   8e1bc:	10000626 	beq	r2,zero,8e1d8 <__sfmoreglue+0x4c>
   8e1c0:	11000304 	addi	r4,r2,12
   8e1c4:	14800115 	stw	r18,4(r2)
   8e1c8:	10000015 	stw	zero,0(r2)
   8e1cc:	11000215 	stw	r4,8(r2)
   8e1d0:	1021883a 	mov	r16,r2
   8e1d4:	008ed9c0 	call	8ed9c <memset>
   8e1d8:	8005883a 	mov	r2,r16
   8e1dc:	dfc00317 	ldw	ra,12(sp)
   8e1e0:	dc800217 	ldw	r18,8(sp)
   8e1e4:	dc400117 	ldw	r17,4(sp)
   8e1e8:	dc000017 	ldw	r16,0(sp)
   8e1ec:	dec00404 	addi	sp,sp,16
   8e1f0:	f800283a 	ret

0008e1f4 <__sfp>:
   8e1f4:	defffd04 	addi	sp,sp,-12
   8e1f8:	008002b4 	movhi	r2,10
   8e1fc:	1081b904 	addi	r2,r2,1764
   8e200:	dc000015 	stw	r16,0(sp)
   8e204:	14000017 	ldw	r16,0(r2)
   8e208:	dc400115 	stw	r17,4(sp)
   8e20c:	dfc00215 	stw	ra,8(sp)
   8e210:	80800e17 	ldw	r2,56(r16)
   8e214:	2023883a 	mov	r17,r4
   8e218:	10002626 	beq	r2,zero,8e2b4 <__sfp+0xc0>
   8e21c:	8400b804 	addi	r16,r16,736
   8e220:	80800117 	ldw	r2,4(r16)
   8e224:	81000217 	ldw	r4,8(r16)
   8e228:	10ffffc4 	addi	r3,r2,-1
   8e22c:	18000916 	blt	r3,zero,8e254 <__sfp+0x60>
   8e230:	2080030f 	ldh	r2,12(r4)
   8e234:	10000b26 	beq	r2,zero,8e264 <__sfp+0x70>
   8e238:	017fffc4 	movi	r5,-1
   8e23c:	00000206 	br	8e248 <__sfp+0x54>
   8e240:	2080030f 	ldh	r2,12(r4)
   8e244:	10000726 	beq	r2,zero,8e264 <__sfp+0x70>
   8e248:	18ffffc4 	addi	r3,r3,-1
   8e24c:	21001704 	addi	r4,r4,92
   8e250:	197ffb1e 	bne	r3,r5,8e240 <__sfp+0x4c>
   8e254:	80800017 	ldw	r2,0(r16)
   8e258:	10001926 	beq	r2,zero,8e2c0 <__sfp+0xcc>
   8e25c:	1021883a 	mov	r16,r2
   8e260:	003fef06 	br	8e220 <__sfp+0x2c>
   8e264:	00bfffc4 	movi	r2,-1
   8e268:	00c00044 	movi	r3,1
   8e26c:	2080038d 	sth	r2,14(r4)
   8e270:	20c0030d 	sth	r3,12(r4)
   8e274:	20000015 	stw	zero,0(r4)
   8e278:	20000215 	stw	zero,8(r4)
   8e27c:	20000115 	stw	zero,4(r4)
   8e280:	20000415 	stw	zero,16(r4)
   8e284:	20000515 	stw	zero,20(r4)
   8e288:	20000615 	stw	zero,24(r4)
   8e28c:	20000c15 	stw	zero,48(r4)
   8e290:	20000d15 	stw	zero,52(r4)
   8e294:	20001115 	stw	zero,68(r4)
   8e298:	20001215 	stw	zero,72(r4)
   8e29c:	2005883a 	mov	r2,r4
   8e2a0:	dfc00217 	ldw	ra,8(sp)
   8e2a4:	dc400117 	ldw	r17,4(sp)
   8e2a8:	dc000017 	ldw	r16,0(sp)
   8e2ac:	dec00304 	addi	sp,sp,12
   8e2b0:	f800283a 	ret
   8e2b4:	8009883a 	mov	r4,r16
   8e2b8:	008e08c0 	call	8e08c <__sinit>
   8e2bc:	003fd706 	br	8e21c <__sfp+0x28>
   8e2c0:	8809883a 	mov	r4,r17
   8e2c4:	01400104 	movi	r5,4
   8e2c8:	008e18c0 	call	8e18c <__sfmoreglue>
   8e2cc:	80800015 	stw	r2,0(r16)
   8e2d0:	103fe21e 	bne	r2,zero,8e25c <__sfp+0x68>
   8e2d4:	00800304 	movi	r2,12
   8e2d8:	0009883a 	mov	r4,zero
   8e2dc:	88800015 	stw	r2,0(r17)
   8e2e0:	003fee06 	br	8e29c <__sfp+0xa8>

0008e2e4 <_fwalk_reent>:
   8e2e4:	defff704 	addi	sp,sp,-36
   8e2e8:	dcc00315 	stw	r19,12(sp)
   8e2ec:	24c0b804 	addi	r19,r4,736
   8e2f0:	dd800615 	stw	r22,24(sp)
   8e2f4:	dd400515 	stw	r21,20(sp)
   8e2f8:	dfc00815 	stw	ra,32(sp)
   8e2fc:	ddc00715 	stw	r23,28(sp)
   8e300:	dd000415 	stw	r20,16(sp)
   8e304:	dc800215 	stw	r18,8(sp)
   8e308:	dc400115 	stw	r17,4(sp)
   8e30c:	dc000015 	stw	r16,0(sp)
   8e310:	202b883a 	mov	r21,r4
   8e314:	282d883a 	mov	r22,r5
   8e318:	008e07c0 	call	8e07c <__sfp_lock_acquire>
   8e31c:	98002126 	beq	r19,zero,8e3a4 <_fwalk_reent+0xc0>
   8e320:	002f883a 	mov	r23,zero
   8e324:	9c800117 	ldw	r18,4(r19)
   8e328:	9c000217 	ldw	r16,8(r19)
   8e32c:	90bfffc4 	addi	r2,r18,-1
   8e330:	10000d16 	blt	r2,zero,8e368 <_fwalk_reent+0x84>
   8e334:	0023883a 	mov	r17,zero
   8e338:	053fffc4 	movi	r20,-1
   8e33c:	8080030f 	ldh	r2,12(r16)
   8e340:	8c400044 	addi	r17,r17,1
   8e344:	10000626 	beq	r2,zero,8e360 <_fwalk_reent+0x7c>
   8e348:	8080038f 	ldh	r2,14(r16)
   8e34c:	800b883a 	mov	r5,r16
   8e350:	a809883a 	mov	r4,r21
   8e354:	15000226 	beq	r2,r20,8e360 <_fwalk_reent+0x7c>
   8e358:	b03ee83a 	callr	r22
   8e35c:	b8aeb03a 	or	r23,r23,r2
   8e360:	84001704 	addi	r16,r16,92
   8e364:	947ff51e 	bne	r18,r17,8e33c <_fwalk_reent+0x58>
   8e368:	9cc00017 	ldw	r19,0(r19)
   8e36c:	983fed1e 	bne	r19,zero,8e324 <_fwalk_reent+0x40>
   8e370:	008e0800 	call	8e080 <__sfp_lock_release>
   8e374:	b805883a 	mov	r2,r23
   8e378:	dfc00817 	ldw	ra,32(sp)
   8e37c:	ddc00717 	ldw	r23,28(sp)
   8e380:	dd800617 	ldw	r22,24(sp)
   8e384:	dd400517 	ldw	r21,20(sp)
   8e388:	dd000417 	ldw	r20,16(sp)
   8e38c:	dcc00317 	ldw	r19,12(sp)
   8e390:	dc800217 	ldw	r18,8(sp)
   8e394:	dc400117 	ldw	r17,4(sp)
   8e398:	dc000017 	ldw	r16,0(sp)
   8e39c:	dec00904 	addi	sp,sp,36
   8e3a0:	f800283a 	ret
   8e3a4:	002f883a 	mov	r23,zero
   8e3a8:	003ff106 	br	8e370 <_fwalk_reent+0x8c>

0008e3ac <_fwalk>:
   8e3ac:	defff804 	addi	sp,sp,-32
   8e3b0:	dcc00315 	stw	r19,12(sp)
   8e3b4:	24c0b804 	addi	r19,r4,736
   8e3b8:	dd400515 	stw	r21,20(sp)
   8e3bc:	dfc00715 	stw	ra,28(sp)
   8e3c0:	dd800615 	stw	r22,24(sp)
   8e3c4:	dd000415 	stw	r20,16(sp)
   8e3c8:	dc800215 	stw	r18,8(sp)
   8e3cc:	dc400115 	stw	r17,4(sp)
   8e3d0:	dc000015 	stw	r16,0(sp)
   8e3d4:	282b883a 	mov	r21,r5
   8e3d8:	008e07c0 	call	8e07c <__sfp_lock_acquire>
   8e3dc:	98001f26 	beq	r19,zero,8e45c <_fwalk+0xb0>
   8e3e0:	002d883a 	mov	r22,zero
   8e3e4:	9c800117 	ldw	r18,4(r19)
   8e3e8:	9c000217 	ldw	r16,8(r19)
   8e3ec:	90bfffc4 	addi	r2,r18,-1
   8e3f0:	10000c16 	blt	r2,zero,8e424 <_fwalk+0x78>
   8e3f4:	0023883a 	mov	r17,zero
   8e3f8:	053fffc4 	movi	r20,-1
   8e3fc:	8080030f 	ldh	r2,12(r16)
   8e400:	8c400044 	addi	r17,r17,1
   8e404:	10000526 	beq	r2,zero,8e41c <_fwalk+0x70>
   8e408:	8080038f 	ldh	r2,14(r16)
   8e40c:	8009883a 	mov	r4,r16
   8e410:	15000226 	beq	r2,r20,8e41c <_fwalk+0x70>
   8e414:	a83ee83a 	callr	r21
   8e418:	b0acb03a 	or	r22,r22,r2
   8e41c:	84001704 	addi	r16,r16,92
   8e420:	947ff61e 	bne	r18,r17,8e3fc <_fwalk+0x50>
   8e424:	9cc00017 	ldw	r19,0(r19)
   8e428:	983fee1e 	bne	r19,zero,8e3e4 <_fwalk+0x38>
   8e42c:	008e0800 	call	8e080 <__sfp_lock_release>
   8e430:	b005883a 	mov	r2,r22
   8e434:	dfc00717 	ldw	ra,28(sp)
   8e438:	dd800617 	ldw	r22,24(sp)
   8e43c:	dd400517 	ldw	r21,20(sp)
   8e440:	dd000417 	ldw	r20,16(sp)
   8e444:	dcc00317 	ldw	r19,12(sp)
   8e448:	dc800217 	ldw	r18,8(sp)
   8e44c:	dc400117 	ldw	r17,4(sp)
   8e450:	dc000017 	ldw	r16,0(sp)
   8e454:	dec00804 	addi	sp,sp,32
   8e458:	f800283a 	ret
   8e45c:	002d883a 	mov	r22,zero
   8e460:	003ff206 	br	8e42c <_fwalk+0x80>

0008e464 <_malloc_r>:
   8e464:	defff604 	addi	sp,sp,-40
   8e468:	28c002c4 	addi	r3,r5,11
   8e46c:	00800584 	movi	r2,22
   8e470:	dc800215 	stw	r18,8(sp)
   8e474:	dfc00915 	stw	ra,36(sp)
   8e478:	df000815 	stw	fp,32(sp)
   8e47c:	ddc00715 	stw	r23,28(sp)
   8e480:	dd800615 	stw	r22,24(sp)
   8e484:	dd400515 	stw	r21,20(sp)
   8e488:	dd000415 	stw	r20,16(sp)
   8e48c:	dcc00315 	stw	r19,12(sp)
   8e490:	dc400115 	stw	r17,4(sp)
   8e494:	dc000015 	stw	r16,0(sp)
   8e498:	2025883a 	mov	r18,r4
   8e49c:	10c01236 	bltu	r2,r3,8e4e8 <_malloc_r+0x84>
   8e4a0:	04400404 	movi	r17,16
   8e4a4:	8940142e 	bgeu	r17,r5,8e4f8 <_malloc_r+0x94>
   8e4a8:	00800304 	movi	r2,12
   8e4ac:	0007883a 	mov	r3,zero
   8e4b0:	90800015 	stw	r2,0(r18)
   8e4b4:	1805883a 	mov	r2,r3
   8e4b8:	dfc00917 	ldw	ra,36(sp)
   8e4bc:	df000817 	ldw	fp,32(sp)
   8e4c0:	ddc00717 	ldw	r23,28(sp)
   8e4c4:	dd800617 	ldw	r22,24(sp)
   8e4c8:	dd400517 	ldw	r21,20(sp)
   8e4cc:	dd000417 	ldw	r20,16(sp)
   8e4d0:	dcc00317 	ldw	r19,12(sp)
   8e4d4:	dc800217 	ldw	r18,8(sp)
   8e4d8:	dc400117 	ldw	r17,4(sp)
   8e4dc:	dc000017 	ldw	r16,0(sp)
   8e4e0:	dec00a04 	addi	sp,sp,40
   8e4e4:	f800283a 	ret
   8e4e8:	00bffe04 	movi	r2,-8
   8e4ec:	18a2703a 	and	r17,r3,r2
   8e4f0:	883fed16 	blt	r17,zero,8e4a8 <_malloc_r+0x44>
   8e4f4:	897fec36 	bltu	r17,r5,8e4a8 <_malloc_r+0x44>
   8e4f8:	9009883a 	mov	r4,r18
   8e4fc:	00984880 	call	98488 <__malloc_lock>
   8e500:	00807dc4 	movi	r2,503
   8e504:	14402b2e 	bgeu	r2,r17,8e5b4 <_malloc_r+0x150>
   8e508:	8806d27a 	srli	r3,r17,9
   8e50c:	18003f1e 	bne	r3,zero,8e60c <_malloc_r+0x1a8>
   8e510:	880cd0fa 	srli	r6,r17,3
   8e514:	300490fa 	slli	r2,r6,3
   8e518:	02c002b4 	movhi	r11,10
   8e51c:	5afbce04 	addi	r11,r11,-4296
   8e520:	12cb883a 	add	r5,r2,r11
   8e524:	2c000317 	ldw	r16,12(r5)
   8e528:	580f883a 	mov	r7,r11
   8e52c:	2c00041e 	bne	r5,r16,8e540 <_malloc_r+0xdc>
   8e530:	00000a06 	br	8e55c <_malloc_r+0xf8>
   8e534:	1800860e 	bge	r3,zero,8e750 <_malloc_r+0x2ec>
   8e538:	84000317 	ldw	r16,12(r16)
   8e53c:	2c000726 	beq	r5,r16,8e55c <_malloc_r+0xf8>
   8e540:	80800117 	ldw	r2,4(r16)
   8e544:	00ffff04 	movi	r3,-4
   8e548:	10c8703a 	and	r4,r2,r3
   8e54c:	2447c83a 	sub	r3,r4,r17
   8e550:	008003c4 	movi	r2,15
   8e554:	10fff70e 	bge	r2,r3,8e534 <_malloc_r+0xd0>
   8e558:	31bfffc4 	addi	r6,r6,-1
   8e55c:	32400044 	addi	r9,r6,1
   8e560:	028002b4 	movhi	r10,10
   8e564:	52bbd004 	addi	r10,r10,-4288
   8e568:	54000217 	ldw	r16,8(r10)
   8e56c:	8280a026 	beq	r16,r10,8e7f0 <_malloc_r+0x38c>
   8e570:	80800117 	ldw	r2,4(r16)
   8e574:	00ffff04 	movi	r3,-4
   8e578:	10ca703a 	and	r5,r2,r3
   8e57c:	2c4dc83a 	sub	r6,r5,r17
   8e580:	008003c4 	movi	r2,15
   8e584:	11808316 	blt	r2,r6,8e794 <_malloc_r+0x330>
   8e588:	52800315 	stw	r10,12(r10)
   8e58c:	52800215 	stw	r10,8(r10)
   8e590:	30002916 	blt	r6,zero,8e638 <_malloc_r+0x1d4>
   8e594:	8147883a 	add	r3,r16,r5
   8e598:	18800117 	ldw	r2,4(r3)
   8e59c:	9009883a 	mov	r4,r18
   8e5a0:	10800054 	ori	r2,r2,1
   8e5a4:	18800115 	stw	r2,4(r3)
   8e5a8:	00984b00 	call	984b0 <__malloc_unlock>
   8e5ac:	80c00204 	addi	r3,r16,8
   8e5b0:	003fc006 	br	8e4b4 <_malloc_r+0x50>
   8e5b4:	02c002b4 	movhi	r11,10
   8e5b8:	5afbce04 	addi	r11,r11,-4296
   8e5bc:	8ac5883a 	add	r2,r17,r11
   8e5c0:	14000317 	ldw	r16,12(r2)
   8e5c4:	580f883a 	mov	r7,r11
   8e5c8:	8806d0fa 	srli	r3,r17,3
   8e5cc:	14006c26 	beq	r2,r16,8e780 <_malloc_r+0x31c>
   8e5d0:	80c00117 	ldw	r3,4(r16)
   8e5d4:	00bfff04 	movi	r2,-4
   8e5d8:	81800317 	ldw	r6,12(r16)
   8e5dc:	1886703a 	and	r3,r3,r2
   8e5e0:	80c7883a 	add	r3,r16,r3
   8e5e4:	18800117 	ldw	r2,4(r3)
   8e5e8:	81400217 	ldw	r5,8(r16)
   8e5ec:	9009883a 	mov	r4,r18
   8e5f0:	10800054 	ori	r2,r2,1
   8e5f4:	18800115 	stw	r2,4(r3)
   8e5f8:	31400215 	stw	r5,8(r6)
   8e5fc:	29800315 	stw	r6,12(r5)
   8e600:	00984b00 	call	984b0 <__malloc_unlock>
   8e604:	80c00204 	addi	r3,r16,8
   8e608:	003faa06 	br	8e4b4 <_malloc_r+0x50>
   8e60c:	00800104 	movi	r2,4
   8e610:	10c0052e 	bgeu	r2,r3,8e628 <_malloc_r+0x1c4>
   8e614:	00800504 	movi	r2,20
   8e618:	10c07836 	bltu	r2,r3,8e7fc <_malloc_r+0x398>
   8e61c:	198016c4 	addi	r6,r3,91
   8e620:	300490fa 	slli	r2,r6,3
   8e624:	003fbc06 	br	8e518 <_malloc_r+0xb4>
   8e628:	8804d1ba 	srli	r2,r17,6
   8e62c:	11800e04 	addi	r6,r2,56
   8e630:	300490fa 	slli	r2,r6,3
   8e634:	003fb806 	br	8e518 <_malloc_r+0xb4>
   8e638:	00807fc4 	movi	r2,511
   8e63c:	1140bb36 	bltu	r2,r5,8e92c <_malloc_r+0x4c8>
   8e640:	2806d0fa 	srli	r3,r5,3
   8e644:	573ffe04 	addi	fp,r10,-8
   8e648:	00800044 	movi	r2,1
   8e64c:	180890fa 	slli	r4,r3,3
   8e650:	1807d0ba 	srai	r3,r3,2
   8e654:	e1c00117 	ldw	r7,4(fp)
   8e658:	5909883a 	add	r4,r11,r4
   8e65c:	21400217 	ldw	r5,8(r4)
   8e660:	10c4983a 	sll	r2,r2,r3
   8e664:	81000315 	stw	r4,12(r16)
   8e668:	81400215 	stw	r5,8(r16)
   8e66c:	388eb03a 	or	r7,r7,r2
   8e670:	2c000315 	stw	r16,12(r5)
   8e674:	24000215 	stw	r16,8(r4)
   8e678:	e1c00115 	stw	r7,4(fp)
   8e67c:	4807883a 	mov	r3,r9
   8e680:	4800cd16 	blt	r9,zero,8e9b8 <_malloc_r+0x554>
   8e684:	1807d0ba 	srai	r3,r3,2
   8e688:	00800044 	movi	r2,1
   8e68c:	10c8983a 	sll	r4,r2,r3
   8e690:	39004436 	bltu	r7,r4,8e7a4 <_malloc_r+0x340>
   8e694:	21c4703a 	and	r2,r4,r7
   8e698:	10000a1e 	bne	r2,zero,8e6c4 <_malloc_r+0x260>
   8e69c:	2109883a 	add	r4,r4,r4
   8e6a0:	00bfff04 	movi	r2,-4
   8e6a4:	4884703a 	and	r2,r9,r2
   8e6a8:	3906703a 	and	r3,r7,r4
   8e6ac:	12400104 	addi	r9,r2,4
   8e6b0:	1800041e 	bne	r3,zero,8e6c4 <_malloc_r+0x260>
   8e6b4:	2109883a 	add	r4,r4,r4
   8e6b8:	3904703a 	and	r2,r7,r4
   8e6bc:	4a400104 	addi	r9,r9,4
   8e6c0:	103ffc26 	beq	r2,zero,8e6b4 <_malloc_r+0x250>
   8e6c4:	480490fa 	slli	r2,r9,3
   8e6c8:	4819883a 	mov	r12,r9
   8e6cc:	023fff04 	movi	r8,-4
   8e6d0:	589b883a 	add	r13,r11,r2
   8e6d4:	6807883a 	mov	r3,r13
   8e6d8:	014003c4 	movi	r5,15
   8e6dc:	1c000317 	ldw	r16,12(r3)
   8e6e0:	1c00041e 	bne	r3,r16,8e6f4 <_malloc_r+0x290>
   8e6e4:	0000a706 	br	8e984 <_malloc_r+0x520>
   8e6e8:	3000ab0e 	bge	r6,zero,8e998 <_malloc_r+0x534>
   8e6ec:	84000317 	ldw	r16,12(r16)
   8e6f0:	1c00a426 	beq	r3,r16,8e984 <_malloc_r+0x520>
   8e6f4:	80800117 	ldw	r2,4(r16)
   8e6f8:	1204703a 	and	r2,r2,r8
   8e6fc:	144dc83a 	sub	r6,r2,r17
   8e700:	29bff90e 	bge	r5,r6,8e6e8 <_malloc_r+0x284>
   8e704:	81000317 	ldw	r4,12(r16)
   8e708:	80c00217 	ldw	r3,8(r16)
   8e70c:	89400054 	ori	r5,r17,1
   8e710:	8445883a 	add	r2,r16,r17
   8e714:	20c00215 	stw	r3,8(r4)
   8e718:	19000315 	stw	r4,12(r3)
   8e71c:	81400115 	stw	r5,4(r16)
   8e720:	1187883a 	add	r3,r2,r6
   8e724:	31000054 	ori	r4,r6,1
   8e728:	50800315 	stw	r2,12(r10)
   8e72c:	50800215 	stw	r2,8(r10)
   8e730:	19800015 	stw	r6,0(r3)
   8e734:	11000115 	stw	r4,4(r2)
   8e738:	12800215 	stw	r10,8(r2)
   8e73c:	12800315 	stw	r10,12(r2)
   8e740:	9009883a 	mov	r4,r18
   8e744:	00984b00 	call	984b0 <__malloc_unlock>
   8e748:	80c00204 	addi	r3,r16,8
   8e74c:	003f5906 	br	8e4b4 <_malloc_r+0x50>
   8e750:	8109883a 	add	r4,r16,r4
   8e754:	20800117 	ldw	r2,4(r4)
   8e758:	80c00217 	ldw	r3,8(r16)
   8e75c:	81400317 	ldw	r5,12(r16)
   8e760:	10800054 	ori	r2,r2,1
   8e764:	20800115 	stw	r2,4(r4)
   8e768:	28c00215 	stw	r3,8(r5)
   8e76c:	19400315 	stw	r5,12(r3)
   8e770:	9009883a 	mov	r4,r18
   8e774:	00984b00 	call	984b0 <__malloc_unlock>
   8e778:	80c00204 	addi	r3,r16,8
   8e77c:	003f4d06 	br	8e4b4 <_malloc_r+0x50>
   8e780:	80800204 	addi	r2,r16,8
   8e784:	14000317 	ldw	r16,12(r2)
   8e788:	143f911e 	bne	r2,r16,8e5d0 <_malloc_r+0x16c>
   8e78c:	1a400084 	addi	r9,r3,2
   8e790:	003f7306 	br	8e560 <_malloc_r+0xfc>
   8e794:	88c00054 	ori	r3,r17,1
   8e798:	8445883a 	add	r2,r16,r17
   8e79c:	80c00115 	stw	r3,4(r16)
   8e7a0:	003fdf06 	br	8e720 <_malloc_r+0x2bc>
   8e7a4:	e4000217 	ldw	r16,8(fp)
   8e7a8:	00bfff04 	movi	r2,-4
   8e7ac:	80c00117 	ldw	r3,4(r16)
   8e7b0:	802d883a 	mov	r22,r16
   8e7b4:	18aa703a 	and	r21,r3,r2
   8e7b8:	ac401636 	bltu	r21,r17,8e814 <_malloc_r+0x3b0>
   8e7bc:	ac49c83a 	sub	r4,r21,r17
   8e7c0:	008003c4 	movi	r2,15
   8e7c4:	1100130e 	bge	r2,r4,8e814 <_malloc_r+0x3b0>
   8e7c8:	88800054 	ori	r2,r17,1
   8e7cc:	8447883a 	add	r3,r16,r17
   8e7d0:	80800115 	stw	r2,4(r16)
   8e7d4:	20800054 	ori	r2,r4,1
   8e7d8:	18800115 	stw	r2,4(r3)
   8e7dc:	e0c00215 	stw	r3,8(fp)
   8e7e0:	9009883a 	mov	r4,r18
   8e7e4:	00984b00 	call	984b0 <__malloc_unlock>
   8e7e8:	80c00204 	addi	r3,r16,8
   8e7ec:	003f3106 	br	8e4b4 <_malloc_r+0x50>
   8e7f0:	39c00117 	ldw	r7,4(r7)
   8e7f4:	573ffe04 	addi	fp,r10,-8
   8e7f8:	003fa006 	br	8e67c <_malloc_r+0x218>
   8e7fc:	00801504 	movi	r2,84
   8e800:	10c06736 	bltu	r2,r3,8e9a0 <_malloc_r+0x53c>
   8e804:	8804d33a 	srli	r2,r17,12
   8e808:	11801b84 	addi	r6,r2,110
   8e80c:	300490fa 	slli	r2,r6,3
   8e810:	003f4106 	br	8e518 <_malloc_r+0xb4>
   8e814:	d0a7b217 	ldw	r2,-24888(gp)
   8e818:	d0e00617 	ldw	r3,-32744(gp)
   8e81c:	053fffc4 	movi	r20,-1
   8e820:	10800404 	addi	r2,r2,16
   8e824:	88a7883a 	add	r19,r17,r2
   8e828:	1d000326 	beq	r3,r20,8e838 <_malloc_r+0x3d4>
   8e82c:	98c3ffc4 	addi	r3,r19,4095
   8e830:	00bc0004 	movi	r2,-4096
   8e834:	18a6703a 	and	r19,r3,r2
   8e838:	9009883a 	mov	r4,r18
   8e83c:	980b883a 	mov	r5,r19
   8e840:	008f1640 	call	8f164 <_sbrk_r>
   8e844:	1009883a 	mov	r4,r2
   8e848:	15000426 	beq	r2,r20,8e85c <_malloc_r+0x3f8>
   8e84c:	854b883a 	add	r5,r16,r21
   8e850:	1029883a 	mov	r20,r2
   8e854:	11405a2e 	bgeu	r2,r5,8e9c0 <_malloc_r+0x55c>
   8e858:	87000c26 	beq	r16,fp,8e88c <_malloc_r+0x428>
   8e85c:	e4000217 	ldw	r16,8(fp)
   8e860:	80c00117 	ldw	r3,4(r16)
   8e864:	00bfff04 	movi	r2,-4
   8e868:	1884703a 	and	r2,r3,r2
   8e86c:	14400336 	bltu	r2,r17,8e87c <_malloc_r+0x418>
   8e870:	1449c83a 	sub	r4,r2,r17
   8e874:	008003c4 	movi	r2,15
   8e878:	113fd316 	blt	r2,r4,8e7c8 <_malloc_r+0x364>
   8e87c:	9009883a 	mov	r4,r18
   8e880:	00984b00 	call	984b0 <__malloc_unlock>
   8e884:	0007883a 	mov	r3,zero
   8e888:	003f0a06 	br	8e4b4 <_malloc_r+0x50>
   8e88c:	05c002b4 	movhi	r23,10
   8e890:	bdc97504 	addi	r23,r23,9684
   8e894:	b8800017 	ldw	r2,0(r23)
   8e898:	988d883a 	add	r6,r19,r2
   8e89c:	b9800015 	stw	r6,0(r23)
   8e8a0:	d0e00617 	ldw	r3,-32744(gp)
   8e8a4:	00bfffc4 	movi	r2,-1
   8e8a8:	18808e26 	beq	r3,r2,8eae4 <_malloc_r+0x680>
   8e8ac:	2145c83a 	sub	r2,r4,r5
   8e8b0:	3085883a 	add	r2,r6,r2
   8e8b4:	b8800015 	stw	r2,0(r23)
   8e8b8:	20c001cc 	andi	r3,r4,7
   8e8bc:	18005f1e 	bne	r3,zero,8ea3c <_malloc_r+0x5d8>
   8e8c0:	000b883a 	mov	r5,zero
   8e8c4:	a4c5883a 	add	r2,r20,r19
   8e8c8:	1083ffcc 	andi	r2,r2,4095
   8e8cc:	00c40004 	movi	r3,4096
   8e8d0:	1887c83a 	sub	r3,r3,r2
   8e8d4:	28e7883a 	add	r19,r5,r3
   8e8d8:	9009883a 	mov	r4,r18
   8e8dc:	980b883a 	mov	r5,r19
   8e8e0:	008f1640 	call	8f164 <_sbrk_r>
   8e8e4:	1007883a 	mov	r3,r2
   8e8e8:	00bfffc4 	movi	r2,-1
   8e8ec:	18807a26 	beq	r3,r2,8ead8 <_malloc_r+0x674>
   8e8f0:	1d05c83a 	sub	r2,r3,r20
   8e8f4:	9885883a 	add	r2,r19,r2
   8e8f8:	10c00054 	ori	r3,r2,1
   8e8fc:	b8800017 	ldw	r2,0(r23)
   8e900:	a021883a 	mov	r16,r20
   8e904:	a0c00115 	stw	r3,4(r20)
   8e908:	9885883a 	add	r2,r19,r2
   8e90c:	b8800015 	stw	r2,0(r23)
   8e910:	e5000215 	stw	r20,8(fp)
   8e914:	b7003626 	beq	r22,fp,8e9f0 <_malloc_r+0x58c>
   8e918:	018003c4 	movi	r6,15
   8e91c:	35404b36 	bltu	r6,r21,8ea4c <_malloc_r+0x5e8>
   8e920:	00800044 	movi	r2,1
   8e924:	a0800115 	stw	r2,4(r20)
   8e928:	003fcd06 	br	8e860 <_malloc_r+0x3fc>
   8e92c:	2808d27a 	srli	r4,r5,9
   8e930:	2000371e 	bne	r4,zero,8ea10 <_malloc_r+0x5ac>
   8e934:	2808d0fa 	srli	r4,r5,3
   8e938:	200690fa 	slli	r3,r4,3
   8e93c:	1ad1883a 	add	r8,r3,r11
   8e940:	41800217 	ldw	r6,8(r8)
   8e944:	41805b26 	beq	r8,r6,8eab4 <_malloc_r+0x650>
   8e948:	30800117 	ldw	r2,4(r6)
   8e94c:	00ffff04 	movi	r3,-4
   8e950:	10c4703a 	and	r2,r2,r3
   8e954:	2880022e 	bgeu	r5,r2,8e960 <_malloc_r+0x4fc>
   8e958:	31800217 	ldw	r6,8(r6)
   8e95c:	41bffa1e 	bne	r8,r6,8e948 <_malloc_r+0x4e4>
   8e960:	32000317 	ldw	r8,12(r6)
   8e964:	39c00117 	ldw	r7,4(r7)
   8e968:	82000315 	stw	r8,12(r16)
   8e96c:	81800215 	stw	r6,8(r16)
   8e970:	070002b4 	movhi	fp,10
   8e974:	e73bce04 	addi	fp,fp,-4296
   8e978:	34000315 	stw	r16,12(r6)
   8e97c:	44000215 	stw	r16,8(r8)
   8e980:	003f3e06 	br	8e67c <_malloc_r+0x218>
   8e984:	63000044 	addi	r12,r12,1
   8e988:	608000cc 	andi	r2,r12,3
   8e98c:	10005d26 	beq	r2,zero,8eb04 <_malloc_r+0x6a0>
   8e990:	18c00204 	addi	r3,r3,8
   8e994:	003f5106 	br	8e6dc <_malloc_r+0x278>
   8e998:	8089883a 	add	r4,r16,r2
   8e99c:	003f6d06 	br	8e754 <_malloc_r+0x2f0>
   8e9a0:	00805504 	movi	r2,340
   8e9a4:	10c02036 	bltu	r2,r3,8ea28 <_malloc_r+0x5c4>
   8e9a8:	8804d3fa 	srli	r2,r17,15
   8e9ac:	11801dc4 	addi	r6,r2,119
   8e9b0:	300490fa 	slli	r2,r6,3
   8e9b4:	003ed806 	br	8e518 <_malloc_r+0xb4>
   8e9b8:	48c000c4 	addi	r3,r9,3
   8e9bc:	003f3106 	br	8e684 <_malloc_r+0x220>
   8e9c0:	05c002b4 	movhi	r23,10
   8e9c4:	bdc97504 	addi	r23,r23,9684
   8e9c8:	b8800017 	ldw	r2,0(r23)
   8e9cc:	988d883a 	add	r6,r19,r2
   8e9d0:	b9800015 	stw	r6,0(r23)
   8e9d4:	293fb21e 	bne	r5,r4,8e8a0 <_malloc_r+0x43c>
   8e9d8:	2083ffcc 	andi	r2,r4,4095
   8e9dc:	103fb01e 	bne	r2,zero,8e8a0 <_malloc_r+0x43c>
   8e9e0:	e4000217 	ldw	r16,8(fp)
   8e9e4:	9d45883a 	add	r2,r19,r21
   8e9e8:	10800054 	ori	r2,r2,1
   8e9ec:	80800115 	stw	r2,4(r16)
   8e9f0:	b8c00017 	ldw	r3,0(r23)
   8e9f4:	d0a7b317 	ldw	r2,-24884(gp)
   8e9f8:	10c0012e 	bgeu	r2,r3,8ea00 <_malloc_r+0x59c>
   8e9fc:	d0e7b315 	stw	r3,-24884(gp)
   8ea00:	d0a7b417 	ldw	r2,-24880(gp)
   8ea04:	10ff962e 	bgeu	r2,r3,8e860 <_malloc_r+0x3fc>
   8ea08:	d0e7b415 	stw	r3,-24880(gp)
   8ea0c:	003f9406 	br	8e860 <_malloc_r+0x3fc>
   8ea10:	00800104 	movi	r2,4
   8ea14:	11001e36 	bltu	r2,r4,8ea90 <_malloc_r+0x62c>
   8ea18:	2804d1ba 	srli	r2,r5,6
   8ea1c:	11000e04 	addi	r4,r2,56
   8ea20:	200690fa 	slli	r3,r4,3
   8ea24:	003fc506 	br	8e93c <_malloc_r+0x4d8>
   8ea28:	00815504 	movi	r2,1364
   8ea2c:	10c01d2e 	bgeu	r2,r3,8eaa4 <_malloc_r+0x640>
   8ea30:	01801f84 	movi	r6,126
   8ea34:	0080fc04 	movi	r2,1008
   8ea38:	003eb706 	br	8e518 <_malloc_r+0xb4>
   8ea3c:	00800204 	movi	r2,8
   8ea40:	10cbc83a 	sub	r5,r2,r3
   8ea44:	2169883a 	add	r20,r4,r5
   8ea48:	003f9e06 	br	8e8c4 <_malloc_r+0x460>
   8ea4c:	00bffe04 	movi	r2,-8
   8ea50:	a93ffd04 	addi	r4,r21,-12
   8ea54:	2088703a 	and	r4,r4,r2
   8ea58:	b10b883a 	add	r5,r22,r4
   8ea5c:	00c00144 	movi	r3,5
   8ea60:	28c00215 	stw	r3,8(r5)
   8ea64:	28c00115 	stw	r3,4(r5)
   8ea68:	b0800117 	ldw	r2,4(r22)
   8ea6c:	1080004c 	andi	r2,r2,1
   8ea70:	2084b03a 	or	r2,r4,r2
   8ea74:	b0800115 	stw	r2,4(r22)
   8ea78:	313fdd2e 	bgeu	r6,r4,8e9f0 <_malloc_r+0x58c>
   8ea7c:	b1400204 	addi	r5,r22,8
   8ea80:	9009883a 	mov	r4,r18
   8ea84:	009343c0 	call	9343c <_free_r>
   8ea88:	e4000217 	ldw	r16,8(fp)
   8ea8c:	003fd806 	br	8e9f0 <_malloc_r+0x58c>
   8ea90:	00800504 	movi	r2,20
   8ea94:	11001536 	bltu	r2,r4,8eaec <_malloc_r+0x688>
   8ea98:	210016c4 	addi	r4,r4,91
   8ea9c:	200690fa 	slli	r3,r4,3
   8eaa0:	003fa606 	br	8e93c <_malloc_r+0x4d8>
   8eaa4:	8804d4ba 	srli	r2,r17,18
   8eaa8:	11801f04 	addi	r6,r2,124
   8eaac:	300490fa 	slli	r2,r6,3
   8eab0:	003e9906 	br	8e518 <_malloc_r+0xb4>
   8eab4:	2009d0ba 	srai	r4,r4,2
   8eab8:	014002b4 	movhi	r5,10
   8eabc:	297bce04 	addi	r5,r5,-4296
   8eac0:	00c00044 	movi	r3,1
   8eac4:	28800117 	ldw	r2,4(r5)
   8eac8:	1906983a 	sll	r3,r3,r4
   8eacc:	10c4b03a 	or	r2,r2,r3
   8ead0:	28800115 	stw	r2,4(r5)
   8ead4:	003fa306 	br	8e964 <_malloc_r+0x500>
   8ead8:	0027883a 	mov	r19,zero
   8eadc:	00c00044 	movi	r3,1
   8eae0:	003f8606 	br	8e8fc <_malloc_r+0x498>
   8eae4:	d1200615 	stw	r4,-32744(gp)
   8eae8:	003f7306 	br	8e8b8 <_malloc_r+0x454>
   8eaec:	00801504 	movi	r2,84
   8eaf0:	11001936 	bltu	r2,r4,8eb58 <_malloc_r+0x6f4>
   8eaf4:	2804d33a 	srli	r2,r5,12
   8eaf8:	11001b84 	addi	r4,r2,110
   8eafc:	200690fa 	slli	r3,r4,3
   8eb00:	003f8e06 	br	8e93c <_malloc_r+0x4d8>
   8eb04:	480b883a 	mov	r5,r9
   8eb08:	6807883a 	mov	r3,r13
   8eb0c:	288000cc 	andi	r2,r5,3
   8eb10:	18fffe04 	addi	r3,r3,-8
   8eb14:	297fffc4 	addi	r5,r5,-1
   8eb18:	10001526 	beq	r2,zero,8eb70 <_malloc_r+0x70c>
   8eb1c:	18800217 	ldw	r2,8(r3)
   8eb20:	10fffa26 	beq	r2,r3,8eb0c <_malloc_r+0x6a8>
   8eb24:	2109883a 	add	r4,r4,r4
   8eb28:	393f1e36 	bltu	r7,r4,8e7a4 <_malloc_r+0x340>
   8eb2c:	203f1d26 	beq	r4,zero,8e7a4 <_malloc_r+0x340>
   8eb30:	21c4703a 	and	r2,r4,r7
   8eb34:	10000226 	beq	r2,zero,8eb40 <_malloc_r+0x6dc>
   8eb38:	6013883a 	mov	r9,r12
   8eb3c:	003ee106 	br	8e6c4 <_malloc_r+0x260>
   8eb40:	2109883a 	add	r4,r4,r4
   8eb44:	3904703a 	and	r2,r7,r4
   8eb48:	63000104 	addi	r12,r12,4
   8eb4c:	103ffc26 	beq	r2,zero,8eb40 <_malloc_r+0x6dc>
   8eb50:	6013883a 	mov	r9,r12
   8eb54:	003edb06 	br	8e6c4 <_malloc_r+0x260>
   8eb58:	00805504 	movi	r2,340
   8eb5c:	11000836 	bltu	r2,r4,8eb80 <_malloc_r+0x71c>
   8eb60:	2804d3fa 	srli	r2,r5,15
   8eb64:	11001dc4 	addi	r4,r2,119
   8eb68:	200690fa 	slli	r3,r4,3
   8eb6c:	003f7306 	br	8e93c <_malloc_r+0x4d8>
   8eb70:	0104303a 	nor	r2,zero,r4
   8eb74:	388e703a 	and	r7,r7,r2
   8eb78:	e1c00115 	stw	r7,4(fp)
   8eb7c:	003fe906 	br	8eb24 <_malloc_r+0x6c0>
   8eb80:	00815504 	movi	r2,1364
   8eb84:	1100032e 	bgeu	r2,r4,8eb94 <_malloc_r+0x730>
   8eb88:	01001f84 	movi	r4,126
   8eb8c:	00c0fc04 	movi	r3,1008
   8eb90:	003f6a06 	br	8e93c <_malloc_r+0x4d8>
   8eb94:	2804d4ba 	srli	r2,r5,18
   8eb98:	11001f04 	addi	r4,r2,124
   8eb9c:	200690fa 	slli	r3,r4,3
   8eba0:	003f6606 	br	8e93c <_malloc_r+0x4d8>

0008eba4 <memchr>:
   8eba4:	008000c4 	movi	r2,3
   8eba8:	29403fcc 	andi	r5,r5,255
   8ebac:	2007883a 	mov	r3,r4
   8ebb0:	1180022e 	bgeu	r2,r6,8ebbc <memchr+0x18>
   8ebb4:	2084703a 	and	r2,r4,r2
   8ebb8:	10000b26 	beq	r2,zero,8ebe8 <memchr+0x44>
   8ebbc:	313fffc4 	addi	r4,r6,-1
   8ebc0:	3000051e 	bne	r6,zero,8ebd8 <memchr+0x34>
   8ebc4:	00002c06 	br	8ec78 <memchr+0xd4>
   8ebc8:	213fffc4 	addi	r4,r4,-1
   8ebcc:	00bfffc4 	movi	r2,-1
   8ebd0:	18c00044 	addi	r3,r3,1
   8ebd4:	20802826 	beq	r4,r2,8ec78 <memchr+0xd4>
   8ebd8:	18800003 	ldbu	r2,0(r3)
   8ebdc:	28bffa1e 	bne	r5,r2,8ebc8 <memchr+0x24>
   8ebe0:	1805883a 	mov	r2,r3
   8ebe4:	f800283a 	ret
   8ebe8:	0011883a 	mov	r8,zero
   8ebec:	0007883a 	mov	r3,zero
   8ebf0:	01c00104 	movi	r7,4
   8ebf4:	4004923a 	slli	r2,r8,8
   8ebf8:	18c00044 	addi	r3,r3,1
   8ebfc:	1151883a 	add	r8,r2,r5
   8ec00:	19fffc1e 	bne	r3,r7,8ebf4 <memchr+0x50>
   8ec04:	02bfbff4 	movhi	r10,65279
   8ec08:	52bfbfc4 	addi	r10,r10,-257
   8ec0c:	02602074 	movhi	r9,32897
   8ec10:	4a602004 	addi	r9,r9,-32640
   8ec14:	02c000c4 	movi	r11,3
   8ec18:	20800017 	ldw	r2,0(r4)
   8ec1c:	31bfff04 	addi	r6,r6,-4
   8ec20:	200f883a 	mov	r7,r4
   8ec24:	1204f03a 	xor	r2,r2,r8
   8ec28:	1287883a 	add	r3,r2,r10
   8ec2c:	1a46703a 	and	r3,r3,r9
   8ec30:	0084303a 	nor	r2,zero,r2
   8ec34:	10c4703a 	and	r2,r2,r3
   8ec38:	10000b26 	beq	r2,zero,8ec68 <memchr+0xc4>
   8ec3c:	20800003 	ldbu	r2,0(r4)
   8ec40:	28800f26 	beq	r5,r2,8ec80 <memchr+0xdc>
   8ec44:	20800043 	ldbu	r2,1(r4)
   8ec48:	21c00044 	addi	r7,r4,1
   8ec4c:	28800c26 	beq	r5,r2,8ec80 <memchr+0xdc>
   8ec50:	20800083 	ldbu	r2,2(r4)
   8ec54:	21c00084 	addi	r7,r4,2
   8ec58:	28800926 	beq	r5,r2,8ec80 <memchr+0xdc>
   8ec5c:	208000c3 	ldbu	r2,3(r4)
   8ec60:	21c000c4 	addi	r7,r4,3
   8ec64:	28800626 	beq	r5,r2,8ec80 <memchr+0xdc>
   8ec68:	21000104 	addi	r4,r4,4
   8ec6c:	59bfea36 	bltu	r11,r6,8ec18 <memchr+0x74>
   8ec70:	2007883a 	mov	r3,r4
   8ec74:	003fd106 	br	8ebbc <memchr+0x18>
   8ec78:	0005883a 	mov	r2,zero
   8ec7c:	f800283a 	ret
   8ec80:	3805883a 	mov	r2,r7
   8ec84:	f800283a 	ret

0008ec88 <memcmp>:
   8ec88:	00c000c4 	movi	r3,3
   8ec8c:	1980032e 	bgeu	r3,r6,8ec9c <memcmp+0x14>
   8ec90:	2144b03a 	or	r2,r4,r5
   8ec94:	10c4703a 	and	r2,r2,r3
   8ec98:	10000f26 	beq	r2,zero,8ecd8 <memcmp+0x50>
   8ec9c:	31ffffc4 	addi	r7,r6,-1
   8eca0:	3000061e 	bne	r6,zero,8ecbc <memcmp+0x34>
   8eca4:	00000a06 	br	8ecd0 <memcmp+0x48>
   8eca8:	39ffffc4 	addi	r7,r7,-1
   8ecac:	00bfffc4 	movi	r2,-1
   8ecb0:	21000044 	addi	r4,r4,1
   8ecb4:	29400044 	addi	r5,r5,1
   8ecb8:	38800526 	beq	r7,r2,8ecd0 <memcmp+0x48>
   8ecbc:	20c00003 	ldbu	r3,0(r4)
   8ecc0:	28800003 	ldbu	r2,0(r5)
   8ecc4:	18bff826 	beq	r3,r2,8eca8 <memcmp+0x20>
   8ecc8:	1885c83a 	sub	r2,r3,r2
   8eccc:	f800283a 	ret
   8ecd0:	0005883a 	mov	r2,zero
   8ecd4:	f800283a 	ret
   8ecd8:	180f883a 	mov	r7,r3
   8ecdc:	20c00017 	ldw	r3,0(r4)
   8ece0:	28800017 	ldw	r2,0(r5)
   8ece4:	18bfed1e 	bne	r3,r2,8ec9c <memcmp+0x14>
   8ece8:	31bfff04 	addi	r6,r6,-4
   8ecec:	21000104 	addi	r4,r4,4
   8ecf0:	29400104 	addi	r5,r5,4
   8ecf4:	39bff936 	bltu	r7,r6,8ecdc <memcmp+0x54>
   8ecf8:	003fe806 	br	8ec9c <memcmp+0x14>

0008ecfc <memcpy>:
   8ecfc:	01c003c4 	movi	r7,15
   8ed00:	2007883a 	mov	r3,r4
   8ed04:	3980032e 	bgeu	r7,r6,8ed14 <memcpy+0x18>
   8ed08:	2904b03a 	or	r2,r5,r4
   8ed0c:	108000cc 	andi	r2,r2,3
   8ed10:	10000926 	beq	r2,zero,8ed38 <memcpy+0x3c>
   8ed14:	30000626 	beq	r6,zero,8ed30 <memcpy+0x34>
   8ed18:	30cd883a 	add	r6,r6,r3
   8ed1c:	28800003 	ldbu	r2,0(r5)
   8ed20:	29400044 	addi	r5,r5,1
   8ed24:	18800005 	stb	r2,0(r3)
   8ed28:	18c00044 	addi	r3,r3,1
   8ed2c:	30fffb1e 	bne	r6,r3,8ed1c <memcpy+0x20>
   8ed30:	2005883a 	mov	r2,r4
   8ed34:	f800283a 	ret
   8ed38:	3811883a 	mov	r8,r7
   8ed3c:	200f883a 	mov	r7,r4
   8ed40:	28c00017 	ldw	r3,0(r5)
   8ed44:	31bffc04 	addi	r6,r6,-16
   8ed48:	38c00015 	stw	r3,0(r7)
   8ed4c:	28800117 	ldw	r2,4(r5)
   8ed50:	38800115 	stw	r2,4(r7)
   8ed54:	28c00217 	ldw	r3,8(r5)
   8ed58:	38c00215 	stw	r3,8(r7)
   8ed5c:	28800317 	ldw	r2,12(r5)
   8ed60:	29400404 	addi	r5,r5,16
   8ed64:	38800315 	stw	r2,12(r7)
   8ed68:	39c00404 	addi	r7,r7,16
   8ed6c:	41bff436 	bltu	r8,r6,8ed40 <memcpy+0x44>
   8ed70:	008000c4 	movi	r2,3
   8ed74:	1180072e 	bgeu	r2,r6,8ed94 <memcpy+0x98>
   8ed78:	1007883a 	mov	r3,r2
   8ed7c:	28800017 	ldw	r2,0(r5)
   8ed80:	31bfff04 	addi	r6,r6,-4
   8ed84:	29400104 	addi	r5,r5,4
   8ed88:	38800015 	stw	r2,0(r7)
   8ed8c:	39c00104 	addi	r7,r7,4
   8ed90:	19bffa36 	bltu	r3,r6,8ed7c <memcpy+0x80>
   8ed94:	3807883a 	mov	r3,r7
   8ed98:	003fde06 	br	8ed14 <memcpy+0x18>

0008ed9c <memset>:
   8ed9c:	008000c4 	movi	r2,3
   8eda0:	29403fcc 	andi	r5,r5,255
   8eda4:	2007883a 	mov	r3,r4
   8eda8:	1180022e 	bgeu	r2,r6,8edb4 <memset+0x18>
   8edac:	2084703a 	and	r2,r4,r2
   8edb0:	10000826 	beq	r2,zero,8edd4 <memset+0x38>
   8edb4:	30000526 	beq	r6,zero,8edcc <memset+0x30>
   8edb8:	2805883a 	mov	r2,r5
   8edbc:	30cd883a 	add	r6,r6,r3
   8edc0:	18800005 	stb	r2,0(r3)
   8edc4:	18c00044 	addi	r3,r3,1
   8edc8:	19bffd1e 	bne	r3,r6,8edc0 <memset+0x24>
   8edcc:	2005883a 	mov	r2,r4
   8edd0:	f800283a 	ret
   8edd4:	2804923a 	slli	r2,r5,8
   8edd8:	020003c4 	movi	r8,15
   8eddc:	200f883a 	mov	r7,r4
   8ede0:	2884b03a 	or	r2,r5,r2
   8ede4:	1006943a 	slli	r3,r2,16
   8ede8:	10c6b03a 	or	r3,r2,r3
   8edec:	41800a2e 	bgeu	r8,r6,8ee18 <memset+0x7c>
   8edf0:	4005883a 	mov	r2,r8
   8edf4:	31bffc04 	addi	r6,r6,-16
   8edf8:	38c00015 	stw	r3,0(r7)
   8edfc:	38c00115 	stw	r3,4(r7)
   8ee00:	38c00215 	stw	r3,8(r7)
   8ee04:	38c00315 	stw	r3,12(r7)
   8ee08:	39c00404 	addi	r7,r7,16
   8ee0c:	11bff936 	bltu	r2,r6,8edf4 <memset+0x58>
   8ee10:	008000c4 	movi	r2,3
   8ee14:	1180052e 	bgeu	r2,r6,8ee2c <memset+0x90>
   8ee18:	31bfff04 	addi	r6,r6,-4
   8ee1c:	008000c4 	movi	r2,3
   8ee20:	38c00015 	stw	r3,0(r7)
   8ee24:	39c00104 	addi	r7,r7,4
   8ee28:	11bffb36 	bltu	r2,r6,8ee18 <memset+0x7c>
   8ee2c:	3807883a 	mov	r3,r7
   8ee30:	003fe006 	br	8edb4 <memset+0x18>

0008ee34 <printf>:
   8ee34:	defffb04 	addi	sp,sp,-20
   8ee38:	dfc00115 	stw	ra,4(sp)
   8ee3c:	d9400215 	stw	r5,8(sp)
   8ee40:	d9800315 	stw	r6,12(sp)
   8ee44:	d9c00415 	stw	r7,16(sp)
   8ee48:	008002b4 	movhi	r2,10
   8ee4c:	1081b804 	addi	r2,r2,1760
   8ee50:	10c00017 	ldw	r3,0(r2)
   8ee54:	200b883a 	mov	r5,r4
   8ee58:	d8800204 	addi	r2,sp,8
   8ee5c:	19000217 	ldw	r4,8(r3)
   8ee60:	100d883a 	mov	r6,r2
   8ee64:	d8800015 	stw	r2,0(sp)
   8ee68:	00915a80 	call	915a8 <__vfprintf_internal>
   8ee6c:	dfc00117 	ldw	ra,4(sp)
   8ee70:	dec00504 	addi	sp,sp,20
   8ee74:	f800283a 	ret

0008ee78 <_printf_r>:
   8ee78:	defffc04 	addi	sp,sp,-16
   8ee7c:	dfc00115 	stw	ra,4(sp)
   8ee80:	d9800215 	stw	r6,8(sp)
   8ee84:	d9c00315 	stw	r7,12(sp)
   8ee88:	280d883a 	mov	r6,r5
   8ee8c:	21400217 	ldw	r5,8(r4)
   8ee90:	d8c00204 	addi	r3,sp,8
   8ee94:	180f883a 	mov	r7,r3
   8ee98:	d8c00015 	stw	r3,0(sp)
   8ee9c:	008f6fc0 	call	8f6fc <___vfprintf_internal_r>
   8eea0:	dfc00117 	ldw	ra,4(sp)
   8eea4:	dec00404 	addi	sp,sp,16
   8eea8:	f800283a 	ret

0008eeac <putchar>:
   8eeac:	008002b4 	movhi	r2,10
   8eeb0:	1081b804 	addi	r2,r2,1760
   8eeb4:	11800017 	ldw	r6,0(r2)
   8eeb8:	200b883a 	mov	r5,r4
   8eebc:	3009883a 	mov	r4,r6
   8eec0:	31800217 	ldw	r6,8(r6)
   8eec4:	00950941 	jmpi	95094 <_putc_r>

0008eec8 <_putchar_r>:
   8eec8:	21800217 	ldw	r6,8(r4)
   8eecc:	00950941 	jmpi	95094 <_putc_r>

0008eed0 <_puts_r>:
   8eed0:	defff604 	addi	sp,sp,-40
   8eed4:	dc400715 	stw	r17,28(sp)
   8eed8:	2023883a 	mov	r17,r4
   8eedc:	2809883a 	mov	r4,r5
   8eee0:	dfc00915 	stw	ra,36(sp)
   8eee4:	dcc00815 	stw	r19,32(sp)
   8eee8:	2827883a 	mov	r19,r5
   8eeec:	008f3200 	call	8f320 <strlen>
   8eef0:	89400217 	ldw	r5,8(r17)
   8eef4:	00c002b4 	movhi	r3,10
   8eef8:	18f8fa04 	addi	r3,r3,-7192
   8eefc:	01c00044 	movi	r7,1
   8ef00:	12000044 	addi	r8,r2,1
   8ef04:	d8c00515 	stw	r3,20(sp)
   8ef08:	d9c00615 	stw	r7,24(sp)
   8ef0c:	d8c00304 	addi	r3,sp,12
   8ef10:	01c00084 	movi	r7,2
   8ef14:	8809883a 	mov	r4,r17
   8ef18:	d80d883a 	mov	r6,sp
   8ef1c:	d8c00015 	stw	r3,0(sp)
   8ef20:	dcc00315 	stw	r19,12(sp)
   8ef24:	da000215 	stw	r8,8(sp)
   8ef28:	d9c00115 	stw	r7,4(sp)
   8ef2c:	d8800415 	stw	r2,16(sp)
   8ef30:	00937500 	call	93750 <__sfvwrite_r>
   8ef34:	00ffffc4 	movi	r3,-1
   8ef38:	10000626 	beq	r2,zero,8ef54 <_puts_r+0x84>
   8ef3c:	1805883a 	mov	r2,r3
   8ef40:	dfc00917 	ldw	ra,36(sp)
   8ef44:	dcc00817 	ldw	r19,32(sp)
   8ef48:	dc400717 	ldw	r17,28(sp)
   8ef4c:	dec00a04 	addi	sp,sp,40
   8ef50:	f800283a 	ret
   8ef54:	00c00284 	movi	r3,10
   8ef58:	1805883a 	mov	r2,r3
   8ef5c:	dfc00917 	ldw	ra,36(sp)
   8ef60:	dcc00817 	ldw	r19,32(sp)
   8ef64:	dc400717 	ldw	r17,28(sp)
   8ef68:	dec00a04 	addi	sp,sp,40
   8ef6c:	f800283a 	ret

0008ef70 <puts>:
   8ef70:	008002b4 	movhi	r2,10
   8ef74:	1081b804 	addi	r2,r2,1760
   8ef78:	200b883a 	mov	r5,r4
   8ef7c:	11000017 	ldw	r4,0(r2)
   8ef80:	008eed01 	jmpi	8eed0 <_puts_r>

0008ef84 <__srefill_r>:
   8ef84:	defffd04 	addi	sp,sp,-12
   8ef88:	dc400115 	stw	r17,4(sp)
   8ef8c:	dc000015 	stw	r16,0(sp)
   8ef90:	dfc00215 	stw	ra,8(sp)
   8ef94:	2023883a 	mov	r17,r4
   8ef98:	2821883a 	mov	r16,r5
   8ef9c:	20000226 	beq	r4,zero,8efa8 <__srefill_r+0x24>
   8efa0:	20800e17 	ldw	r2,56(r4)
   8efa4:	10004126 	beq	r2,zero,8f0ac <__srefill_r+0x128>
   8efa8:	80c0030b 	ldhu	r3,12(r16)
   8efac:	80000115 	stw	zero,4(r16)
   8efb0:	1880080c 	andi	r2,r3,32
   8efb4:	1000361e 	bne	r2,zero,8f090 <__srefill_r+0x10c>
   8efb8:	1880010c 	andi	r2,r3,4
   8efbc:	1000211e 	bne	r2,zero,8f044 <__srefill_r+0xc0>
   8efc0:	1880040c 	andi	r2,r3,16
   8efc4:	10005026 	beq	r2,zero,8f108 <__srefill_r+0x184>
   8efc8:	1880020c 	andi	r2,r3,8
   8efcc:	1000541e 	bne	r2,zero,8f120 <__srefill_r+0x19c>
   8efd0:	8080030b 	ldhu	r2,12(r16)
   8efd4:	10800114 	ori	r2,r2,4
   8efd8:	8080030d 	sth	r2,12(r16)
   8efdc:	80800417 	ldw	r2,16(r16)
   8efe0:	10004526 	beq	r2,zero,8f0f8 <__srefill_r+0x174>
   8efe4:	8080030b 	ldhu	r2,12(r16)
   8efe8:	108000cc 	andi	r2,r2,3
   8efec:	1000361e 	bne	r2,zero,8f0c8 <__srefill_r+0x144>
   8eff0:	81800417 	ldw	r6,16(r16)
   8eff4:	80c00817 	ldw	r3,32(r16)
   8eff8:	81400717 	ldw	r5,28(r16)
   8effc:	81c00517 	ldw	r7,20(r16)
   8f000:	8809883a 	mov	r4,r17
   8f004:	81800015 	stw	r6,0(r16)
   8f008:	183ee83a 	callr	r3
   8f00c:	80c0030b 	ldhu	r3,12(r16)
   8f010:	1009883a 	mov	r4,r2
   8f014:	80800115 	stw	r2,4(r16)
   8f018:	00b7ffc4 	movi	r2,-8193
   8f01c:	1884703a 	and	r2,r3,r2
   8f020:	8080030d 	sth	r2,12(r16)
   8f024:	0100230e 	bge	zero,r4,8f0b4 <__srefill_r+0x130>
   8f028:	0009883a 	mov	r4,zero
   8f02c:	2005883a 	mov	r2,r4
   8f030:	dfc00217 	ldw	ra,8(sp)
   8f034:	dc400117 	ldw	r17,4(sp)
   8f038:	dc000017 	ldw	r16,0(sp)
   8f03c:	dec00304 	addi	sp,sp,12
   8f040:	f800283a 	ret
   8f044:	81400c17 	ldw	r5,48(r16)
   8f048:	283fe426 	beq	r5,zero,8efdc <__srefill_r+0x58>
   8f04c:	80801004 	addi	r2,r16,64
   8f050:	28800226 	beq	r5,r2,8f05c <__srefill_r+0xd8>
   8f054:	8809883a 	mov	r4,r17
   8f058:	009343c0 	call	9343c <_free_r>
   8f05c:	80800f17 	ldw	r2,60(r16)
   8f060:	80000c15 	stw	zero,48(r16)
   8f064:	80800115 	stw	r2,4(r16)
   8f068:	103fdc26 	beq	r2,zero,8efdc <__srefill_r+0x58>
   8f06c:	80800e17 	ldw	r2,56(r16)
   8f070:	0009883a 	mov	r4,zero
   8f074:	80800015 	stw	r2,0(r16)
   8f078:	2005883a 	mov	r2,r4
   8f07c:	dfc00217 	ldw	ra,8(sp)
   8f080:	dc400117 	ldw	r17,4(sp)
   8f084:	dc000017 	ldw	r16,0(sp)
   8f088:	dec00304 	addi	sp,sp,12
   8f08c:	f800283a 	ret
   8f090:	013fffc4 	movi	r4,-1
   8f094:	2005883a 	mov	r2,r4
   8f098:	dfc00217 	ldw	ra,8(sp)
   8f09c:	dc400117 	ldw	r17,4(sp)
   8f0a0:	dc000017 	ldw	r16,0(sp)
   8f0a4:	dec00304 	addi	sp,sp,12
   8f0a8:	f800283a 	ret
   8f0ac:	008e08c0 	call	8e08c <__sinit>
   8f0b0:	003fbd06 	br	8efa8 <__srefill_r+0x24>
   8f0b4:	20000b1e 	bne	r4,zero,8f0e4 <__srefill_r+0x160>
   8f0b8:	10800814 	ori	r2,r2,32
   8f0bc:	013fffc4 	movi	r4,-1
   8f0c0:	8080030d 	sth	r2,12(r16)
   8f0c4:	003fd906 	br	8f02c <__srefill_r+0xa8>
   8f0c8:	008002b4 	movhi	r2,10
   8f0cc:	1081b904 	addi	r2,r2,1764
   8f0d0:	11000017 	ldw	r4,0(r2)
   8f0d4:	01400274 	movhi	r5,9
   8f0d8:	297c5204 	addi	r5,r5,-3768
   8f0dc:	008e3ac0 	call	8e3ac <_fwalk>
   8f0e0:	003fc306 	br	8eff0 <__srefill_r+0x6c>
   8f0e4:	10801014 	ori	r2,r2,64
   8f0e8:	013fffc4 	movi	r4,-1
   8f0ec:	8080030d 	sth	r2,12(r16)
   8f0f0:	80000115 	stw	zero,4(r16)
   8f0f4:	003fcd06 	br	8f02c <__srefill_r+0xa8>
   8f0f8:	8809883a 	mov	r4,r17
   8f0fc:	800b883a 	mov	r5,r16
   8f100:	0093d280 	call	93d28 <__smakebuf_r>
   8f104:	003fb706 	br	8efe4 <__srefill_r+0x60>
   8f108:	18c01014 	ori	r3,r3,64
   8f10c:	00800244 	movi	r2,9
   8f110:	013fffc4 	movi	r4,-1
   8f114:	88800015 	stw	r2,0(r17)
   8f118:	80c0030d 	sth	r3,12(r16)
   8f11c:	003fc306 	br	8f02c <__srefill_r+0xa8>
   8f120:	8809883a 	mov	r4,r17
   8f124:	800b883a 	mov	r5,r16
   8f128:	00930e00 	call	930e0 <_fflush_r>
   8f12c:	103fd81e 	bne	r2,zero,8f090 <__srefill_r+0x10c>
   8f130:	8080030b 	ldhu	r2,12(r16)
   8f134:	80000215 	stw	zero,8(r16)
   8f138:	80000615 	stw	zero,24(r16)
   8f13c:	10bffdcc 	andi	r2,r2,65527
   8f140:	8080030d 	sth	r2,12(r16)
   8f144:	003fa206 	br	8efd0 <__srefill_r+0x4c>

0008f148 <lflush>:
   8f148:	20c0030b 	ldhu	r3,12(r4)
   8f14c:	01400244 	movi	r5,9
   8f150:	0005883a 	mov	r2,zero
   8f154:	18c0024c 	andi	r3,r3,9
   8f158:	19400126 	beq	r3,r5,8f160 <lflush+0x18>
   8f15c:	f800283a 	ret
   8f160:	00932dc1 	jmpi	932dc <fflush>

0008f164 <_sbrk_r>:
   8f164:	defffd04 	addi	sp,sp,-12
   8f168:	dc000015 	stw	r16,0(sp)
   8f16c:	040002b4 	movhi	r16,10
   8f170:	84096a04 	addi	r16,r16,9640
   8f174:	dc400115 	stw	r17,4(sp)
   8f178:	80000015 	stw	zero,0(r16)
   8f17c:	2023883a 	mov	r17,r4
   8f180:	2809883a 	mov	r4,r5
   8f184:	dfc00215 	stw	ra,8(sp)
   8f188:	00986d00 	call	986d0 <sbrk>
   8f18c:	1007883a 	mov	r3,r2
   8f190:	00bfffc4 	movi	r2,-1
   8f194:	18800626 	beq	r3,r2,8f1b0 <_sbrk_r+0x4c>
   8f198:	1805883a 	mov	r2,r3
   8f19c:	dfc00217 	ldw	ra,8(sp)
   8f1a0:	dc400117 	ldw	r17,4(sp)
   8f1a4:	dc000017 	ldw	r16,0(sp)
   8f1a8:	dec00304 	addi	sp,sp,12
   8f1ac:	f800283a 	ret
   8f1b0:	80800017 	ldw	r2,0(r16)
   8f1b4:	103ff826 	beq	r2,zero,8f198 <_sbrk_r+0x34>
   8f1b8:	88800015 	stw	r2,0(r17)
   8f1bc:	1805883a 	mov	r2,r3
   8f1c0:	dfc00217 	ldw	ra,8(sp)
   8f1c4:	dc400117 	ldw	r17,4(sp)
   8f1c8:	dc000017 	ldw	r16,0(sp)
   8f1cc:	dec00304 	addi	sp,sp,12
   8f1d0:	f800283a 	ret

0008f1d4 <__sclose>:
   8f1d4:	2940038f 	ldh	r5,14(r5)
   8f1d8:	00917801 	jmpi	91780 <_close_r>

0008f1dc <__sseek>:
   8f1dc:	defffe04 	addi	sp,sp,-8
   8f1e0:	dc000015 	stw	r16,0(sp)
   8f1e4:	2821883a 	mov	r16,r5
   8f1e8:	2940038f 	ldh	r5,14(r5)
   8f1ec:	dfc00115 	stw	ra,4(sp)
   8f1f0:	0093cb00 	call	93cb0 <_lseek_r>
   8f1f4:	1007883a 	mov	r3,r2
   8f1f8:	00bfffc4 	movi	r2,-1
   8f1fc:	18800926 	beq	r3,r2,8f224 <__sseek+0x48>
   8f200:	8080030b 	ldhu	r2,12(r16)
   8f204:	80c01415 	stw	r3,80(r16)
   8f208:	10840014 	ori	r2,r2,4096
   8f20c:	8080030d 	sth	r2,12(r16)
   8f210:	1805883a 	mov	r2,r3
   8f214:	dfc00117 	ldw	ra,4(sp)
   8f218:	dc000017 	ldw	r16,0(sp)
   8f21c:	dec00204 	addi	sp,sp,8
   8f220:	f800283a 	ret
   8f224:	8080030b 	ldhu	r2,12(r16)
   8f228:	10bbffcc 	andi	r2,r2,61439
   8f22c:	8080030d 	sth	r2,12(r16)
   8f230:	1805883a 	mov	r2,r3
   8f234:	dfc00117 	ldw	ra,4(sp)
   8f238:	dc000017 	ldw	r16,0(sp)
   8f23c:	dec00204 	addi	sp,sp,8
   8f240:	f800283a 	ret

0008f244 <__swrite>:
   8f244:	2880030b 	ldhu	r2,12(r5)
   8f248:	defffb04 	addi	sp,sp,-20
   8f24c:	dcc00315 	stw	r19,12(sp)
   8f250:	1080400c 	andi	r2,r2,256
   8f254:	dc800215 	stw	r18,8(sp)
   8f258:	dc400115 	stw	r17,4(sp)
   8f25c:	dc000015 	stw	r16,0(sp)
   8f260:	3027883a 	mov	r19,r6
   8f264:	3825883a 	mov	r18,r7
   8f268:	dfc00415 	stw	ra,16(sp)
   8f26c:	2821883a 	mov	r16,r5
   8f270:	000d883a 	mov	r6,zero
   8f274:	01c00084 	movi	r7,2
   8f278:	2023883a 	mov	r17,r4
   8f27c:	10000226 	beq	r2,zero,8f288 <__swrite+0x44>
   8f280:	2940038f 	ldh	r5,14(r5)
   8f284:	0093cb00 	call	93cb0 <_lseek_r>
   8f288:	8080030b 	ldhu	r2,12(r16)
   8f28c:	8140038f 	ldh	r5,14(r16)
   8f290:	8809883a 	mov	r4,r17
   8f294:	10bbffcc 	andi	r2,r2,61439
   8f298:	980d883a 	mov	r6,r19
   8f29c:	900f883a 	mov	r7,r18
   8f2a0:	8080030d 	sth	r2,12(r16)
   8f2a4:	dfc00417 	ldw	ra,16(sp)
   8f2a8:	dcc00317 	ldw	r19,12(sp)
   8f2ac:	dc800217 	ldw	r18,8(sp)
   8f2b0:	dc400117 	ldw	r17,4(sp)
   8f2b4:	dc000017 	ldw	r16,0(sp)
   8f2b8:	dec00504 	addi	sp,sp,20
   8f2bc:	00915cc1 	jmpi	915cc <_write_r>

0008f2c0 <__sread>:
   8f2c0:	defffe04 	addi	sp,sp,-8
   8f2c4:	dc000015 	stw	r16,0(sp)
   8f2c8:	2821883a 	mov	r16,r5
   8f2cc:	2940038f 	ldh	r5,14(r5)
   8f2d0:	dfc00115 	stw	ra,4(sp)
   8f2d4:	009517c0 	call	9517c <_read_r>
   8f2d8:	1007883a 	mov	r3,r2
   8f2dc:	10000816 	blt	r2,zero,8f300 <__sread+0x40>
   8f2e0:	80801417 	ldw	r2,80(r16)
   8f2e4:	10c5883a 	add	r2,r2,r3
   8f2e8:	80801415 	stw	r2,80(r16)
   8f2ec:	1805883a 	mov	r2,r3
   8f2f0:	dfc00117 	ldw	ra,4(sp)
   8f2f4:	dc000017 	ldw	r16,0(sp)
   8f2f8:	dec00204 	addi	sp,sp,8
   8f2fc:	f800283a 	ret
   8f300:	8080030b 	ldhu	r2,12(r16)
   8f304:	10bbffcc 	andi	r2,r2,61439
   8f308:	8080030d 	sth	r2,12(r16)
   8f30c:	1805883a 	mov	r2,r3
   8f310:	dfc00117 	ldw	ra,4(sp)
   8f314:	dc000017 	ldw	r16,0(sp)
   8f318:	dec00204 	addi	sp,sp,8
   8f31c:	f800283a 	ret

0008f320 <strlen>:
   8f320:	208000cc 	andi	r2,r4,3
   8f324:	2011883a 	mov	r8,r4
   8f328:	1000161e 	bne	r2,zero,8f384 <strlen+0x64>
   8f32c:	20c00017 	ldw	r3,0(r4)
   8f330:	017fbff4 	movhi	r5,65279
   8f334:	297fbfc4 	addi	r5,r5,-257
   8f338:	01e02074 	movhi	r7,32897
   8f33c:	39e02004 	addi	r7,r7,-32640
   8f340:	1945883a 	add	r2,r3,r5
   8f344:	11c4703a 	and	r2,r2,r7
   8f348:	00c6303a 	nor	r3,zero,r3
   8f34c:	1886703a 	and	r3,r3,r2
   8f350:	18000c1e 	bne	r3,zero,8f384 <strlen+0x64>
   8f354:	280d883a 	mov	r6,r5
   8f358:	380b883a 	mov	r5,r7
   8f35c:	21000104 	addi	r4,r4,4
   8f360:	20800017 	ldw	r2,0(r4)
   8f364:	1187883a 	add	r3,r2,r6
   8f368:	1946703a 	and	r3,r3,r5
   8f36c:	0084303a 	nor	r2,zero,r2
   8f370:	10c4703a 	and	r2,r2,r3
   8f374:	103ff926 	beq	r2,zero,8f35c <strlen+0x3c>
   8f378:	20800007 	ldb	r2,0(r4)
   8f37c:	10000326 	beq	r2,zero,8f38c <strlen+0x6c>
   8f380:	21000044 	addi	r4,r4,1
   8f384:	20800007 	ldb	r2,0(r4)
   8f388:	103ffd1e 	bne	r2,zero,8f380 <strlen+0x60>
   8f38c:	2205c83a 	sub	r2,r4,r8
   8f390:	f800283a 	ret

0008f394 <strncpy>:
   8f394:	2904b03a 	or	r2,r5,r4
   8f398:	108000cc 	andi	r2,r2,3
   8f39c:	00c000c4 	movi	r3,3
   8f3a0:	1000291e 	bne	r2,zero,8f448 <strncpy+0xb4>
   8f3a4:	1980282e 	bgeu	r3,r6,8f448 <strncpy+0xb4>
   8f3a8:	1817883a 	mov	r11,r3
   8f3ac:	2011883a 	mov	r8,r4
   8f3b0:	02bfbff4 	movhi	r10,65279
   8f3b4:	52bfbfc4 	addi	r10,r10,-257
   8f3b8:	02602074 	movhi	r9,32897
   8f3bc:	4a602004 	addi	r9,r9,-32640
   8f3c0:	29c00017 	ldw	r7,0(r5)
   8f3c4:	3a85883a 	add	r2,r7,r10
   8f3c8:	01c6303a 	nor	r3,zero,r7
   8f3cc:	10c4703a 	and	r2,r2,r3
   8f3d0:	1244703a 	and	r2,r2,r9
   8f3d4:	1000051e 	bne	r2,zero,8f3ec <strncpy+0x58>
   8f3d8:	31bfff04 	addi	r6,r6,-4
   8f3dc:	41c00015 	stw	r7,0(r8)
   8f3e0:	29400104 	addi	r5,r5,4
   8f3e4:	42000104 	addi	r8,r8,4
   8f3e8:	59bff536 	bltu	r11,r6,8f3c0 <strncpy+0x2c>
   8f3ec:	400f883a 	mov	r7,r8
   8f3f0:	30001326 	beq	r6,zero,8f440 <strncpy+0xac>
   8f3f4:	28800003 	ldbu	r2,0(r5)
   8f3f8:	31bfffc4 	addi	r6,r6,-1
   8f3fc:	38c00044 	addi	r3,r7,1
   8f400:	38800005 	stb	r2,0(r7)
   8f404:	10000826 	beq	r2,zero,8f428 <strncpy+0x94>
   8f408:	29400044 	addi	r5,r5,1
   8f40c:	30000c26 	beq	r6,zero,8f440 <strncpy+0xac>
   8f410:	28800003 	ldbu	r2,0(r5)
   8f414:	31bfffc4 	addi	r6,r6,-1
   8f418:	29400044 	addi	r5,r5,1
   8f41c:	18800005 	stb	r2,0(r3)
   8f420:	18c00044 	addi	r3,r3,1
   8f424:	103ff91e 	bne	r2,zero,8f40c <strncpy+0x78>
   8f428:	30000526 	beq	r6,zero,8f440 <strncpy+0xac>
   8f42c:	1805883a 	mov	r2,r3
   8f430:	30cd883a 	add	r6,r6,r3
   8f434:	10000005 	stb	zero,0(r2)
   8f438:	10800044 	addi	r2,r2,1
   8f43c:	30bffd1e 	bne	r6,r2,8f434 <strncpy+0xa0>
   8f440:	2005883a 	mov	r2,r4
   8f444:	f800283a 	ret
   8f448:	200f883a 	mov	r7,r4
   8f44c:	003fe806 	br	8f3f0 <strncpy+0x5c>

0008f450 <_strtoul_r>:
   8f450:	defff604 	addi	sp,sp,-40
   8f454:	008002b4 	movhi	r2,10
   8f458:	1081bc04 	addi	r2,r2,1776
   8f45c:	dd000415 	stw	r20,16(sp)
   8f460:	15000017 	ldw	r20,0(r2)
   8f464:	ddc00715 	stw	r23,28(sp)
   8f468:	dd800615 	stw	r22,24(sp)
   8f46c:	dd400515 	stw	r21,20(sp)
   8f470:	dc800215 	stw	r18,8(sp)
   8f474:	dc000015 	stw	r16,0(sp)
   8f478:	dfc00915 	stw	ra,36(sp)
   8f47c:	df000815 	stw	fp,32(sp)
   8f480:	dcc00315 	stw	r19,12(sp)
   8f484:	dc400115 	stw	r17,4(sp)
   8f488:	282b883a 	mov	r21,r5
   8f48c:	202f883a 	mov	r23,r4
   8f490:	302d883a 	mov	r22,r6
   8f494:	3825883a 	mov	r18,r7
   8f498:	2821883a 	mov	r16,r5
   8f49c:	84400007 	ldb	r17,0(r16)
   8f4a0:	84000044 	addi	r16,r16,1
   8f4a4:	a447883a 	add	r3,r20,r17
   8f4a8:	18800003 	ldbu	r2,0(r3)
   8f4ac:	1080020c 	andi	r2,r2,8
   8f4b0:	103ffa1e 	bne	r2,zero,8f49c <_strtoul_r+0x4c>
   8f4b4:	00800b44 	movi	r2,45
   8f4b8:	88805626 	beq	r17,r2,8f614 <_strtoul_r+0x1c4>
   8f4bc:	00800ac4 	movi	r2,43
   8f4c0:	88805126 	beq	r17,r2,8f608 <_strtoul_r+0x1b8>
   8f4c4:	0039883a 	mov	fp,zero
   8f4c8:	9007003a 	cmpeq	r3,r18,zero
   8f4cc:	18003b1e 	bne	r3,zero,8f5bc <_strtoul_r+0x16c>
   8f4d0:	00800404 	movi	r2,16
   8f4d4:	90803926 	beq	r18,r2,8f5bc <_strtoul_r+0x16c>
   8f4d8:	013fffc4 	movi	r4,-1
   8f4dc:	900b883a 	mov	r5,r18
   8f4e0:	008d8540 	call	8d854 <__udivsi3>
   8f4e4:	013fffc4 	movi	r4,-1
   8f4e8:	900b883a 	mov	r5,r18
   8f4ec:	1027883a 	mov	r19,r2
   8f4f0:	008d85c0 	call	8d85c <__umodsi3>
   8f4f4:	1011883a 	mov	r8,r2
   8f4f8:	900f883a 	mov	r7,r18
   8f4fc:	a445883a 	add	r2,r20,r17
   8f500:	11000003 	ldbu	r4,0(r2)
   8f504:	000b883a 	mov	r5,zero
   8f508:	000d883a 	mov	r6,zero
   8f50c:	20c0010c 	andi	r3,r4,4
   8f510:	18000e26 	beq	r3,zero,8f54c <_strtoul_r+0xfc>
   8f514:	88fff404 	addi	r3,r17,-48
   8f518:	1c80140e 	bge	r3,r18,8f56c <_strtoul_r+0x11c>
   8f51c:	30003316 	blt	r6,zero,8f5ec <_strtoul_r+0x19c>
   8f520:	99403236 	bltu	r19,r5,8f5ec <_strtoul_r+0x19c>
   8f524:	2cc03026 	beq	r5,r19,8f5e8 <_strtoul_r+0x198>
   8f528:	29c5383a 	mul	r2,r5,r7
   8f52c:	01800044 	movi	r6,1
   8f530:	10cb883a 	add	r5,r2,r3
   8f534:	84400007 	ldb	r17,0(r16)
   8f538:	84000044 	addi	r16,r16,1
   8f53c:	a445883a 	add	r2,r20,r17
   8f540:	11000003 	ldbu	r4,0(r2)
   8f544:	20c0010c 	andi	r3,r4,4
   8f548:	183ff21e 	bne	r3,zero,8f514 <_strtoul_r+0xc4>
   8f54c:	208000cc 	andi	r2,r4,3
   8f550:	10000626 	beq	r2,zero,8f56c <_strtoul_r+0x11c>
   8f554:	2080004c 	andi	r2,r4,1
   8f558:	1005003a 	cmpeq	r2,r2,zero
   8f55c:	1000251e 	bne	r2,zero,8f5f4 <_strtoul_r+0x1a4>
   8f560:	00800dc4 	movi	r2,55
   8f564:	8887c83a 	sub	r3,r17,r2
   8f568:	1cbfec16 	blt	r3,r18,8f51c <_strtoul_r+0xcc>
   8f56c:	3000400e 	bge	r6,zero,8f670 <_strtoul_r+0x220>
   8f570:	00800884 	movi	r2,34
   8f574:	017fffc4 	movi	r5,-1
   8f578:	b8800015 	stw	r2,0(r23)
   8f57c:	b0000226 	beq	r22,zero,8f588 <_strtoul_r+0x138>
   8f580:	30001f1e 	bne	r6,zero,8f600 <_strtoul_r+0x1b0>
   8f584:	b5400015 	stw	r21,0(r22)
   8f588:	2805883a 	mov	r2,r5
   8f58c:	dfc00917 	ldw	ra,36(sp)
   8f590:	df000817 	ldw	fp,32(sp)
   8f594:	ddc00717 	ldw	r23,28(sp)
   8f598:	dd800617 	ldw	r22,24(sp)
   8f59c:	dd400517 	ldw	r21,20(sp)
   8f5a0:	dd000417 	ldw	r20,16(sp)
   8f5a4:	dcc00317 	ldw	r19,12(sp)
   8f5a8:	dc800217 	ldw	r18,8(sp)
   8f5ac:	dc400117 	ldw	r17,4(sp)
   8f5b0:	dc000017 	ldw	r16,0(sp)
   8f5b4:	dec00a04 	addi	sp,sp,40
   8f5b8:	f800283a 	ret
   8f5bc:	00800c04 	movi	r2,48
   8f5c0:	88801826 	beq	r17,r2,8f624 <_strtoul_r+0x1d4>
   8f5c4:	183fc426 	beq	r3,zero,8f4d8 <_strtoul_r+0x88>
   8f5c8:	00800c04 	movi	r2,48
   8f5cc:	88802226 	beq	r17,r2,8f658 <_strtoul_r+0x208>
   8f5d0:	04800284 	movi	r18,10
   8f5d4:	900f883a 	mov	r7,r18
   8f5d8:	04c666b4 	movhi	r19,6554
   8f5dc:	9ce66644 	addi	r19,r19,-26215
   8f5e0:	02000144 	movi	r8,5
   8f5e4:	003fc506 	br	8f4fc <_strtoul_r+0xac>
   8f5e8:	40ffcf0e 	bge	r8,r3,8f528 <_strtoul_r+0xd8>
   8f5ec:	01bfffc4 	movi	r6,-1
   8f5f0:	003fd006 	br	8f534 <_strtoul_r+0xe4>
   8f5f4:	008015c4 	movi	r2,87
   8f5f8:	8887c83a 	sub	r3,r17,r2
   8f5fc:	003fda06 	br	8f568 <_strtoul_r+0x118>
   8f600:	857fffc4 	addi	r21,r16,-1
   8f604:	003fdf06 	br	8f584 <_strtoul_r+0x134>
   8f608:	84400007 	ldb	r17,0(r16)
   8f60c:	84000044 	addi	r16,r16,1
   8f610:	003fac06 	br	8f4c4 <_strtoul_r+0x74>
   8f614:	84400007 	ldb	r17,0(r16)
   8f618:	07000044 	movi	fp,1
   8f61c:	84000044 	addi	r16,r16,1
   8f620:	003fa906 	br	8f4c8 <_strtoul_r+0x78>
   8f624:	81000007 	ldb	r4,0(r16)
   8f628:	00801e04 	movi	r2,120
   8f62c:	20800226 	beq	r4,r2,8f638 <_strtoul_r+0x1e8>
   8f630:	00801604 	movi	r2,88
   8f634:	20bfe31e 	bne	r4,r2,8f5c4 <_strtoul_r+0x174>
   8f638:	84400047 	ldb	r17,1(r16)
   8f63c:	04800404 	movi	r18,16
   8f640:	84000084 	addi	r16,r16,2
   8f644:	900f883a 	mov	r7,r18
   8f648:	04c40034 	movhi	r19,4096
   8f64c:	9cffffc4 	addi	r19,r19,-1
   8f650:	020003c4 	movi	r8,15
   8f654:	003fa906 	br	8f4fc <_strtoul_r+0xac>
   8f658:	04800204 	movi	r18,8
   8f65c:	900f883a 	mov	r7,r18
   8f660:	04c80034 	movhi	r19,8192
   8f664:	9cffffc4 	addi	r19,r19,-1
   8f668:	020001c4 	movi	r8,7
   8f66c:	003fa306 	br	8f4fc <_strtoul_r+0xac>
   8f670:	e005003a 	cmpeq	r2,fp,zero
   8f674:	103fc11e 	bne	r2,zero,8f57c <_strtoul_r+0x12c>
   8f678:	014bc83a 	sub	r5,zero,r5
   8f67c:	003fbf06 	br	8f57c <_strtoul_r+0x12c>

0008f680 <strtoul>:
   8f680:	008002b4 	movhi	r2,10
   8f684:	1081b804 	addi	r2,r2,1760
   8f688:	2013883a 	mov	r9,r4
   8f68c:	11000017 	ldw	r4,0(r2)
   8f690:	2805883a 	mov	r2,r5
   8f694:	300f883a 	mov	r7,r6
   8f698:	480b883a 	mov	r5,r9
   8f69c:	100d883a 	mov	r6,r2
   8f6a0:	008f4501 	jmpi	8f450 <_strtoul_r>

0008f6a4 <__sprint_r>:
   8f6a4:	30800217 	ldw	r2,8(r6)
   8f6a8:	defffe04 	addi	sp,sp,-8
   8f6ac:	dc000015 	stw	r16,0(sp)
   8f6b0:	dfc00115 	stw	ra,4(sp)
   8f6b4:	3021883a 	mov	r16,r6
   8f6b8:	0007883a 	mov	r3,zero
   8f6bc:	1000061e 	bne	r2,zero,8f6d8 <__sprint_r+0x34>
   8f6c0:	1805883a 	mov	r2,r3
   8f6c4:	30000115 	stw	zero,4(r6)
   8f6c8:	dfc00117 	ldw	ra,4(sp)
   8f6cc:	dc000017 	ldw	r16,0(sp)
   8f6d0:	dec00204 	addi	sp,sp,8
   8f6d4:	f800283a 	ret
   8f6d8:	00937500 	call	93750 <__sfvwrite_r>
   8f6dc:	1007883a 	mov	r3,r2
   8f6e0:	1805883a 	mov	r2,r3
   8f6e4:	80000115 	stw	zero,4(r16)
   8f6e8:	80000215 	stw	zero,8(r16)
   8f6ec:	dfc00117 	ldw	ra,4(sp)
   8f6f0:	dc000017 	ldw	r16,0(sp)
   8f6f4:	dec00204 	addi	sp,sp,8
   8f6f8:	f800283a 	ret

0008f6fc <___vfprintf_internal_r>:
   8f6fc:	defea304 	addi	sp,sp,-1396
   8f700:	dd815915 	stw	r22,1380(sp)
   8f704:	dc015315 	stw	r16,1356(sp)
   8f708:	d9c15215 	stw	r7,1352(sp)
   8f70c:	dfc15c15 	stw	ra,1392(sp)
   8f710:	df015b15 	stw	fp,1388(sp)
   8f714:	ddc15a15 	stw	r23,1384(sp)
   8f718:	dd415815 	stw	r21,1376(sp)
   8f71c:	dd015715 	stw	r20,1372(sp)
   8f720:	dcc15615 	stw	r19,1368(sp)
   8f724:	dc815515 	stw	r18,1364(sp)
   8f728:	dc415415 	stw	r17,1360(sp)
   8f72c:	282d883a 	mov	r22,r5
   8f730:	3021883a 	mov	r16,r6
   8f734:	d9015015 	stw	r4,1344(sp)
   8f738:	0093bf40 	call	93bf4 <_localeconv_r>
   8f73c:	10800017 	ldw	r2,0(r2)
   8f740:	d9c15217 	ldw	r7,1352(sp)
   8f744:	d8814a15 	stw	r2,1320(sp)
   8f748:	d8815017 	ldw	r2,1344(sp)
   8f74c:	10000226 	beq	r2,zero,8f758 <___vfprintf_internal_r+0x5c>
   8f750:	10800e17 	ldw	r2,56(r2)
   8f754:	10020d26 	beq	r2,zero,8ff8c <___vfprintf_internal_r+0x890>
   8f758:	b080030b 	ldhu	r2,12(r22)
   8f75c:	1080020c 	andi	r2,r2,8
   8f760:	10020e26 	beq	r2,zero,8ff9c <___vfprintf_internal_r+0x8a0>
   8f764:	b0800417 	ldw	r2,16(r22)
   8f768:	10020c26 	beq	r2,zero,8ff9c <___vfprintf_internal_r+0x8a0>
   8f76c:	b200030b 	ldhu	r8,12(r22)
   8f770:	00800284 	movi	r2,10
   8f774:	40c0068c 	andi	r3,r8,26
   8f778:	18802f1e 	bne	r3,r2,8f838 <___vfprintf_internal_r+0x13c>
   8f77c:	b080038f 	ldh	r2,14(r22)
   8f780:	10002d16 	blt	r2,zero,8f838 <___vfprintf_internal_r+0x13c>
   8f784:	b240038b 	ldhu	r9,14(r22)
   8f788:	b2800717 	ldw	r10,28(r22)
   8f78c:	b2c00917 	ldw	r11,36(r22)
   8f790:	d9015017 	ldw	r4,1344(sp)
   8f794:	dc402a04 	addi	r17,sp,168
   8f798:	d8804104 	addi	r2,sp,260
   8f79c:	00c10004 	movi	r3,1024
   8f7a0:	423fff4c 	andi	r8,r8,65533
   8f7a4:	800d883a 	mov	r6,r16
   8f7a8:	880b883a 	mov	r5,r17
   8f7ac:	da002d0d 	sth	r8,180(sp)
   8f7b0:	da402d8d 	sth	r9,182(sp)
   8f7b4:	da803115 	stw	r10,196(sp)
   8f7b8:	dac03315 	stw	r11,204(sp)
   8f7bc:	d8802e15 	stw	r2,184(sp)
   8f7c0:	d8c02f15 	stw	r3,188(sp)
   8f7c4:	d8802a15 	stw	r2,168(sp)
   8f7c8:	d8c02c15 	stw	r3,176(sp)
   8f7cc:	d8003015 	stw	zero,192(sp)
   8f7d0:	008f6fc0 	call	8f6fc <___vfprintf_internal_r>
   8f7d4:	d8814c15 	stw	r2,1328(sp)
   8f7d8:	10000416 	blt	r2,zero,8f7ec <___vfprintf_internal_r+0xf0>
   8f7dc:	d9015017 	ldw	r4,1344(sp)
   8f7e0:	880b883a 	mov	r5,r17
   8f7e4:	00930e00 	call	930e0 <_fflush_r>
   8f7e8:	1002321e 	bne	r2,zero,900b4 <___vfprintf_internal_r+0x9b8>
   8f7ec:	d8802d0b 	ldhu	r2,180(sp)
   8f7f0:	1080100c 	andi	r2,r2,64
   8f7f4:	10000326 	beq	r2,zero,8f804 <___vfprintf_internal_r+0x108>
   8f7f8:	b080030b 	ldhu	r2,12(r22)
   8f7fc:	10801014 	ori	r2,r2,64
   8f800:	b080030d 	sth	r2,12(r22)
   8f804:	d8814c17 	ldw	r2,1328(sp)
   8f808:	dfc15c17 	ldw	ra,1392(sp)
   8f80c:	df015b17 	ldw	fp,1388(sp)
   8f810:	ddc15a17 	ldw	r23,1384(sp)
   8f814:	dd815917 	ldw	r22,1380(sp)
   8f818:	dd415817 	ldw	r21,1376(sp)
   8f81c:	dd015717 	ldw	r20,1372(sp)
   8f820:	dcc15617 	ldw	r19,1368(sp)
   8f824:	dc815517 	ldw	r18,1364(sp)
   8f828:	dc415417 	ldw	r17,1360(sp)
   8f82c:	dc015317 	ldw	r16,1356(sp)
   8f830:	dec15d04 	addi	sp,sp,1396
   8f834:	f800283a 	ret
   8f838:	0005883a 	mov	r2,zero
   8f83c:	0007883a 	mov	r3,zero
   8f840:	dd401a04 	addi	r21,sp,104
   8f844:	d8814315 	stw	r2,1292(sp)
   8f848:	802f883a 	mov	r23,r16
   8f84c:	d8c14415 	stw	r3,1296(sp)
   8f850:	d8014c15 	stw	zero,1328(sp)
   8f854:	d8014915 	stw	zero,1316(sp)
   8f858:	d8014515 	stw	zero,1300(sp)
   8f85c:	d8014815 	stw	zero,1312(sp)
   8f860:	dd400d15 	stw	r21,52(sp)
   8f864:	d8000f15 	stw	zero,60(sp)
   8f868:	d8000e15 	stw	zero,56(sp)
   8f86c:	b8800007 	ldb	r2,0(r23)
   8f870:	10001926 	beq	r2,zero,8f8d8 <___vfprintf_internal_r+0x1dc>
   8f874:	00c00944 	movi	r3,37
   8f878:	10c01726 	beq	r2,r3,8f8d8 <___vfprintf_internal_r+0x1dc>
   8f87c:	b821883a 	mov	r16,r23
   8f880:	00000106 	br	8f888 <___vfprintf_internal_r+0x18c>
   8f884:	10c00326 	beq	r2,r3,8f894 <___vfprintf_internal_r+0x198>
   8f888:	84000044 	addi	r16,r16,1
   8f88c:	80800007 	ldb	r2,0(r16)
   8f890:	103ffc1e 	bne	r2,zero,8f884 <___vfprintf_internal_r+0x188>
   8f894:	85e7c83a 	sub	r19,r16,r23
   8f898:	98000e26 	beq	r19,zero,8f8d4 <___vfprintf_internal_r+0x1d8>
   8f89c:	dc800f17 	ldw	r18,60(sp)
   8f8a0:	dc400e17 	ldw	r17,56(sp)
   8f8a4:	008001c4 	movi	r2,7
   8f8a8:	94e5883a 	add	r18,r18,r19
   8f8ac:	8c400044 	addi	r17,r17,1
   8f8b0:	adc00015 	stw	r23,0(r21)
   8f8b4:	dc800f15 	stw	r18,60(sp)
   8f8b8:	acc00115 	stw	r19,4(r21)
   8f8bc:	dc400e15 	stw	r17,56(sp)
   8f8c0:	14428b16 	blt	r2,r17,902f0 <___vfprintf_internal_r+0xbf4>
   8f8c4:	ad400204 	addi	r21,r21,8
   8f8c8:	d9014c17 	ldw	r4,1328(sp)
   8f8cc:	24c9883a 	add	r4,r4,r19
   8f8d0:	d9014c15 	stw	r4,1328(sp)
   8f8d4:	802f883a 	mov	r23,r16
   8f8d8:	b8800007 	ldb	r2,0(r23)
   8f8dc:	10013c26 	beq	r2,zero,8fdd0 <___vfprintf_internal_r+0x6d4>
   8f8e0:	bdc00044 	addi	r23,r23,1
   8f8e4:	d8000405 	stb	zero,16(sp)
   8f8e8:	b8c00007 	ldb	r3,0(r23)
   8f8ec:	04ffffc4 	movi	r19,-1
   8f8f0:	d8014d15 	stw	zero,1332(sp)
   8f8f4:	d8014b15 	stw	zero,1324(sp)
   8f8f8:	d8c14e15 	stw	r3,1336(sp)
   8f8fc:	bdc00044 	addi	r23,r23,1
   8f900:	d9414e17 	ldw	r5,1336(sp)
   8f904:	00801604 	movi	r2,88
   8f908:	28fff804 	addi	r3,r5,-32
   8f90c:	10c06036 	bltu	r2,r3,8fa90 <___vfprintf_internal_r+0x394>
   8f910:	18c5883a 	add	r2,r3,r3
   8f914:	1085883a 	add	r2,r2,r2
   8f918:	00c00274 	movhi	r3,9
   8f91c:	18fe4b04 	addi	r3,r3,-1748
   8f920:	10c5883a 	add	r2,r2,r3
   8f924:	11000017 	ldw	r4,0(r2)
   8f928:	2000683a 	jmp	r4
   8f92c:	000908a0 	cmpeqi	zero,zero,9250
   8f930:	0008fa90 	cmplti	zero,zero,9194
   8f934:	0008fa90 	cmplti	zero,zero,9194
   8f938:	0009088c 	andi	zero,zero,9250
   8f93c:	0008fa90 	cmplti	zero,zero,9194
   8f940:	0008fa90 	cmplti	zero,zero,9194
   8f944:	0008fa90 	cmplti	zero,zero,9194
   8f948:	0008fa90 	cmplti	zero,zero,9194
   8f94c:	0008fa90 	cmplti	zero,zero,9194
   8f950:	0008fa90 	cmplti	zero,zero,9194
   8f954:	0009066c 	andhi	zero,zero,9241
   8f958:	0009087c 	xorhi	zero,zero,9249
   8f95c:	0008fa90 	cmplti	zero,zero,9194
   8f960:	00090684 	movi	zero,9242
   8f964:	00090918 	cmpnei	zero,zero,9252
   8f968:	0008fa90 	cmplti	zero,zero,9194
   8f96c:	00090904 	movi	zero,9252
   8f970:	000908cc 	andi	zero,zero,9251
   8f974:	000908cc 	andi	zero,zero,9251
   8f978:	000908cc 	andi	zero,zero,9251
   8f97c:	000908cc 	andi	zero,zero,9251
   8f980:	000908cc 	andi	zero,zero,9251
   8f984:	000908cc 	andi	zero,zero,9251
   8f988:	000908cc 	andi	zero,zero,9251
   8f98c:	000908cc 	andi	zero,zero,9251
   8f990:	000908cc 	andi	zero,zero,9251
   8f994:	0008fa90 	cmplti	zero,zero,9194
   8f998:	0008fa90 	cmplti	zero,zero,9194
   8f99c:	0008fa90 	cmplti	zero,zero,9194
   8f9a0:	0008fa90 	cmplti	zero,zero,9194
   8f9a4:	0008fa90 	cmplti	zero,zero,9194
   8f9a8:	0008fa90 	cmplti	zero,zero,9194
   8f9ac:	0008fa90 	cmplti	zero,zero,9194
   8f9b0:	0008fa90 	cmplti	zero,zero,9194
   8f9b4:	0008fa90 	cmplti	zero,zero,9194
   8f9b8:	0008fa90 	cmplti	zero,zero,9194
   8f9bc:	000900e8 	cmpgeui	zero,zero,9219
   8f9c0:	00090754 	movui	zero,9245
   8f9c4:	0008fa90 	cmplti	zero,zero,9194
   8f9c8:	00090754 	movui	zero,9245
   8f9cc:	0008fa90 	cmplti	zero,zero,9194
   8f9d0:	0008fa90 	cmplti	zero,zero,9194
   8f9d4:	0008fa90 	cmplti	zero,zero,9194
   8f9d8:	0008fa90 	cmplti	zero,zero,9194
   8f9dc:	000908b8 	rdprs	zero,zero,9250
   8f9e0:	0008fa90 	cmplti	zero,zero,9194
   8f9e4:	0008fa90 	cmplti	zero,zero,9194
   8f9e8:	0009019c 	xori	zero,zero,9222
   8f9ec:	0008fa90 	cmplti	zero,zero,9194
   8f9f0:	0008fa90 	cmplti	zero,zero,9194
   8f9f4:	0008fa90 	cmplti	zero,zero,9194
   8f9f8:	0008fa90 	cmplti	zero,zero,9194
   8f9fc:	0008fa90 	cmplti	zero,zero,9194
   8fa00:	000901e8 	cmpgeui	zero,zero,9223
   8fa04:	0008fa90 	cmplti	zero,zero,9194
   8fa08:	0008fa90 	cmplti	zero,zero,9194
   8fa0c:	00090808 	cmpgei	zero,zero,9248
   8fa10:	0008fa90 	cmplti	zero,zero,9194
   8fa14:	0008fa90 	cmplti	zero,zero,9194
   8fa18:	0008fa90 	cmplti	zero,zero,9194
   8fa1c:	0008fa90 	cmplti	zero,zero,9194
   8fa20:	0008fa90 	cmplti	zero,zero,9194
   8fa24:	0008fa90 	cmplti	zero,zero,9194
   8fa28:	0008fa90 	cmplti	zero,zero,9194
   8fa2c:	0008fa90 	cmplti	zero,zero,9194
   8fa30:	0008fa90 	cmplti	zero,zero,9194
   8fa34:	0008fa90 	cmplti	zero,zero,9194
   8fa38:	000907dc 	xori	zero,zero,9247
   8fa3c:	000900f4 	movhi	zero,9219
   8fa40:	00090754 	movui	zero,9245
   8fa44:	00090754 	movui	zero,9245
   8fa48:	00090754 	movui	zero,9245
   8fa4c:	00090740 	call	9074 <__alt_mem_onchip_memory2-0x76f8c>
   8fa50:	000900f4 	movhi	zero,9219
   8fa54:	0008fa90 	cmplti	zero,zero,9194
   8fa58:	0008fa90 	cmplti	zero,zero,9194
   8fa5c:	000906c8 	cmpgei	zero,zero,9243
   8fa60:	0008fa90 	cmplti	zero,zero,9194
   8fa64:	00090698 	cmpnei	zero,zero,9242
   8fa68:	000901a8 	cmpgeui	zero,zero,9222
   8fa6c:	000906f8 	rdprs	zero,zero,9243
   8fa70:	000906e4 	muli	zero,zero,9243
   8fa74:	0008fa90 	cmplti	zero,zero,9194
   8fa78:	00090974 	movhi	zero,9253
   8fa7c:	0008fa90 	cmplti	zero,zero,9194
   8fa80:	000901f4 	movhi	zero,9223
   8fa84:	0008fa90 	cmplti	zero,zero,9194
   8fa88:	0008fa90 	cmplti	zero,zero,9194
   8fa8c:	0009086c 	andhi	zero,zero,9249
   8fa90:	d9014e17 	ldw	r4,1336(sp)
   8fa94:	2000ce26 	beq	r4,zero,8fdd0 <___vfprintf_internal_r+0x6d4>
   8fa98:	01400044 	movi	r5,1
   8fa9c:	d9801004 	addi	r6,sp,64
   8faa0:	d9c14115 	stw	r7,1284(sp)
   8faa4:	d9414615 	stw	r5,1304(sp)
   8faa8:	d9814215 	stw	r6,1288(sp)
   8faac:	280f883a 	mov	r7,r5
   8fab0:	d9001005 	stb	r4,64(sp)
   8fab4:	d8000405 	stb	zero,16(sp)
   8fab8:	d8014715 	stw	zero,1308(sp)
   8fabc:	d8c14d17 	ldw	r3,1332(sp)
   8fac0:	1880008c 	andi	r2,r3,2
   8fac4:	1005003a 	cmpeq	r2,r2,zero
   8fac8:	d8815115 	stw	r2,1348(sp)
   8facc:	1000031e 	bne	r2,zero,8fadc <___vfprintf_internal_r+0x3e0>
   8fad0:	d9014617 	ldw	r4,1304(sp)
   8fad4:	21000084 	addi	r4,r4,2
   8fad8:	d9014615 	stw	r4,1304(sp)
   8fadc:	d9414d17 	ldw	r5,1332(sp)
   8fae0:	2940210c 	andi	r5,r5,132
   8fae4:	d9414f15 	stw	r5,1340(sp)
   8fae8:	28002d1e 	bne	r5,zero,8fba0 <___vfprintf_internal_r+0x4a4>
   8faec:	d9814b17 	ldw	r6,1324(sp)
   8faf0:	d8814617 	ldw	r2,1304(sp)
   8faf4:	30a1c83a 	sub	r16,r6,r2
   8faf8:	0400290e 	bge	zero,r16,8fba0 <___vfprintf_internal_r+0x4a4>
   8fafc:	00800404 	movi	r2,16
   8fb00:	1404580e 	bge	r2,r16,90c64 <___vfprintf_internal_r+0x1568>
   8fb04:	dc800f17 	ldw	r18,60(sp)
   8fb08:	dc400e17 	ldw	r17,56(sp)
   8fb0c:	1027883a 	mov	r19,r2
   8fb10:	070002b4 	movhi	fp,10
   8fb14:	e7391704 	addi	fp,fp,-7076
   8fb18:	050001c4 	movi	r20,7
   8fb1c:	00000306 	br	8fb2c <___vfprintf_internal_r+0x430>
   8fb20:	843ffc04 	addi	r16,r16,-16
   8fb24:	ad400204 	addi	r21,r21,8
   8fb28:	9c00130e 	bge	r19,r16,8fb78 <___vfprintf_internal_r+0x47c>
   8fb2c:	94800404 	addi	r18,r18,16
   8fb30:	8c400044 	addi	r17,r17,1
   8fb34:	af000015 	stw	fp,0(r21)
   8fb38:	acc00115 	stw	r19,4(r21)
   8fb3c:	dc800f15 	stw	r18,60(sp)
   8fb40:	dc400e15 	stw	r17,56(sp)
   8fb44:	a47ff60e 	bge	r20,r17,8fb20 <___vfprintf_internal_r+0x424>
   8fb48:	d9015017 	ldw	r4,1344(sp)
   8fb4c:	b00b883a 	mov	r5,r22
   8fb50:	d9800d04 	addi	r6,sp,52
   8fb54:	d9c15215 	stw	r7,1352(sp)
   8fb58:	008f6a40 	call	8f6a4 <__sprint_r>
   8fb5c:	d9c15217 	ldw	r7,1352(sp)
   8fb60:	10009e1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   8fb64:	843ffc04 	addi	r16,r16,-16
   8fb68:	dc800f17 	ldw	r18,60(sp)
   8fb6c:	dc400e17 	ldw	r17,56(sp)
   8fb70:	dd401a04 	addi	r21,sp,104
   8fb74:	9c3fed16 	blt	r19,r16,8fb2c <___vfprintf_internal_r+0x430>
   8fb78:	9425883a 	add	r18,r18,r16
   8fb7c:	8c400044 	addi	r17,r17,1
   8fb80:	008001c4 	movi	r2,7
   8fb84:	af000015 	stw	fp,0(r21)
   8fb88:	ac000115 	stw	r16,4(r21)
   8fb8c:	dc800f15 	stw	r18,60(sp)
   8fb90:	dc400e15 	stw	r17,56(sp)
   8fb94:	1441f516 	blt	r2,r17,9036c <___vfprintf_internal_r+0xc70>
   8fb98:	ad400204 	addi	r21,r21,8
   8fb9c:	00000206 	br	8fba8 <___vfprintf_internal_r+0x4ac>
   8fba0:	dc800f17 	ldw	r18,60(sp)
   8fba4:	dc400e17 	ldw	r17,56(sp)
   8fba8:	d8800407 	ldb	r2,16(sp)
   8fbac:	10000b26 	beq	r2,zero,8fbdc <___vfprintf_internal_r+0x4e0>
   8fbb0:	00800044 	movi	r2,1
   8fbb4:	94800044 	addi	r18,r18,1
   8fbb8:	8c400044 	addi	r17,r17,1
   8fbbc:	a8800115 	stw	r2,4(r21)
   8fbc0:	d8c00404 	addi	r3,sp,16
   8fbc4:	008001c4 	movi	r2,7
   8fbc8:	a8c00015 	stw	r3,0(r21)
   8fbcc:	dc800f15 	stw	r18,60(sp)
   8fbd0:	dc400e15 	stw	r17,56(sp)
   8fbd4:	1441da16 	blt	r2,r17,90340 <___vfprintf_internal_r+0xc44>
   8fbd8:	ad400204 	addi	r21,r21,8
   8fbdc:	d9015117 	ldw	r4,1348(sp)
   8fbe0:	20000b1e 	bne	r4,zero,8fc10 <___vfprintf_internal_r+0x514>
   8fbe4:	d8800504 	addi	r2,sp,20
   8fbe8:	94800084 	addi	r18,r18,2
   8fbec:	8c400044 	addi	r17,r17,1
   8fbf0:	a8800015 	stw	r2,0(r21)
   8fbf4:	00c00084 	movi	r3,2
   8fbf8:	008001c4 	movi	r2,7
   8fbfc:	a8c00115 	stw	r3,4(r21)
   8fc00:	dc800f15 	stw	r18,60(sp)
   8fc04:	dc400e15 	stw	r17,56(sp)
   8fc08:	1441c216 	blt	r2,r17,90314 <___vfprintf_internal_r+0xc18>
   8fc0c:	ad400204 	addi	r21,r21,8
   8fc10:	d9414f17 	ldw	r5,1340(sp)
   8fc14:	00802004 	movi	r2,128
   8fc18:	2880b126 	beq	r5,r2,8fee0 <___vfprintf_internal_r+0x7e4>
   8fc1c:	d8c14717 	ldw	r3,1308(sp)
   8fc20:	19e1c83a 	sub	r16,r3,r7
   8fc24:	0400260e 	bge	zero,r16,8fcc0 <___vfprintf_internal_r+0x5c4>
   8fc28:	00800404 	movi	r2,16
   8fc2c:	1403c90e 	bge	r2,r16,90b54 <___vfprintf_internal_r+0x1458>
   8fc30:	1027883a 	mov	r19,r2
   8fc34:	070002b4 	movhi	fp,10
   8fc38:	e7391304 	addi	fp,fp,-7092
   8fc3c:	050001c4 	movi	r20,7
   8fc40:	00000306 	br	8fc50 <___vfprintf_internal_r+0x554>
   8fc44:	843ffc04 	addi	r16,r16,-16
   8fc48:	ad400204 	addi	r21,r21,8
   8fc4c:	9c00130e 	bge	r19,r16,8fc9c <___vfprintf_internal_r+0x5a0>
   8fc50:	94800404 	addi	r18,r18,16
   8fc54:	8c400044 	addi	r17,r17,1
   8fc58:	af000015 	stw	fp,0(r21)
   8fc5c:	acc00115 	stw	r19,4(r21)
   8fc60:	dc800f15 	stw	r18,60(sp)
   8fc64:	dc400e15 	stw	r17,56(sp)
   8fc68:	a47ff60e 	bge	r20,r17,8fc44 <___vfprintf_internal_r+0x548>
   8fc6c:	d9015017 	ldw	r4,1344(sp)
   8fc70:	b00b883a 	mov	r5,r22
   8fc74:	d9800d04 	addi	r6,sp,52
   8fc78:	d9c15215 	stw	r7,1352(sp)
   8fc7c:	008f6a40 	call	8f6a4 <__sprint_r>
   8fc80:	d9c15217 	ldw	r7,1352(sp)
   8fc84:	1000551e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   8fc88:	843ffc04 	addi	r16,r16,-16
   8fc8c:	dc800f17 	ldw	r18,60(sp)
   8fc90:	dc400e17 	ldw	r17,56(sp)
   8fc94:	dd401a04 	addi	r21,sp,104
   8fc98:	9c3fed16 	blt	r19,r16,8fc50 <___vfprintf_internal_r+0x554>
   8fc9c:	9425883a 	add	r18,r18,r16
   8fca0:	8c400044 	addi	r17,r17,1
   8fca4:	008001c4 	movi	r2,7
   8fca8:	af000015 	stw	fp,0(r21)
   8fcac:	ac000115 	stw	r16,4(r21)
   8fcb0:	dc800f15 	stw	r18,60(sp)
   8fcb4:	dc400e15 	stw	r17,56(sp)
   8fcb8:	14418216 	blt	r2,r17,902c4 <___vfprintf_internal_r+0xbc8>
   8fcbc:	ad400204 	addi	r21,r21,8
   8fcc0:	d9014d17 	ldw	r4,1332(sp)
   8fcc4:	2080400c 	andi	r2,r4,256
   8fcc8:	10004a1e 	bne	r2,zero,8fdf4 <___vfprintf_internal_r+0x6f8>
   8fccc:	d9414217 	ldw	r5,1288(sp)
   8fcd0:	91e5883a 	add	r18,r18,r7
   8fcd4:	8c400044 	addi	r17,r17,1
   8fcd8:	008001c4 	movi	r2,7
   8fcdc:	a9400015 	stw	r5,0(r21)
   8fce0:	a9c00115 	stw	r7,4(r21)
   8fce4:	dc800f15 	stw	r18,60(sp)
   8fce8:	dc400e15 	stw	r17,56(sp)
   8fcec:	14416716 	blt	r2,r17,9028c <___vfprintf_internal_r+0xb90>
   8fcf0:	a8c00204 	addi	r3,r21,8
   8fcf4:	d9814d17 	ldw	r6,1332(sp)
   8fcf8:	3080010c 	andi	r2,r6,4
   8fcfc:	10002826 	beq	r2,zero,8fda0 <___vfprintf_internal_r+0x6a4>
   8fd00:	d8814b17 	ldw	r2,1324(sp)
   8fd04:	d9014617 	ldw	r4,1304(sp)
   8fd08:	1121c83a 	sub	r16,r2,r4
   8fd0c:	0400240e 	bge	zero,r16,8fda0 <___vfprintf_internal_r+0x6a4>
   8fd10:	00800404 	movi	r2,16
   8fd14:	14044f0e 	bge	r2,r16,90e54 <___vfprintf_internal_r+0x1758>
   8fd18:	dc400e17 	ldw	r17,56(sp)
   8fd1c:	1027883a 	mov	r19,r2
   8fd20:	070002b4 	movhi	fp,10
   8fd24:	e7391704 	addi	fp,fp,-7076
   8fd28:	050001c4 	movi	r20,7
   8fd2c:	00000306 	br	8fd3c <___vfprintf_internal_r+0x640>
   8fd30:	843ffc04 	addi	r16,r16,-16
   8fd34:	18c00204 	addi	r3,r3,8
   8fd38:	9c00110e 	bge	r19,r16,8fd80 <___vfprintf_internal_r+0x684>
   8fd3c:	94800404 	addi	r18,r18,16
   8fd40:	8c400044 	addi	r17,r17,1
   8fd44:	1f000015 	stw	fp,0(r3)
   8fd48:	1cc00115 	stw	r19,4(r3)
   8fd4c:	dc800f15 	stw	r18,60(sp)
   8fd50:	dc400e15 	stw	r17,56(sp)
   8fd54:	a47ff60e 	bge	r20,r17,8fd30 <___vfprintf_internal_r+0x634>
   8fd58:	d9015017 	ldw	r4,1344(sp)
   8fd5c:	b00b883a 	mov	r5,r22
   8fd60:	d9800d04 	addi	r6,sp,52
   8fd64:	008f6a40 	call	8f6a4 <__sprint_r>
   8fd68:	10001c1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   8fd6c:	843ffc04 	addi	r16,r16,-16
   8fd70:	dc800f17 	ldw	r18,60(sp)
   8fd74:	dc400e17 	ldw	r17,56(sp)
   8fd78:	d8c01a04 	addi	r3,sp,104
   8fd7c:	9c3fef16 	blt	r19,r16,8fd3c <___vfprintf_internal_r+0x640>
   8fd80:	9425883a 	add	r18,r18,r16
   8fd84:	8c400044 	addi	r17,r17,1
   8fd88:	008001c4 	movi	r2,7
   8fd8c:	1f000015 	stw	fp,0(r3)
   8fd90:	1c000115 	stw	r16,4(r3)
   8fd94:	dc800f15 	stw	r18,60(sp)
   8fd98:	dc400e15 	stw	r17,56(sp)
   8fd9c:	1440cb16 	blt	r2,r17,900cc <___vfprintf_internal_r+0x9d0>
   8fda0:	d8814b17 	ldw	r2,1324(sp)
   8fda4:	d9414617 	ldw	r5,1304(sp)
   8fda8:	1140010e 	bge	r2,r5,8fdb0 <___vfprintf_internal_r+0x6b4>
   8fdac:	2805883a 	mov	r2,r5
   8fdb0:	d9814c17 	ldw	r6,1328(sp)
   8fdb4:	308d883a 	add	r6,r6,r2
   8fdb8:	d9814c15 	stw	r6,1328(sp)
   8fdbc:	90013b1e 	bne	r18,zero,902ac <___vfprintf_internal_r+0xbb0>
   8fdc0:	d9c14117 	ldw	r7,1284(sp)
   8fdc4:	dd401a04 	addi	r21,sp,104
   8fdc8:	d8000e15 	stw	zero,56(sp)
   8fdcc:	003ea706 	br	8f86c <___vfprintf_internal_r+0x170>
   8fdd0:	d8800f17 	ldw	r2,60(sp)
   8fdd4:	10053f1e 	bne	r2,zero,912d4 <___vfprintf_internal_r+0x1bd8>
   8fdd8:	d8000e15 	stw	zero,56(sp)
   8fddc:	b080030b 	ldhu	r2,12(r22)
   8fde0:	1080100c 	andi	r2,r2,64
   8fde4:	103e8726 	beq	r2,zero,8f804 <___vfprintf_internal_r+0x108>
   8fde8:	00bfffc4 	movi	r2,-1
   8fdec:	d8814c15 	stw	r2,1328(sp)
   8fdf0:	003e8406 	br	8f804 <___vfprintf_internal_r+0x108>
   8fdf4:	d9814e17 	ldw	r6,1336(sp)
   8fdf8:	00801944 	movi	r2,101
   8fdfc:	11806e16 	blt	r2,r6,8ffb8 <___vfprintf_internal_r+0x8bc>
   8fe00:	d9414817 	ldw	r5,1312(sp)
   8fe04:	00c00044 	movi	r3,1
   8fe08:	1943430e 	bge	r3,r5,90b18 <___vfprintf_internal_r+0x141c>
   8fe0c:	d8814217 	ldw	r2,1288(sp)
   8fe10:	94800044 	addi	r18,r18,1
   8fe14:	8c400044 	addi	r17,r17,1
   8fe18:	a8800015 	stw	r2,0(r21)
   8fe1c:	008001c4 	movi	r2,7
   8fe20:	a8c00115 	stw	r3,4(r21)
   8fe24:	dc800f15 	stw	r18,60(sp)
   8fe28:	dc400e15 	stw	r17,56(sp)
   8fe2c:	1441ca16 	blt	r2,r17,90558 <___vfprintf_internal_r+0xe5c>
   8fe30:	a8c00204 	addi	r3,r21,8
   8fe34:	d9014a17 	ldw	r4,1320(sp)
   8fe38:	00800044 	movi	r2,1
   8fe3c:	94800044 	addi	r18,r18,1
   8fe40:	8c400044 	addi	r17,r17,1
   8fe44:	18800115 	stw	r2,4(r3)
   8fe48:	008001c4 	movi	r2,7
   8fe4c:	19000015 	stw	r4,0(r3)
   8fe50:	dc800f15 	stw	r18,60(sp)
   8fe54:	dc400e15 	stw	r17,56(sp)
   8fe58:	1441b616 	blt	r2,r17,90534 <___vfprintf_internal_r+0xe38>
   8fe5c:	1cc00204 	addi	r19,r3,8
   8fe60:	d9014317 	ldw	r4,1292(sp)
   8fe64:	d9414417 	ldw	r5,1296(sp)
   8fe68:	000d883a 	mov	r6,zero
   8fe6c:	000f883a 	mov	r7,zero
   8fe70:	009732c0 	call	9732c <__nedf2>
   8fe74:	10017426 	beq	r2,zero,90448 <___vfprintf_internal_r+0xd4c>
   8fe78:	d9414817 	ldw	r5,1312(sp)
   8fe7c:	d9814217 	ldw	r6,1288(sp)
   8fe80:	8c400044 	addi	r17,r17,1
   8fe84:	2c85883a 	add	r2,r5,r18
   8fe88:	14bfffc4 	addi	r18,r2,-1
   8fe8c:	28bfffc4 	addi	r2,r5,-1
   8fe90:	30c00044 	addi	r3,r6,1
   8fe94:	98800115 	stw	r2,4(r19)
   8fe98:	008001c4 	movi	r2,7
   8fe9c:	98c00015 	stw	r3,0(r19)
   8fea0:	dc800f15 	stw	r18,60(sp)
   8fea4:	dc400e15 	stw	r17,56(sp)
   8fea8:	14418e16 	blt	r2,r17,904e4 <___vfprintf_internal_r+0xde8>
   8feac:	9cc00204 	addi	r19,r19,8
   8feb0:	d9414917 	ldw	r5,1316(sp)
   8feb4:	d8800904 	addi	r2,sp,36
   8feb8:	8c400044 	addi	r17,r17,1
   8febc:	9165883a 	add	r18,r18,r5
   8fec0:	98800015 	stw	r2,0(r19)
   8fec4:	008001c4 	movi	r2,7
   8fec8:	99400115 	stw	r5,4(r19)
   8fecc:	dc800f15 	stw	r18,60(sp)
   8fed0:	dc400e15 	stw	r17,56(sp)
   8fed4:	1440ed16 	blt	r2,r17,9028c <___vfprintf_internal_r+0xb90>
   8fed8:	98c00204 	addi	r3,r19,8
   8fedc:	003f8506 	br	8fcf4 <___vfprintf_internal_r+0x5f8>
   8fee0:	d9814b17 	ldw	r6,1324(sp)
   8fee4:	d8814617 	ldw	r2,1304(sp)
   8fee8:	30a1c83a 	sub	r16,r6,r2
   8feec:	043f4b0e 	bge	zero,r16,8fc1c <___vfprintf_internal_r+0x520>
   8fef0:	00800404 	movi	r2,16
   8fef4:	1404340e 	bge	r2,r16,90fc8 <___vfprintf_internal_r+0x18cc>
   8fef8:	1027883a 	mov	r19,r2
   8fefc:	070002b4 	movhi	fp,10
   8ff00:	e7391304 	addi	fp,fp,-7092
   8ff04:	050001c4 	movi	r20,7
   8ff08:	00000306 	br	8ff18 <___vfprintf_internal_r+0x81c>
   8ff0c:	843ffc04 	addi	r16,r16,-16
   8ff10:	ad400204 	addi	r21,r21,8
   8ff14:	9c00130e 	bge	r19,r16,8ff64 <___vfprintf_internal_r+0x868>
   8ff18:	94800404 	addi	r18,r18,16
   8ff1c:	8c400044 	addi	r17,r17,1
   8ff20:	af000015 	stw	fp,0(r21)
   8ff24:	acc00115 	stw	r19,4(r21)
   8ff28:	dc800f15 	stw	r18,60(sp)
   8ff2c:	dc400e15 	stw	r17,56(sp)
   8ff30:	a47ff60e 	bge	r20,r17,8ff0c <___vfprintf_internal_r+0x810>
   8ff34:	d9015017 	ldw	r4,1344(sp)
   8ff38:	b00b883a 	mov	r5,r22
   8ff3c:	d9800d04 	addi	r6,sp,52
   8ff40:	d9c15215 	stw	r7,1352(sp)
   8ff44:	008f6a40 	call	8f6a4 <__sprint_r>
   8ff48:	d9c15217 	ldw	r7,1352(sp)
   8ff4c:	103fa31e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   8ff50:	843ffc04 	addi	r16,r16,-16
   8ff54:	dc800f17 	ldw	r18,60(sp)
   8ff58:	dc400e17 	ldw	r17,56(sp)
   8ff5c:	dd401a04 	addi	r21,sp,104
   8ff60:	9c3fed16 	blt	r19,r16,8ff18 <___vfprintf_internal_r+0x81c>
   8ff64:	9425883a 	add	r18,r18,r16
   8ff68:	8c400044 	addi	r17,r17,1
   8ff6c:	008001c4 	movi	r2,7
   8ff70:	af000015 	stw	fp,0(r21)
   8ff74:	ac000115 	stw	r16,4(r21)
   8ff78:	dc800f15 	stw	r18,60(sp)
   8ff7c:	dc400e15 	stw	r17,56(sp)
   8ff80:	14416116 	blt	r2,r17,90508 <___vfprintf_internal_r+0xe0c>
   8ff84:	ad400204 	addi	r21,r21,8
   8ff88:	003f2406 	br	8fc1c <___vfprintf_internal_r+0x520>
   8ff8c:	d9015017 	ldw	r4,1344(sp)
   8ff90:	008e08c0 	call	8e08c <__sinit>
   8ff94:	d9c15217 	ldw	r7,1352(sp)
   8ff98:	003def06 	br	8f758 <___vfprintf_internal_r+0x5c>
   8ff9c:	d9015017 	ldw	r4,1344(sp)
   8ffa0:	b00b883a 	mov	r5,r22
   8ffa4:	d9c15215 	stw	r7,1352(sp)
   8ffa8:	00916440 	call	91644 <__swsetup_r>
   8ffac:	d9c15217 	ldw	r7,1352(sp)
   8ffb0:	103dee26 	beq	r2,zero,8f76c <___vfprintf_internal_r+0x70>
   8ffb4:	003f8c06 	br	8fde8 <___vfprintf_internal_r+0x6ec>
   8ffb8:	d9014317 	ldw	r4,1292(sp)
   8ffbc:	d9414417 	ldw	r5,1296(sp)
   8ffc0:	000d883a 	mov	r6,zero
   8ffc4:	000f883a 	mov	r7,zero
   8ffc8:	00972a40 	call	972a4 <__eqdf2>
   8ffcc:	1000f21e 	bne	r2,zero,90398 <___vfprintf_internal_r+0xc9c>
   8ffd0:	008002b4 	movhi	r2,10
   8ffd4:	10b91204 	addi	r2,r2,-7096
   8ffd8:	94800044 	addi	r18,r18,1
   8ffdc:	8c400044 	addi	r17,r17,1
   8ffe0:	a8800015 	stw	r2,0(r21)
   8ffe4:	00c00044 	movi	r3,1
   8ffe8:	008001c4 	movi	r2,7
   8ffec:	a8c00115 	stw	r3,4(r21)
   8fff0:	dc800f15 	stw	r18,60(sp)
   8fff4:	dc400e15 	stw	r17,56(sp)
   8fff8:	1442fa16 	blt	r2,r17,90be4 <___vfprintf_internal_r+0x14e8>
   8fffc:	a8c00204 	addi	r3,r21,8
   90000:	d8800617 	ldw	r2,24(sp)
   90004:	d9014817 	ldw	r4,1312(sp)
   90008:	11015c0e 	bge	r2,r4,9057c <___vfprintf_internal_r+0xe80>
   9000c:	dc400e17 	ldw	r17,56(sp)
   90010:	d9814a17 	ldw	r6,1320(sp)
   90014:	00800044 	movi	r2,1
   90018:	94800044 	addi	r18,r18,1
   9001c:	8c400044 	addi	r17,r17,1
   90020:	18800115 	stw	r2,4(r3)
   90024:	008001c4 	movi	r2,7
   90028:	19800015 	stw	r6,0(r3)
   9002c:	dc800f15 	stw	r18,60(sp)
   90030:	dc400e15 	stw	r17,56(sp)
   90034:	14431016 	blt	r2,r17,90c78 <___vfprintf_internal_r+0x157c>
   90038:	18c00204 	addi	r3,r3,8
   9003c:	d8814817 	ldw	r2,1312(sp)
   90040:	143fffc4 	addi	r16,r2,-1
   90044:	043f2b0e 	bge	zero,r16,8fcf4 <___vfprintf_internal_r+0x5f8>
   90048:	00800404 	movi	r2,16
   9004c:	1402a20e 	bge	r2,r16,90ad8 <___vfprintf_internal_r+0x13dc>
   90050:	dc400e17 	ldw	r17,56(sp)
   90054:	1027883a 	mov	r19,r2
   90058:	070002b4 	movhi	fp,10
   9005c:	e7391304 	addi	fp,fp,-7092
   90060:	050001c4 	movi	r20,7
   90064:	00000306 	br	90074 <___vfprintf_internal_r+0x978>
   90068:	18c00204 	addi	r3,r3,8
   9006c:	843ffc04 	addi	r16,r16,-16
   90070:	9c029c0e 	bge	r19,r16,90ae4 <___vfprintf_internal_r+0x13e8>
   90074:	94800404 	addi	r18,r18,16
   90078:	8c400044 	addi	r17,r17,1
   9007c:	1f000015 	stw	fp,0(r3)
   90080:	1cc00115 	stw	r19,4(r3)
   90084:	dc800f15 	stw	r18,60(sp)
   90088:	dc400e15 	stw	r17,56(sp)
   9008c:	a47ff60e 	bge	r20,r17,90068 <___vfprintf_internal_r+0x96c>
   90090:	d9015017 	ldw	r4,1344(sp)
   90094:	b00b883a 	mov	r5,r22
   90098:	d9800d04 	addi	r6,sp,52
   9009c:	008f6a40 	call	8f6a4 <__sprint_r>
   900a0:	103f4e1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   900a4:	dc800f17 	ldw	r18,60(sp)
   900a8:	dc400e17 	ldw	r17,56(sp)
   900ac:	d8c01a04 	addi	r3,sp,104
   900b0:	003fee06 	br	9006c <___vfprintf_internal_r+0x970>
   900b4:	d8802d0b 	ldhu	r2,180(sp)
   900b8:	00ffffc4 	movi	r3,-1
   900bc:	d8c14c15 	stw	r3,1328(sp)
   900c0:	1080100c 	andi	r2,r2,64
   900c4:	103dcc1e 	bne	r2,zero,8f7f8 <___vfprintf_internal_r+0xfc>
   900c8:	003dce06 	br	8f804 <___vfprintf_internal_r+0x108>
   900cc:	d9015017 	ldw	r4,1344(sp)
   900d0:	b00b883a 	mov	r5,r22
   900d4:	d9800d04 	addi	r6,sp,52
   900d8:	008f6a40 	call	8f6a4 <__sprint_r>
   900dc:	103f3f1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   900e0:	dc800f17 	ldw	r18,60(sp)
   900e4:	003f2e06 	br	8fda0 <___vfprintf_internal_r+0x6a4>
   900e8:	d9414d17 	ldw	r5,1332(sp)
   900ec:	29400414 	ori	r5,r5,16
   900f0:	d9414d15 	stw	r5,1332(sp)
   900f4:	d9814d17 	ldw	r6,1332(sp)
   900f8:	3080080c 	andi	r2,r6,32
   900fc:	10014f1e 	bne	r2,zero,9063c <___vfprintf_internal_r+0xf40>
   90100:	d8c14d17 	ldw	r3,1332(sp)
   90104:	1880040c 	andi	r2,r3,16
   90108:	1002ea1e 	bne	r2,zero,90cb4 <___vfprintf_internal_r+0x15b8>
   9010c:	d9014d17 	ldw	r4,1332(sp)
   90110:	2080100c 	andi	r2,r4,64
   90114:	1002e726 	beq	r2,zero,90cb4 <___vfprintf_internal_r+0x15b8>
   90118:	3880000f 	ldh	r2,0(r7)
   9011c:	39c00104 	addi	r7,r7,4
   90120:	d9c14115 	stw	r7,1284(sp)
   90124:	1023d7fa 	srai	r17,r2,31
   90128:	1021883a 	mov	r16,r2
   9012c:	88037216 	blt	r17,zero,90ef8 <___vfprintf_internal_r+0x17fc>
   90130:	01000044 	movi	r4,1
   90134:	98000416 	blt	r19,zero,90148 <___vfprintf_internal_r+0xa4c>
   90138:	d8c14d17 	ldw	r3,1332(sp)
   9013c:	00bfdfc4 	movi	r2,-129
   90140:	1886703a 	and	r3,r3,r2
   90144:	d8c14d15 	stw	r3,1332(sp)
   90148:	8444b03a 	or	r2,r16,r17
   9014c:	1002261e 	bne	r2,zero,909e8 <___vfprintf_internal_r+0x12ec>
   90150:	9802251e 	bne	r19,zero,909e8 <___vfprintf_internal_r+0x12ec>
   90154:	20803fcc 	andi	r2,r4,255
   90158:	10029b26 	beq	r2,zero,90bc8 <___vfprintf_internal_r+0x14cc>
   9015c:	d8c01a04 	addi	r3,sp,104
   90160:	dd001004 	addi	r20,sp,64
   90164:	d8c14215 	stw	r3,1288(sp)
   90168:	d8c14217 	ldw	r3,1288(sp)
   9016c:	dcc14615 	stw	r19,1304(sp)
   90170:	a0c5c83a 	sub	r2,r20,r3
   90174:	11c00a04 	addi	r7,r2,40
   90178:	99c0010e 	bge	r19,r7,90180 <___vfprintf_internal_r+0xa84>
   9017c:	d9c14615 	stw	r7,1304(sp)
   90180:	dcc14715 	stw	r19,1308(sp)
   90184:	d8800407 	ldb	r2,16(sp)
   90188:	103e4c26 	beq	r2,zero,8fabc <___vfprintf_internal_r+0x3c0>
   9018c:	d8814617 	ldw	r2,1304(sp)
   90190:	10800044 	addi	r2,r2,1
   90194:	d8814615 	stw	r2,1304(sp)
   90198:	003e4806 	br	8fabc <___vfprintf_internal_r+0x3c0>
   9019c:	d9814d17 	ldw	r6,1332(sp)
   901a0:	31800414 	ori	r6,r6,16
   901a4:	d9814d15 	stw	r6,1332(sp)
   901a8:	d8c14d17 	ldw	r3,1332(sp)
   901ac:	1880080c 	andi	r2,r3,32
   901b0:	1001271e 	bne	r2,zero,90650 <___vfprintf_internal_r+0xf54>
   901b4:	d9414d17 	ldw	r5,1332(sp)
   901b8:	2880040c 	andi	r2,r5,16
   901bc:	1002b61e 	bne	r2,zero,90c98 <___vfprintf_internal_r+0x159c>
   901c0:	d9814d17 	ldw	r6,1332(sp)
   901c4:	3080100c 	andi	r2,r6,64
   901c8:	1002b326 	beq	r2,zero,90c98 <___vfprintf_internal_r+0x159c>
   901cc:	3c00000b 	ldhu	r16,0(r7)
   901d0:	0009883a 	mov	r4,zero
   901d4:	39c00104 	addi	r7,r7,4
   901d8:	0023883a 	mov	r17,zero
   901dc:	d9c14115 	stw	r7,1284(sp)
   901e0:	d8000405 	stb	zero,16(sp)
   901e4:	003fd306 	br	90134 <___vfprintf_internal_r+0xa38>
   901e8:	d9014d17 	ldw	r4,1332(sp)
   901ec:	21000414 	ori	r4,r4,16
   901f0:	d9014d15 	stw	r4,1332(sp)
   901f4:	d9414d17 	ldw	r5,1332(sp)
   901f8:	2880080c 	andi	r2,r5,32
   901fc:	1001081e 	bne	r2,zero,90620 <___vfprintf_internal_r+0xf24>
   90200:	d8c14d17 	ldw	r3,1332(sp)
   90204:	1880040c 	andi	r2,r3,16
   90208:	1002b01e 	bne	r2,zero,90ccc <___vfprintf_internal_r+0x15d0>
   9020c:	d9014d17 	ldw	r4,1332(sp)
   90210:	2080100c 	andi	r2,r4,64
   90214:	1002ad26 	beq	r2,zero,90ccc <___vfprintf_internal_r+0x15d0>
   90218:	3c00000b 	ldhu	r16,0(r7)
   9021c:	01000044 	movi	r4,1
   90220:	39c00104 	addi	r7,r7,4
   90224:	0023883a 	mov	r17,zero
   90228:	d9c14115 	stw	r7,1284(sp)
   9022c:	d8000405 	stb	zero,16(sp)
   90230:	003fc006 	br	90134 <___vfprintf_internal_r+0xa38>
   90234:	d9015017 	ldw	r4,1344(sp)
   90238:	b00b883a 	mov	r5,r22
   9023c:	d9800d04 	addi	r6,sp,52
   90240:	008f6a40 	call	8f6a4 <__sprint_r>
   90244:	103ee51e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90248:	dc800f17 	ldw	r18,60(sp)
   9024c:	d8c01a04 	addi	r3,sp,104
   90250:	d9814d17 	ldw	r6,1332(sp)
   90254:	3080004c 	andi	r2,r6,1
   90258:	1005003a 	cmpeq	r2,r2,zero
   9025c:	103ea51e 	bne	r2,zero,8fcf4 <___vfprintf_internal_r+0x5f8>
   90260:	00800044 	movi	r2,1
   90264:	dc400e17 	ldw	r17,56(sp)
   90268:	18800115 	stw	r2,4(r3)
   9026c:	d8814a17 	ldw	r2,1320(sp)
   90270:	94800044 	addi	r18,r18,1
   90274:	8c400044 	addi	r17,r17,1
   90278:	18800015 	stw	r2,0(r3)
   9027c:	008001c4 	movi	r2,7
   90280:	dc800f15 	stw	r18,60(sp)
   90284:	dc400e15 	stw	r17,56(sp)
   90288:	14421e0e 	bge	r2,r17,90b04 <___vfprintf_internal_r+0x1408>
   9028c:	d9015017 	ldw	r4,1344(sp)
   90290:	b00b883a 	mov	r5,r22
   90294:	d9800d04 	addi	r6,sp,52
   90298:	008f6a40 	call	8f6a4 <__sprint_r>
   9029c:	103ecf1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   902a0:	dc800f17 	ldw	r18,60(sp)
   902a4:	d8c01a04 	addi	r3,sp,104
   902a8:	003e9206 	br	8fcf4 <___vfprintf_internal_r+0x5f8>
   902ac:	d9015017 	ldw	r4,1344(sp)
   902b0:	b00b883a 	mov	r5,r22
   902b4:	d9800d04 	addi	r6,sp,52
   902b8:	008f6a40 	call	8f6a4 <__sprint_r>
   902bc:	103ec026 	beq	r2,zero,8fdc0 <___vfprintf_internal_r+0x6c4>
   902c0:	003ec606 	br	8fddc <___vfprintf_internal_r+0x6e0>
   902c4:	d9015017 	ldw	r4,1344(sp)
   902c8:	b00b883a 	mov	r5,r22
   902cc:	d9800d04 	addi	r6,sp,52
   902d0:	d9c15215 	stw	r7,1352(sp)
   902d4:	008f6a40 	call	8f6a4 <__sprint_r>
   902d8:	d9c15217 	ldw	r7,1352(sp)
   902dc:	103ebf1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   902e0:	dc800f17 	ldw	r18,60(sp)
   902e4:	dc400e17 	ldw	r17,56(sp)
   902e8:	dd401a04 	addi	r21,sp,104
   902ec:	003e7406 	br	8fcc0 <___vfprintf_internal_r+0x5c4>
   902f0:	d9015017 	ldw	r4,1344(sp)
   902f4:	b00b883a 	mov	r5,r22
   902f8:	d9800d04 	addi	r6,sp,52
   902fc:	d9c15215 	stw	r7,1352(sp)
   90300:	008f6a40 	call	8f6a4 <__sprint_r>
   90304:	d9c15217 	ldw	r7,1352(sp)
   90308:	103eb41e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   9030c:	dd401a04 	addi	r21,sp,104
   90310:	003d6d06 	br	8f8c8 <___vfprintf_internal_r+0x1cc>
   90314:	d9015017 	ldw	r4,1344(sp)
   90318:	b00b883a 	mov	r5,r22
   9031c:	d9800d04 	addi	r6,sp,52
   90320:	d9c15215 	stw	r7,1352(sp)
   90324:	008f6a40 	call	8f6a4 <__sprint_r>
   90328:	d9c15217 	ldw	r7,1352(sp)
   9032c:	103eab1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90330:	dc800f17 	ldw	r18,60(sp)
   90334:	dc400e17 	ldw	r17,56(sp)
   90338:	dd401a04 	addi	r21,sp,104
   9033c:	003e3406 	br	8fc10 <___vfprintf_internal_r+0x514>
   90340:	d9015017 	ldw	r4,1344(sp)
   90344:	b00b883a 	mov	r5,r22
   90348:	d9800d04 	addi	r6,sp,52
   9034c:	d9c15215 	stw	r7,1352(sp)
   90350:	008f6a40 	call	8f6a4 <__sprint_r>
   90354:	d9c15217 	ldw	r7,1352(sp)
   90358:	103ea01e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   9035c:	dc800f17 	ldw	r18,60(sp)
   90360:	dc400e17 	ldw	r17,56(sp)
   90364:	dd401a04 	addi	r21,sp,104
   90368:	003e1c06 	br	8fbdc <___vfprintf_internal_r+0x4e0>
   9036c:	d9015017 	ldw	r4,1344(sp)
   90370:	b00b883a 	mov	r5,r22
   90374:	d9800d04 	addi	r6,sp,52
   90378:	d9c15215 	stw	r7,1352(sp)
   9037c:	008f6a40 	call	8f6a4 <__sprint_r>
   90380:	d9c15217 	ldw	r7,1352(sp)
   90384:	103e951e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90388:	dc800f17 	ldw	r18,60(sp)
   9038c:	dc400e17 	ldw	r17,56(sp)
   90390:	dd401a04 	addi	r21,sp,104
   90394:	003e0406 	br	8fba8 <___vfprintf_internal_r+0x4ac>
   90398:	d9000617 	ldw	r4,24(sp)
   9039c:	0102520e 	bge	zero,r4,90ce8 <___vfprintf_internal_r+0x15ec>
   903a0:	d9814817 	ldw	r6,1312(sp)
   903a4:	21807a16 	blt	r4,r6,90590 <___vfprintf_internal_r+0xe94>
   903a8:	d8814217 	ldw	r2,1288(sp)
   903ac:	91a5883a 	add	r18,r18,r6
   903b0:	8c400044 	addi	r17,r17,1
   903b4:	a8800015 	stw	r2,0(r21)
   903b8:	008001c4 	movi	r2,7
   903bc:	a9800115 	stw	r6,4(r21)
   903c0:	dc800f15 	stw	r18,60(sp)
   903c4:	dc400e15 	stw	r17,56(sp)
   903c8:	1442f616 	blt	r2,r17,90fa4 <___vfprintf_internal_r+0x18a8>
   903cc:	a8c00204 	addi	r3,r21,8
   903d0:	d9414817 	ldw	r5,1312(sp)
   903d4:	2161c83a 	sub	r16,r4,r5
   903d8:	043f9d0e 	bge	zero,r16,90250 <___vfprintf_internal_r+0xb54>
   903dc:	00800404 	movi	r2,16
   903e0:	1402130e 	bge	r2,r16,90c30 <___vfprintf_internal_r+0x1534>
   903e4:	dc400e17 	ldw	r17,56(sp)
   903e8:	1027883a 	mov	r19,r2
   903ec:	070002b4 	movhi	fp,10
   903f0:	e7391304 	addi	fp,fp,-7092
   903f4:	050001c4 	movi	r20,7
   903f8:	00000306 	br	90408 <___vfprintf_internal_r+0xd0c>
   903fc:	18c00204 	addi	r3,r3,8
   90400:	843ffc04 	addi	r16,r16,-16
   90404:	9c020d0e 	bge	r19,r16,90c3c <___vfprintf_internal_r+0x1540>
   90408:	94800404 	addi	r18,r18,16
   9040c:	8c400044 	addi	r17,r17,1
   90410:	1f000015 	stw	fp,0(r3)
   90414:	1cc00115 	stw	r19,4(r3)
   90418:	dc800f15 	stw	r18,60(sp)
   9041c:	dc400e15 	stw	r17,56(sp)
   90420:	a47ff60e 	bge	r20,r17,903fc <___vfprintf_internal_r+0xd00>
   90424:	d9015017 	ldw	r4,1344(sp)
   90428:	b00b883a 	mov	r5,r22
   9042c:	d9800d04 	addi	r6,sp,52
   90430:	008f6a40 	call	8f6a4 <__sprint_r>
   90434:	103e691e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90438:	dc800f17 	ldw	r18,60(sp)
   9043c:	dc400e17 	ldw	r17,56(sp)
   90440:	d8c01a04 	addi	r3,sp,104
   90444:	003fee06 	br	90400 <___vfprintf_internal_r+0xd04>
   90448:	d8814817 	ldw	r2,1312(sp)
   9044c:	143fffc4 	addi	r16,r2,-1
   90450:	043e970e 	bge	zero,r16,8feb0 <___vfprintf_internal_r+0x7b4>
   90454:	00800404 	movi	r2,16
   90458:	1400180e 	bge	r2,r16,904bc <___vfprintf_internal_r+0xdc0>
   9045c:	1029883a 	mov	r20,r2
   90460:	070002b4 	movhi	fp,10
   90464:	e7391304 	addi	fp,fp,-7092
   90468:	054001c4 	movi	r21,7
   9046c:	00000306 	br	9047c <___vfprintf_internal_r+0xd80>
   90470:	9cc00204 	addi	r19,r19,8
   90474:	843ffc04 	addi	r16,r16,-16
   90478:	a400120e 	bge	r20,r16,904c4 <___vfprintf_internal_r+0xdc8>
   9047c:	94800404 	addi	r18,r18,16
   90480:	8c400044 	addi	r17,r17,1
   90484:	9f000015 	stw	fp,0(r19)
   90488:	9d000115 	stw	r20,4(r19)
   9048c:	dc800f15 	stw	r18,60(sp)
   90490:	dc400e15 	stw	r17,56(sp)
   90494:	ac7ff60e 	bge	r21,r17,90470 <___vfprintf_internal_r+0xd74>
   90498:	d9015017 	ldw	r4,1344(sp)
   9049c:	b00b883a 	mov	r5,r22
   904a0:	d9800d04 	addi	r6,sp,52
   904a4:	008f6a40 	call	8f6a4 <__sprint_r>
   904a8:	103e4c1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   904ac:	dc800f17 	ldw	r18,60(sp)
   904b0:	dc400e17 	ldw	r17,56(sp)
   904b4:	dcc01a04 	addi	r19,sp,104
   904b8:	003fee06 	br	90474 <___vfprintf_internal_r+0xd78>
   904bc:	070002b4 	movhi	fp,10
   904c0:	e7391304 	addi	fp,fp,-7092
   904c4:	9425883a 	add	r18,r18,r16
   904c8:	8c400044 	addi	r17,r17,1
   904cc:	008001c4 	movi	r2,7
   904d0:	9f000015 	stw	fp,0(r19)
   904d4:	9c000115 	stw	r16,4(r19)
   904d8:	dc800f15 	stw	r18,60(sp)
   904dc:	dc400e15 	stw	r17,56(sp)
   904e0:	147e720e 	bge	r2,r17,8feac <___vfprintf_internal_r+0x7b0>
   904e4:	d9015017 	ldw	r4,1344(sp)
   904e8:	b00b883a 	mov	r5,r22
   904ec:	d9800d04 	addi	r6,sp,52
   904f0:	008f6a40 	call	8f6a4 <__sprint_r>
   904f4:	103e391e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   904f8:	dc800f17 	ldw	r18,60(sp)
   904fc:	dc400e17 	ldw	r17,56(sp)
   90500:	dcc01a04 	addi	r19,sp,104
   90504:	003e6a06 	br	8feb0 <___vfprintf_internal_r+0x7b4>
   90508:	d9015017 	ldw	r4,1344(sp)
   9050c:	b00b883a 	mov	r5,r22
   90510:	d9800d04 	addi	r6,sp,52
   90514:	d9c15215 	stw	r7,1352(sp)
   90518:	008f6a40 	call	8f6a4 <__sprint_r>
   9051c:	d9c15217 	ldw	r7,1352(sp)
   90520:	103e2e1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90524:	dc800f17 	ldw	r18,60(sp)
   90528:	dc400e17 	ldw	r17,56(sp)
   9052c:	dd401a04 	addi	r21,sp,104
   90530:	003dba06 	br	8fc1c <___vfprintf_internal_r+0x520>
   90534:	d9015017 	ldw	r4,1344(sp)
   90538:	b00b883a 	mov	r5,r22
   9053c:	d9800d04 	addi	r6,sp,52
   90540:	008f6a40 	call	8f6a4 <__sprint_r>
   90544:	103e251e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90548:	dc800f17 	ldw	r18,60(sp)
   9054c:	dc400e17 	ldw	r17,56(sp)
   90550:	dcc01a04 	addi	r19,sp,104
   90554:	003e4206 	br	8fe60 <___vfprintf_internal_r+0x764>
   90558:	d9015017 	ldw	r4,1344(sp)
   9055c:	b00b883a 	mov	r5,r22
   90560:	d9800d04 	addi	r6,sp,52
   90564:	008f6a40 	call	8f6a4 <__sprint_r>
   90568:	103e1c1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   9056c:	dc800f17 	ldw	r18,60(sp)
   90570:	dc400e17 	ldw	r17,56(sp)
   90574:	d8c01a04 	addi	r3,sp,104
   90578:	003e2e06 	br	8fe34 <___vfprintf_internal_r+0x738>
   9057c:	d9414d17 	ldw	r5,1332(sp)
   90580:	2880004c 	andi	r2,r5,1
   90584:	1005003a 	cmpeq	r2,r2,zero
   90588:	103dda1e 	bne	r2,zero,8fcf4 <___vfprintf_internal_r+0x5f8>
   9058c:	003e9f06 	br	9000c <___vfprintf_internal_r+0x910>
   90590:	d8c14217 	ldw	r3,1288(sp)
   90594:	9125883a 	add	r18,r18,r4
   90598:	8c400044 	addi	r17,r17,1
   9059c:	008001c4 	movi	r2,7
   905a0:	a8c00015 	stw	r3,0(r21)
   905a4:	a9000115 	stw	r4,4(r21)
   905a8:	dc800f15 	stw	r18,60(sp)
   905ac:	dc400e15 	stw	r17,56(sp)
   905b0:	14426616 	blt	r2,r17,90f4c <___vfprintf_internal_r+0x1850>
   905b4:	a8c00204 	addi	r3,r21,8
   905b8:	d9414a17 	ldw	r5,1320(sp)
   905bc:	00800044 	movi	r2,1
   905c0:	94800044 	addi	r18,r18,1
   905c4:	8c400044 	addi	r17,r17,1
   905c8:	18800115 	stw	r2,4(r3)
   905cc:	008001c4 	movi	r2,7
   905d0:	19400015 	stw	r5,0(r3)
   905d4:	dc800f15 	stw	r18,60(sp)
   905d8:	dc400e15 	stw	r17,56(sp)
   905dc:	2021883a 	mov	r16,r4
   905e0:	14425016 	blt	r2,r17,90f24 <___vfprintf_internal_r+0x1828>
   905e4:	19400204 	addi	r5,r3,8
   905e8:	d9814817 	ldw	r6,1312(sp)
   905ec:	8c400044 	addi	r17,r17,1
   905f0:	dc400e15 	stw	r17,56(sp)
   905f4:	3107c83a 	sub	r3,r6,r4
   905f8:	d9014217 	ldw	r4,1288(sp)
   905fc:	90e5883a 	add	r18,r18,r3
   90600:	28c00115 	stw	r3,4(r5)
   90604:	8105883a 	add	r2,r16,r4
   90608:	28800015 	stw	r2,0(r5)
   9060c:	008001c4 	movi	r2,7
   90610:	dc800f15 	stw	r18,60(sp)
   90614:	147f1d16 	blt	r2,r17,9028c <___vfprintf_internal_r+0xb90>
   90618:	28c00204 	addi	r3,r5,8
   9061c:	003db506 	br	8fcf4 <___vfprintf_internal_r+0x5f8>
   90620:	3c000017 	ldw	r16,0(r7)
   90624:	3c400117 	ldw	r17,4(r7)
   90628:	39800204 	addi	r6,r7,8
   9062c:	01000044 	movi	r4,1
   90630:	d9814115 	stw	r6,1284(sp)
   90634:	d8000405 	stb	zero,16(sp)
   90638:	003ebe06 	br	90134 <___vfprintf_internal_r+0xa38>
   9063c:	3c000017 	ldw	r16,0(r7)
   90640:	3c400117 	ldw	r17,4(r7)
   90644:	38800204 	addi	r2,r7,8
   90648:	d8814115 	stw	r2,1284(sp)
   9064c:	003eb706 	br	9012c <___vfprintf_internal_r+0xa30>
   90650:	3c000017 	ldw	r16,0(r7)
   90654:	3c400117 	ldw	r17,4(r7)
   90658:	39000204 	addi	r4,r7,8
   9065c:	d9014115 	stw	r4,1284(sp)
   90660:	0009883a 	mov	r4,zero
   90664:	d8000405 	stb	zero,16(sp)
   90668:	003eb206 	br	90134 <___vfprintf_internal_r+0xa38>
   9066c:	38c00017 	ldw	r3,0(r7)
   90670:	39c00104 	addi	r7,r7,4
   90674:	d8c14b15 	stw	r3,1324(sp)
   90678:	1800d10e 	bge	r3,zero,909c0 <___vfprintf_internal_r+0x12c4>
   9067c:	00c7c83a 	sub	r3,zero,r3
   90680:	d8c14b15 	stw	r3,1324(sp)
   90684:	d9014d17 	ldw	r4,1332(sp)
   90688:	b8c00007 	ldb	r3,0(r23)
   9068c:	21000114 	ori	r4,r4,4
   90690:	d9014d15 	stw	r4,1332(sp)
   90694:	003c9806 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   90698:	d9814d17 	ldw	r6,1332(sp)
   9069c:	3080080c 	andi	r2,r6,32
   906a0:	1001f026 	beq	r2,zero,90e64 <___vfprintf_internal_r+0x1768>
   906a4:	d9014c17 	ldw	r4,1328(sp)
   906a8:	38800017 	ldw	r2,0(r7)
   906ac:	39c00104 	addi	r7,r7,4
   906b0:	d9c14115 	stw	r7,1284(sp)
   906b4:	2007d7fa 	srai	r3,r4,31
   906b8:	d9c14117 	ldw	r7,1284(sp)
   906bc:	11000015 	stw	r4,0(r2)
   906c0:	10c00115 	stw	r3,4(r2)
   906c4:	003c6906 	br	8f86c <___vfprintf_internal_r+0x170>
   906c8:	b8c00007 	ldb	r3,0(r23)
   906cc:	00801b04 	movi	r2,108
   906d0:	18824f26 	beq	r3,r2,91010 <___vfprintf_internal_r+0x1914>
   906d4:	d9414d17 	ldw	r5,1332(sp)
   906d8:	29400414 	ori	r5,r5,16
   906dc:	d9414d15 	stw	r5,1332(sp)
   906e0:	003c8506 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   906e4:	d9814d17 	ldw	r6,1332(sp)
   906e8:	b8c00007 	ldb	r3,0(r23)
   906ec:	31800814 	ori	r6,r6,32
   906f0:	d9814d15 	stw	r6,1332(sp)
   906f4:	003c8006 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   906f8:	d8814d17 	ldw	r2,1332(sp)
   906fc:	3c000017 	ldw	r16,0(r7)
   90700:	00c01e04 	movi	r3,120
   90704:	10800094 	ori	r2,r2,2
   90708:	d8814d15 	stw	r2,1332(sp)
   9070c:	39c00104 	addi	r7,r7,4
   90710:	014002b4 	movhi	r5,10
   90714:	2978fb04 	addi	r5,r5,-7188
   90718:	00800c04 	movi	r2,48
   9071c:	0023883a 	mov	r17,zero
   90720:	01000084 	movi	r4,2
   90724:	d9c14115 	stw	r7,1284(sp)
   90728:	d8c14e15 	stw	r3,1336(sp)
   9072c:	d9414515 	stw	r5,1300(sp)
   90730:	d8800505 	stb	r2,20(sp)
   90734:	d8c00545 	stb	r3,21(sp)
   90738:	d8000405 	stb	zero,16(sp)
   9073c:	003e7d06 	br	90134 <___vfprintf_internal_r+0xa38>
   90740:	d8814d17 	ldw	r2,1332(sp)
   90744:	b8c00007 	ldb	r3,0(r23)
   90748:	10801014 	ori	r2,r2,64
   9074c:	d8814d15 	stw	r2,1332(sp)
   90750:	003c6906 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   90754:	d9414d17 	ldw	r5,1332(sp)
   90758:	2880020c 	andi	r2,r5,8
   9075c:	1001df26 	beq	r2,zero,90edc <___vfprintf_internal_r+0x17e0>
   90760:	39800017 	ldw	r6,0(r7)
   90764:	38800204 	addi	r2,r7,8
   90768:	d8814115 	stw	r2,1284(sp)
   9076c:	d9814315 	stw	r6,1292(sp)
   90770:	39c00117 	ldw	r7,4(r7)
   90774:	d9c14415 	stw	r7,1296(sp)
   90778:	d9014317 	ldw	r4,1292(sp)
   9077c:	d9414417 	ldw	r5,1296(sp)
   90780:	00957e80 	call	957e8 <__isinfd>
   90784:	10021726 	beq	r2,zero,90fe4 <___vfprintf_internal_r+0x18e8>
   90788:	d9014317 	ldw	r4,1292(sp)
   9078c:	d9414417 	ldw	r5,1296(sp)
   90790:	000d883a 	mov	r6,zero
   90794:	000f883a 	mov	r7,zero
   90798:	00974c40 	call	974c4 <__ltdf2>
   9079c:	1002ca16 	blt	r2,zero,912c8 <___vfprintf_internal_r+0x1bcc>
   907a0:	d9414e17 	ldw	r5,1336(sp)
   907a4:	008011c4 	movi	r2,71
   907a8:	11420a16 	blt	r2,r5,90fd4 <___vfprintf_internal_r+0x18d8>
   907ac:	018002b4 	movhi	r6,10
   907b0:	31b90004 	addi	r6,r6,-7168
   907b4:	d9814215 	stw	r6,1288(sp)
   907b8:	d9014d17 	ldw	r4,1332(sp)
   907bc:	00c000c4 	movi	r3,3
   907c0:	00bfdfc4 	movi	r2,-129
   907c4:	2088703a 	and	r4,r4,r2
   907c8:	180f883a 	mov	r7,r3
   907cc:	d8c14615 	stw	r3,1304(sp)
   907d0:	d9014d15 	stw	r4,1332(sp)
   907d4:	d8014715 	stw	zero,1308(sp)
   907d8:	003e6a06 	br	90184 <___vfprintf_internal_r+0xa88>
   907dc:	38800017 	ldw	r2,0(r7)
   907e0:	00c00044 	movi	r3,1
   907e4:	39c00104 	addi	r7,r7,4
   907e8:	d9c14115 	stw	r7,1284(sp)
   907ec:	d9001004 	addi	r4,sp,64
   907f0:	180f883a 	mov	r7,r3
   907f4:	d8c14615 	stw	r3,1304(sp)
   907f8:	d9014215 	stw	r4,1288(sp)
   907fc:	d8801005 	stb	r2,64(sp)
   90800:	d8000405 	stb	zero,16(sp)
   90804:	003cac06 	br	8fab8 <___vfprintf_internal_r+0x3bc>
   90808:	014002b4 	movhi	r5,10
   9080c:	29790604 	addi	r5,r5,-7144
   90810:	d9414515 	stw	r5,1300(sp)
   90814:	d9814d17 	ldw	r6,1332(sp)
   90818:	3080080c 	andi	r2,r6,32
   9081c:	1000f926 	beq	r2,zero,90c04 <___vfprintf_internal_r+0x1508>
   90820:	3c000017 	ldw	r16,0(r7)
   90824:	3c400117 	ldw	r17,4(r7)
   90828:	38800204 	addi	r2,r7,8
   9082c:	d8814115 	stw	r2,1284(sp)
   90830:	d9414d17 	ldw	r5,1332(sp)
   90834:	2880004c 	andi	r2,r5,1
   90838:	1005003a 	cmpeq	r2,r2,zero
   9083c:	1000b31e 	bne	r2,zero,90b0c <___vfprintf_internal_r+0x1410>
   90840:	8444b03a 	or	r2,r16,r17
   90844:	1000b126 	beq	r2,zero,90b0c <___vfprintf_internal_r+0x1410>
   90848:	d9814e17 	ldw	r6,1336(sp)
   9084c:	29400094 	ori	r5,r5,2
   90850:	00800c04 	movi	r2,48
   90854:	01000084 	movi	r4,2
   90858:	d9414d15 	stw	r5,1332(sp)
   9085c:	d8800505 	stb	r2,20(sp)
   90860:	d9800545 	stb	r6,21(sp)
   90864:	d8000405 	stb	zero,16(sp)
   90868:	003e3206 	br	90134 <___vfprintf_internal_r+0xa38>
   9086c:	018002b4 	movhi	r6,10
   90870:	31b8fb04 	addi	r6,r6,-7188
   90874:	d9814515 	stw	r6,1300(sp)
   90878:	003fe606 	br	90814 <___vfprintf_internal_r+0x1118>
   9087c:	00800ac4 	movi	r2,43
   90880:	d8800405 	stb	r2,16(sp)
   90884:	b8c00007 	ldb	r3,0(r23)
   90888:	003c1b06 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   9088c:	d8814d17 	ldw	r2,1332(sp)
   90890:	b8c00007 	ldb	r3,0(r23)
   90894:	10800054 	ori	r2,r2,1
   90898:	d8814d15 	stw	r2,1332(sp)
   9089c:	003c1606 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   908a0:	d8800407 	ldb	r2,16(sp)
   908a4:	1000461e 	bne	r2,zero,909c0 <___vfprintf_internal_r+0x12c4>
   908a8:	00800804 	movi	r2,32
   908ac:	d8800405 	stb	r2,16(sp)
   908b0:	b8c00007 	ldb	r3,0(r23)
   908b4:	003c1006 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   908b8:	d9814d17 	ldw	r6,1332(sp)
   908bc:	b8c00007 	ldb	r3,0(r23)
   908c0:	31800214 	ori	r6,r6,8
   908c4:	d9814d15 	stw	r6,1332(sp)
   908c8:	003c0b06 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   908cc:	0007883a 	mov	r3,zero
   908d0:	01000244 	movi	r4,9
   908d4:	188002a4 	muli	r2,r3,10
   908d8:	b8c00007 	ldb	r3,0(r23)
   908dc:	d9814e17 	ldw	r6,1336(sp)
   908e0:	bdc00044 	addi	r23,r23,1
   908e4:	d8c14e15 	stw	r3,1336(sp)
   908e8:	d9414e17 	ldw	r5,1336(sp)
   908ec:	3085883a 	add	r2,r6,r2
   908f0:	10fff404 	addi	r3,r2,-48
   908f4:	28bff404 	addi	r2,r5,-48
   908f8:	20bff62e 	bgeu	r4,r2,908d4 <___vfprintf_internal_r+0x11d8>
   908fc:	d8c14b15 	stw	r3,1324(sp)
   90900:	003bff06 	br	8f900 <___vfprintf_internal_r+0x204>
   90904:	d9414d17 	ldw	r5,1332(sp)
   90908:	b8c00007 	ldb	r3,0(r23)
   9090c:	29402014 	ori	r5,r5,128
   90910:	d9414d15 	stw	r5,1332(sp)
   90914:	003bf806 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   90918:	b8c00007 	ldb	r3,0(r23)
   9091c:	00800a84 	movi	r2,42
   90920:	bdc00044 	addi	r23,r23,1
   90924:	18831526 	beq	r3,r2,9157c <___vfprintf_internal_r+0x1e80>
   90928:	d8c14e15 	stw	r3,1336(sp)
   9092c:	18bff404 	addi	r2,r3,-48
   90930:	00c00244 	movi	r3,9
   90934:	18827836 	bltu	r3,r2,91318 <___vfprintf_internal_r+0x1c1c>
   90938:	000d883a 	mov	r6,zero
   9093c:	308002a4 	muli	r2,r6,10
   90940:	b9800007 	ldb	r6,0(r23)
   90944:	d9414e17 	ldw	r5,1336(sp)
   90948:	bdc00044 	addi	r23,r23,1
   9094c:	d9814e15 	stw	r6,1336(sp)
   90950:	d9014e17 	ldw	r4,1336(sp)
   90954:	1145883a 	add	r2,r2,r5
   90958:	11bff404 	addi	r6,r2,-48
   9095c:	20bff404 	addi	r2,r4,-48
   90960:	18bff62e 	bgeu	r3,r2,9093c <___vfprintf_internal_r+0x1240>
   90964:	3027883a 	mov	r19,r6
   90968:	303be50e 	bge	r6,zero,8f900 <___vfprintf_internal_r+0x204>
   9096c:	04ffffc4 	movi	r19,-1
   90970:	003be306 	br	8f900 <___vfprintf_internal_r+0x204>
   90974:	d8000405 	stb	zero,16(sp)
   90978:	39800017 	ldw	r6,0(r7)
   9097c:	39c00104 	addi	r7,r7,4
   90980:	d9c14115 	stw	r7,1284(sp)
   90984:	d9814215 	stw	r6,1288(sp)
   90988:	3001c926 	beq	r6,zero,910b0 <___vfprintf_internal_r+0x19b4>
   9098c:	98000e16 	blt	r19,zero,909c8 <___vfprintf_internal_r+0x12cc>
   90990:	d9014217 	ldw	r4,1288(sp)
   90994:	000b883a 	mov	r5,zero
   90998:	980d883a 	mov	r6,r19
   9099c:	008eba40 	call	8eba4 <memchr>
   909a0:	10025926 	beq	r2,zero,91308 <___vfprintf_internal_r+0x1c0c>
   909a4:	d8c14217 	ldw	r3,1288(sp)
   909a8:	10cfc83a 	sub	r7,r2,r3
   909ac:	99c19e16 	blt	r19,r7,91028 <___vfprintf_internal_r+0x192c>
   909b0:	d9c14615 	stw	r7,1304(sp)
   909b4:	38000916 	blt	r7,zero,909dc <___vfprintf_internal_r+0x12e0>
   909b8:	d8014715 	stw	zero,1308(sp)
   909bc:	003df106 	br	90184 <___vfprintf_internal_r+0xa88>
   909c0:	b8c00007 	ldb	r3,0(r23)
   909c4:	003bcc06 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   909c8:	d9014217 	ldw	r4,1288(sp)
   909cc:	008f3200 	call	8f320 <strlen>
   909d0:	d8814615 	stw	r2,1304(sp)
   909d4:	100f883a 	mov	r7,r2
   909d8:	103ff70e 	bge	r2,zero,909b8 <___vfprintf_internal_r+0x12bc>
   909dc:	d8014615 	stw	zero,1304(sp)
   909e0:	d8014715 	stw	zero,1308(sp)
   909e4:	003de706 	br	90184 <___vfprintf_internal_r+0xa88>
   909e8:	20c03fcc 	andi	r3,r4,255
   909ec:	00800044 	movi	r2,1
   909f0:	18802d26 	beq	r3,r2,90aa8 <___vfprintf_internal_r+0x13ac>
   909f4:	18800e36 	bltu	r3,r2,90a30 <___vfprintf_internal_r+0x1334>
   909f8:	00800084 	movi	r2,2
   909fc:	1880fa26 	beq	r3,r2,90de8 <___vfprintf_internal_r+0x16ec>
   90a00:	010002b4 	movhi	r4,10
   90a04:	21390b04 	addi	r4,r4,-7124
   90a08:	008f3200 	call	8f320 <strlen>
   90a0c:	100f883a 	mov	r7,r2
   90a10:	dcc14615 	stw	r19,1304(sp)
   90a14:	9880010e 	bge	r19,r2,90a1c <___vfprintf_internal_r+0x1320>
   90a18:	d8814615 	stw	r2,1304(sp)
   90a1c:	008002b4 	movhi	r2,10
   90a20:	10b90b04 	addi	r2,r2,-7124
   90a24:	dcc14715 	stw	r19,1308(sp)
   90a28:	d8814215 	stw	r2,1288(sp)
   90a2c:	003dd506 	br	90184 <___vfprintf_internal_r+0xa88>
   90a30:	d9401a04 	addi	r5,sp,104
   90a34:	dd001004 	addi	r20,sp,64
   90a38:	d9414215 	stw	r5,1288(sp)
   90a3c:	880a977a 	slli	r5,r17,29
   90a40:	d9814217 	ldw	r6,1288(sp)
   90a44:	8004d0fa 	srli	r2,r16,3
   90a48:	8806d0fa 	srli	r3,r17,3
   90a4c:	810001cc 	andi	r4,r16,7
   90a50:	2884b03a 	or	r2,r5,r2
   90a54:	31bfffc4 	addi	r6,r6,-1
   90a58:	21000c04 	addi	r4,r4,48
   90a5c:	d9814215 	stw	r6,1288(sp)
   90a60:	10cab03a 	or	r5,r2,r3
   90a64:	31000005 	stb	r4,0(r6)
   90a68:	1021883a 	mov	r16,r2
   90a6c:	1823883a 	mov	r17,r3
   90a70:	283ff21e 	bne	r5,zero,90a3c <___vfprintf_internal_r+0x1340>
   90a74:	d8c14d17 	ldw	r3,1332(sp)
   90a78:	1880004c 	andi	r2,r3,1
   90a7c:	1005003a 	cmpeq	r2,r2,zero
   90a80:	103db91e 	bne	r2,zero,90168 <___vfprintf_internal_r+0xa6c>
   90a84:	20803fcc 	andi	r2,r4,255
   90a88:	1080201c 	xori	r2,r2,128
   90a8c:	10bfe004 	addi	r2,r2,-128
   90a90:	00c00c04 	movi	r3,48
   90a94:	10fdb426 	beq	r2,r3,90168 <___vfprintf_internal_r+0xa6c>
   90a98:	31bfffc4 	addi	r6,r6,-1
   90a9c:	d9814215 	stw	r6,1288(sp)
   90aa0:	30c00005 	stb	r3,0(r6)
   90aa4:	003db006 	br	90168 <___vfprintf_internal_r+0xa6c>
   90aa8:	88800068 	cmpgeui	r2,r17,1
   90aac:	10002c1e 	bne	r2,zero,90b60 <___vfprintf_internal_r+0x1464>
   90ab0:	8800021e 	bne	r17,zero,90abc <___vfprintf_internal_r+0x13c0>
   90ab4:	00800244 	movi	r2,9
   90ab8:	14002936 	bltu	r2,r16,90b60 <___vfprintf_internal_r+0x1464>
   90abc:	d90019c4 	addi	r4,sp,103
   90ac0:	dd001004 	addi	r20,sp,64
   90ac4:	d9014215 	stw	r4,1288(sp)
   90ac8:	d9014217 	ldw	r4,1288(sp)
   90acc:	80800c04 	addi	r2,r16,48
   90ad0:	20800005 	stb	r2,0(r4)
   90ad4:	003da406 	br	90168 <___vfprintf_internal_r+0xa6c>
   90ad8:	dc400e17 	ldw	r17,56(sp)
   90adc:	070002b4 	movhi	fp,10
   90ae0:	e7391304 	addi	fp,fp,-7092
   90ae4:	9425883a 	add	r18,r18,r16
   90ae8:	8c400044 	addi	r17,r17,1
   90aec:	008001c4 	movi	r2,7
   90af0:	1f000015 	stw	fp,0(r3)
   90af4:	1c000115 	stw	r16,4(r3)
   90af8:	dc800f15 	stw	r18,60(sp)
   90afc:	dc400e15 	stw	r17,56(sp)
   90b00:	147de216 	blt	r2,r17,9028c <___vfprintf_internal_r+0xb90>
   90b04:	18c00204 	addi	r3,r3,8
   90b08:	003c7a06 	br	8fcf4 <___vfprintf_internal_r+0x5f8>
   90b0c:	01000084 	movi	r4,2
   90b10:	d8000405 	stb	zero,16(sp)
   90b14:	003d8706 	br	90134 <___vfprintf_internal_r+0xa38>
   90b18:	d9814d17 	ldw	r6,1332(sp)
   90b1c:	30c4703a 	and	r2,r6,r3
   90b20:	1005003a 	cmpeq	r2,r2,zero
   90b24:	103cb926 	beq	r2,zero,8fe0c <___vfprintf_internal_r+0x710>
   90b28:	d9014217 	ldw	r4,1288(sp)
   90b2c:	94800044 	addi	r18,r18,1
   90b30:	8c400044 	addi	r17,r17,1
   90b34:	008001c4 	movi	r2,7
   90b38:	a9000015 	stw	r4,0(r21)
   90b3c:	a8c00115 	stw	r3,4(r21)
   90b40:	dc800f15 	stw	r18,60(sp)
   90b44:	dc400e15 	stw	r17,56(sp)
   90b48:	147e6616 	blt	r2,r17,904e4 <___vfprintf_internal_r+0xde8>
   90b4c:	acc00204 	addi	r19,r21,8
   90b50:	003cd706 	br	8feb0 <___vfprintf_internal_r+0x7b4>
   90b54:	070002b4 	movhi	fp,10
   90b58:	e7391304 	addi	fp,fp,-7092
   90b5c:	003c4f06 	br	8fc9c <___vfprintf_internal_r+0x5a0>
   90b60:	dd001004 	addi	r20,sp,64
   90b64:	dc801a04 	addi	r18,sp,104
   90b68:	8009883a 	mov	r4,r16
   90b6c:	880b883a 	mov	r5,r17
   90b70:	01800284 	movi	r6,10
   90b74:	000f883a 	mov	r7,zero
   90b78:	00961d40 	call	961d4 <__umoddi3>
   90b7c:	12000c04 	addi	r8,r2,48
   90b80:	94bfffc4 	addi	r18,r18,-1
   90b84:	8009883a 	mov	r4,r16
   90b88:	880b883a 	mov	r5,r17
   90b8c:	01800284 	movi	r6,10
   90b90:	000f883a 	mov	r7,zero
   90b94:	92000005 	stb	r8,0(r18)
   90b98:	0095bf80 	call	95bf8 <__udivdi3>
   90b9c:	1009883a 	mov	r4,r2
   90ba0:	1021883a 	mov	r16,r2
   90ba4:	18800068 	cmpgeui	r2,r3,1
   90ba8:	1823883a 	mov	r17,r3
   90bac:	103fee1e 	bne	r2,zero,90b68 <___vfprintf_internal_r+0x146c>
   90bb0:	1800021e 	bne	r3,zero,90bbc <___vfprintf_internal_r+0x14c0>
   90bb4:	00800244 	movi	r2,9
   90bb8:	113feb36 	bltu	r2,r4,90b68 <___vfprintf_internal_r+0x146c>
   90bbc:	94bfffc4 	addi	r18,r18,-1
   90bc0:	dc814215 	stw	r18,1288(sp)
   90bc4:	003fc006 	br	90ac8 <___vfprintf_internal_r+0x13cc>
   90bc8:	d9014d17 	ldw	r4,1332(sp)
   90bcc:	2080004c 	andi	r2,r4,1
   90bd0:	10009a1e 	bne	r2,zero,90e3c <___vfprintf_internal_r+0x1740>
   90bd4:	d9401a04 	addi	r5,sp,104
   90bd8:	dd001004 	addi	r20,sp,64
   90bdc:	d9414215 	stw	r5,1288(sp)
   90be0:	003d6106 	br	90168 <___vfprintf_internal_r+0xa6c>
   90be4:	d9015017 	ldw	r4,1344(sp)
   90be8:	b00b883a 	mov	r5,r22
   90bec:	d9800d04 	addi	r6,sp,52
   90bf0:	008f6a40 	call	8f6a4 <__sprint_r>
   90bf4:	103c791e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90bf8:	dc800f17 	ldw	r18,60(sp)
   90bfc:	d8c01a04 	addi	r3,sp,104
   90c00:	003cff06 	br	90000 <___vfprintf_internal_r+0x904>
   90c04:	d8c14d17 	ldw	r3,1332(sp)
   90c08:	1880040c 	andi	r2,r3,16
   90c0c:	1000711e 	bne	r2,zero,90dd4 <___vfprintf_internal_r+0x16d8>
   90c10:	d9014d17 	ldw	r4,1332(sp)
   90c14:	2080100c 	andi	r2,r4,64
   90c18:	10006e26 	beq	r2,zero,90dd4 <___vfprintf_internal_r+0x16d8>
   90c1c:	3c00000b 	ldhu	r16,0(r7)
   90c20:	0023883a 	mov	r17,zero
   90c24:	39c00104 	addi	r7,r7,4
   90c28:	d9c14115 	stw	r7,1284(sp)
   90c2c:	003f0006 	br	90830 <___vfprintf_internal_r+0x1134>
   90c30:	dc400e17 	ldw	r17,56(sp)
   90c34:	070002b4 	movhi	fp,10
   90c38:	e7391304 	addi	fp,fp,-7092
   90c3c:	9425883a 	add	r18,r18,r16
   90c40:	8c400044 	addi	r17,r17,1
   90c44:	008001c4 	movi	r2,7
   90c48:	1f000015 	stw	fp,0(r3)
   90c4c:	1c000115 	stw	r16,4(r3)
   90c50:	dc800f15 	stw	r18,60(sp)
   90c54:	dc400e15 	stw	r17,56(sp)
   90c58:	147d7616 	blt	r2,r17,90234 <___vfprintf_internal_r+0xb38>
   90c5c:	18c00204 	addi	r3,r3,8
   90c60:	003d7b06 	br	90250 <___vfprintf_internal_r+0xb54>
   90c64:	dc800f17 	ldw	r18,60(sp)
   90c68:	dc400e17 	ldw	r17,56(sp)
   90c6c:	070002b4 	movhi	fp,10
   90c70:	e7391704 	addi	fp,fp,-7076
   90c74:	003bc006 	br	8fb78 <___vfprintf_internal_r+0x47c>
   90c78:	d9015017 	ldw	r4,1344(sp)
   90c7c:	b00b883a 	mov	r5,r22
   90c80:	d9800d04 	addi	r6,sp,52
   90c84:	008f6a40 	call	8f6a4 <__sprint_r>
   90c88:	103c541e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90c8c:	dc800f17 	ldw	r18,60(sp)
   90c90:	d8c01a04 	addi	r3,sp,104
   90c94:	003ce906 	br	9003c <___vfprintf_internal_r+0x940>
   90c98:	3c000017 	ldw	r16,0(r7)
   90c9c:	0009883a 	mov	r4,zero
   90ca0:	39c00104 	addi	r7,r7,4
   90ca4:	0023883a 	mov	r17,zero
   90ca8:	d9c14115 	stw	r7,1284(sp)
   90cac:	d8000405 	stb	zero,16(sp)
   90cb0:	003d2006 	br	90134 <___vfprintf_internal_r+0xa38>
   90cb4:	38800017 	ldw	r2,0(r7)
   90cb8:	39c00104 	addi	r7,r7,4
   90cbc:	d9c14115 	stw	r7,1284(sp)
   90cc0:	1023d7fa 	srai	r17,r2,31
   90cc4:	1021883a 	mov	r16,r2
   90cc8:	003d1806 	br	9012c <___vfprintf_internal_r+0xa30>
   90ccc:	3c000017 	ldw	r16,0(r7)
   90cd0:	01000044 	movi	r4,1
   90cd4:	39c00104 	addi	r7,r7,4
   90cd8:	0023883a 	mov	r17,zero
   90cdc:	d9c14115 	stw	r7,1284(sp)
   90ce0:	d8000405 	stb	zero,16(sp)
   90ce4:	003d1306 	br	90134 <___vfprintf_internal_r+0xa38>
   90ce8:	008002b4 	movhi	r2,10
   90cec:	10b91204 	addi	r2,r2,-7096
   90cf0:	94800044 	addi	r18,r18,1
   90cf4:	8c400044 	addi	r17,r17,1
   90cf8:	a8800015 	stw	r2,0(r21)
   90cfc:	00c00044 	movi	r3,1
   90d00:	008001c4 	movi	r2,7
   90d04:	a8c00115 	stw	r3,4(r21)
   90d08:	dc800f15 	stw	r18,60(sp)
   90d0c:	dc400e15 	stw	r17,56(sp)
   90d10:	1440ca16 	blt	r2,r17,9103c <___vfprintf_internal_r+0x1940>
   90d14:	a8c00204 	addi	r3,r21,8
   90d18:	2000061e 	bne	r4,zero,90d34 <___vfprintf_internal_r+0x1638>
   90d1c:	d9414817 	ldw	r5,1312(sp)
   90d20:	2800041e 	bne	r5,zero,90d34 <___vfprintf_internal_r+0x1638>
   90d24:	d9814d17 	ldw	r6,1332(sp)
   90d28:	3080004c 	andi	r2,r6,1
   90d2c:	1005003a 	cmpeq	r2,r2,zero
   90d30:	103bf01e 	bne	r2,zero,8fcf4 <___vfprintf_internal_r+0x5f8>
   90d34:	00800044 	movi	r2,1
   90d38:	dc400e17 	ldw	r17,56(sp)
   90d3c:	18800115 	stw	r2,4(r3)
   90d40:	d8814a17 	ldw	r2,1320(sp)
   90d44:	94800044 	addi	r18,r18,1
   90d48:	8c400044 	addi	r17,r17,1
   90d4c:	18800015 	stw	r2,0(r3)
   90d50:	008001c4 	movi	r2,7
   90d54:	dc800f15 	stw	r18,60(sp)
   90d58:	dc400e15 	stw	r17,56(sp)
   90d5c:	1440ca16 	blt	r2,r17,91088 <___vfprintf_internal_r+0x198c>
   90d60:	18c00204 	addi	r3,r3,8
   90d64:	0121c83a 	sub	r16,zero,r4
   90d68:	0400500e 	bge	zero,r16,90eac <___vfprintf_internal_r+0x17b0>
   90d6c:	00800404 	movi	r2,16
   90d70:	1400800e 	bge	r2,r16,90f74 <___vfprintf_internal_r+0x1878>
   90d74:	1027883a 	mov	r19,r2
   90d78:	070002b4 	movhi	fp,10
   90d7c:	e7391304 	addi	fp,fp,-7092
   90d80:	050001c4 	movi	r20,7
   90d84:	00000306 	br	90d94 <___vfprintf_internal_r+0x1698>
   90d88:	18c00204 	addi	r3,r3,8
   90d8c:	843ffc04 	addi	r16,r16,-16
   90d90:	9c007a0e 	bge	r19,r16,90f7c <___vfprintf_internal_r+0x1880>
   90d94:	94800404 	addi	r18,r18,16
   90d98:	8c400044 	addi	r17,r17,1
   90d9c:	1f000015 	stw	fp,0(r3)
   90da0:	1cc00115 	stw	r19,4(r3)
   90da4:	dc800f15 	stw	r18,60(sp)
   90da8:	dc400e15 	stw	r17,56(sp)
   90dac:	a47ff60e 	bge	r20,r17,90d88 <___vfprintf_internal_r+0x168c>
   90db0:	d9015017 	ldw	r4,1344(sp)
   90db4:	b00b883a 	mov	r5,r22
   90db8:	d9800d04 	addi	r6,sp,52
   90dbc:	008f6a40 	call	8f6a4 <__sprint_r>
   90dc0:	103c061e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90dc4:	dc800f17 	ldw	r18,60(sp)
   90dc8:	dc400e17 	ldw	r17,56(sp)
   90dcc:	d8c01a04 	addi	r3,sp,104
   90dd0:	003fee06 	br	90d8c <___vfprintf_internal_r+0x1690>
   90dd4:	3c000017 	ldw	r16,0(r7)
   90dd8:	0023883a 	mov	r17,zero
   90ddc:	39c00104 	addi	r7,r7,4
   90de0:	d9c14115 	stw	r7,1284(sp)
   90de4:	003e9206 	br	90830 <___vfprintf_internal_r+0x1134>
   90de8:	d9401a04 	addi	r5,sp,104
   90dec:	dd001004 	addi	r20,sp,64
   90df0:	d9414215 	stw	r5,1288(sp)
   90df4:	d9814517 	ldw	r6,1300(sp)
   90df8:	880a973a 	slli	r5,r17,28
   90dfc:	8004d13a 	srli	r2,r16,4
   90e00:	810003cc 	andi	r4,r16,15
   90e04:	3109883a 	add	r4,r6,r4
   90e08:	2884b03a 	or	r2,r5,r2
   90e0c:	21400003 	ldbu	r5,0(r4)
   90e10:	d9014217 	ldw	r4,1288(sp)
   90e14:	8806d13a 	srli	r3,r17,4
   90e18:	1021883a 	mov	r16,r2
   90e1c:	213fffc4 	addi	r4,r4,-1
   90e20:	d9014215 	stw	r4,1288(sp)
   90e24:	d9814217 	ldw	r6,1288(sp)
   90e28:	10c8b03a 	or	r4,r2,r3
   90e2c:	1823883a 	mov	r17,r3
   90e30:	31400005 	stb	r5,0(r6)
   90e34:	203fef1e 	bne	r4,zero,90df4 <___vfprintf_internal_r+0x16f8>
   90e38:	003ccb06 	br	90168 <___vfprintf_internal_r+0xa6c>
   90e3c:	00800c04 	movi	r2,48
   90e40:	d98019c4 	addi	r6,sp,103
   90e44:	dd001004 	addi	r20,sp,64
   90e48:	d88019c5 	stb	r2,103(sp)
   90e4c:	d9814215 	stw	r6,1288(sp)
   90e50:	003cc506 	br	90168 <___vfprintf_internal_r+0xa6c>
   90e54:	dc400e17 	ldw	r17,56(sp)
   90e58:	070002b4 	movhi	fp,10
   90e5c:	e7391704 	addi	fp,fp,-7076
   90e60:	003bc706 	br	8fd80 <___vfprintf_internal_r+0x684>
   90e64:	d9414d17 	ldw	r5,1332(sp)
   90e68:	2880040c 	andi	r2,r5,16
   90e6c:	10007c26 	beq	r2,zero,91060 <___vfprintf_internal_r+0x1964>
   90e70:	38800017 	ldw	r2,0(r7)
   90e74:	39c00104 	addi	r7,r7,4
   90e78:	d9c14115 	stw	r7,1284(sp)
   90e7c:	d9814c17 	ldw	r6,1328(sp)
   90e80:	d9c14117 	ldw	r7,1284(sp)
   90e84:	11800015 	stw	r6,0(r2)
   90e88:	003a7806 	br	8f86c <___vfprintf_internal_r+0x170>
   90e8c:	d9015017 	ldw	r4,1344(sp)
   90e90:	b00b883a 	mov	r5,r22
   90e94:	d9800d04 	addi	r6,sp,52
   90e98:	008f6a40 	call	8f6a4 <__sprint_r>
   90e9c:	103bcf1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90ea0:	dc800f17 	ldw	r18,60(sp)
   90ea4:	dc400e17 	ldw	r17,56(sp)
   90ea8:	d8c01a04 	addi	r3,sp,104
   90eac:	d9014817 	ldw	r4,1312(sp)
   90eb0:	d9414217 	ldw	r5,1288(sp)
   90eb4:	8c400044 	addi	r17,r17,1
   90eb8:	9125883a 	add	r18,r18,r4
   90ebc:	008001c4 	movi	r2,7
   90ec0:	19400015 	stw	r5,0(r3)
   90ec4:	19000115 	stw	r4,4(r3)
   90ec8:	dc800f15 	stw	r18,60(sp)
   90ecc:	dc400e15 	stw	r17,56(sp)
   90ed0:	147cee16 	blt	r2,r17,9028c <___vfprintf_internal_r+0xb90>
   90ed4:	18c00204 	addi	r3,r3,8
   90ed8:	003b8606 	br	8fcf4 <___vfprintf_internal_r+0x5f8>
   90edc:	38c00017 	ldw	r3,0(r7)
   90ee0:	39000204 	addi	r4,r7,8
   90ee4:	d9014115 	stw	r4,1284(sp)
   90ee8:	d8c14315 	stw	r3,1292(sp)
   90eec:	39c00117 	ldw	r7,4(r7)
   90ef0:	d9c14415 	stw	r7,1296(sp)
   90ef4:	003e2006 	br	90778 <___vfprintf_internal_r+0x107c>
   90ef8:	0005883a 	mov	r2,zero
   90efc:	1409c83a 	sub	r4,r2,r16
   90f00:	1105803a 	cmpltu	r2,r2,r4
   90f04:	044bc83a 	sub	r5,zero,r17
   90f08:	2885c83a 	sub	r2,r5,r2
   90f0c:	2021883a 	mov	r16,r4
   90f10:	1023883a 	mov	r17,r2
   90f14:	01000044 	movi	r4,1
   90f18:	00800b44 	movi	r2,45
   90f1c:	d8800405 	stb	r2,16(sp)
   90f20:	003c8406 	br	90134 <___vfprintf_internal_r+0xa38>
   90f24:	d9015017 	ldw	r4,1344(sp)
   90f28:	b00b883a 	mov	r5,r22
   90f2c:	d9800d04 	addi	r6,sp,52
   90f30:	008f6a40 	call	8f6a4 <__sprint_r>
   90f34:	103ba91e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90f38:	dc800f17 	ldw	r18,60(sp)
   90f3c:	dc400e17 	ldw	r17,56(sp)
   90f40:	d9000617 	ldw	r4,24(sp)
   90f44:	d9401a04 	addi	r5,sp,104
   90f48:	003da706 	br	905e8 <___vfprintf_internal_r+0xeec>
   90f4c:	d9015017 	ldw	r4,1344(sp)
   90f50:	b00b883a 	mov	r5,r22
   90f54:	d9800d04 	addi	r6,sp,52
   90f58:	008f6a40 	call	8f6a4 <__sprint_r>
   90f5c:	103b9f1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90f60:	dc800f17 	ldw	r18,60(sp)
   90f64:	dc400e17 	ldw	r17,56(sp)
   90f68:	d9000617 	ldw	r4,24(sp)
   90f6c:	d8c01a04 	addi	r3,sp,104
   90f70:	003d9106 	br	905b8 <___vfprintf_internal_r+0xebc>
   90f74:	070002b4 	movhi	fp,10
   90f78:	e7391304 	addi	fp,fp,-7092
   90f7c:	9425883a 	add	r18,r18,r16
   90f80:	8c400044 	addi	r17,r17,1
   90f84:	008001c4 	movi	r2,7
   90f88:	1f000015 	stw	fp,0(r3)
   90f8c:	1c000115 	stw	r16,4(r3)
   90f90:	dc800f15 	stw	r18,60(sp)
   90f94:	dc400e15 	stw	r17,56(sp)
   90f98:	147fbc16 	blt	r2,r17,90e8c <___vfprintf_internal_r+0x1790>
   90f9c:	18c00204 	addi	r3,r3,8
   90fa0:	003fc206 	br	90eac <___vfprintf_internal_r+0x17b0>
   90fa4:	d9015017 	ldw	r4,1344(sp)
   90fa8:	b00b883a 	mov	r5,r22
   90fac:	d9800d04 	addi	r6,sp,52
   90fb0:	008f6a40 	call	8f6a4 <__sprint_r>
   90fb4:	103b891e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   90fb8:	dc800f17 	ldw	r18,60(sp)
   90fbc:	d9000617 	ldw	r4,24(sp)
   90fc0:	d8c01a04 	addi	r3,sp,104
   90fc4:	003d0206 	br	903d0 <___vfprintf_internal_r+0xcd4>
   90fc8:	070002b4 	movhi	fp,10
   90fcc:	e7391304 	addi	fp,fp,-7092
   90fd0:	003be406 	br	8ff64 <___vfprintf_internal_r+0x868>
   90fd4:	008002b4 	movhi	r2,10
   90fd8:	10b90104 	addi	r2,r2,-7164
   90fdc:	d8814215 	stw	r2,1288(sp)
   90fe0:	003df506 	br	907b8 <___vfprintf_internal_r+0x10bc>
   90fe4:	d9014317 	ldw	r4,1292(sp)
   90fe8:	d9414417 	ldw	r5,1296(sp)
   90fec:	00958280 	call	95828 <__isnand>
   90ff0:	10003926 	beq	r2,zero,910d8 <___vfprintf_internal_r+0x19dc>
   90ff4:	d9414e17 	ldw	r5,1336(sp)
   90ff8:	008011c4 	movi	r2,71
   90ffc:	1140ce16 	blt	r2,r5,91338 <___vfprintf_internal_r+0x1c3c>
   91000:	018002b4 	movhi	r6,10
   91004:	31b90204 	addi	r6,r6,-7160
   91008:	d9814215 	stw	r6,1288(sp)
   9100c:	003dea06 	br	907b8 <___vfprintf_internal_r+0x10bc>
   91010:	d9014d17 	ldw	r4,1332(sp)
   91014:	bdc00044 	addi	r23,r23,1
   91018:	b8c00007 	ldb	r3,0(r23)
   9101c:	21000814 	ori	r4,r4,32
   91020:	d9014d15 	stw	r4,1332(sp)
   91024:	003a3406 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   91028:	dcc14615 	stw	r19,1304(sp)
   9102c:	98011016 	blt	r19,zero,91470 <___vfprintf_internal_r+0x1d74>
   91030:	980f883a 	mov	r7,r19
   91034:	d8014715 	stw	zero,1308(sp)
   91038:	003c5206 	br	90184 <___vfprintf_internal_r+0xa88>
   9103c:	d9015017 	ldw	r4,1344(sp)
   91040:	b00b883a 	mov	r5,r22
   91044:	d9800d04 	addi	r6,sp,52
   91048:	008f6a40 	call	8f6a4 <__sprint_r>
   9104c:	103b631e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   91050:	dc800f17 	ldw	r18,60(sp)
   91054:	d9000617 	ldw	r4,24(sp)
   91058:	d8c01a04 	addi	r3,sp,104
   9105c:	003f2e06 	br	90d18 <___vfprintf_internal_r+0x161c>
   91060:	d8c14d17 	ldw	r3,1332(sp)
   91064:	1880100c 	andi	r2,r3,64
   91068:	1000a026 	beq	r2,zero,912ec <___vfprintf_internal_r+0x1bf0>
   9106c:	38800017 	ldw	r2,0(r7)
   91070:	39c00104 	addi	r7,r7,4
   91074:	d9c14115 	stw	r7,1284(sp)
   91078:	d9014c17 	ldw	r4,1328(sp)
   9107c:	d9c14117 	ldw	r7,1284(sp)
   91080:	1100000d 	sth	r4,0(r2)
   91084:	0039f906 	br	8f86c <___vfprintf_internal_r+0x170>
   91088:	d9015017 	ldw	r4,1344(sp)
   9108c:	b00b883a 	mov	r5,r22
   91090:	d9800d04 	addi	r6,sp,52
   91094:	008f6a40 	call	8f6a4 <__sprint_r>
   91098:	103b501e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   9109c:	dc800f17 	ldw	r18,60(sp)
   910a0:	dc400e17 	ldw	r17,56(sp)
   910a4:	d9000617 	ldw	r4,24(sp)
   910a8:	d8c01a04 	addi	r3,sp,104
   910ac:	003f2d06 	br	90d64 <___vfprintf_internal_r+0x1668>
   910b0:	00800184 	movi	r2,6
   910b4:	14c09a36 	bltu	r2,r19,91320 <___vfprintf_internal_r+0x1c24>
   910b8:	dcc14615 	stw	r19,1304(sp)
   910bc:	9800010e 	bge	r19,zero,910c4 <___vfprintf_internal_r+0x19c8>
   910c0:	d8014615 	stw	zero,1304(sp)
   910c4:	008002b4 	movhi	r2,10
   910c8:	10b90404 	addi	r2,r2,-7152
   910cc:	980f883a 	mov	r7,r19
   910d0:	d8814215 	stw	r2,1288(sp)
   910d4:	003a7806 	br	8fab8 <___vfprintf_internal_r+0x3bc>
   910d8:	00bfffc4 	movi	r2,-1
   910dc:	9880e226 	beq	r19,r2,91468 <___vfprintf_internal_r+0x1d6c>
   910e0:	d9414e17 	ldw	r5,1336(sp)
   910e4:	008019c4 	movi	r2,103
   910e8:	2880dc26 	beq	r5,r2,9145c <___vfprintf_internal_r+0x1d60>
   910ec:	008011c4 	movi	r2,71
   910f0:	2880da26 	beq	r5,r2,9145c <___vfprintf_internal_r+0x1d60>
   910f4:	d9414d17 	ldw	r5,1332(sp)
   910f8:	d9014417 	ldw	r4,1296(sp)
   910fc:	d9814317 	ldw	r6,1292(sp)
   91100:	29404014 	ori	r5,r5,256
   91104:	d9414d15 	stw	r5,1332(sp)
   91108:	2000cc16 	blt	r4,zero,9143c <___vfprintf_internal_r+0x1d40>
   9110c:	3021883a 	mov	r16,r6
   91110:	2023883a 	mov	r17,r4
   91114:	0039883a 	mov	fp,zero
   91118:	d9414e17 	ldw	r5,1336(sp)
   9111c:	00801984 	movi	r2,102
   91120:	2880b726 	beq	r5,r2,91400 <___vfprintf_internal_r+0x1d04>
   91124:	00801184 	movi	r2,70
   91128:	2880b526 	beq	r5,r2,91400 <___vfprintf_internal_r+0x1d04>
   9112c:	00801944 	movi	r2,101
   91130:	2880c826 	beq	r5,r2,91454 <___vfprintf_internal_r+0x1d58>
   91134:	00801144 	movi	r2,69
   91138:	2880c626 	beq	r5,r2,91454 <___vfprintf_internal_r+0x1d58>
   9113c:	9829883a 	mov	r20,r19
   91140:	d9015017 	ldw	r4,1344(sp)
   91144:	d8800604 	addi	r2,sp,24
   91148:	880d883a 	mov	r6,r17
   9114c:	d8800115 	stw	r2,4(sp)
   91150:	d8c00704 	addi	r3,sp,28
   91154:	d8800804 	addi	r2,sp,32
   91158:	800b883a 	mov	r5,r16
   9115c:	01c00084 	movi	r7,2
   91160:	d8c00215 	stw	r3,8(sp)
   91164:	d8800315 	stw	r2,12(sp)
   91168:	dd000015 	stw	r20,0(sp)
   9116c:	0091a080 	call	91a08 <_dtoa_r>
   91170:	d9814e17 	ldw	r6,1336(sp)
   91174:	d8814215 	stw	r2,1288(sp)
   91178:	008019c4 	movi	r2,103
   9117c:	30809526 	beq	r6,r2,913d4 <___vfprintf_internal_r+0x1cd8>
   91180:	d8c14e17 	ldw	r3,1336(sp)
   91184:	008011c4 	movi	r2,71
   91188:	18809226 	beq	r3,r2,913d4 <___vfprintf_internal_r+0x1cd8>
   9118c:	d9414217 	ldw	r5,1288(sp)
   91190:	d9814e17 	ldw	r6,1336(sp)
   91194:	00801984 	movi	r2,102
   91198:	2d25883a 	add	r18,r5,r20
   9119c:	30808626 	beq	r6,r2,913b8 <___vfprintf_internal_r+0x1cbc>
   911a0:	00801184 	movi	r2,70
   911a4:	30808426 	beq	r6,r2,913b8 <___vfprintf_internal_r+0x1cbc>
   911a8:	000d883a 	mov	r6,zero
   911ac:	000f883a 	mov	r7,zero
   911b0:	880b883a 	mov	r5,r17
   911b4:	8009883a 	mov	r4,r16
   911b8:	00972a40 	call	972a4 <__eqdf2>
   911bc:	1000751e 	bne	r2,zero,91394 <___vfprintf_internal_r+0x1c98>
   911c0:	9005883a 	mov	r2,r18
   911c4:	dc800815 	stw	r18,32(sp)
   911c8:	d9014217 	ldw	r4,1288(sp)
   911cc:	d9414e17 	ldw	r5,1336(sp)
   911d0:	00c019c4 	movi	r3,103
   911d4:	1125c83a 	sub	r18,r2,r4
   911d8:	28c06826 	beq	r5,r3,9137c <___vfprintf_internal_r+0x1c80>
   911dc:	008011c4 	movi	r2,71
   911e0:	28806626 	beq	r5,r2,9137c <___vfprintf_internal_r+0x1c80>
   911e4:	d9000617 	ldw	r4,24(sp)
   911e8:	d8c14e17 	ldw	r3,1336(sp)
   911ec:	00801944 	movi	r2,101
   911f0:	10c05516 	blt	r2,r3,91348 <___vfprintf_internal_r+0x1c4c>
   911f4:	213fffc4 	addi	r4,r4,-1
   911f8:	d9000615 	stw	r4,24(sp)
   911fc:	d8c00905 	stb	r3,36(sp)
   91200:	2021883a 	mov	r16,r4
   91204:	2000c116 	blt	r4,zero,9150c <___vfprintf_internal_r+0x1e10>
   91208:	00800ac4 	movi	r2,43
   9120c:	d8800945 	stb	r2,37(sp)
   91210:	00800244 	movi	r2,9
   91214:	1400af0e 	bge	r2,r16,914d4 <___vfprintf_internal_r+0x1dd8>
   91218:	1027883a 	mov	r19,r2
   9121c:	dc400cc4 	addi	r17,sp,51
   91220:	8009883a 	mov	r4,r16
   91224:	01400284 	movi	r5,10
   91228:	008d7f40 	call	8d7f4 <__modsi3>
   9122c:	10800c04 	addi	r2,r2,48
   91230:	8c7fffc4 	addi	r17,r17,-1
   91234:	8009883a 	mov	r4,r16
   91238:	01400284 	movi	r5,10
   9123c:	88800005 	stb	r2,0(r17)
   91240:	008d7940 	call	8d794 <__divsi3>
   91244:	1021883a 	mov	r16,r2
   91248:	98bff516 	blt	r19,r2,91220 <___vfprintf_internal_r+0x1b24>
   9124c:	10c00c04 	addi	r3,r2,48
   91250:	d8800b04 	addi	r2,sp,44
   91254:	108001c4 	addi	r2,r2,7
   91258:	897fffc4 	addi	r5,r17,-1
   9125c:	88ffffc5 	stb	r3,-1(r17)
   91260:	2880a72e 	bgeu	r5,r2,91500 <___vfprintf_internal_r+0x1e04>
   91264:	1009883a 	mov	r4,r2
   91268:	d9800904 	addi	r6,sp,36
   9126c:	d8c00984 	addi	r3,sp,38
   91270:	28800003 	ldbu	r2,0(r5)
   91274:	29400044 	addi	r5,r5,1
   91278:	18800005 	stb	r2,0(r3)
   9127c:	18c00044 	addi	r3,r3,1
   91280:	293ffb36 	bltu	r5,r4,91270 <___vfprintf_internal_r+0x1b74>
   91284:	1987c83a 	sub	r3,r3,r6
   91288:	00800044 	movi	r2,1
   9128c:	d8c14915 	stw	r3,1316(sp)
   91290:	90cf883a 	add	r7,r18,r3
   91294:	1480960e 	bge	r2,r18,914f0 <___vfprintf_internal_r+0x1df4>
   91298:	39c00044 	addi	r7,r7,1
   9129c:	d9c14615 	stw	r7,1304(sp)
   912a0:	38003416 	blt	r7,zero,91374 <___vfprintf_internal_r+0x1c78>
   912a4:	e0803fcc 	andi	r2,fp,255
   912a8:	1080201c 	xori	r2,r2,128
   912ac:	10bfe004 	addi	r2,r2,-128
   912b0:	10004e26 	beq	r2,zero,913ec <___vfprintf_internal_r+0x1cf0>
   912b4:	00800b44 	movi	r2,45
   912b8:	dc814815 	stw	r18,1312(sp)
   912bc:	d8014715 	stw	zero,1308(sp)
   912c0:	d8800405 	stb	r2,16(sp)
   912c4:	003bb106 	br	9018c <___vfprintf_internal_r+0xa90>
   912c8:	00800b44 	movi	r2,45
   912cc:	d8800405 	stb	r2,16(sp)
   912d0:	003d3306 	br	907a0 <___vfprintf_internal_r+0x10a4>
   912d4:	d9015017 	ldw	r4,1344(sp)
   912d8:	b00b883a 	mov	r5,r22
   912dc:	d9800d04 	addi	r6,sp,52
   912e0:	008f6a40 	call	8f6a4 <__sprint_r>
   912e4:	103abd1e 	bne	r2,zero,8fddc <___vfprintf_internal_r+0x6e0>
   912e8:	003abb06 	br	8fdd8 <___vfprintf_internal_r+0x6dc>
   912ec:	38800017 	ldw	r2,0(r7)
   912f0:	39c00104 	addi	r7,r7,4
   912f4:	d9c14115 	stw	r7,1284(sp)
   912f8:	d9414c17 	ldw	r5,1328(sp)
   912fc:	d9c14117 	ldw	r7,1284(sp)
   91300:	11400015 	stw	r5,0(r2)
   91304:	00395906 	br	8f86c <___vfprintf_internal_r+0x170>
   91308:	980f883a 	mov	r7,r19
   9130c:	dcc14615 	stw	r19,1304(sp)
   91310:	d8014715 	stw	zero,1308(sp)
   91314:	003b9b06 	br	90184 <___vfprintf_internal_r+0xa88>
   91318:	0027883a 	mov	r19,zero
   9131c:	00397806 	br	8f900 <___vfprintf_internal_r+0x204>
   91320:	00c002b4 	movhi	r3,10
   91324:	18f90404 	addi	r3,r3,-7152
   91328:	100f883a 	mov	r7,r2
   9132c:	d8814615 	stw	r2,1304(sp)
   91330:	d8c14215 	stw	r3,1288(sp)
   91334:	0039e006 	br	8fab8 <___vfprintf_internal_r+0x3bc>
   91338:	008002b4 	movhi	r2,10
   9133c:	10b90304 	addi	r2,r2,-7156
   91340:	d8814215 	stw	r2,1288(sp)
   91344:	003d1c06 	br	907b8 <___vfprintf_internal_r+0x10bc>
   91348:	d9414e17 	ldw	r5,1336(sp)
   9134c:	00801984 	movi	r2,102
   91350:	28804926 	beq	r5,r2,91478 <___vfprintf_internal_r+0x1d7c>
   91354:	200f883a 	mov	r7,r4
   91358:	24805716 	blt	r4,r18,914b8 <___vfprintf_internal_r+0x1dbc>
   9135c:	d9414d17 	ldw	r5,1332(sp)
   91360:	2880004c 	andi	r2,r5,1
   91364:	10000126 	beq	r2,zero,9136c <___vfprintf_internal_r+0x1c70>
   91368:	21c00044 	addi	r7,r4,1
   9136c:	d9c14615 	stw	r7,1304(sp)
   91370:	383fcc0e 	bge	r7,zero,912a4 <___vfprintf_internal_r+0x1ba8>
   91374:	d8014615 	stw	zero,1304(sp)
   91378:	003fca06 	br	912a4 <___vfprintf_internal_r+0x1ba8>
   9137c:	d9000617 	ldw	r4,24(sp)
   91380:	00bfff04 	movi	r2,-4
   91384:	1100480e 	bge	r2,r4,914a8 <___vfprintf_internal_r+0x1dac>
   91388:	99004716 	blt	r19,r4,914a8 <___vfprintf_internal_r+0x1dac>
   9138c:	d8c14e15 	stw	r3,1336(sp)
   91390:	003ff006 	br	91354 <___vfprintf_internal_r+0x1c58>
   91394:	d8800817 	ldw	r2,32(sp)
   91398:	14bf8b2e 	bgeu	r2,r18,911c8 <___vfprintf_internal_r+0x1acc>
   9139c:	9007883a 	mov	r3,r18
   913a0:	01000c04 	movi	r4,48
   913a4:	11000005 	stb	r4,0(r2)
   913a8:	10800044 	addi	r2,r2,1
   913ac:	d8800815 	stw	r2,32(sp)
   913b0:	18bffc1e 	bne	r3,r2,913a4 <___vfprintf_internal_r+0x1ca8>
   913b4:	003f8406 	br	911c8 <___vfprintf_internal_r+0x1acc>
   913b8:	d8814217 	ldw	r2,1288(sp)
   913bc:	10c00007 	ldb	r3,0(r2)
   913c0:	00800c04 	movi	r2,48
   913c4:	18805b26 	beq	r3,r2,91534 <___vfprintf_internal_r+0x1e38>
   913c8:	d9000617 	ldw	r4,24(sp)
   913cc:	9125883a 	add	r18,r18,r4
   913d0:	003f7506 	br	911a8 <___vfprintf_internal_r+0x1aac>
   913d4:	d9014d17 	ldw	r4,1332(sp)
   913d8:	2080004c 	andi	r2,r4,1
   913dc:	1005003a 	cmpeq	r2,r2,zero
   913e0:	103f6a26 	beq	r2,zero,9118c <___vfprintf_internal_r+0x1a90>
   913e4:	d8800817 	ldw	r2,32(sp)
   913e8:	003f7706 	br	911c8 <___vfprintf_internal_r+0x1acc>
   913ec:	d9c14615 	stw	r7,1304(sp)
   913f0:	38004d16 	blt	r7,zero,91528 <___vfprintf_internal_r+0x1e2c>
   913f4:	dc814815 	stw	r18,1312(sp)
   913f8:	d8014715 	stw	zero,1308(sp)
   913fc:	003b6106 	br	90184 <___vfprintf_internal_r+0xa88>
   91400:	d9015017 	ldw	r4,1344(sp)
   91404:	d8800604 	addi	r2,sp,24
   91408:	d8800115 	stw	r2,4(sp)
   9140c:	d8c00704 	addi	r3,sp,28
   91410:	d8800804 	addi	r2,sp,32
   91414:	800b883a 	mov	r5,r16
   91418:	880d883a 	mov	r6,r17
   9141c:	01c000c4 	movi	r7,3
   91420:	d8c00215 	stw	r3,8(sp)
   91424:	d8800315 	stw	r2,12(sp)
   91428:	dcc00015 	stw	r19,0(sp)
   9142c:	9829883a 	mov	r20,r19
   91430:	0091a080 	call	91a08 <_dtoa_r>
   91434:	d8814215 	stw	r2,1288(sp)
   91438:	003f5106 	br	91180 <___vfprintf_internal_r+0x1a84>
   9143c:	d8c14317 	ldw	r3,1292(sp)
   91440:	d9014417 	ldw	r4,1296(sp)
   91444:	07000b44 	movi	fp,45
   91448:	1821883a 	mov	r16,r3
   9144c:	2460003c 	xorhi	r17,r4,32768
   91450:	003f3106 	br	91118 <___vfprintf_internal_r+0x1a1c>
   91454:	9d000044 	addi	r20,r19,1
   91458:	003f3906 	br	91140 <___vfprintf_internal_r+0x1a44>
   9145c:	983f251e 	bne	r19,zero,910f4 <___vfprintf_internal_r+0x19f8>
   91460:	04c00044 	movi	r19,1
   91464:	003f2306 	br	910f4 <___vfprintf_internal_r+0x19f8>
   91468:	04c00184 	movi	r19,6
   9146c:	003f2106 	br	910f4 <___vfprintf_internal_r+0x19f8>
   91470:	d8014615 	stw	zero,1304(sp)
   91474:	003eee06 	br	91030 <___vfprintf_internal_r+0x1934>
   91478:	200f883a 	mov	r7,r4
   9147c:	0100370e 	bge	zero,r4,9155c <___vfprintf_internal_r+0x1e60>
   91480:	9800031e 	bne	r19,zero,91490 <___vfprintf_internal_r+0x1d94>
   91484:	d9814d17 	ldw	r6,1332(sp)
   91488:	3080004c 	andi	r2,r6,1
   9148c:	103fb726 	beq	r2,zero,9136c <___vfprintf_internal_r+0x1c70>
   91490:	20800044 	addi	r2,r4,1
   91494:	98a7883a 	add	r19,r19,r2
   91498:	dcc14615 	stw	r19,1304(sp)
   9149c:	980f883a 	mov	r7,r19
   914a0:	983f800e 	bge	r19,zero,912a4 <___vfprintf_internal_r+0x1ba8>
   914a4:	003fb306 	br	91374 <___vfprintf_internal_r+0x1c78>
   914a8:	d9814e17 	ldw	r6,1336(sp)
   914ac:	31bfff84 	addi	r6,r6,-2
   914b0:	d9814e15 	stw	r6,1336(sp)
   914b4:	003f4c06 	br	911e8 <___vfprintf_internal_r+0x1aec>
   914b8:	0100180e 	bge	zero,r4,9151c <___vfprintf_internal_r+0x1e20>
   914bc:	00800044 	movi	r2,1
   914c0:	1485883a 	add	r2,r2,r18
   914c4:	d8814615 	stw	r2,1304(sp)
   914c8:	100f883a 	mov	r7,r2
   914cc:	103f750e 	bge	r2,zero,912a4 <___vfprintf_internal_r+0x1ba8>
   914d0:	003fa806 	br	91374 <___vfprintf_internal_r+0x1c78>
   914d4:	80c00c04 	addi	r3,r16,48
   914d8:	00800c04 	movi	r2,48
   914dc:	d8c009c5 	stb	r3,39(sp)
   914e0:	d9800904 	addi	r6,sp,36
   914e4:	d8c00a04 	addi	r3,sp,40
   914e8:	d8800985 	stb	r2,38(sp)
   914ec:	003f6506 	br	91284 <___vfprintf_internal_r+0x1b88>
   914f0:	d9014d17 	ldw	r4,1332(sp)
   914f4:	2084703a 	and	r2,r4,r2
   914f8:	103f9c26 	beq	r2,zero,9136c <___vfprintf_internal_r+0x1c70>
   914fc:	003f6606 	br	91298 <___vfprintf_internal_r+0x1b9c>
   91500:	d9800904 	addi	r6,sp,36
   91504:	d8c00984 	addi	r3,sp,38
   91508:	003f5e06 	br	91284 <___vfprintf_internal_r+0x1b88>
   9150c:	00800b44 	movi	r2,45
   91510:	0121c83a 	sub	r16,zero,r4
   91514:	d8800945 	stb	r2,37(sp)
   91518:	003f3d06 	br	91210 <___vfprintf_internal_r+0x1b14>
   9151c:	00800084 	movi	r2,2
   91520:	1105c83a 	sub	r2,r2,r4
   91524:	003fe606 	br	914c0 <___vfprintf_internal_r+0x1dc4>
   91528:	d8014615 	stw	zero,1304(sp)
   9152c:	dc814815 	stw	r18,1312(sp)
   91530:	003fb106 	br	913f8 <___vfprintf_internal_r+0x1cfc>
   91534:	000d883a 	mov	r6,zero
   91538:	000f883a 	mov	r7,zero
   9153c:	8009883a 	mov	r4,r16
   91540:	880b883a 	mov	r5,r17
   91544:	009732c0 	call	9732c <__nedf2>
   91548:	103f9f26 	beq	r2,zero,913c8 <___vfprintf_internal_r+0x1ccc>
   9154c:	00800044 	movi	r2,1
   91550:	1509c83a 	sub	r4,r2,r20
   91554:	d9000615 	stw	r4,24(sp)
   91558:	003f9b06 	br	913c8 <___vfprintf_internal_r+0x1ccc>
   9155c:	98000d1e 	bne	r19,zero,91594 <___vfprintf_internal_r+0x1e98>
   91560:	d8c14d17 	ldw	r3,1332(sp)
   91564:	1880004c 	andi	r2,r3,1
   91568:	10000a1e 	bne	r2,zero,91594 <___vfprintf_internal_r+0x1e98>
   9156c:	01000044 	movi	r4,1
   91570:	200f883a 	mov	r7,r4
   91574:	d9014615 	stw	r4,1304(sp)
   91578:	003f4a06 	br	912a4 <___vfprintf_internal_r+0x1ba8>
   9157c:	3cc00017 	ldw	r19,0(r7)
   91580:	39c00104 	addi	r7,r7,4
   91584:	983d0e0e 	bge	r19,zero,909c0 <___vfprintf_internal_r+0x12c4>
   91588:	b8c00007 	ldb	r3,0(r23)
   9158c:	04ffffc4 	movi	r19,-1
   91590:	0038d906 	br	8f8f8 <___vfprintf_internal_r+0x1fc>
   91594:	9cc00084 	addi	r19,r19,2
   91598:	dcc14615 	stw	r19,1304(sp)
   9159c:	980f883a 	mov	r7,r19
   915a0:	983f400e 	bge	r19,zero,912a4 <___vfprintf_internal_r+0x1ba8>
   915a4:	003f7306 	br	91374 <___vfprintf_internal_r+0x1c78>

000915a8 <__vfprintf_internal>:
   915a8:	008002b4 	movhi	r2,10
   915ac:	1081b804 	addi	r2,r2,1760
   915b0:	2013883a 	mov	r9,r4
   915b4:	11000017 	ldw	r4,0(r2)
   915b8:	2805883a 	mov	r2,r5
   915bc:	300f883a 	mov	r7,r6
   915c0:	480b883a 	mov	r5,r9
   915c4:	100d883a 	mov	r6,r2
   915c8:	008f6fc1 	jmpi	8f6fc <___vfprintf_internal_r>

000915cc <_write_r>:
   915cc:	defffd04 	addi	sp,sp,-12
   915d0:	dc000015 	stw	r16,0(sp)
   915d4:	040002b4 	movhi	r16,10
   915d8:	84096a04 	addi	r16,r16,9640
   915dc:	dc400115 	stw	r17,4(sp)
   915e0:	80000015 	stw	zero,0(r16)
   915e4:	2023883a 	mov	r17,r4
   915e8:	2809883a 	mov	r4,r5
   915ec:	300b883a 	mov	r5,r6
   915f0:	380d883a 	mov	r6,r7
   915f4:	dfc00215 	stw	ra,8(sp)
   915f8:	00988440 	call	98844 <write>
   915fc:	1007883a 	mov	r3,r2
   91600:	00bfffc4 	movi	r2,-1
   91604:	18800626 	beq	r3,r2,91620 <_write_r+0x54>
   91608:	1805883a 	mov	r2,r3
   9160c:	dfc00217 	ldw	ra,8(sp)
   91610:	dc400117 	ldw	r17,4(sp)
   91614:	dc000017 	ldw	r16,0(sp)
   91618:	dec00304 	addi	sp,sp,12
   9161c:	f800283a 	ret
   91620:	80800017 	ldw	r2,0(r16)
   91624:	103ff826 	beq	r2,zero,91608 <_write_r+0x3c>
   91628:	88800015 	stw	r2,0(r17)
   9162c:	1805883a 	mov	r2,r3
   91630:	dfc00217 	ldw	ra,8(sp)
   91634:	dc400117 	ldw	r17,4(sp)
   91638:	dc000017 	ldw	r16,0(sp)
   9163c:	dec00304 	addi	sp,sp,12
   91640:	f800283a 	ret

00091644 <__swsetup_r>:
   91644:	008002b4 	movhi	r2,10
   91648:	1081b804 	addi	r2,r2,1760
   9164c:	10c00017 	ldw	r3,0(r2)
   91650:	defffd04 	addi	sp,sp,-12
   91654:	dc400115 	stw	r17,4(sp)
   91658:	dc000015 	stw	r16,0(sp)
   9165c:	dfc00215 	stw	ra,8(sp)
   91660:	2023883a 	mov	r17,r4
   91664:	2821883a 	mov	r16,r5
   91668:	18000226 	beq	r3,zero,91674 <__swsetup_r+0x30>
   9166c:	18800e17 	ldw	r2,56(r3)
   91670:	10001f26 	beq	r2,zero,916f0 <__swsetup_r+0xac>
   91674:	8100030b 	ldhu	r4,12(r16)
   91678:	2080020c 	andi	r2,r4,8
   9167c:	10002826 	beq	r2,zero,91720 <__swsetup_r+0xdc>
   91680:	81400417 	ldw	r5,16(r16)
   91684:	28001d26 	beq	r5,zero,916fc <__swsetup_r+0xb8>
   91688:	2080004c 	andi	r2,r4,1
   9168c:	1005003a 	cmpeq	r2,r2,zero
   91690:	10000b26 	beq	r2,zero,916c0 <__swsetup_r+0x7c>
   91694:	2080008c 	andi	r2,r4,2
   91698:	10001226 	beq	r2,zero,916e4 <__swsetup_r+0xa0>
   9169c:	0005883a 	mov	r2,zero
   916a0:	80800215 	stw	r2,8(r16)
   916a4:	28000b26 	beq	r5,zero,916d4 <__swsetup_r+0x90>
   916a8:	0005883a 	mov	r2,zero
   916ac:	dfc00217 	ldw	ra,8(sp)
   916b0:	dc400117 	ldw	r17,4(sp)
   916b4:	dc000017 	ldw	r16,0(sp)
   916b8:	dec00304 	addi	sp,sp,12
   916bc:	f800283a 	ret
   916c0:	80800517 	ldw	r2,20(r16)
   916c4:	80000215 	stw	zero,8(r16)
   916c8:	0085c83a 	sub	r2,zero,r2
   916cc:	80800615 	stw	r2,24(r16)
   916d0:	283ff51e 	bne	r5,zero,916a8 <__swsetup_r+0x64>
   916d4:	2080200c 	andi	r2,r4,128
   916d8:	103ff326 	beq	r2,zero,916a8 <__swsetup_r+0x64>
   916dc:	00bfffc4 	movi	r2,-1
   916e0:	003ff206 	br	916ac <__swsetup_r+0x68>
   916e4:	80800517 	ldw	r2,20(r16)
   916e8:	80800215 	stw	r2,8(r16)
   916ec:	003fed06 	br	916a4 <__swsetup_r+0x60>
   916f0:	1809883a 	mov	r4,r3
   916f4:	008e08c0 	call	8e08c <__sinit>
   916f8:	003fde06 	br	91674 <__swsetup_r+0x30>
   916fc:	20c0a00c 	andi	r3,r4,640
   91700:	00808004 	movi	r2,512
   91704:	18bfe026 	beq	r3,r2,91688 <__swsetup_r+0x44>
   91708:	8809883a 	mov	r4,r17
   9170c:	800b883a 	mov	r5,r16
   91710:	0093d280 	call	93d28 <__smakebuf_r>
   91714:	8100030b 	ldhu	r4,12(r16)
   91718:	81400417 	ldw	r5,16(r16)
   9171c:	003fda06 	br	91688 <__swsetup_r+0x44>
   91720:	2080040c 	andi	r2,r4,16
   91724:	103fed26 	beq	r2,zero,916dc <__swsetup_r+0x98>
   91728:	2080010c 	andi	r2,r4,4
   9172c:	10001226 	beq	r2,zero,91778 <__swsetup_r+0x134>
   91730:	81400c17 	ldw	r5,48(r16)
   91734:	28000526 	beq	r5,zero,9174c <__swsetup_r+0x108>
   91738:	80801004 	addi	r2,r16,64
   9173c:	28800226 	beq	r5,r2,91748 <__swsetup_r+0x104>
   91740:	8809883a 	mov	r4,r17
   91744:	009343c0 	call	9343c <_free_r>
   91748:	80000c15 	stw	zero,48(r16)
   9174c:	8080030b 	ldhu	r2,12(r16)
   91750:	81400417 	ldw	r5,16(r16)
   91754:	80000115 	stw	zero,4(r16)
   91758:	10bff6cc 	andi	r2,r2,65499
   9175c:	8080030d 	sth	r2,12(r16)
   91760:	81400015 	stw	r5,0(r16)
   91764:	8080030b 	ldhu	r2,12(r16)
   91768:	10800214 	ori	r2,r2,8
   9176c:	113fffcc 	andi	r4,r2,65535
   91770:	8080030d 	sth	r2,12(r16)
   91774:	003fc306 	br	91684 <__swsetup_r+0x40>
   91778:	81400417 	ldw	r5,16(r16)
   9177c:	003ff906 	br	91764 <__swsetup_r+0x120>

00091780 <_close_r>:
   91780:	defffd04 	addi	sp,sp,-12
   91784:	dc000015 	stw	r16,0(sp)
   91788:	040002b4 	movhi	r16,10
   9178c:	84096a04 	addi	r16,r16,9640
   91790:	dc400115 	stw	r17,4(sp)
   91794:	80000015 	stw	zero,0(r16)
   91798:	2023883a 	mov	r17,r4
   9179c:	2809883a 	mov	r4,r5
   917a0:	dfc00215 	stw	ra,8(sp)
   917a4:	0097ab00 	call	97ab0 <close>
   917a8:	1007883a 	mov	r3,r2
   917ac:	00bfffc4 	movi	r2,-1
   917b0:	18800626 	beq	r3,r2,917cc <_close_r+0x4c>
   917b4:	1805883a 	mov	r2,r3
   917b8:	dfc00217 	ldw	ra,8(sp)
   917bc:	dc400117 	ldw	r17,4(sp)
   917c0:	dc000017 	ldw	r16,0(sp)
   917c4:	dec00304 	addi	sp,sp,12
   917c8:	f800283a 	ret
   917cc:	80800017 	ldw	r2,0(r16)
   917d0:	103ff826 	beq	r2,zero,917b4 <_close_r+0x34>
   917d4:	88800015 	stw	r2,0(r17)
   917d8:	1805883a 	mov	r2,r3
   917dc:	dfc00217 	ldw	ra,8(sp)
   917e0:	dc400117 	ldw	r17,4(sp)
   917e4:	dc000017 	ldw	r16,0(sp)
   917e8:	dec00304 	addi	sp,sp,12
   917ec:	f800283a 	ret

000917f0 <quorem>:
   917f0:	28c00417 	ldw	r3,16(r5)
   917f4:	20800417 	ldw	r2,16(r4)
   917f8:	defff604 	addi	sp,sp,-40
   917fc:	ddc00715 	stw	r23,28(sp)
   91800:	dd400515 	stw	r21,20(sp)
   91804:	dfc00915 	stw	ra,36(sp)
   91808:	df000815 	stw	fp,32(sp)
   9180c:	dd800615 	stw	r22,24(sp)
   91810:	dd000415 	stw	r20,16(sp)
   91814:	dcc00315 	stw	r19,12(sp)
   91818:	dc800215 	stw	r18,8(sp)
   9181c:	dc400115 	stw	r17,4(sp)
   91820:	dc000015 	stw	r16,0(sp)
   91824:	202f883a 	mov	r23,r4
   91828:	282b883a 	mov	r21,r5
   9182c:	10c07416 	blt	r2,r3,91a00 <quorem+0x210>
   91830:	1c7fffc4 	addi	r17,r3,-1
   91834:	8c45883a 	add	r2,r17,r17
   91838:	1085883a 	add	r2,r2,r2
   9183c:	2c000504 	addi	r16,r5,20
   91840:	24c00504 	addi	r19,r4,20
   91844:	14ed883a 	add	r22,r2,r19
   91848:	80a5883a 	add	r18,r16,r2
   9184c:	b7000017 	ldw	fp,0(r22)
   91850:	91400017 	ldw	r5,0(r18)
   91854:	e009883a 	mov	r4,fp
   91858:	29400044 	addi	r5,r5,1
   9185c:	008d8540 	call	8d854 <__udivsi3>
   91860:	1029883a 	mov	r20,r2
   91864:	10003c1e 	bne	r2,zero,91958 <quorem+0x168>
   91868:	a80b883a 	mov	r5,r21
   9186c:	b809883a 	mov	r4,r23
   91870:	00940f80 	call	940f8 <__mcmp>
   91874:	10002b16 	blt	r2,zero,91924 <quorem+0x134>
   91878:	a5000044 	addi	r20,r20,1
   9187c:	980f883a 	mov	r7,r19
   91880:	0011883a 	mov	r8,zero
   91884:	0009883a 	mov	r4,zero
   91888:	81400017 	ldw	r5,0(r16)
   9188c:	38c00017 	ldw	r3,0(r7)
   91890:	84000104 	addi	r16,r16,4
   91894:	28bfffcc 	andi	r2,r5,65535
   91898:	2085883a 	add	r2,r4,r2
   9189c:	11bfffcc 	andi	r6,r2,65535
   918a0:	193fffcc 	andi	r4,r3,65535
   918a4:	1004d43a 	srli	r2,r2,16
   918a8:	280ad43a 	srli	r5,r5,16
   918ac:	2189c83a 	sub	r4,r4,r6
   918b0:	2209883a 	add	r4,r4,r8
   918b4:	1806d43a 	srli	r3,r3,16
   918b8:	288b883a 	add	r5,r5,r2
   918bc:	200dd43a 	srai	r6,r4,16
   918c0:	28bfffcc 	andi	r2,r5,65535
   918c4:	1887c83a 	sub	r3,r3,r2
   918c8:	1987883a 	add	r3,r3,r6
   918cc:	3900000d 	sth	r4,0(r7)
   918d0:	38c0008d 	sth	r3,2(r7)
   918d4:	2808d43a 	srli	r4,r5,16
   918d8:	39c00104 	addi	r7,r7,4
   918dc:	1811d43a 	srai	r8,r3,16
   918e0:	943fe92e 	bgeu	r18,r16,91888 <quorem+0x98>
   918e4:	8c45883a 	add	r2,r17,r17
   918e8:	1085883a 	add	r2,r2,r2
   918ec:	9885883a 	add	r2,r19,r2
   918f0:	10c00017 	ldw	r3,0(r2)
   918f4:	18000b1e 	bne	r3,zero,91924 <quorem+0x134>
   918f8:	113fff04 	addi	r4,r2,-4
   918fc:	9900082e 	bgeu	r19,r4,91920 <quorem+0x130>
   91900:	10bfff17 	ldw	r2,-4(r2)
   91904:	10000326 	beq	r2,zero,91914 <quorem+0x124>
   91908:	00000506 	br	91920 <quorem+0x130>
   9190c:	20800017 	ldw	r2,0(r4)
   91910:	1000031e 	bne	r2,zero,91920 <quorem+0x130>
   91914:	213fff04 	addi	r4,r4,-4
   91918:	8c7fffc4 	addi	r17,r17,-1
   9191c:	993ffb36 	bltu	r19,r4,9190c <quorem+0x11c>
   91920:	bc400415 	stw	r17,16(r23)
   91924:	a005883a 	mov	r2,r20
   91928:	dfc00917 	ldw	ra,36(sp)
   9192c:	df000817 	ldw	fp,32(sp)
   91930:	ddc00717 	ldw	r23,28(sp)
   91934:	dd800617 	ldw	r22,24(sp)
   91938:	dd400517 	ldw	r21,20(sp)
   9193c:	dd000417 	ldw	r20,16(sp)
   91940:	dcc00317 	ldw	r19,12(sp)
   91944:	dc800217 	ldw	r18,8(sp)
   91948:	dc400117 	ldw	r17,4(sp)
   9194c:	dc000017 	ldw	r16,0(sp)
   91950:	dec00a04 	addi	sp,sp,40
   91954:	f800283a 	ret
   91958:	980f883a 	mov	r7,r19
   9195c:	8011883a 	mov	r8,r16
   91960:	0013883a 	mov	r9,zero
   91964:	000d883a 	mov	r6,zero
   91968:	40c00017 	ldw	r3,0(r8)
   9196c:	39000017 	ldw	r4,0(r7)
   91970:	42000104 	addi	r8,r8,4
   91974:	18bfffcc 	andi	r2,r3,65535
   91978:	a085383a 	mul	r2,r20,r2
   9197c:	1806d43a 	srli	r3,r3,16
   91980:	217fffcc 	andi	r5,r4,65535
   91984:	3085883a 	add	r2,r6,r2
   91988:	11bfffcc 	andi	r6,r2,65535
   9198c:	a0c7383a 	mul	r3,r20,r3
   91990:	1004d43a 	srli	r2,r2,16
   91994:	298bc83a 	sub	r5,r5,r6
   91998:	2a4b883a 	add	r5,r5,r9
   9199c:	2008d43a 	srli	r4,r4,16
   919a0:	1887883a 	add	r3,r3,r2
   919a4:	280dd43a 	srai	r6,r5,16
   919a8:	18bfffcc 	andi	r2,r3,65535
   919ac:	2089c83a 	sub	r4,r4,r2
   919b0:	2189883a 	add	r4,r4,r6
   919b4:	3900008d 	sth	r4,2(r7)
   919b8:	3940000d 	sth	r5,0(r7)
   919bc:	180cd43a 	srli	r6,r3,16
   919c0:	39c00104 	addi	r7,r7,4
   919c4:	2013d43a 	srai	r9,r4,16
   919c8:	923fe72e 	bgeu	r18,r8,91968 <quorem+0x178>
   919cc:	e03fa61e 	bne	fp,zero,91868 <quorem+0x78>
   919d0:	b0ffff04 	addi	r3,r22,-4
   919d4:	98c0082e 	bgeu	r19,r3,919f8 <quorem+0x208>
   919d8:	b0bfff17 	ldw	r2,-4(r22)
   919dc:	10000326 	beq	r2,zero,919ec <quorem+0x1fc>
   919e0:	00000506 	br	919f8 <quorem+0x208>
   919e4:	18800017 	ldw	r2,0(r3)
   919e8:	1000031e 	bne	r2,zero,919f8 <quorem+0x208>
   919ec:	18ffff04 	addi	r3,r3,-4
   919f0:	8c7fffc4 	addi	r17,r17,-1
   919f4:	98fffb36 	bltu	r19,r3,919e4 <quorem+0x1f4>
   919f8:	bc400415 	stw	r17,16(r23)
   919fc:	003f9a06 	br	91868 <quorem+0x78>
   91a00:	0005883a 	mov	r2,zero
   91a04:	003fc806 	br	91928 <quorem+0x138>

00091a08 <_dtoa_r>:
   91a08:	22001017 	ldw	r8,64(r4)
   91a0c:	deffda04 	addi	sp,sp,-152
   91a10:	dd402115 	stw	r21,132(sp)
   91a14:	dd002015 	stw	r20,128(sp)
   91a18:	dc801e15 	stw	r18,120(sp)
   91a1c:	dc401d15 	stw	r17,116(sp)
   91a20:	dfc02515 	stw	ra,148(sp)
   91a24:	df002415 	stw	fp,144(sp)
   91a28:	ddc02315 	stw	r23,140(sp)
   91a2c:	dd802215 	stw	r22,136(sp)
   91a30:	dcc01f15 	stw	r19,124(sp)
   91a34:	dc001c15 	stw	r16,112(sp)
   91a38:	d9001615 	stw	r4,88(sp)
   91a3c:	3023883a 	mov	r17,r6
   91a40:	2829883a 	mov	r20,r5
   91a44:	d9c01715 	stw	r7,92(sp)
   91a48:	dc802817 	ldw	r18,160(sp)
   91a4c:	302b883a 	mov	r21,r6
   91a50:	40000a26 	beq	r8,zero,91a7c <_dtoa_r+0x74>
   91a54:	20801117 	ldw	r2,68(r4)
   91a58:	400b883a 	mov	r5,r8
   91a5c:	40800115 	stw	r2,4(r8)
   91a60:	20c01117 	ldw	r3,68(r4)
   91a64:	00800044 	movi	r2,1
   91a68:	10c4983a 	sll	r2,r2,r3
   91a6c:	40800215 	stw	r2,8(r8)
   91a70:	0093f9c0 	call	93f9c <_Bfree>
   91a74:	d8c01617 	ldw	r3,88(sp)
   91a78:	18001015 	stw	zero,64(r3)
   91a7c:	8800a316 	blt	r17,zero,91d0c <_dtoa_r+0x304>
   91a80:	90000015 	stw	zero,0(r18)
   91a84:	a8dffc2c 	andhi	r3,r21,32752
   91a88:	009ffc34 	movhi	r2,32752
   91a8c:	18809126 	beq	r3,r2,91cd4 <_dtoa_r+0x2cc>
   91a90:	000d883a 	mov	r6,zero
   91a94:	000f883a 	mov	r7,zero
   91a98:	a009883a 	mov	r4,r20
   91a9c:	a80b883a 	mov	r5,r21
   91aa0:	dd001215 	stw	r20,72(sp)
   91aa4:	dd401315 	stw	r21,76(sp)
   91aa8:	009732c0 	call	9732c <__nedf2>
   91aac:	1000171e 	bne	r2,zero,91b0c <_dtoa_r+0x104>
   91ab0:	d9802717 	ldw	r6,156(sp)
   91ab4:	00800044 	movi	r2,1
   91ab8:	30800015 	stw	r2,0(r6)
   91abc:	d8802917 	ldw	r2,164(sp)
   91ac0:	10029b26 	beq	r2,zero,92530 <_dtoa_r+0xb28>
   91ac4:	d9002917 	ldw	r4,164(sp)
   91ac8:	008002b4 	movhi	r2,10
   91acc:	10b91244 	addi	r2,r2,-7095
   91ad0:	10ffffc4 	addi	r3,r2,-1
   91ad4:	20800015 	stw	r2,0(r4)
   91ad8:	1805883a 	mov	r2,r3
   91adc:	dfc02517 	ldw	ra,148(sp)
   91ae0:	df002417 	ldw	fp,144(sp)
   91ae4:	ddc02317 	ldw	r23,140(sp)
   91ae8:	dd802217 	ldw	r22,136(sp)
   91aec:	dd402117 	ldw	r21,132(sp)
   91af0:	dd002017 	ldw	r20,128(sp)
   91af4:	dcc01f17 	ldw	r19,124(sp)
   91af8:	dc801e17 	ldw	r18,120(sp)
   91afc:	dc401d17 	ldw	r17,116(sp)
   91b00:	dc001c17 	ldw	r16,112(sp)
   91b04:	dec02604 	addi	sp,sp,152
   91b08:	f800283a 	ret
   91b0c:	d9001617 	ldw	r4,88(sp)
   91b10:	d9401217 	ldw	r5,72(sp)
   91b14:	d8800104 	addi	r2,sp,4
   91b18:	a80d883a 	mov	r6,r21
   91b1c:	d9c00204 	addi	r7,sp,8
   91b20:	d8800015 	stw	r2,0(sp)
   91b24:	00945d80 	call	945d8 <__d2b>
   91b28:	d8800715 	stw	r2,28(sp)
   91b2c:	a804d53a 	srli	r2,r21,20
   91b30:	1101ffcc 	andi	r4,r2,2047
   91b34:	20008626 	beq	r4,zero,91d50 <_dtoa_r+0x348>
   91b38:	d8c01217 	ldw	r3,72(sp)
   91b3c:	00800434 	movhi	r2,16
   91b40:	10bfffc4 	addi	r2,r2,-1
   91b44:	ddc00117 	ldw	r23,4(sp)
   91b48:	a884703a 	and	r2,r21,r2
   91b4c:	1811883a 	mov	r8,r3
   91b50:	124ffc34 	orhi	r9,r2,16368
   91b54:	25bf0044 	addi	r22,r4,-1023
   91b58:	d8000815 	stw	zero,32(sp)
   91b5c:	0005883a 	mov	r2,zero
   91b60:	00cffe34 	movhi	r3,16376
   91b64:	480b883a 	mov	r5,r9
   91b68:	4009883a 	mov	r4,r8
   91b6c:	180f883a 	mov	r7,r3
   91b70:	100d883a 	mov	r6,r2
   91b74:	0096b940 	call	96b94 <__subdf3>
   91b78:	0218dbf4 	movhi	r8,25455
   91b7c:	4210d844 	addi	r8,r8,17249
   91b80:	024ff4f4 	movhi	r9,16339
   91b84:	4a61e9c4 	addi	r9,r9,-30809
   91b88:	480f883a 	mov	r7,r9
   91b8c:	400d883a 	mov	r6,r8
   91b90:	180b883a 	mov	r5,r3
   91b94:	1009883a 	mov	r4,r2
   91b98:	0096c880 	call	96c88 <__muldf3>
   91b9c:	0222d874 	movhi	r8,35681
   91ba0:	42322cc4 	addi	r8,r8,-14157
   91ba4:	024ff1f4 	movhi	r9,16327
   91ba8:	4a628a04 	addi	r9,r9,-30168
   91bac:	480f883a 	mov	r7,r9
   91bb0:	400d883a 	mov	r6,r8
   91bb4:	180b883a 	mov	r5,r3
   91bb8:	1009883a 	mov	r4,r2
   91bbc:	0096c140 	call	96c14 <__adddf3>
   91bc0:	b009883a 	mov	r4,r22
   91bc4:	1021883a 	mov	r16,r2
   91bc8:	1823883a 	mov	r17,r3
   91bcc:	009754c0 	call	9754c <__floatsidf>
   91bd0:	021427f4 	movhi	r8,20639
   91bd4:	421e7ec4 	addi	r8,r8,31227
   91bd8:	024ff4f4 	movhi	r9,16339
   91bdc:	4a5104c4 	addi	r9,r9,17427
   91be0:	480f883a 	mov	r7,r9
   91be4:	400d883a 	mov	r6,r8
   91be8:	180b883a 	mov	r5,r3
   91bec:	1009883a 	mov	r4,r2
   91bf0:	0096c880 	call	96c88 <__muldf3>
   91bf4:	180f883a 	mov	r7,r3
   91bf8:	880b883a 	mov	r5,r17
   91bfc:	100d883a 	mov	r6,r2
   91c00:	8009883a 	mov	r4,r16
   91c04:	0096c140 	call	96c14 <__adddf3>
   91c08:	1009883a 	mov	r4,r2
   91c0c:	180b883a 	mov	r5,r3
   91c10:	1021883a 	mov	r16,r2
   91c14:	1823883a 	mov	r17,r3
   91c18:	00976440 	call	97644 <__fixdfsi>
   91c1c:	000d883a 	mov	r6,zero
   91c20:	000f883a 	mov	r7,zero
   91c24:	8009883a 	mov	r4,r16
   91c28:	880b883a 	mov	r5,r17
   91c2c:	d8800d15 	stw	r2,52(sp)
   91c30:	00974c40 	call	974c4 <__ltdf2>
   91c34:	10031716 	blt	r2,zero,92894 <_dtoa_r+0xe8c>
   91c38:	d8c00d17 	ldw	r3,52(sp)
   91c3c:	00800584 	movi	r2,22
   91c40:	10c1482e 	bgeu	r2,r3,92164 <_dtoa_r+0x75c>
   91c44:	01000044 	movi	r4,1
   91c48:	d9000c15 	stw	r4,48(sp)
   91c4c:	bd85c83a 	sub	r2,r23,r22
   91c50:	11bfffc4 	addi	r6,r2,-1
   91c54:	30030b16 	blt	r6,zero,92884 <_dtoa_r+0xe7c>
   91c58:	d9800a15 	stw	r6,40(sp)
   91c5c:	d8001115 	stw	zero,68(sp)
   91c60:	d8c00d17 	ldw	r3,52(sp)
   91c64:	1802ff16 	blt	r3,zero,92864 <_dtoa_r+0xe5c>
   91c68:	d9000a17 	ldw	r4,40(sp)
   91c6c:	d8c00915 	stw	r3,36(sp)
   91c70:	d8001015 	stw	zero,64(sp)
   91c74:	20c9883a 	add	r4,r4,r3
   91c78:	d9000a15 	stw	r4,40(sp)
   91c7c:	d9001717 	ldw	r4,92(sp)
   91c80:	00800244 	movi	r2,9
   91c84:	11004636 	bltu	r2,r4,91da0 <_dtoa_r+0x398>
   91c88:	00800144 	movi	r2,5
   91c8c:	11020416 	blt	r2,r4,924a0 <_dtoa_r+0xa98>
   91c90:	04400044 	movi	r17,1
   91c94:	d8c01717 	ldw	r3,92(sp)
   91c98:	00800144 	movi	r2,5
   91c9c:	10c1ed36 	bltu	r2,r3,92454 <_dtoa_r+0xa4c>
   91ca0:	18c5883a 	add	r2,r3,r3
   91ca4:	1085883a 	add	r2,r2,r2
   91ca8:	00c00274 	movhi	r3,9
   91cac:	18c72f04 	addi	r3,r3,7356
   91cb0:	10c5883a 	add	r2,r2,r3
   91cb4:	11000017 	ldw	r4,0(r2)
   91cb8:	2000683a 	jmp	r4
   91cbc:	00091da8 	cmpgeui	zero,zero,9334
   91cc0:	00091da8 	cmpgeui	zero,zero,9334
   91cc4:	000927a8 	cmpgeui	zero,zero,9374
   91cc8:	00092780 	call	9278 <__alt_mem_onchip_memory2-0x76d88>
   91ccc:	000927c4 	movi	zero,9375
   91cd0:	000927d0 	cmplti	zero,zero,9375
   91cd4:	d9002717 	ldw	r4,156(sp)
   91cd8:	0089c3c4 	movi	r2,9999
   91cdc:	20800015 	stw	r2,0(r4)
   91ce0:	a0001026 	beq	r20,zero,91d24 <_dtoa_r+0x31c>
   91ce4:	00c002b4 	movhi	r3,10
   91ce8:	18f9bf04 	addi	r3,r3,-6404
   91cec:	d9802917 	ldw	r6,164(sp)
   91cf0:	303f7926 	beq	r6,zero,91ad8 <_dtoa_r+0xd0>
   91cf4:	188000c7 	ldb	r2,3(r3)
   91cf8:	190000c4 	addi	r4,r3,3
   91cfc:	1000101e 	bne	r2,zero,91d40 <_dtoa_r+0x338>
   91d00:	d8802917 	ldw	r2,164(sp)
   91d04:	11000015 	stw	r4,0(r2)
   91d08:	003f7306 	br	91ad8 <_dtoa_r+0xd0>
   91d0c:	00a00034 	movhi	r2,32768
   91d10:	10bfffc4 	addi	r2,r2,-1
   91d14:	00c00044 	movi	r3,1
   91d18:	88aa703a 	and	r21,r17,r2
   91d1c:	90c00015 	stw	r3,0(r18)
   91d20:	003f5806 	br	91a84 <_dtoa_r+0x7c>
   91d24:	00800434 	movhi	r2,16
   91d28:	10bfffc4 	addi	r2,r2,-1
   91d2c:	a884703a 	and	r2,r21,r2
   91d30:	103fec1e 	bne	r2,zero,91ce4 <_dtoa_r+0x2dc>
   91d34:	00c002b4 	movhi	r3,10
   91d38:	18f9bc04 	addi	r3,r3,-6416
   91d3c:	003feb06 	br	91cec <_dtoa_r+0x2e4>
   91d40:	d8802917 	ldw	r2,164(sp)
   91d44:	19000204 	addi	r4,r3,8
   91d48:	11000015 	stw	r4,0(r2)
   91d4c:	003f6206 	br	91ad8 <_dtoa_r+0xd0>
   91d50:	ddc00117 	ldw	r23,4(sp)
   91d54:	d8800217 	ldw	r2,8(sp)
   91d58:	01000804 	movi	r4,32
   91d5c:	b8c10c84 	addi	r3,r23,1074
   91d60:	18a3883a 	add	r17,r3,r2
   91d64:	2441b80e 	bge	r4,r17,92448 <_dtoa_r+0xa40>
   91d68:	00c01004 	movi	r3,64
   91d6c:	1c47c83a 	sub	r3,r3,r17
   91d70:	88bff804 	addi	r2,r17,-32
   91d74:	a8c6983a 	sll	r3,r21,r3
   91d78:	a084d83a 	srl	r2,r20,r2
   91d7c:	1888b03a 	or	r4,r3,r2
   91d80:	009771c0 	call	9771c <__floatunsidf>
   91d84:	1011883a 	mov	r8,r2
   91d88:	00bf8434 	movhi	r2,65040
   91d8c:	01000044 	movi	r4,1
   91d90:	10d3883a 	add	r9,r2,r3
   91d94:	8dbef344 	addi	r22,r17,-1075
   91d98:	d9000815 	stw	r4,32(sp)
   91d9c:	003f6f06 	br	91b5c <_dtoa_r+0x154>
   91da0:	d8001715 	stw	zero,92(sp)
   91da4:	04400044 	movi	r17,1
   91da8:	00bfffc4 	movi	r2,-1
   91dac:	00c00044 	movi	r3,1
   91db0:	d8800e15 	stw	r2,56(sp)
   91db4:	d8002615 	stw	zero,152(sp)
   91db8:	d8800f15 	stw	r2,60(sp)
   91dbc:	d8c00b15 	stw	r3,44(sp)
   91dc0:	1021883a 	mov	r16,r2
   91dc4:	d8801617 	ldw	r2,88(sp)
   91dc8:	10001115 	stw	zero,68(r2)
   91dcc:	d8801617 	ldw	r2,88(sp)
   91dd0:	11401117 	ldw	r5,68(r2)
   91dd4:	1009883a 	mov	r4,r2
   91dd8:	009451c0 	call	9451c <_Balloc>
   91ddc:	d8c01617 	ldw	r3,88(sp)
   91de0:	d8800515 	stw	r2,20(sp)
   91de4:	18801015 	stw	r2,64(r3)
   91de8:	00800384 	movi	r2,14
   91dec:	14006836 	bltu	r2,r16,91f90 <_dtoa_r+0x588>
   91df0:	8805003a 	cmpeq	r2,r17,zero
   91df4:	1000661e 	bne	r2,zero,91f90 <_dtoa_r+0x588>
   91df8:	d9000d17 	ldw	r4,52(sp)
   91dfc:	0102300e 	bge	zero,r4,926c0 <_dtoa_r+0xcb8>
   91e00:	208003cc 	andi	r2,r4,15
   91e04:	100490fa 	slli	r2,r2,3
   91e08:	2025d13a 	srai	r18,r4,4
   91e0c:	00c002b4 	movhi	r3,10
   91e10:	18f9d004 	addi	r3,r3,-6336
   91e14:	10c5883a 	add	r2,r2,r3
   91e18:	90c0040c 	andi	r3,r18,16
   91e1c:	14000017 	ldw	r16,0(r2)
   91e20:	14400117 	ldw	r17,4(r2)
   91e24:	18036a1e 	bne	r3,zero,92bd0 <_dtoa_r+0x11c8>
   91e28:	05800084 	movi	r22,2
   91e2c:	90001026 	beq	r18,zero,91e70 <_dtoa_r+0x468>
   91e30:	04c002b4 	movhi	r19,10
   91e34:	9cfa0204 	addi	r19,r19,-6136
   91e38:	9080004c 	andi	r2,r18,1
   91e3c:	1005003a 	cmpeq	r2,r2,zero
   91e40:	1000081e 	bne	r2,zero,91e64 <_dtoa_r+0x45c>
   91e44:	99800017 	ldw	r6,0(r19)
   91e48:	99c00117 	ldw	r7,4(r19)
   91e4c:	880b883a 	mov	r5,r17
   91e50:	8009883a 	mov	r4,r16
   91e54:	0096c880 	call	96c88 <__muldf3>
   91e58:	1021883a 	mov	r16,r2
   91e5c:	b5800044 	addi	r22,r22,1
   91e60:	1823883a 	mov	r17,r3
   91e64:	9025d07a 	srai	r18,r18,1
   91e68:	9cc00204 	addi	r19,r19,8
   91e6c:	903ff21e 	bne	r18,zero,91e38 <_dtoa_r+0x430>
   91e70:	a80b883a 	mov	r5,r21
   91e74:	a009883a 	mov	r4,r20
   91e78:	880f883a 	mov	r7,r17
   91e7c:	800d883a 	mov	r6,r16
   91e80:	009704c0 	call	9704c <__divdf3>
   91e84:	1029883a 	mov	r20,r2
   91e88:	182b883a 	mov	r21,r3
   91e8c:	d8c00c17 	ldw	r3,48(sp)
   91e90:	1805003a 	cmpeq	r2,r3,zero
   91e94:	1000081e 	bne	r2,zero,91eb8 <_dtoa_r+0x4b0>
   91e98:	0005883a 	mov	r2,zero
   91e9c:	00cffc34 	movhi	r3,16368
   91ea0:	180f883a 	mov	r7,r3
   91ea4:	a009883a 	mov	r4,r20
   91ea8:	a80b883a 	mov	r5,r21
   91eac:	100d883a 	mov	r6,r2
   91eb0:	00974c40 	call	974c4 <__ltdf2>
   91eb4:	1003fe16 	blt	r2,zero,92eb0 <_dtoa_r+0x14a8>
   91eb8:	b009883a 	mov	r4,r22
   91ebc:	009754c0 	call	9754c <__floatsidf>
   91ec0:	180b883a 	mov	r5,r3
   91ec4:	1009883a 	mov	r4,r2
   91ec8:	a00d883a 	mov	r6,r20
   91ecc:	a80f883a 	mov	r7,r21
   91ed0:	0096c880 	call	96c88 <__muldf3>
   91ed4:	0011883a 	mov	r8,zero
   91ed8:	02500734 	movhi	r9,16412
   91edc:	1009883a 	mov	r4,r2
   91ee0:	180b883a 	mov	r5,r3
   91ee4:	480f883a 	mov	r7,r9
   91ee8:	400d883a 	mov	r6,r8
   91eec:	0096c140 	call	96c14 <__adddf3>
   91ef0:	d9000f17 	ldw	r4,60(sp)
   91ef4:	102d883a 	mov	r22,r2
   91ef8:	00bf3034 	movhi	r2,64704
   91efc:	18b9883a 	add	fp,r3,r2
   91f00:	e02f883a 	mov	r23,fp
   91f04:	20028f1e 	bne	r4,zero,92944 <_dtoa_r+0xf3c>
   91f08:	0005883a 	mov	r2,zero
   91f0c:	00d00534 	movhi	r3,16404
   91f10:	a009883a 	mov	r4,r20
   91f14:	a80b883a 	mov	r5,r21
   91f18:	180f883a 	mov	r7,r3
   91f1c:	100d883a 	mov	r6,r2
   91f20:	0096b940 	call	96b94 <__subdf3>
   91f24:	1009883a 	mov	r4,r2
   91f28:	e00f883a 	mov	r7,fp
   91f2c:	180b883a 	mov	r5,r3
   91f30:	b00d883a 	mov	r6,r22
   91f34:	1025883a 	mov	r18,r2
   91f38:	1827883a 	mov	r19,r3
   91f3c:	00973b40 	call	973b4 <__gtdf2>
   91f40:	00834f16 	blt	zero,r2,92c80 <_dtoa_r+0x1278>
   91f44:	e0e0003c 	xorhi	r3,fp,32768
   91f48:	9009883a 	mov	r4,r18
   91f4c:	980b883a 	mov	r5,r19
   91f50:	180f883a 	mov	r7,r3
   91f54:	b00d883a 	mov	r6,r22
   91f58:	00974c40 	call	974c4 <__ltdf2>
   91f5c:	1000080e 	bge	r2,zero,91f80 <_dtoa_r+0x578>
   91f60:	0027883a 	mov	r19,zero
   91f64:	0025883a 	mov	r18,zero
   91f68:	d8802617 	ldw	r2,152(sp)
   91f6c:	df000517 	ldw	fp,20(sp)
   91f70:	d8000615 	stw	zero,24(sp)
   91f74:	0084303a 	nor	r2,zero,r2
   91f78:	d8800d15 	stw	r2,52(sp)
   91f7c:	00019b06 	br	925ec <_dtoa_r+0xbe4>
   91f80:	d9801217 	ldw	r6,72(sp)
   91f84:	d8801317 	ldw	r2,76(sp)
   91f88:	3029883a 	mov	r20,r6
   91f8c:	102b883a 	mov	r21,r2
   91f90:	d8c00217 	ldw	r3,8(sp)
   91f94:	18008516 	blt	r3,zero,921ac <_dtoa_r+0x7a4>
   91f98:	d9000d17 	ldw	r4,52(sp)
   91f9c:	00800384 	movi	r2,14
   91fa0:	11008216 	blt	r2,r4,921ac <_dtoa_r+0x7a4>
   91fa4:	200490fa 	slli	r2,r4,3
   91fa8:	d9802617 	ldw	r6,152(sp)
   91fac:	00c002b4 	movhi	r3,10
   91fb0:	18f9d004 	addi	r3,r3,-6336
   91fb4:	10c5883a 	add	r2,r2,r3
   91fb8:	14800017 	ldw	r18,0(r2)
   91fbc:	14c00117 	ldw	r19,4(r2)
   91fc0:	30031e16 	blt	r6,zero,92c3c <_dtoa_r+0x1234>
   91fc4:	d9000517 	ldw	r4,20(sp)
   91fc8:	d8c00f17 	ldw	r3,60(sp)
   91fcc:	a823883a 	mov	r17,r21
   91fd0:	a021883a 	mov	r16,r20
   91fd4:	192b883a 	add	r21,r3,r4
   91fd8:	2039883a 	mov	fp,r4
   91fdc:	00000f06 	br	9201c <_dtoa_r+0x614>
   91fe0:	0005883a 	mov	r2,zero
   91fe4:	00d00934 	movhi	r3,16420
   91fe8:	5009883a 	mov	r4,r10
   91fec:	580b883a 	mov	r5,r11
   91ff0:	180f883a 	mov	r7,r3
   91ff4:	100d883a 	mov	r6,r2
   91ff8:	0096c880 	call	96c88 <__muldf3>
   91ffc:	180b883a 	mov	r5,r3
   92000:	000d883a 	mov	r6,zero
   92004:	000f883a 	mov	r7,zero
   92008:	1009883a 	mov	r4,r2
   9200c:	1021883a 	mov	r16,r2
   92010:	1823883a 	mov	r17,r3
   92014:	009732c0 	call	9732c <__nedf2>
   92018:	10004526 	beq	r2,zero,92130 <_dtoa_r+0x728>
   9201c:	900d883a 	mov	r6,r18
   92020:	980f883a 	mov	r7,r19
   92024:	8009883a 	mov	r4,r16
   92028:	880b883a 	mov	r5,r17
   9202c:	009704c0 	call	9704c <__divdf3>
   92030:	180b883a 	mov	r5,r3
   92034:	1009883a 	mov	r4,r2
   92038:	00976440 	call	97644 <__fixdfsi>
   9203c:	1009883a 	mov	r4,r2
   92040:	1029883a 	mov	r20,r2
   92044:	009754c0 	call	9754c <__floatsidf>
   92048:	180f883a 	mov	r7,r3
   9204c:	9009883a 	mov	r4,r18
   92050:	980b883a 	mov	r5,r19
   92054:	100d883a 	mov	r6,r2
   92058:	0096c880 	call	96c88 <__muldf3>
   9205c:	180f883a 	mov	r7,r3
   92060:	880b883a 	mov	r5,r17
   92064:	8009883a 	mov	r4,r16
   92068:	100d883a 	mov	r6,r2
   9206c:	0096b940 	call	96b94 <__subdf3>
   92070:	1015883a 	mov	r10,r2
   92074:	a0800c04 	addi	r2,r20,48
   92078:	e0800005 	stb	r2,0(fp)
   9207c:	e7000044 	addi	fp,fp,1
   92080:	1817883a 	mov	r11,r3
   92084:	e57fd61e 	bne	fp,r21,91fe0 <_dtoa_r+0x5d8>
   92088:	500d883a 	mov	r6,r10
   9208c:	180f883a 	mov	r7,r3
   92090:	5009883a 	mov	r4,r10
   92094:	180b883a 	mov	r5,r3
   92098:	0096c140 	call	96c14 <__adddf3>
   9209c:	100d883a 	mov	r6,r2
   920a0:	9009883a 	mov	r4,r18
   920a4:	980b883a 	mov	r5,r19
   920a8:	180f883a 	mov	r7,r3
   920ac:	1021883a 	mov	r16,r2
   920b0:	1823883a 	mov	r17,r3
   920b4:	00974c40 	call	974c4 <__ltdf2>
   920b8:	10000816 	blt	r2,zero,920dc <_dtoa_r+0x6d4>
   920bc:	980b883a 	mov	r5,r19
   920c0:	800d883a 	mov	r6,r16
   920c4:	880f883a 	mov	r7,r17
   920c8:	9009883a 	mov	r4,r18
   920cc:	00972a40 	call	972a4 <__eqdf2>
   920d0:	1000171e 	bne	r2,zero,92130 <_dtoa_r+0x728>
   920d4:	a080004c 	andi	r2,r20,1
   920d8:	10001526 	beq	r2,zero,92130 <_dtoa_r+0x728>
   920dc:	d8800d17 	ldw	r2,52(sp)
   920e0:	d8800415 	stw	r2,16(sp)
   920e4:	e009883a 	mov	r4,fp
   920e8:	213fffc4 	addi	r4,r4,-1
   920ec:	20c00007 	ldb	r3,0(r4)
   920f0:	00800e44 	movi	r2,57
   920f4:	1880081e 	bne	r3,r2,92118 <_dtoa_r+0x710>
   920f8:	d8800517 	ldw	r2,20(sp)
   920fc:	113ffa1e 	bne	r2,r4,920e8 <_dtoa_r+0x6e0>
   92100:	d8c00417 	ldw	r3,16(sp)
   92104:	d9800517 	ldw	r6,20(sp)
   92108:	00800c04 	movi	r2,48
   9210c:	18c00044 	addi	r3,r3,1
   92110:	d8c00415 	stw	r3,16(sp)
   92114:	30800005 	stb	r2,0(r6)
   92118:	20800003 	ldbu	r2,0(r4)
   9211c:	d8c00417 	ldw	r3,16(sp)
   92120:	27000044 	addi	fp,r4,1
   92124:	10800044 	addi	r2,r2,1
   92128:	d8c00d15 	stw	r3,52(sp)
   9212c:	20800005 	stb	r2,0(r4)
   92130:	d9001617 	ldw	r4,88(sp)
   92134:	d9400717 	ldw	r5,28(sp)
   92138:	0093f9c0 	call	93f9c <_Bfree>
   9213c:	e0000005 	stb	zero,0(fp)
   92140:	d9800d17 	ldw	r6,52(sp)
   92144:	d8c02717 	ldw	r3,156(sp)
   92148:	d9002917 	ldw	r4,164(sp)
   9214c:	30800044 	addi	r2,r6,1
   92150:	18800015 	stw	r2,0(r3)
   92154:	20029c26 	beq	r4,zero,92bc8 <_dtoa_r+0x11c0>
   92158:	d8c00517 	ldw	r3,20(sp)
   9215c:	27000015 	stw	fp,0(r4)
   92160:	003e5d06 	br	91ad8 <_dtoa_r+0xd0>
   92164:	d9800d17 	ldw	r6,52(sp)
   92168:	00c002b4 	movhi	r3,10
   9216c:	18f9d004 	addi	r3,r3,-6336
   92170:	d9001217 	ldw	r4,72(sp)
   92174:	300490fa 	slli	r2,r6,3
   92178:	d9401317 	ldw	r5,76(sp)
   9217c:	10c5883a 	add	r2,r2,r3
   92180:	12000017 	ldw	r8,0(r2)
   92184:	12400117 	ldw	r9,4(r2)
   92188:	400d883a 	mov	r6,r8
   9218c:	480f883a 	mov	r7,r9
   92190:	00974c40 	call	974c4 <__ltdf2>
   92194:	1000030e 	bge	r2,zero,921a4 <_dtoa_r+0x79c>
   92198:	d8800d17 	ldw	r2,52(sp)
   9219c:	10bfffc4 	addi	r2,r2,-1
   921a0:	d8800d15 	stw	r2,52(sp)
   921a4:	d8000c15 	stw	zero,48(sp)
   921a8:	003ea806 	br	91c4c <_dtoa_r+0x244>
   921ac:	d9000b17 	ldw	r4,44(sp)
   921b0:	202cc03a 	cmpne	r22,r4,zero
   921b4:	b000c71e 	bne	r22,zero,924d4 <_dtoa_r+0xacc>
   921b8:	dc001117 	ldw	r16,68(sp)
   921bc:	dc801017 	ldw	r18,64(sp)
   921c0:	0027883a 	mov	r19,zero
   921c4:	04000b0e 	bge	zero,r16,921f4 <_dtoa_r+0x7ec>
   921c8:	d8c00a17 	ldw	r3,40(sp)
   921cc:	00c0090e 	bge	zero,r3,921f4 <_dtoa_r+0x7ec>
   921d0:	8005883a 	mov	r2,r16
   921d4:	1c011316 	blt	r3,r16,92624 <_dtoa_r+0xc1c>
   921d8:	d9000a17 	ldw	r4,40(sp)
   921dc:	d9801117 	ldw	r6,68(sp)
   921e0:	80a1c83a 	sub	r16,r16,r2
   921e4:	2089c83a 	sub	r4,r4,r2
   921e8:	308dc83a 	sub	r6,r6,r2
   921ec:	d9000a15 	stw	r4,40(sp)
   921f0:	d9801115 	stw	r6,68(sp)
   921f4:	d8801017 	ldw	r2,64(sp)
   921f8:	0080150e 	bge	zero,r2,92250 <_dtoa_r+0x848>
   921fc:	d8c00b17 	ldw	r3,44(sp)
   92200:	1805003a 	cmpeq	r2,r3,zero
   92204:	1001c91e 	bne	r2,zero,9292c <_dtoa_r+0xf24>
   92208:	04800e0e 	bge	zero,r18,92244 <_dtoa_r+0x83c>
   9220c:	d9001617 	ldw	r4,88(sp)
   92210:	980b883a 	mov	r5,r19
   92214:	900d883a 	mov	r6,r18
   92218:	0094d500 	call	94d50 <__pow5mult>
   9221c:	d9001617 	ldw	r4,88(sp)
   92220:	d9800717 	ldw	r6,28(sp)
   92224:	100b883a 	mov	r5,r2
   92228:	1027883a 	mov	r19,r2
   9222c:	0094a2c0 	call	94a2c <__multiply>
   92230:	d9001617 	ldw	r4,88(sp)
   92234:	d9400717 	ldw	r5,28(sp)
   92238:	1023883a 	mov	r17,r2
   9223c:	0093f9c0 	call	93f9c <_Bfree>
   92240:	dc400715 	stw	r17,28(sp)
   92244:	d9001017 	ldw	r4,64(sp)
   92248:	248dc83a 	sub	r6,r4,r18
   9224c:	30010e1e 	bne	r6,zero,92688 <_dtoa_r+0xc80>
   92250:	d9001617 	ldw	r4,88(sp)
   92254:	04400044 	movi	r17,1
   92258:	880b883a 	mov	r5,r17
   9225c:	0094c140 	call	94c14 <__i2b>
   92260:	d9800917 	ldw	r6,36(sp)
   92264:	1025883a 	mov	r18,r2
   92268:	0180040e 	bge	zero,r6,9227c <_dtoa_r+0x874>
   9226c:	d9001617 	ldw	r4,88(sp)
   92270:	100b883a 	mov	r5,r2
   92274:	0094d500 	call	94d50 <__pow5mult>
   92278:	1025883a 	mov	r18,r2
   9227c:	d8801717 	ldw	r2,92(sp)
   92280:	8880f30e 	bge	r17,r2,92650 <_dtoa_r+0xc48>
   92284:	0023883a 	mov	r17,zero
   92288:	d9800917 	ldw	r6,36(sp)
   9228c:	30019e1e 	bne	r6,zero,92908 <_dtoa_r+0xf00>
   92290:	00c00044 	movi	r3,1
   92294:	d9000a17 	ldw	r4,40(sp)
   92298:	20c5883a 	add	r2,r4,r3
   9229c:	10c007cc 	andi	r3,r2,31
   922a0:	1800841e 	bne	r3,zero,924b4 <_dtoa_r+0xaac>
   922a4:	00800704 	movi	r2,28
   922a8:	d9000a17 	ldw	r4,40(sp)
   922ac:	d9801117 	ldw	r6,68(sp)
   922b0:	80a1883a 	add	r16,r16,r2
   922b4:	2089883a 	add	r4,r4,r2
   922b8:	308d883a 	add	r6,r6,r2
   922bc:	d9000a15 	stw	r4,40(sp)
   922c0:	d9801115 	stw	r6,68(sp)
   922c4:	d8801117 	ldw	r2,68(sp)
   922c8:	0080050e 	bge	zero,r2,922e0 <_dtoa_r+0x8d8>
   922cc:	d9400717 	ldw	r5,28(sp)
   922d0:	d9001617 	ldw	r4,88(sp)
   922d4:	100d883a 	mov	r6,r2
   922d8:	00948e00 	call	948e0 <__lshift>
   922dc:	d8800715 	stw	r2,28(sp)
   922e0:	d8c00a17 	ldw	r3,40(sp)
   922e4:	00c0050e 	bge	zero,r3,922fc <_dtoa_r+0x8f4>
   922e8:	d9001617 	ldw	r4,88(sp)
   922ec:	900b883a 	mov	r5,r18
   922f0:	180d883a 	mov	r6,r3
   922f4:	00948e00 	call	948e0 <__lshift>
   922f8:	1025883a 	mov	r18,r2
   922fc:	d9000c17 	ldw	r4,48(sp)
   92300:	2005003a 	cmpeq	r2,r4,zero
   92304:	10016f26 	beq	r2,zero,928c4 <_dtoa_r+0xebc>
   92308:	d9000f17 	ldw	r4,60(sp)
   9230c:	0102170e 	bge	zero,r4,92b6c <_dtoa_r+0x1164>
   92310:	d9800b17 	ldw	r6,44(sp)
   92314:	3005003a 	cmpeq	r2,r6,zero
   92318:	1000881e 	bne	r2,zero,9253c <_dtoa_r+0xb34>
   9231c:	0400050e 	bge	zero,r16,92334 <_dtoa_r+0x92c>
   92320:	d9001617 	ldw	r4,88(sp)
   92324:	980b883a 	mov	r5,r19
   92328:	800d883a 	mov	r6,r16
   9232c:	00948e00 	call	948e0 <__lshift>
   92330:	1027883a 	mov	r19,r2
   92334:	8804c03a 	cmpne	r2,r17,zero
   92338:	1002541e 	bne	r2,zero,92c8c <_dtoa_r+0x1284>
   9233c:	980b883a 	mov	r5,r19
   92340:	dd800517 	ldw	r22,20(sp)
   92344:	dcc00615 	stw	r19,24(sp)
   92348:	a700004c 	andi	fp,r20,1
   9234c:	2827883a 	mov	r19,r5
   92350:	d9000717 	ldw	r4,28(sp)
   92354:	900b883a 	mov	r5,r18
   92358:	00917f00 	call	917f0 <quorem>
   9235c:	d9000717 	ldw	r4,28(sp)
   92360:	d9400617 	ldw	r5,24(sp)
   92364:	1023883a 	mov	r17,r2
   92368:	8dc00c04 	addi	r23,r17,48
   9236c:	00940f80 	call	940f8 <__mcmp>
   92370:	d9001617 	ldw	r4,88(sp)
   92374:	900b883a 	mov	r5,r18
   92378:	980d883a 	mov	r6,r19
   9237c:	1029883a 	mov	r20,r2
   92380:	00947540 	call	94754 <__mdiff>
   92384:	102b883a 	mov	r21,r2
   92388:	10800317 	ldw	r2,12(r2)
   9238c:	1001281e 	bne	r2,zero,92830 <_dtoa_r+0xe28>
   92390:	d9000717 	ldw	r4,28(sp)
   92394:	a80b883a 	mov	r5,r21
   92398:	00940f80 	call	940f8 <__mcmp>
   9239c:	d9001617 	ldw	r4,88(sp)
   923a0:	1021883a 	mov	r16,r2
   923a4:	a80b883a 	mov	r5,r21
   923a8:	0093f9c0 	call	93f9c <_Bfree>
   923ac:	8000041e 	bne	r16,zero,923c0 <_dtoa_r+0x9b8>
   923b0:	d8801717 	ldw	r2,92(sp)
   923b4:	1000021e 	bne	r2,zero,923c0 <_dtoa_r+0x9b8>
   923b8:	e004c03a 	cmpne	r2,fp,zero
   923bc:	10011726 	beq	r2,zero,9281c <_dtoa_r+0xe14>
   923c0:	a0010616 	blt	r20,zero,927dc <_dtoa_r+0xdd4>
   923c4:	a000041e 	bne	r20,zero,923d8 <_dtoa_r+0x9d0>
   923c8:	d8c01717 	ldw	r3,92(sp)
   923cc:	1800021e 	bne	r3,zero,923d8 <_dtoa_r+0x9d0>
   923d0:	e004c03a 	cmpne	r2,fp,zero
   923d4:	10010126 	beq	r2,zero,927dc <_dtoa_r+0xdd4>
   923d8:	04023d16 	blt	zero,r16,92cd0 <_dtoa_r+0x12c8>
   923dc:	b5c00005 	stb	r23,0(r22)
   923e0:	d9800517 	ldw	r6,20(sp)
   923e4:	d9000f17 	ldw	r4,60(sp)
   923e8:	b5800044 	addi	r22,r22,1
   923ec:	3105883a 	add	r2,r6,r4
   923f0:	b0806526 	beq	r22,r2,92588 <_dtoa_r+0xb80>
   923f4:	d9400717 	ldw	r5,28(sp)
   923f8:	d9001617 	ldw	r4,88(sp)
   923fc:	01800284 	movi	r6,10
   92400:	000f883a 	mov	r7,zero
   92404:	0094c500 	call	94c50 <__multadd>
   92408:	d8800715 	stw	r2,28(sp)
   9240c:	d8800617 	ldw	r2,24(sp)
   92410:	14c10c26 	beq	r2,r19,92844 <_dtoa_r+0xe3c>
   92414:	d9400617 	ldw	r5,24(sp)
   92418:	d9001617 	ldw	r4,88(sp)
   9241c:	01800284 	movi	r6,10
   92420:	000f883a 	mov	r7,zero
   92424:	0094c500 	call	94c50 <__multadd>
   92428:	d9001617 	ldw	r4,88(sp)
   9242c:	980b883a 	mov	r5,r19
   92430:	01800284 	movi	r6,10
   92434:	000f883a 	mov	r7,zero
   92438:	d8800615 	stw	r2,24(sp)
   9243c:	0094c500 	call	94c50 <__multadd>
   92440:	1027883a 	mov	r19,r2
   92444:	003fc206 	br	92350 <_dtoa_r+0x948>
   92448:	2445c83a 	sub	r2,r4,r17
   9244c:	a088983a 	sll	r4,r20,r2
   92450:	003e4b06 	br	91d80 <_dtoa_r+0x378>
   92454:	01bfffc4 	movi	r6,-1
   92458:	00800044 	movi	r2,1
   9245c:	d9800e15 	stw	r6,56(sp)
   92460:	d9800f15 	stw	r6,60(sp)
   92464:	d8800b15 	stw	r2,44(sp)
   92468:	d8c01617 	ldw	r3,88(sp)
   9246c:	008005c4 	movi	r2,23
   92470:	18001115 	stw	zero,68(r3)
   92474:	1580082e 	bgeu	r2,r22,92498 <_dtoa_r+0xa90>
   92478:	00c00104 	movi	r3,4
   9247c:	0009883a 	mov	r4,zero
   92480:	18c7883a 	add	r3,r3,r3
   92484:	18800504 	addi	r2,r3,20
   92488:	21000044 	addi	r4,r4,1
   9248c:	b0bffc2e 	bgeu	r22,r2,92480 <_dtoa_r+0xa78>
   92490:	d9801617 	ldw	r6,88(sp)
   92494:	31001115 	stw	r4,68(r6)
   92498:	dc000f17 	ldw	r16,60(sp)
   9249c:	003e4b06 	br	91dcc <_dtoa_r+0x3c4>
   924a0:	d9801717 	ldw	r6,92(sp)
   924a4:	0023883a 	mov	r17,zero
   924a8:	31bfff04 	addi	r6,r6,-4
   924ac:	d9801715 	stw	r6,92(sp)
   924b0:	003df806 	br	91c94 <_dtoa_r+0x28c>
   924b4:	00800804 	movi	r2,32
   924b8:	10c9c83a 	sub	r4,r2,r3
   924bc:	00c00104 	movi	r3,4
   924c0:	19005a16 	blt	r3,r4,9262c <_dtoa_r+0xc24>
   924c4:	008000c4 	movi	r2,3
   924c8:	113f7e16 	blt	r2,r4,922c4 <_dtoa_r+0x8bc>
   924cc:	20800704 	addi	r2,r4,28
   924d0:	003f7506 	br	922a8 <_dtoa_r+0x8a0>
   924d4:	d9801717 	ldw	r6,92(sp)
   924d8:	00800044 	movi	r2,1
   924dc:	1180a10e 	bge	r2,r6,92764 <_dtoa_r+0xd5c>
   924e0:	d9800f17 	ldw	r6,60(sp)
   924e4:	d8c01017 	ldw	r3,64(sp)
   924e8:	30bfffc4 	addi	r2,r6,-1
   924ec:	1881c616 	blt	r3,r2,92c08 <_dtoa_r+0x1200>
   924f0:	18a5c83a 	sub	r18,r3,r2
   924f4:	d8800f17 	ldw	r2,60(sp)
   924f8:	10026216 	blt	r2,zero,92e84 <_dtoa_r+0x147c>
   924fc:	dc001117 	ldw	r16,68(sp)
   92500:	1007883a 	mov	r3,r2
   92504:	d9800a17 	ldw	r6,40(sp)
   92508:	d8801117 	ldw	r2,68(sp)
   9250c:	d9001617 	ldw	r4,88(sp)
   92510:	30cd883a 	add	r6,r6,r3
   92514:	10c5883a 	add	r2,r2,r3
   92518:	01400044 	movi	r5,1
   9251c:	d9800a15 	stw	r6,40(sp)
   92520:	d8801115 	stw	r2,68(sp)
   92524:	0094c140 	call	94c14 <__i2b>
   92528:	1027883a 	mov	r19,r2
   9252c:	003f2506 	br	921c4 <_dtoa_r+0x7bc>
   92530:	00c002b4 	movhi	r3,10
   92534:	18f91204 	addi	r3,r3,-7096
   92538:	003d6706 	br	91ad8 <_dtoa_r+0xd0>
   9253c:	dd800517 	ldw	r22,20(sp)
   92540:	04000044 	movi	r16,1
   92544:	00000706 	br	92564 <_dtoa_r+0xb5c>
   92548:	d9400717 	ldw	r5,28(sp)
   9254c:	d9001617 	ldw	r4,88(sp)
   92550:	01800284 	movi	r6,10
   92554:	000f883a 	mov	r7,zero
   92558:	0094c500 	call	94c50 <__multadd>
   9255c:	d8800715 	stw	r2,28(sp)
   92560:	84000044 	addi	r16,r16,1
   92564:	d9000717 	ldw	r4,28(sp)
   92568:	900b883a 	mov	r5,r18
   9256c:	00917f00 	call	917f0 <quorem>
   92570:	15c00c04 	addi	r23,r2,48
   92574:	b5c00005 	stb	r23,0(r22)
   92578:	d8c00f17 	ldw	r3,60(sp)
   9257c:	b5800044 	addi	r22,r22,1
   92580:	80fff116 	blt	r16,r3,92548 <_dtoa_r+0xb40>
   92584:	d8000615 	stw	zero,24(sp)
   92588:	d9400717 	ldw	r5,28(sp)
   9258c:	d9001617 	ldw	r4,88(sp)
   92590:	01800044 	movi	r6,1
   92594:	00948e00 	call	948e0 <__lshift>
   92598:	1009883a 	mov	r4,r2
   9259c:	900b883a 	mov	r5,r18
   925a0:	d8800715 	stw	r2,28(sp)
   925a4:	00940f80 	call	940f8 <__mcmp>
   925a8:	00803c0e 	bge	zero,r2,9269c <_dtoa_r+0xc94>
   925ac:	b009883a 	mov	r4,r22
   925b0:	213fffc4 	addi	r4,r4,-1
   925b4:	21400003 	ldbu	r5,0(r4)
   925b8:	00800e44 	movi	r2,57
   925bc:	28c03fcc 	andi	r3,r5,255
   925c0:	18c0201c 	xori	r3,r3,128
   925c4:	18ffe004 	addi	r3,r3,-128
   925c8:	1881981e 	bne	r3,r2,92c2c <_dtoa_r+0x1224>
   925cc:	d9800517 	ldw	r6,20(sp)
   925d0:	21bff71e 	bne	r4,r6,925b0 <_dtoa_r+0xba8>
   925d4:	d8800d17 	ldw	r2,52(sp)
   925d8:	37000044 	addi	fp,r6,1
   925dc:	10800044 	addi	r2,r2,1
   925e0:	d8800d15 	stw	r2,52(sp)
   925e4:	00800c44 	movi	r2,49
   925e8:	30800005 	stb	r2,0(r6)
   925ec:	d9001617 	ldw	r4,88(sp)
   925f0:	900b883a 	mov	r5,r18
   925f4:	0093f9c0 	call	93f9c <_Bfree>
   925f8:	983ecd26 	beq	r19,zero,92130 <_dtoa_r+0x728>
   925fc:	d8c00617 	ldw	r3,24(sp)
   92600:	18000426 	beq	r3,zero,92614 <_dtoa_r+0xc0c>
   92604:	1cc00326 	beq	r3,r19,92614 <_dtoa_r+0xc0c>
   92608:	d9001617 	ldw	r4,88(sp)
   9260c:	180b883a 	mov	r5,r3
   92610:	0093f9c0 	call	93f9c <_Bfree>
   92614:	d9001617 	ldw	r4,88(sp)
   92618:	980b883a 	mov	r5,r19
   9261c:	0093f9c0 	call	93f9c <_Bfree>
   92620:	003ec306 	br	92130 <_dtoa_r+0x728>
   92624:	1805883a 	mov	r2,r3
   92628:	003eeb06 	br	921d8 <_dtoa_r+0x7d0>
   9262c:	d9800a17 	ldw	r6,40(sp)
   92630:	d8c01117 	ldw	r3,68(sp)
   92634:	20bfff04 	addi	r2,r4,-4
   92638:	308d883a 	add	r6,r6,r2
   9263c:	1887883a 	add	r3,r3,r2
   92640:	80a1883a 	add	r16,r16,r2
   92644:	d9800a15 	stw	r6,40(sp)
   92648:	d8c01115 	stw	r3,68(sp)
   9264c:	003f1d06 	br	922c4 <_dtoa_r+0x8bc>
   92650:	a03f0c1e 	bne	r20,zero,92284 <_dtoa_r+0x87c>
   92654:	00800434 	movhi	r2,16
   92658:	10bfffc4 	addi	r2,r2,-1
   9265c:	a884703a 	and	r2,r21,r2
   92660:	103f081e 	bne	r2,zero,92284 <_dtoa_r+0x87c>
   92664:	a89ffc2c 	andhi	r2,r21,32752
   92668:	103f0626 	beq	r2,zero,92284 <_dtoa_r+0x87c>
   9266c:	d8c01117 	ldw	r3,68(sp)
   92670:	d9000a17 	ldw	r4,40(sp)
   92674:	18c00044 	addi	r3,r3,1
   92678:	21000044 	addi	r4,r4,1
   9267c:	d8c01115 	stw	r3,68(sp)
   92680:	d9000a15 	stw	r4,40(sp)
   92684:	003f0006 	br	92288 <_dtoa_r+0x880>
   92688:	d9400717 	ldw	r5,28(sp)
   9268c:	d9001617 	ldw	r4,88(sp)
   92690:	0094d500 	call	94d50 <__pow5mult>
   92694:	d8800715 	stw	r2,28(sp)
   92698:	003eed06 	br	92250 <_dtoa_r+0x848>
   9269c:	1000021e 	bne	r2,zero,926a8 <_dtoa_r+0xca0>
   926a0:	b880004c 	andi	r2,r23,1
   926a4:	103fc11e 	bne	r2,zero,925ac <_dtoa_r+0xba4>
   926a8:	b5bfffc4 	addi	r22,r22,-1
   926ac:	b0c00007 	ldb	r3,0(r22)
   926b0:	00800c04 	movi	r2,48
   926b4:	18bffc26 	beq	r3,r2,926a8 <_dtoa_r+0xca0>
   926b8:	b7000044 	addi	fp,r22,1
   926bc:	003fcb06 	br	925ec <_dtoa_r+0xbe4>
   926c0:	d9800d17 	ldw	r6,52(sp)
   926c4:	018fc83a 	sub	r7,zero,r6
   926c8:	3801f726 	beq	r7,zero,92ea8 <_dtoa_r+0x14a0>
   926cc:	398003cc 	andi	r6,r7,15
   926d0:	300c90fa 	slli	r6,r6,3
   926d4:	014002b4 	movhi	r5,10
   926d8:	2979d004 	addi	r5,r5,-6336
   926dc:	d9001217 	ldw	r4,72(sp)
   926e0:	314d883a 	add	r6,r6,r5
   926e4:	30c00117 	ldw	r3,4(r6)
   926e8:	30800017 	ldw	r2,0(r6)
   926ec:	d9401317 	ldw	r5,76(sp)
   926f0:	3821d13a 	srai	r16,r7,4
   926f4:	100d883a 	mov	r6,r2
   926f8:	180f883a 	mov	r7,r3
   926fc:	0096c880 	call	96c88 <__muldf3>
   92700:	1011883a 	mov	r8,r2
   92704:	1813883a 	mov	r9,r3
   92708:	1029883a 	mov	r20,r2
   9270c:	182b883a 	mov	r21,r3
   92710:	8001e526 	beq	r16,zero,92ea8 <_dtoa_r+0x14a0>
   92714:	05800084 	movi	r22,2
   92718:	044002b4 	movhi	r17,10
   9271c:	8c7a0204 	addi	r17,r17,-6136
   92720:	8080004c 	andi	r2,r16,1
   92724:	1005003a 	cmpeq	r2,r2,zero
   92728:	1000081e 	bne	r2,zero,9274c <_dtoa_r+0xd44>
   9272c:	89800017 	ldw	r6,0(r17)
   92730:	89c00117 	ldw	r7,4(r17)
   92734:	480b883a 	mov	r5,r9
   92738:	4009883a 	mov	r4,r8
   9273c:	0096c880 	call	96c88 <__muldf3>
   92740:	1011883a 	mov	r8,r2
   92744:	b5800044 	addi	r22,r22,1
   92748:	1813883a 	mov	r9,r3
   9274c:	8021d07a 	srai	r16,r16,1
   92750:	8c400204 	addi	r17,r17,8
   92754:	803ff21e 	bne	r16,zero,92720 <_dtoa_r+0xd18>
   92758:	4029883a 	mov	r20,r8
   9275c:	482b883a 	mov	r21,r9
   92760:	003dca06 	br	91e8c <_dtoa_r+0x484>
   92764:	d9000817 	ldw	r4,32(sp)
   92768:	2005003a 	cmpeq	r2,r4,zero
   9276c:	1001f61e 	bne	r2,zero,92f48 <_dtoa_r+0x1540>
   92770:	dc001117 	ldw	r16,68(sp)
   92774:	dc801017 	ldw	r18,64(sp)
   92778:	18c10cc4 	addi	r3,r3,1075
   9277c:	003f6106 	br	92504 <_dtoa_r+0xafc>
   92780:	d8000b15 	stw	zero,44(sp)
   92784:	d9802617 	ldw	r6,152(sp)
   92788:	d8c00d17 	ldw	r3,52(sp)
   9278c:	30800044 	addi	r2,r6,1
   92790:	18ad883a 	add	r22,r3,r2
   92794:	b13fffc4 	addi	r4,r22,-1
   92798:	d9000e15 	stw	r4,56(sp)
   9279c:	0581f60e 	bge	zero,r22,92f78 <_dtoa_r+0x1570>
   927a0:	dd800f15 	stw	r22,60(sp)
   927a4:	003f3006 	br	92468 <_dtoa_r+0xa60>
   927a8:	d8000b15 	stw	zero,44(sp)
   927ac:	d9002617 	ldw	r4,152(sp)
   927b0:	0101eb0e 	bge	zero,r4,92f60 <_dtoa_r+0x1558>
   927b4:	202d883a 	mov	r22,r4
   927b8:	d9000e15 	stw	r4,56(sp)
   927bc:	d9000f15 	stw	r4,60(sp)
   927c0:	003f2906 	br	92468 <_dtoa_r+0xa60>
   927c4:	01800044 	movi	r6,1
   927c8:	d9800b15 	stw	r6,44(sp)
   927cc:	003ff706 	br	927ac <_dtoa_r+0xda4>
   927d0:	01000044 	movi	r4,1
   927d4:	d9000b15 	stw	r4,44(sp)
   927d8:	003fea06 	br	92784 <_dtoa_r+0xd7c>
   927dc:	04000c0e 	bge	zero,r16,92810 <_dtoa_r+0xe08>
   927e0:	d9400717 	ldw	r5,28(sp)
   927e4:	d9001617 	ldw	r4,88(sp)
   927e8:	01800044 	movi	r6,1
   927ec:	00948e00 	call	948e0 <__lshift>
   927f0:	1009883a 	mov	r4,r2
   927f4:	900b883a 	mov	r5,r18
   927f8:	d8800715 	stw	r2,28(sp)
   927fc:	00940f80 	call	940f8 <__mcmp>
   92800:	0081e00e 	bge	zero,r2,92f84 <_dtoa_r+0x157c>
   92804:	bdc00044 	addi	r23,r23,1
   92808:	00800e84 	movi	r2,58
   9280c:	b881a226 	beq	r23,r2,92e98 <_dtoa_r+0x1490>
   92810:	b7000044 	addi	fp,r22,1
   92814:	b5c00005 	stb	r23,0(r22)
   92818:	003f7406 	br	925ec <_dtoa_r+0xbe4>
   9281c:	00800e44 	movi	r2,57
   92820:	b8819d26 	beq	r23,r2,92e98 <_dtoa_r+0x1490>
   92824:	053ffa0e 	bge	zero,r20,92810 <_dtoa_r+0xe08>
   92828:	8dc00c44 	addi	r23,r17,49
   9282c:	003ff806 	br	92810 <_dtoa_r+0xe08>
   92830:	d9001617 	ldw	r4,88(sp)
   92834:	a80b883a 	mov	r5,r21
   92838:	04000044 	movi	r16,1
   9283c:	0093f9c0 	call	93f9c <_Bfree>
   92840:	003edf06 	br	923c0 <_dtoa_r+0x9b8>
   92844:	d9001617 	ldw	r4,88(sp)
   92848:	980b883a 	mov	r5,r19
   9284c:	01800284 	movi	r6,10
   92850:	000f883a 	mov	r7,zero
   92854:	0094c500 	call	94c50 <__multadd>
   92858:	1027883a 	mov	r19,r2
   9285c:	d8800615 	stw	r2,24(sp)
   92860:	003ebb06 	br	92350 <_dtoa_r+0x948>
   92864:	d9801117 	ldw	r6,68(sp)
   92868:	d8800d17 	ldw	r2,52(sp)
   9286c:	d8000915 	stw	zero,36(sp)
   92870:	308dc83a 	sub	r6,r6,r2
   92874:	0087c83a 	sub	r3,zero,r2
   92878:	d9801115 	stw	r6,68(sp)
   9287c:	d8c01015 	stw	r3,64(sp)
   92880:	003cfe06 	br	91c7c <_dtoa_r+0x274>
   92884:	018dc83a 	sub	r6,zero,r6
   92888:	d9801115 	stw	r6,68(sp)
   9288c:	d8000a15 	stw	zero,40(sp)
   92890:	003cf306 	br	91c60 <_dtoa_r+0x258>
   92894:	d9000d17 	ldw	r4,52(sp)
   92898:	009754c0 	call	9754c <__floatsidf>
   9289c:	880b883a 	mov	r5,r17
   928a0:	8009883a 	mov	r4,r16
   928a4:	180f883a 	mov	r7,r3
   928a8:	100d883a 	mov	r6,r2
   928ac:	009732c0 	call	9732c <__nedf2>
   928b0:	103ce126 	beq	r2,zero,91c38 <_dtoa_r+0x230>
   928b4:	d9800d17 	ldw	r6,52(sp)
   928b8:	31bfffc4 	addi	r6,r6,-1
   928bc:	d9800d15 	stw	r6,52(sp)
   928c0:	003cdd06 	br	91c38 <_dtoa_r+0x230>
   928c4:	d9000717 	ldw	r4,28(sp)
   928c8:	900b883a 	mov	r5,r18
   928cc:	00940f80 	call	940f8 <__mcmp>
   928d0:	103e8d0e 	bge	r2,zero,92308 <_dtoa_r+0x900>
   928d4:	d9400717 	ldw	r5,28(sp)
   928d8:	d9001617 	ldw	r4,88(sp)
   928dc:	01800284 	movi	r6,10
   928e0:	000f883a 	mov	r7,zero
   928e4:	0094c500 	call	94c50 <__multadd>
   928e8:	d9800d17 	ldw	r6,52(sp)
   928ec:	d8800715 	stw	r2,28(sp)
   928f0:	31bfffc4 	addi	r6,r6,-1
   928f4:	d9800d15 	stw	r6,52(sp)
   928f8:	b001a71e 	bne	r22,zero,92f98 <_dtoa_r+0x1590>
   928fc:	d8800e17 	ldw	r2,56(sp)
   92900:	d8800f15 	stw	r2,60(sp)
   92904:	003e8006 	br	92308 <_dtoa_r+0x900>
   92908:	90800417 	ldw	r2,16(r18)
   9290c:	1085883a 	add	r2,r2,r2
   92910:	1085883a 	add	r2,r2,r2
   92914:	1485883a 	add	r2,r2,r18
   92918:	11000417 	ldw	r4,16(r2)
   9291c:	0093fc40 	call	93fc4 <__hi0bits>
   92920:	00c00804 	movi	r3,32
   92924:	1887c83a 	sub	r3,r3,r2
   92928:	003e5a06 	br	92294 <_dtoa_r+0x88c>
   9292c:	d9400717 	ldw	r5,28(sp)
   92930:	d9801017 	ldw	r6,64(sp)
   92934:	d9001617 	ldw	r4,88(sp)
   92938:	0094d500 	call	94d50 <__pow5mult>
   9293c:	d8800715 	stw	r2,28(sp)
   92940:	003e4306 	br	92250 <_dtoa_r+0x848>
   92944:	d9800f17 	ldw	r6,60(sp)
   92948:	d8800d17 	ldw	r2,52(sp)
   9294c:	d9800315 	stw	r6,12(sp)
   92950:	d8800415 	stw	r2,16(sp)
   92954:	d8c00b17 	ldw	r3,44(sp)
   92958:	1805003a 	cmpeq	r2,r3,zero
   9295c:	1000e21e 	bne	r2,zero,92ce8 <_dtoa_r+0x12e0>
   92960:	d9000317 	ldw	r4,12(sp)
   92964:	0005883a 	mov	r2,zero
   92968:	00cff834 	movhi	r3,16352
   9296c:	200c90fa 	slli	r6,r4,3
   92970:	010002b4 	movhi	r4,10
   92974:	2139d004 	addi	r4,r4,-6336
   92978:	180b883a 	mov	r5,r3
   9297c:	310d883a 	add	r6,r6,r4
   92980:	327fff17 	ldw	r9,-4(r6)
   92984:	323ffe17 	ldw	r8,-8(r6)
   92988:	1009883a 	mov	r4,r2
   9298c:	480f883a 	mov	r7,r9
   92990:	400d883a 	mov	r6,r8
   92994:	009704c0 	call	9704c <__divdf3>
   92998:	180b883a 	mov	r5,r3
   9299c:	b00d883a 	mov	r6,r22
   929a0:	b80f883a 	mov	r7,r23
   929a4:	1009883a 	mov	r4,r2
   929a8:	0096b940 	call	96b94 <__subdf3>
   929ac:	a80b883a 	mov	r5,r21
   929b0:	a009883a 	mov	r4,r20
   929b4:	d8c01915 	stw	r3,100(sp)
   929b8:	d8801815 	stw	r2,96(sp)
   929bc:	00976440 	call	97644 <__fixdfsi>
   929c0:	1009883a 	mov	r4,r2
   929c4:	1027883a 	mov	r19,r2
   929c8:	009754c0 	call	9754c <__floatsidf>
   929cc:	a80b883a 	mov	r5,r21
   929d0:	a009883a 	mov	r4,r20
   929d4:	180f883a 	mov	r7,r3
   929d8:	100d883a 	mov	r6,r2
   929dc:	0096b940 	call	96b94 <__subdf3>
   929e0:	d9801817 	ldw	r6,96(sp)
   929e4:	1823883a 	mov	r17,r3
   929e8:	d8801415 	stw	r2,80(sp)
   929ec:	302d883a 	mov	r22,r6
   929f0:	d9800517 	ldw	r6,20(sp)
   929f4:	9cc00c04 	addi	r19,r19,48
   929f8:	dc401515 	stw	r17,84(sp)
   929fc:	d8c01917 	ldw	r3,100(sp)
   92a00:	34c00005 	stb	r19,0(r6)
   92a04:	d8800517 	ldw	r2,20(sp)
   92a08:	d9401917 	ldw	r5,100(sp)
   92a0c:	d9801417 	ldw	r6,80(sp)
   92a10:	b009883a 	mov	r4,r22
   92a14:	880f883a 	mov	r7,r17
   92a18:	182f883a 	mov	r23,r3
   92a1c:	17000044 	addi	fp,r2,1
   92a20:	00973b40 	call	973b4 <__gtdf2>
   92a24:	00804e16 	blt	zero,r2,92b60 <_dtoa_r+0x1158>
   92a28:	d9801417 	ldw	r6,80(sp)
   92a2c:	0005883a 	mov	r2,zero
   92a30:	00cffc34 	movhi	r3,16368
   92a34:	180b883a 	mov	r5,r3
   92a38:	880f883a 	mov	r7,r17
   92a3c:	1009883a 	mov	r4,r2
   92a40:	0096b940 	call	96b94 <__subdf3>
   92a44:	d9401917 	ldw	r5,100(sp)
   92a48:	180f883a 	mov	r7,r3
   92a4c:	b009883a 	mov	r4,r22
   92a50:	100d883a 	mov	r6,r2
   92a54:	00973b40 	call	973b4 <__gtdf2>
   92a58:	00bda216 	blt	zero,r2,920e4 <_dtoa_r+0x6dc>
   92a5c:	d8c00317 	ldw	r3,12(sp)
   92a60:	00800044 	movi	r2,1
   92a64:	10c01216 	blt	r2,r3,92ab0 <_dtoa_r+0x10a8>
   92a68:	003d4506 	br	91f80 <_dtoa_r+0x578>
   92a6c:	d9801417 	ldw	r6,80(sp)
   92a70:	0005883a 	mov	r2,zero
   92a74:	00cffc34 	movhi	r3,16368
   92a78:	180b883a 	mov	r5,r3
   92a7c:	880f883a 	mov	r7,r17
   92a80:	1009883a 	mov	r4,r2
   92a84:	0096b940 	call	96b94 <__subdf3>
   92a88:	d9c01b17 	ldw	r7,108(sp)
   92a8c:	180b883a 	mov	r5,r3
   92a90:	1009883a 	mov	r4,r2
   92a94:	b00d883a 	mov	r6,r22
   92a98:	00974c40 	call	974c4 <__ltdf2>
   92a9c:	103d9116 	blt	r2,zero,920e4 <_dtoa_r+0x6dc>
   92aa0:	d9800517 	ldw	r6,20(sp)
   92aa4:	d9000317 	ldw	r4,12(sp)
   92aa8:	3105883a 	add	r2,r6,r4
   92aac:	e0bd3426 	beq	fp,r2,91f80 <_dtoa_r+0x578>
   92ab0:	04500934 	movhi	r17,16420
   92ab4:	0021883a 	mov	r16,zero
   92ab8:	b80b883a 	mov	r5,r23
   92abc:	b009883a 	mov	r4,r22
   92ac0:	800d883a 	mov	r6,r16
   92ac4:	880f883a 	mov	r7,r17
   92ac8:	0096c880 	call	96c88 <__muldf3>
   92acc:	d9401517 	ldw	r5,84(sp)
   92ad0:	d9001417 	ldw	r4,80(sp)
   92ad4:	880f883a 	mov	r7,r17
   92ad8:	000d883a 	mov	r6,zero
   92adc:	d8801a15 	stw	r2,104(sp)
   92ae0:	d8c01b15 	stw	r3,108(sp)
   92ae4:	0096c880 	call	96c88 <__muldf3>
   92ae8:	180b883a 	mov	r5,r3
   92aec:	1009883a 	mov	r4,r2
   92af0:	1823883a 	mov	r17,r3
   92af4:	1021883a 	mov	r16,r2
   92af8:	00976440 	call	97644 <__fixdfsi>
   92afc:	1009883a 	mov	r4,r2
   92b00:	102b883a 	mov	r21,r2
   92b04:	009754c0 	call	9754c <__floatsidf>
   92b08:	880b883a 	mov	r5,r17
   92b0c:	8009883a 	mov	r4,r16
   92b10:	180f883a 	mov	r7,r3
   92b14:	100d883a 	mov	r6,r2
   92b18:	0096b940 	call	96b94 <__subdf3>
   92b1c:	1021883a 	mov	r16,r2
   92b20:	d9001b17 	ldw	r4,108(sp)
   92b24:	1823883a 	mov	r17,r3
   92b28:	dc001415 	stw	r16,80(sp)
   92b2c:	ad400c04 	addi	r21,r21,48
   92b30:	dc401515 	stw	r17,84(sp)
   92b34:	d8801a17 	ldw	r2,104(sp)
   92b38:	e5400005 	stb	r21,0(fp)
   92b3c:	202f883a 	mov	r23,r4
   92b40:	d9c01b17 	ldw	r7,108(sp)
   92b44:	d9001417 	ldw	r4,80(sp)
   92b48:	880b883a 	mov	r5,r17
   92b4c:	100d883a 	mov	r6,r2
   92b50:	102d883a 	mov	r22,r2
   92b54:	e7000044 	addi	fp,fp,1
   92b58:	00974c40 	call	974c4 <__ltdf2>
   92b5c:	103fc30e 	bge	r2,zero,92a6c <_dtoa_r+0x1064>
   92b60:	d9000417 	ldw	r4,16(sp)
   92b64:	d9000d15 	stw	r4,52(sp)
   92b68:	003d7106 	br	92130 <_dtoa_r+0x728>
   92b6c:	d9801717 	ldw	r6,92(sp)
   92b70:	00800084 	movi	r2,2
   92b74:	11bde60e 	bge	r2,r6,92310 <_dtoa_r+0x908>
   92b78:	203cfb1e 	bne	r4,zero,91f68 <_dtoa_r+0x560>
   92b7c:	d9001617 	ldw	r4,88(sp)
   92b80:	900b883a 	mov	r5,r18
   92b84:	01800144 	movi	r6,5
   92b88:	000f883a 	mov	r7,zero
   92b8c:	0094c500 	call	94c50 <__multadd>
   92b90:	d9000717 	ldw	r4,28(sp)
   92b94:	100b883a 	mov	r5,r2
   92b98:	1025883a 	mov	r18,r2
   92b9c:	00940f80 	call	940f8 <__mcmp>
   92ba0:	00bcf10e 	bge	zero,r2,91f68 <_dtoa_r+0x560>
   92ba4:	d8c00d17 	ldw	r3,52(sp)
   92ba8:	d9000517 	ldw	r4,20(sp)
   92bac:	d8000615 	stw	zero,24(sp)
   92bb0:	18c00044 	addi	r3,r3,1
   92bb4:	d8c00d15 	stw	r3,52(sp)
   92bb8:	00800c44 	movi	r2,49
   92bbc:	27000044 	addi	fp,r4,1
   92bc0:	20800005 	stb	r2,0(r4)
   92bc4:	003e8906 	br	925ec <_dtoa_r+0xbe4>
   92bc8:	d8c00517 	ldw	r3,20(sp)
   92bcc:	003bc206 	br	91ad8 <_dtoa_r+0xd0>
   92bd0:	018002b4 	movhi	r6,10
   92bd4:	31ba0204 	addi	r6,r6,-6136
   92bd8:	30c00917 	ldw	r3,36(r6)
   92bdc:	30800817 	ldw	r2,32(r6)
   92be0:	d9001217 	ldw	r4,72(sp)
   92be4:	d9401317 	ldw	r5,76(sp)
   92be8:	180f883a 	mov	r7,r3
   92bec:	100d883a 	mov	r6,r2
   92bf0:	009704c0 	call	9704c <__divdf3>
   92bf4:	948003cc 	andi	r18,r18,15
   92bf8:	058000c4 	movi	r22,3
   92bfc:	1029883a 	mov	r20,r2
   92c00:	182b883a 	mov	r21,r3
   92c04:	003c8906 	br	91e2c <_dtoa_r+0x424>
   92c08:	d9001017 	ldw	r4,64(sp)
   92c0c:	d9800917 	ldw	r6,36(sp)
   92c10:	0025883a 	mov	r18,zero
   92c14:	1105c83a 	sub	r2,r2,r4
   92c18:	2089883a 	add	r4,r4,r2
   92c1c:	308d883a 	add	r6,r6,r2
   92c20:	d9001015 	stw	r4,64(sp)
   92c24:	d9800915 	stw	r6,36(sp)
   92c28:	003e3206 	br	924f4 <_dtoa_r+0xaec>
   92c2c:	28800044 	addi	r2,r5,1
   92c30:	27000044 	addi	fp,r4,1
   92c34:	20800005 	stb	r2,0(r4)
   92c38:	003e6c06 	br	925ec <_dtoa_r+0xbe4>
   92c3c:	d8800f17 	ldw	r2,60(sp)
   92c40:	00bce016 	blt	zero,r2,91fc4 <_dtoa_r+0x5bc>
   92c44:	d9800f17 	ldw	r6,60(sp)
   92c48:	303cc51e 	bne	r6,zero,91f60 <_dtoa_r+0x558>
   92c4c:	0005883a 	mov	r2,zero
   92c50:	00d00534 	movhi	r3,16404
   92c54:	980b883a 	mov	r5,r19
   92c58:	180f883a 	mov	r7,r3
   92c5c:	9009883a 	mov	r4,r18
   92c60:	100d883a 	mov	r6,r2
   92c64:	0096c880 	call	96c88 <__muldf3>
   92c68:	180b883a 	mov	r5,r3
   92c6c:	a80f883a 	mov	r7,r21
   92c70:	1009883a 	mov	r4,r2
   92c74:	a00d883a 	mov	r6,r20
   92c78:	009743c0 	call	9743c <__gedf2>
   92c7c:	103cb80e 	bge	r2,zero,91f60 <_dtoa_r+0x558>
   92c80:	0027883a 	mov	r19,zero
   92c84:	0025883a 	mov	r18,zero
   92c88:	003fc606 	br	92ba4 <_dtoa_r+0x119c>
   92c8c:	99400117 	ldw	r5,4(r19)
   92c90:	d9001617 	ldw	r4,88(sp)
   92c94:	009451c0 	call	9451c <_Balloc>
   92c98:	99800417 	ldw	r6,16(r19)
   92c9c:	11000304 	addi	r4,r2,12
   92ca0:	99400304 	addi	r5,r19,12
   92ca4:	318d883a 	add	r6,r6,r6
   92ca8:	318d883a 	add	r6,r6,r6
   92cac:	31800204 	addi	r6,r6,8
   92cb0:	1023883a 	mov	r17,r2
   92cb4:	008ecfc0 	call	8ecfc <memcpy>
   92cb8:	d9001617 	ldw	r4,88(sp)
   92cbc:	880b883a 	mov	r5,r17
   92cc0:	01800044 	movi	r6,1
   92cc4:	00948e00 	call	948e0 <__lshift>
   92cc8:	100b883a 	mov	r5,r2
   92ccc:	003d9c06 	br	92340 <_dtoa_r+0x938>
   92cd0:	00800e44 	movi	r2,57
   92cd4:	b8807026 	beq	r23,r2,92e98 <_dtoa_r+0x1490>
   92cd8:	b8800044 	addi	r2,r23,1
   92cdc:	b7000044 	addi	fp,r22,1
   92ce0:	b0800005 	stb	r2,0(r22)
   92ce4:	003e4106 	br	925ec <_dtoa_r+0xbe4>
   92ce8:	d8800317 	ldw	r2,12(sp)
   92cec:	018002b4 	movhi	r6,10
   92cf0:	31b9d004 	addi	r6,r6,-6336
   92cf4:	b009883a 	mov	r4,r22
   92cf8:	100e90fa 	slli	r7,r2,3
   92cfc:	b80b883a 	mov	r5,r23
   92d00:	398f883a 	add	r7,r7,r6
   92d04:	38bffe17 	ldw	r2,-8(r7)
   92d08:	d9800517 	ldw	r6,20(sp)
   92d0c:	38ffff17 	ldw	r3,-4(r7)
   92d10:	37000044 	addi	fp,r6,1
   92d14:	180f883a 	mov	r7,r3
   92d18:	100d883a 	mov	r6,r2
   92d1c:	0096c880 	call	96c88 <__muldf3>
   92d20:	a80b883a 	mov	r5,r21
   92d24:	a009883a 	mov	r4,r20
   92d28:	182f883a 	mov	r23,r3
   92d2c:	102d883a 	mov	r22,r2
   92d30:	00976440 	call	97644 <__fixdfsi>
   92d34:	1009883a 	mov	r4,r2
   92d38:	1027883a 	mov	r19,r2
   92d3c:	009754c0 	call	9754c <__floatsidf>
   92d40:	a80b883a 	mov	r5,r21
   92d44:	a009883a 	mov	r4,r20
   92d48:	180f883a 	mov	r7,r3
   92d4c:	100d883a 	mov	r6,r2
   92d50:	0096b940 	call	96b94 <__subdf3>
   92d54:	180b883a 	mov	r5,r3
   92d58:	d8c00517 	ldw	r3,20(sp)
   92d5c:	9cc00c04 	addi	r19,r19,48
   92d60:	1009883a 	mov	r4,r2
   92d64:	1cc00005 	stb	r19,0(r3)
   92d68:	2021883a 	mov	r16,r4
   92d6c:	d9000317 	ldw	r4,12(sp)
   92d70:	00800044 	movi	r2,1
   92d74:	2823883a 	mov	r17,r5
   92d78:	20802226 	beq	r4,r2,92e04 <_dtoa_r+0x13fc>
   92d7c:	1029883a 	mov	r20,r2
   92d80:	0005883a 	mov	r2,zero
   92d84:	00d00934 	movhi	r3,16420
   92d88:	180f883a 	mov	r7,r3
   92d8c:	100d883a 	mov	r6,r2
   92d90:	880b883a 	mov	r5,r17
   92d94:	8009883a 	mov	r4,r16
   92d98:	0096c880 	call	96c88 <__muldf3>
   92d9c:	180b883a 	mov	r5,r3
   92da0:	1009883a 	mov	r4,r2
   92da4:	1823883a 	mov	r17,r3
   92da8:	1021883a 	mov	r16,r2
   92dac:	00976440 	call	97644 <__fixdfsi>
   92db0:	1009883a 	mov	r4,r2
   92db4:	102b883a 	mov	r21,r2
   92db8:	009754c0 	call	9754c <__floatsidf>
   92dbc:	880b883a 	mov	r5,r17
   92dc0:	8009883a 	mov	r4,r16
   92dc4:	180f883a 	mov	r7,r3
   92dc8:	100d883a 	mov	r6,r2
   92dcc:	0096b940 	call	96b94 <__subdf3>
   92dd0:	180b883a 	mov	r5,r3
   92dd4:	d8c00517 	ldw	r3,20(sp)
   92dd8:	1009883a 	mov	r4,r2
   92ddc:	ad400c04 	addi	r21,r21,48
   92de0:	1d05883a 	add	r2,r3,r20
   92de4:	15400005 	stb	r21,0(r2)
   92de8:	2021883a 	mov	r16,r4
   92dec:	d9000317 	ldw	r4,12(sp)
   92df0:	a5000044 	addi	r20,r20,1
   92df4:	2823883a 	mov	r17,r5
   92df8:	a13fe11e 	bne	r20,r4,92d80 <_dtoa_r+0x1378>
   92dfc:	e505883a 	add	r2,fp,r20
   92e00:	173fffc4 	addi	fp,r2,-1
   92e04:	0025883a 	mov	r18,zero
   92e08:	04cff834 	movhi	r19,16352
   92e0c:	b009883a 	mov	r4,r22
   92e10:	b80b883a 	mov	r5,r23
   92e14:	900d883a 	mov	r6,r18
   92e18:	980f883a 	mov	r7,r19
   92e1c:	0096c140 	call	96c14 <__adddf3>
   92e20:	180b883a 	mov	r5,r3
   92e24:	1009883a 	mov	r4,r2
   92e28:	800d883a 	mov	r6,r16
   92e2c:	880f883a 	mov	r7,r17
   92e30:	00974c40 	call	974c4 <__ltdf2>
   92e34:	103cab16 	blt	r2,zero,920e4 <_dtoa_r+0x6dc>
   92e38:	0009883a 	mov	r4,zero
   92e3c:	980b883a 	mov	r5,r19
   92e40:	b80f883a 	mov	r7,r23
   92e44:	b00d883a 	mov	r6,r22
   92e48:	0096b940 	call	96b94 <__subdf3>
   92e4c:	180b883a 	mov	r5,r3
   92e50:	880f883a 	mov	r7,r17
   92e54:	1009883a 	mov	r4,r2
   92e58:	800d883a 	mov	r6,r16
   92e5c:	00973b40 	call	973b4 <__gtdf2>
   92e60:	00bc470e 	bge	zero,r2,91f80 <_dtoa_r+0x578>
   92e64:	00c00c04 	movi	r3,48
   92e68:	e73fffc4 	addi	fp,fp,-1
   92e6c:	e0800007 	ldb	r2,0(fp)
   92e70:	10fffd26 	beq	r2,r3,92e68 <_dtoa_r+0x1460>
   92e74:	d9800417 	ldw	r6,16(sp)
   92e78:	e7000044 	addi	fp,fp,1
   92e7c:	d9800d15 	stw	r6,52(sp)
   92e80:	003cab06 	br	92130 <_dtoa_r+0x728>
   92e84:	d8c00f17 	ldw	r3,60(sp)
   92e88:	d9001117 	ldw	r4,68(sp)
   92e8c:	20e1c83a 	sub	r16,r4,r3
   92e90:	0007883a 	mov	r3,zero
   92e94:	003d9b06 	br	92504 <_dtoa_r+0xafc>
   92e98:	00800e44 	movi	r2,57
   92e9c:	b0800005 	stb	r2,0(r22)
   92ea0:	b5800044 	addi	r22,r22,1
   92ea4:	003dc106 	br	925ac <_dtoa_r+0xba4>
   92ea8:	05800084 	movi	r22,2
   92eac:	003bf706 	br	91e8c <_dtoa_r+0x484>
   92eb0:	d9000f17 	ldw	r4,60(sp)
   92eb4:	013c000e 	bge	zero,r4,91eb8 <_dtoa_r+0x4b0>
   92eb8:	d9800e17 	ldw	r6,56(sp)
   92ebc:	01bc300e 	bge	zero,r6,91f80 <_dtoa_r+0x578>
   92ec0:	0005883a 	mov	r2,zero
   92ec4:	00d00934 	movhi	r3,16420
   92ec8:	a80b883a 	mov	r5,r21
   92ecc:	180f883a 	mov	r7,r3
   92ed0:	a009883a 	mov	r4,r20
   92ed4:	100d883a 	mov	r6,r2
   92ed8:	0096c880 	call	96c88 <__muldf3>
   92edc:	b1000044 	addi	r4,r22,1
   92ee0:	1021883a 	mov	r16,r2
   92ee4:	1823883a 	mov	r17,r3
   92ee8:	009754c0 	call	9754c <__floatsidf>
   92eec:	880b883a 	mov	r5,r17
   92ef0:	8009883a 	mov	r4,r16
   92ef4:	180f883a 	mov	r7,r3
   92ef8:	100d883a 	mov	r6,r2
   92efc:	0096c880 	call	96c88 <__muldf3>
   92f00:	0011883a 	mov	r8,zero
   92f04:	02500734 	movhi	r9,16412
   92f08:	180b883a 	mov	r5,r3
   92f0c:	480f883a 	mov	r7,r9
   92f10:	1009883a 	mov	r4,r2
   92f14:	400d883a 	mov	r6,r8
   92f18:	0096c140 	call	96c14 <__adddf3>
   92f1c:	102d883a 	mov	r22,r2
   92f20:	00bf3034 	movhi	r2,64704
   92f24:	10ef883a 	add	r23,r2,r3
   92f28:	d8800d17 	ldw	r2,52(sp)
   92f2c:	d8c00e17 	ldw	r3,56(sp)
   92f30:	8029883a 	mov	r20,r16
   92f34:	10bfffc4 	addi	r2,r2,-1
   92f38:	882b883a 	mov	r21,r17
   92f3c:	d8800415 	stw	r2,16(sp)
   92f40:	d8c00315 	stw	r3,12(sp)
   92f44:	003e8306 	br	92954 <_dtoa_r+0xf4c>
   92f48:	d8800117 	ldw	r2,4(sp)
   92f4c:	dc001117 	ldw	r16,68(sp)
   92f50:	dc801017 	ldw	r18,64(sp)
   92f54:	00c00d84 	movi	r3,54
   92f58:	1887c83a 	sub	r3,r3,r2
   92f5c:	003d6906 	br	92504 <_dtoa_r+0xafc>
   92f60:	01800044 	movi	r6,1
   92f64:	3021883a 	mov	r16,r6
   92f68:	d9800f15 	stw	r6,60(sp)
   92f6c:	d9802615 	stw	r6,152(sp)
   92f70:	d9800e15 	stw	r6,56(sp)
   92f74:	003b9306 	br	91dc4 <_dtoa_r+0x3bc>
   92f78:	b021883a 	mov	r16,r22
   92f7c:	dd800f15 	stw	r22,60(sp)
   92f80:	003b9006 	br	91dc4 <_dtoa_r+0x3bc>
   92f84:	103e221e 	bne	r2,zero,92810 <_dtoa_r+0xe08>
   92f88:	b880004c 	andi	r2,r23,1
   92f8c:	1005003a 	cmpeq	r2,r2,zero
   92f90:	103e1f1e 	bne	r2,zero,92810 <_dtoa_r+0xe08>
   92f94:	003e1b06 	br	92804 <_dtoa_r+0xdfc>
   92f98:	d9001617 	ldw	r4,88(sp)
   92f9c:	980b883a 	mov	r5,r19
   92fa0:	01800284 	movi	r6,10
   92fa4:	000f883a 	mov	r7,zero
   92fa8:	0094c500 	call	94c50 <__multadd>
   92fac:	d8c00e17 	ldw	r3,56(sp)
   92fb0:	1027883a 	mov	r19,r2
   92fb4:	d8c00f15 	stw	r3,60(sp)
   92fb8:	003cd306 	br	92308 <_dtoa_r+0x900>

00092fbc <_fclose_r>:
   92fbc:	defffc04 	addi	sp,sp,-16
   92fc0:	dc400115 	stw	r17,4(sp)
   92fc4:	dc000015 	stw	r16,0(sp)
   92fc8:	dfc00315 	stw	ra,12(sp)
   92fcc:	dc800215 	stw	r18,8(sp)
   92fd0:	2821883a 	mov	r16,r5
   92fd4:	2023883a 	mov	r17,r4
   92fd8:	28002926 	beq	r5,zero,93080 <_fclose_r+0xc4>
   92fdc:	008e07c0 	call	8e07c <__sfp_lock_acquire>
   92fe0:	88000226 	beq	r17,zero,92fec <_fclose_r+0x30>
   92fe4:	88800e17 	ldw	r2,56(r17)
   92fe8:	10002d26 	beq	r2,zero,930a0 <_fclose_r+0xe4>
   92fec:	8080030f 	ldh	r2,12(r16)
   92ff0:	10002226 	beq	r2,zero,9307c <_fclose_r+0xc0>
   92ff4:	8809883a 	mov	r4,r17
   92ff8:	800b883a 	mov	r5,r16
   92ffc:	00930e00 	call	930e0 <_fflush_r>
   93000:	1025883a 	mov	r18,r2
   93004:	80800b17 	ldw	r2,44(r16)
   93008:	10000426 	beq	r2,zero,9301c <_fclose_r+0x60>
   9300c:	81400717 	ldw	r5,28(r16)
   93010:	8809883a 	mov	r4,r17
   93014:	103ee83a 	callr	r2
   93018:	10002a16 	blt	r2,zero,930c4 <_fclose_r+0x108>
   9301c:	8080030b 	ldhu	r2,12(r16)
   93020:	1080200c 	andi	r2,r2,128
   93024:	1000231e 	bne	r2,zero,930b4 <_fclose_r+0xf8>
   93028:	81400c17 	ldw	r5,48(r16)
   9302c:	28000526 	beq	r5,zero,93044 <_fclose_r+0x88>
   93030:	80801004 	addi	r2,r16,64
   93034:	28800226 	beq	r5,r2,93040 <_fclose_r+0x84>
   93038:	8809883a 	mov	r4,r17
   9303c:	009343c0 	call	9343c <_free_r>
   93040:	80000c15 	stw	zero,48(r16)
   93044:	81401117 	ldw	r5,68(r16)
   93048:	28000326 	beq	r5,zero,93058 <_fclose_r+0x9c>
   9304c:	8809883a 	mov	r4,r17
   93050:	009343c0 	call	9343c <_free_r>
   93054:	80001115 	stw	zero,68(r16)
   93058:	8000030d 	sth	zero,12(r16)
   9305c:	008e0800 	call	8e080 <__sfp_lock_release>
   93060:	9005883a 	mov	r2,r18
   93064:	dfc00317 	ldw	ra,12(sp)
   93068:	dc800217 	ldw	r18,8(sp)
   9306c:	dc400117 	ldw	r17,4(sp)
   93070:	dc000017 	ldw	r16,0(sp)
   93074:	dec00404 	addi	sp,sp,16
   93078:	f800283a 	ret
   9307c:	008e0800 	call	8e080 <__sfp_lock_release>
   93080:	0025883a 	mov	r18,zero
   93084:	9005883a 	mov	r2,r18
   93088:	dfc00317 	ldw	ra,12(sp)
   9308c:	dc800217 	ldw	r18,8(sp)
   93090:	dc400117 	ldw	r17,4(sp)
   93094:	dc000017 	ldw	r16,0(sp)
   93098:	dec00404 	addi	sp,sp,16
   9309c:	f800283a 	ret
   930a0:	8809883a 	mov	r4,r17
   930a4:	008e08c0 	call	8e08c <__sinit>
   930a8:	8080030f 	ldh	r2,12(r16)
   930ac:	103fd11e 	bne	r2,zero,92ff4 <_fclose_r+0x38>
   930b0:	003ff206 	br	9307c <_fclose_r+0xc0>
   930b4:	81400417 	ldw	r5,16(r16)
   930b8:	8809883a 	mov	r4,r17
   930bc:	009343c0 	call	9343c <_free_r>
   930c0:	003fd906 	br	93028 <_fclose_r+0x6c>
   930c4:	04bfffc4 	movi	r18,-1
   930c8:	003fd406 	br	9301c <_fclose_r+0x60>

000930cc <fclose>:
   930cc:	008002b4 	movhi	r2,10
   930d0:	1081b804 	addi	r2,r2,1760
   930d4:	200b883a 	mov	r5,r4
   930d8:	11000017 	ldw	r4,0(r2)
   930dc:	0092fbc1 	jmpi	92fbc <_fclose_r>

000930e0 <_fflush_r>:
   930e0:	defffb04 	addi	sp,sp,-20
   930e4:	dcc00315 	stw	r19,12(sp)
   930e8:	dc800215 	stw	r18,8(sp)
   930ec:	dfc00415 	stw	ra,16(sp)
   930f0:	dc400115 	stw	r17,4(sp)
   930f4:	dc000015 	stw	r16,0(sp)
   930f8:	2027883a 	mov	r19,r4
   930fc:	2825883a 	mov	r18,r5
   93100:	20000226 	beq	r4,zero,9310c <_fflush_r+0x2c>
   93104:	20800e17 	ldw	r2,56(r4)
   93108:	10005626 	beq	r2,zero,93264 <_fflush_r+0x184>
   9310c:	9100030b 	ldhu	r4,12(r18)
   93110:	20ffffcc 	andi	r3,r4,65535
   93114:	18e0001c 	xori	r3,r3,32768
   93118:	18e00004 	addi	r3,r3,-32768
   9311c:	1880020c 	andi	r2,r3,8
   93120:	1000261e 	bne	r2,zero,931bc <_fflush_r+0xdc>
   93124:	90c00117 	ldw	r3,4(r18)
   93128:	20820014 	ori	r2,r4,2048
   9312c:	9080030d 	sth	r2,12(r18)
   93130:	1009883a 	mov	r4,r2
   93134:	00c0400e 	bge	zero,r3,93238 <_fflush_r+0x158>
   93138:	92000a17 	ldw	r8,40(r18)
   9313c:	40004026 	beq	r8,zero,93240 <_fflush_r+0x160>
   93140:	2084000c 	andi	r2,r4,4096
   93144:	10005326 	beq	r2,zero,93294 <_fflush_r+0x1b4>
   93148:	94001417 	ldw	r16,80(r18)
   9314c:	9080030b 	ldhu	r2,12(r18)
   93150:	1080010c 	andi	r2,r2,4
   93154:	1000481e 	bne	r2,zero,93278 <_fflush_r+0x198>
   93158:	91400717 	ldw	r5,28(r18)
   9315c:	9809883a 	mov	r4,r19
   93160:	800d883a 	mov	r6,r16
   93164:	000f883a 	mov	r7,zero
   93168:	403ee83a 	callr	r8
   9316c:	8080261e 	bne	r16,r2,93208 <_fflush_r+0x128>
   93170:	9080030b 	ldhu	r2,12(r18)
   93174:	91000417 	ldw	r4,16(r18)
   93178:	90000115 	stw	zero,4(r18)
   9317c:	10bdffcc 	andi	r2,r2,63487
   93180:	10ffffcc 	andi	r3,r2,65535
   93184:	18c4000c 	andi	r3,r3,4096
   93188:	9080030d 	sth	r2,12(r18)
   9318c:	91000015 	stw	r4,0(r18)
   93190:	18002b26 	beq	r3,zero,93240 <_fflush_r+0x160>
   93194:	0007883a 	mov	r3,zero
   93198:	1805883a 	mov	r2,r3
   9319c:	94001415 	stw	r16,80(r18)
   931a0:	dfc00417 	ldw	ra,16(sp)
   931a4:	dcc00317 	ldw	r19,12(sp)
   931a8:	dc800217 	ldw	r18,8(sp)
   931ac:	dc400117 	ldw	r17,4(sp)
   931b0:	dc000017 	ldw	r16,0(sp)
   931b4:	dec00504 	addi	sp,sp,20
   931b8:	f800283a 	ret
   931bc:	94400417 	ldw	r17,16(r18)
   931c0:	88001f26 	beq	r17,zero,93240 <_fflush_r+0x160>
   931c4:	90800017 	ldw	r2,0(r18)
   931c8:	18c000cc 	andi	r3,r3,3
   931cc:	94400015 	stw	r17,0(r18)
   931d0:	1461c83a 	sub	r16,r2,r17
   931d4:	18002526 	beq	r3,zero,9326c <_fflush_r+0x18c>
   931d8:	0005883a 	mov	r2,zero
   931dc:	90800215 	stw	r2,8(r18)
   931e0:	0400170e 	bge	zero,r16,93240 <_fflush_r+0x160>
   931e4:	90c00917 	ldw	r3,36(r18)
   931e8:	91400717 	ldw	r5,28(r18)
   931ec:	880d883a 	mov	r6,r17
   931f0:	800f883a 	mov	r7,r16
   931f4:	9809883a 	mov	r4,r19
   931f8:	183ee83a 	callr	r3
   931fc:	88a3883a 	add	r17,r17,r2
   93200:	80a1c83a 	sub	r16,r16,r2
   93204:	00bff616 	blt	zero,r2,931e0 <_fflush_r+0x100>
   93208:	9080030b 	ldhu	r2,12(r18)
   9320c:	00ffffc4 	movi	r3,-1
   93210:	10801014 	ori	r2,r2,64
   93214:	9080030d 	sth	r2,12(r18)
   93218:	1805883a 	mov	r2,r3
   9321c:	dfc00417 	ldw	ra,16(sp)
   93220:	dcc00317 	ldw	r19,12(sp)
   93224:	dc800217 	ldw	r18,8(sp)
   93228:	dc400117 	ldw	r17,4(sp)
   9322c:	dc000017 	ldw	r16,0(sp)
   93230:	dec00504 	addi	sp,sp,20
   93234:	f800283a 	ret
   93238:	90800f17 	ldw	r2,60(r18)
   9323c:	00bfbe16 	blt	zero,r2,93138 <_fflush_r+0x58>
   93240:	0007883a 	mov	r3,zero
   93244:	1805883a 	mov	r2,r3
   93248:	dfc00417 	ldw	ra,16(sp)
   9324c:	dcc00317 	ldw	r19,12(sp)
   93250:	dc800217 	ldw	r18,8(sp)
   93254:	dc400117 	ldw	r17,4(sp)
   93258:	dc000017 	ldw	r16,0(sp)
   9325c:	dec00504 	addi	sp,sp,20
   93260:	f800283a 	ret
   93264:	008e08c0 	call	8e08c <__sinit>
   93268:	003fa806 	br	9310c <_fflush_r+0x2c>
   9326c:	90800517 	ldw	r2,20(r18)
   93270:	90800215 	stw	r2,8(r18)
   93274:	003fda06 	br	931e0 <_fflush_r+0x100>
   93278:	90800117 	ldw	r2,4(r18)
   9327c:	90c00c17 	ldw	r3,48(r18)
   93280:	80a1c83a 	sub	r16,r16,r2
   93284:	183fb426 	beq	r3,zero,93158 <_fflush_r+0x78>
   93288:	90800f17 	ldw	r2,60(r18)
   9328c:	80a1c83a 	sub	r16,r16,r2
   93290:	003fb106 	br	93158 <_fflush_r+0x78>
   93294:	91400717 	ldw	r5,28(r18)
   93298:	9809883a 	mov	r4,r19
   9329c:	000d883a 	mov	r6,zero
   932a0:	01c00044 	movi	r7,1
   932a4:	403ee83a 	callr	r8
   932a8:	1021883a 	mov	r16,r2
   932ac:	00bfffc4 	movi	r2,-1
   932b0:	80800226 	beq	r16,r2,932bc <_fflush_r+0x1dc>
   932b4:	92000a17 	ldw	r8,40(r18)
   932b8:	003fa406 	br	9314c <_fflush_r+0x6c>
   932bc:	98c00017 	ldw	r3,0(r19)
   932c0:	00800744 	movi	r2,29
   932c4:	18bfde26 	beq	r3,r2,93240 <_fflush_r+0x160>
   932c8:	9080030b 	ldhu	r2,12(r18)
   932cc:	8007883a 	mov	r3,r16
   932d0:	10801014 	ori	r2,r2,64
   932d4:	9080030d 	sth	r2,12(r18)
   932d8:	003fcf06 	br	93218 <_fflush_r+0x138>

000932dc <fflush>:
   932dc:	01400274 	movhi	r5,9
   932e0:	294c3804 	addi	r5,r5,12512
   932e4:	2007883a 	mov	r3,r4
   932e8:	20000526 	beq	r4,zero,93300 <fflush+0x24>
   932ec:	008002b4 	movhi	r2,10
   932f0:	1081b804 	addi	r2,r2,1760
   932f4:	11000017 	ldw	r4,0(r2)
   932f8:	180b883a 	mov	r5,r3
   932fc:	00930e01 	jmpi	930e0 <_fflush_r>
   93300:	008002b4 	movhi	r2,10
   93304:	1081b904 	addi	r2,r2,1764
   93308:	11000017 	ldw	r4,0(r2)
   9330c:	008e2e41 	jmpi	8e2e4 <_fwalk_reent>

00093310 <_malloc_trim_r>:
   93310:	defffb04 	addi	sp,sp,-20
   93314:	dcc00315 	stw	r19,12(sp)
   93318:	04c002b4 	movhi	r19,10
   9331c:	9cfbce04 	addi	r19,r19,-4296
   93320:	dc800215 	stw	r18,8(sp)
   93324:	dc400115 	stw	r17,4(sp)
   93328:	dc000015 	stw	r16,0(sp)
   9332c:	2823883a 	mov	r17,r5
   93330:	2025883a 	mov	r18,r4
   93334:	dfc00415 	stw	ra,16(sp)
   93338:	00984880 	call	98488 <__malloc_lock>
   9333c:	98800217 	ldw	r2,8(r19)
   93340:	9009883a 	mov	r4,r18
   93344:	000b883a 	mov	r5,zero
   93348:	10c00117 	ldw	r3,4(r2)
   9334c:	00bfff04 	movi	r2,-4
   93350:	18a0703a 	and	r16,r3,r2
   93354:	8463c83a 	sub	r17,r16,r17
   93358:	8c43fbc4 	addi	r17,r17,4079
   9335c:	8822d33a 	srli	r17,r17,12
   93360:	0083ffc4 	movi	r2,4095
   93364:	8c7fffc4 	addi	r17,r17,-1
   93368:	8822933a 	slli	r17,r17,12
   9336c:	1440060e 	bge	r2,r17,93388 <_malloc_trim_r+0x78>
   93370:	008f1640 	call	8f164 <_sbrk_r>
   93374:	98c00217 	ldw	r3,8(r19)
   93378:	9009883a 	mov	r4,r18
   9337c:	044bc83a 	sub	r5,zero,r17
   93380:	80c7883a 	add	r3,r16,r3
   93384:	10c00926 	beq	r2,r3,933ac <_malloc_trim_r+0x9c>
   93388:	00984b00 	call	984b0 <__malloc_unlock>
   9338c:	0005883a 	mov	r2,zero
   93390:	dfc00417 	ldw	ra,16(sp)
   93394:	dcc00317 	ldw	r19,12(sp)
   93398:	dc800217 	ldw	r18,8(sp)
   9339c:	dc400117 	ldw	r17,4(sp)
   933a0:	dc000017 	ldw	r16,0(sp)
   933a4:	dec00504 	addi	sp,sp,20
   933a8:	f800283a 	ret
   933ac:	9009883a 	mov	r4,r18
   933b0:	008f1640 	call	8f164 <_sbrk_r>
   933b4:	844dc83a 	sub	r6,r16,r17
   933b8:	00ffffc4 	movi	r3,-1
   933bc:	9009883a 	mov	r4,r18
   933c0:	000b883a 	mov	r5,zero
   933c4:	01c002b4 	movhi	r7,10
   933c8:	39c97504 	addi	r7,r7,9684
   933cc:	31800054 	ori	r6,r6,1
   933d0:	10c00926 	beq	r2,r3,933f8 <_malloc_trim_r+0xe8>
   933d4:	38800017 	ldw	r2,0(r7)
   933d8:	98c00217 	ldw	r3,8(r19)
   933dc:	9009883a 	mov	r4,r18
   933e0:	1445c83a 	sub	r2,r2,r17
   933e4:	38800015 	stw	r2,0(r7)
   933e8:	19800115 	stw	r6,4(r3)
   933ec:	00984b00 	call	984b0 <__malloc_unlock>
   933f0:	00800044 	movi	r2,1
   933f4:	003fe606 	br	93390 <_malloc_trim_r+0x80>
   933f8:	008f1640 	call	8f164 <_sbrk_r>
   933fc:	99800217 	ldw	r6,8(r19)
   93400:	100f883a 	mov	r7,r2
   93404:	9009883a 	mov	r4,r18
   93408:	1187c83a 	sub	r3,r2,r6
   9340c:	008003c4 	movi	r2,15
   93410:	19400054 	ori	r5,r3,1
   93414:	10ffdc0e 	bge	r2,r3,93388 <_malloc_trim_r+0x78>
   93418:	008002b4 	movhi	r2,10
   9341c:	1081bb04 	addi	r2,r2,1772
   93420:	10c00017 	ldw	r3,0(r2)
   93424:	008002b4 	movhi	r2,10
   93428:	10897504 	addi	r2,r2,9684
   9342c:	31400115 	stw	r5,4(r6)
   93430:	38c7c83a 	sub	r3,r7,r3
   93434:	10c00015 	stw	r3,0(r2)
   93438:	003fd306 	br	93388 <_malloc_trim_r+0x78>

0009343c <_free_r>:
   9343c:	defffd04 	addi	sp,sp,-12
   93440:	dc400115 	stw	r17,4(sp)
   93444:	dc000015 	stw	r16,0(sp)
   93448:	dfc00215 	stw	ra,8(sp)
   9344c:	2821883a 	mov	r16,r5
   93450:	2023883a 	mov	r17,r4
   93454:	28005a26 	beq	r5,zero,935c0 <_free_r+0x184>
   93458:	00984880 	call	98488 <__malloc_lock>
   9345c:	823ffe04 	addi	r8,r16,-8
   93460:	41400117 	ldw	r5,4(r8)
   93464:	00bfff84 	movi	r2,-2
   93468:	028002b4 	movhi	r10,10
   9346c:	52bbce04 	addi	r10,r10,-4296
   93470:	288e703a 	and	r7,r5,r2
   93474:	41cd883a 	add	r6,r8,r7
   93478:	30c00117 	ldw	r3,4(r6)
   9347c:	51000217 	ldw	r4,8(r10)
   93480:	00bfff04 	movi	r2,-4
   93484:	1892703a 	and	r9,r3,r2
   93488:	5017883a 	mov	r11,r10
   9348c:	31006726 	beq	r6,r4,9362c <_free_r+0x1f0>
   93490:	2880004c 	andi	r2,r5,1
   93494:	1005003a 	cmpeq	r2,r2,zero
   93498:	32400115 	stw	r9,4(r6)
   9349c:	10001a1e 	bne	r2,zero,93508 <_free_r+0xcc>
   934a0:	000b883a 	mov	r5,zero
   934a4:	3247883a 	add	r3,r6,r9
   934a8:	18800117 	ldw	r2,4(r3)
   934ac:	1080004c 	andi	r2,r2,1
   934b0:	1000231e 	bne	r2,zero,93540 <_free_r+0x104>
   934b4:	280ac03a 	cmpne	r5,r5,zero
   934b8:	3a4f883a 	add	r7,r7,r9
   934bc:	2800451e 	bne	r5,zero,935d4 <_free_r+0x198>
   934c0:	31000217 	ldw	r4,8(r6)
   934c4:	008002b4 	movhi	r2,10
   934c8:	10bbd004 	addi	r2,r2,-4288
   934cc:	20807b26 	beq	r4,r2,936bc <_free_r+0x280>
   934d0:	30800317 	ldw	r2,12(r6)
   934d4:	3a07883a 	add	r3,r7,r8
   934d8:	19c00015 	stw	r7,0(r3)
   934dc:	11000215 	stw	r4,8(r2)
   934e0:	20800315 	stw	r2,12(r4)
   934e4:	38800054 	ori	r2,r7,1
   934e8:	40800115 	stw	r2,4(r8)
   934ec:	28001a26 	beq	r5,zero,93558 <_free_r+0x11c>
   934f0:	8809883a 	mov	r4,r17
   934f4:	dfc00217 	ldw	ra,8(sp)
   934f8:	dc400117 	ldw	r17,4(sp)
   934fc:	dc000017 	ldw	r16,0(sp)
   93500:	dec00304 	addi	sp,sp,12
   93504:	00984b01 	jmpi	984b0 <__malloc_unlock>
   93508:	80bffe17 	ldw	r2,-8(r16)
   9350c:	50c00204 	addi	r3,r10,8
   93510:	4091c83a 	sub	r8,r8,r2
   93514:	41000217 	ldw	r4,8(r8)
   93518:	388f883a 	add	r7,r7,r2
   9351c:	20c06126 	beq	r4,r3,936a4 <_free_r+0x268>
   93520:	40800317 	ldw	r2,12(r8)
   93524:	3247883a 	add	r3,r6,r9
   93528:	000b883a 	mov	r5,zero
   9352c:	11000215 	stw	r4,8(r2)
   93530:	20800315 	stw	r2,12(r4)
   93534:	18800117 	ldw	r2,4(r3)
   93538:	1080004c 	andi	r2,r2,1
   9353c:	103fdd26 	beq	r2,zero,934b4 <_free_r+0x78>
   93540:	38800054 	ori	r2,r7,1
   93544:	3a07883a 	add	r3,r7,r8
   93548:	280ac03a 	cmpne	r5,r5,zero
   9354c:	40800115 	stw	r2,4(r8)
   93550:	19c00015 	stw	r7,0(r3)
   93554:	283fe61e 	bne	r5,zero,934f0 <_free_r+0xb4>
   93558:	00807fc4 	movi	r2,511
   9355c:	11c01f2e 	bgeu	r2,r7,935dc <_free_r+0x1a0>
   93560:	3806d27a 	srli	r3,r7,9
   93564:	1800481e 	bne	r3,zero,93688 <_free_r+0x24c>
   93568:	3804d0fa 	srli	r2,r7,3
   9356c:	100690fa 	slli	r3,r2,3
   93570:	1acd883a 	add	r6,r3,r11
   93574:	31400217 	ldw	r5,8(r6)
   93578:	31405926 	beq	r6,r5,936e0 <_free_r+0x2a4>
   9357c:	28800117 	ldw	r2,4(r5)
   93580:	00ffff04 	movi	r3,-4
   93584:	10c4703a 	and	r2,r2,r3
   93588:	3880022e 	bgeu	r7,r2,93594 <_free_r+0x158>
   9358c:	29400217 	ldw	r5,8(r5)
   93590:	317ffa1e 	bne	r6,r5,9357c <_free_r+0x140>
   93594:	29800317 	ldw	r6,12(r5)
   93598:	41800315 	stw	r6,12(r8)
   9359c:	41400215 	stw	r5,8(r8)
   935a0:	8809883a 	mov	r4,r17
   935a4:	2a000315 	stw	r8,12(r5)
   935a8:	32000215 	stw	r8,8(r6)
   935ac:	dfc00217 	ldw	ra,8(sp)
   935b0:	dc400117 	ldw	r17,4(sp)
   935b4:	dc000017 	ldw	r16,0(sp)
   935b8:	dec00304 	addi	sp,sp,12
   935bc:	00984b01 	jmpi	984b0 <__malloc_unlock>
   935c0:	dfc00217 	ldw	ra,8(sp)
   935c4:	dc400117 	ldw	r17,4(sp)
   935c8:	dc000017 	ldw	r16,0(sp)
   935cc:	dec00304 	addi	sp,sp,12
   935d0:	f800283a 	ret
   935d4:	31000217 	ldw	r4,8(r6)
   935d8:	003fbd06 	br	934d0 <_free_r+0x94>
   935dc:	3806d0fa 	srli	r3,r7,3
   935e0:	00800044 	movi	r2,1
   935e4:	51400117 	ldw	r5,4(r10)
   935e8:	180890fa 	slli	r4,r3,3
   935ec:	1807d0ba 	srai	r3,r3,2
   935f0:	22c9883a 	add	r4,r4,r11
   935f4:	21800217 	ldw	r6,8(r4)
   935f8:	10c4983a 	sll	r2,r2,r3
   935fc:	41000315 	stw	r4,12(r8)
   93600:	41800215 	stw	r6,8(r8)
   93604:	288ab03a 	or	r5,r5,r2
   93608:	22000215 	stw	r8,8(r4)
   9360c:	8809883a 	mov	r4,r17
   93610:	51400115 	stw	r5,4(r10)
   93614:	32000315 	stw	r8,12(r6)
   93618:	dfc00217 	ldw	ra,8(sp)
   9361c:	dc400117 	ldw	r17,4(sp)
   93620:	dc000017 	ldw	r16,0(sp)
   93624:	dec00304 	addi	sp,sp,12
   93628:	00984b01 	jmpi	984b0 <__malloc_unlock>
   9362c:	2880004c 	andi	r2,r5,1
   93630:	3a4d883a 	add	r6,r7,r9
   93634:	1000071e 	bne	r2,zero,93654 <_free_r+0x218>
   93638:	80bffe17 	ldw	r2,-8(r16)
   9363c:	4091c83a 	sub	r8,r8,r2
   93640:	41000317 	ldw	r4,12(r8)
   93644:	40c00217 	ldw	r3,8(r8)
   93648:	308d883a 	add	r6,r6,r2
   9364c:	20c00215 	stw	r3,8(r4)
   93650:	19000315 	stw	r4,12(r3)
   93654:	008002b4 	movhi	r2,10
   93658:	1081ba04 	addi	r2,r2,1768
   9365c:	11000017 	ldw	r4,0(r2)
   93660:	30c00054 	ori	r3,r6,1
   93664:	52000215 	stw	r8,8(r10)
   93668:	40c00115 	stw	r3,4(r8)
   9366c:	313fa036 	bltu	r6,r4,934f0 <_free_r+0xb4>
   93670:	008002b4 	movhi	r2,10
   93674:	10896704 	addi	r2,r2,9628
   93678:	11400017 	ldw	r5,0(r2)
   9367c:	8809883a 	mov	r4,r17
   93680:	00933100 	call	93310 <_malloc_trim_r>
   93684:	003f9a06 	br	934f0 <_free_r+0xb4>
   93688:	00800104 	movi	r2,4
   9368c:	10c0072e 	bgeu	r2,r3,936ac <_free_r+0x270>
   93690:	00800504 	movi	r2,20
   93694:	10c01936 	bltu	r2,r3,936fc <_free_r+0x2c0>
   93698:	188016c4 	addi	r2,r3,91
   9369c:	100690fa 	slli	r3,r2,3
   936a0:	003fb306 	br	93570 <_free_r+0x134>
   936a4:	01400044 	movi	r5,1
   936a8:	003f7e06 	br	934a4 <_free_r+0x68>
   936ac:	3804d1ba 	srli	r2,r7,6
   936b0:	10800e04 	addi	r2,r2,56
   936b4:	100690fa 	slli	r3,r2,3
   936b8:	003fad06 	br	93570 <_free_r+0x134>
   936bc:	22000315 	stw	r8,12(r4)
   936c0:	22000215 	stw	r8,8(r4)
   936c4:	3a05883a 	add	r2,r7,r8
   936c8:	38c00054 	ori	r3,r7,1
   936cc:	11c00015 	stw	r7,0(r2)
   936d0:	41000215 	stw	r4,8(r8)
   936d4:	40c00115 	stw	r3,4(r8)
   936d8:	41000315 	stw	r4,12(r8)
   936dc:	003f8406 	br	934f0 <_free_r+0xb4>
   936e0:	1005d0ba 	srai	r2,r2,2
   936e4:	00c00044 	movi	r3,1
   936e8:	51000117 	ldw	r4,4(r10)
   936ec:	1886983a 	sll	r3,r3,r2
   936f0:	20c8b03a 	or	r4,r4,r3
   936f4:	51000115 	stw	r4,4(r10)
   936f8:	003fa706 	br	93598 <_free_r+0x15c>
   936fc:	00801504 	movi	r2,84
   93700:	10c00436 	bltu	r2,r3,93714 <_free_r+0x2d8>
   93704:	3804d33a 	srli	r2,r7,12
   93708:	10801b84 	addi	r2,r2,110
   9370c:	100690fa 	slli	r3,r2,3
   93710:	003f9706 	br	93570 <_free_r+0x134>
   93714:	00805504 	movi	r2,340
   93718:	10c00436 	bltu	r2,r3,9372c <_free_r+0x2f0>
   9371c:	3804d3fa 	srli	r2,r7,15
   93720:	10801dc4 	addi	r2,r2,119
   93724:	100690fa 	slli	r3,r2,3
   93728:	003f9106 	br	93570 <_free_r+0x134>
   9372c:	00815504 	movi	r2,1364
   93730:	10c0032e 	bgeu	r2,r3,93740 <_free_r+0x304>
   93734:	00801f84 	movi	r2,126
   93738:	00c0fc04 	movi	r3,1008
   9373c:	003f8c06 	br	93570 <_free_r+0x134>
   93740:	3804d4ba 	srli	r2,r7,18
   93744:	10801f04 	addi	r2,r2,124
   93748:	100690fa 	slli	r3,r2,3
   9374c:	003f8806 	br	93570 <_free_r+0x134>

00093750 <__sfvwrite_r>:
   93750:	30800217 	ldw	r2,8(r6)
   93754:	defff504 	addi	sp,sp,-44
   93758:	df000915 	stw	fp,36(sp)
   9375c:	dd800715 	stw	r22,28(sp)
   93760:	dc800315 	stw	r18,12(sp)
   93764:	dfc00a15 	stw	ra,40(sp)
   93768:	ddc00815 	stw	r23,32(sp)
   9376c:	dd400615 	stw	r21,24(sp)
   93770:	dd000515 	stw	r20,20(sp)
   93774:	dcc00415 	stw	r19,16(sp)
   93778:	dc400215 	stw	r17,8(sp)
   9377c:	dc000115 	stw	r16,4(sp)
   93780:	302d883a 	mov	r22,r6
   93784:	2039883a 	mov	fp,r4
   93788:	2825883a 	mov	r18,r5
   9378c:	10001c26 	beq	r2,zero,93800 <__sfvwrite_r+0xb0>
   93790:	29c0030b 	ldhu	r7,12(r5)
   93794:	3880020c 	andi	r2,r7,8
   93798:	10002726 	beq	r2,zero,93838 <__sfvwrite_r+0xe8>
   9379c:	28800417 	ldw	r2,16(r5)
   937a0:	10002526 	beq	r2,zero,93838 <__sfvwrite_r+0xe8>
   937a4:	3880008c 	andi	r2,r7,2
   937a8:	b5400017 	ldw	r21,0(r22)
   937ac:	10002826 	beq	r2,zero,93850 <__sfvwrite_r+0x100>
   937b0:	0021883a 	mov	r16,zero
   937b4:	0023883a 	mov	r17,zero
   937b8:	880d883a 	mov	r6,r17
   937bc:	e009883a 	mov	r4,fp
   937c0:	00810004 	movi	r2,1024
   937c4:	80006e26 	beq	r16,zero,93980 <__sfvwrite_r+0x230>
   937c8:	800f883a 	mov	r7,r16
   937cc:	91400717 	ldw	r5,28(r18)
   937d0:	1400012e 	bgeu	r2,r16,937d8 <__sfvwrite_r+0x88>
   937d4:	100f883a 	mov	r7,r2
   937d8:	90c00917 	ldw	r3,36(r18)
   937dc:	183ee83a 	callr	r3
   937e0:	1007883a 	mov	r3,r2
   937e4:	80a1c83a 	sub	r16,r16,r2
   937e8:	88a3883a 	add	r17,r17,r2
   937ec:	00806d0e 	bge	zero,r2,939a4 <__sfvwrite_r+0x254>
   937f0:	b0800217 	ldw	r2,8(r22)
   937f4:	10c5c83a 	sub	r2,r2,r3
   937f8:	b0800215 	stw	r2,8(r22)
   937fc:	103fee1e 	bne	r2,zero,937b8 <__sfvwrite_r+0x68>
   93800:	0009883a 	mov	r4,zero
   93804:	2005883a 	mov	r2,r4
   93808:	dfc00a17 	ldw	ra,40(sp)
   9380c:	df000917 	ldw	fp,36(sp)
   93810:	ddc00817 	ldw	r23,32(sp)
   93814:	dd800717 	ldw	r22,28(sp)
   93818:	dd400617 	ldw	r21,24(sp)
   9381c:	dd000517 	ldw	r20,20(sp)
   93820:	dcc00417 	ldw	r19,16(sp)
   93824:	dc800317 	ldw	r18,12(sp)
   93828:	dc400217 	ldw	r17,8(sp)
   9382c:	dc000117 	ldw	r16,4(sp)
   93830:	dec00b04 	addi	sp,sp,44
   93834:	f800283a 	ret
   93838:	00916440 	call	91644 <__swsetup_r>
   9383c:	1000e41e 	bne	r2,zero,93bd0 <__sfvwrite_r+0x480>
   93840:	91c0030b 	ldhu	r7,12(r18)
   93844:	b5400017 	ldw	r21,0(r22)
   93848:	3880008c 	andi	r2,r7,2
   9384c:	103fd81e 	bne	r2,zero,937b0 <__sfvwrite_r+0x60>
   93850:	3880004c 	andi	r2,r7,1
   93854:	1005003a 	cmpeq	r2,r2,zero
   93858:	10005726 	beq	r2,zero,939b8 <__sfvwrite_r+0x268>
   9385c:	0029883a 	mov	r20,zero
   93860:	002f883a 	mov	r23,zero
   93864:	a0004226 	beq	r20,zero,93970 <__sfvwrite_r+0x220>
   93868:	3880800c 	andi	r2,r7,512
   9386c:	94000217 	ldw	r16,8(r18)
   93870:	10008b26 	beq	r2,zero,93aa0 <__sfvwrite_r+0x350>
   93874:	800d883a 	mov	r6,r16
   93878:	a400a536 	bltu	r20,r16,93b10 <__sfvwrite_r+0x3c0>
   9387c:	3881200c 	andi	r2,r7,1152
   93880:	10002726 	beq	r2,zero,93920 <__sfvwrite_r+0x1d0>
   93884:	90800517 	ldw	r2,20(r18)
   93888:	92000417 	ldw	r8,16(r18)
   9388c:	91400017 	ldw	r5,0(r18)
   93890:	1087883a 	add	r3,r2,r2
   93894:	1887883a 	add	r3,r3,r2
   93898:	1808d7fa 	srli	r4,r3,31
   9389c:	2a21c83a 	sub	r16,r5,r8
   938a0:	80800044 	addi	r2,r16,1
   938a4:	20c9883a 	add	r4,r4,r3
   938a8:	2027d07a 	srai	r19,r4,1
   938ac:	a085883a 	add	r2,r20,r2
   938b0:	980d883a 	mov	r6,r19
   938b4:	9880022e 	bgeu	r19,r2,938c0 <__sfvwrite_r+0x170>
   938b8:	1027883a 	mov	r19,r2
   938bc:	100d883a 	mov	r6,r2
   938c0:	3881000c 	andi	r2,r7,1024
   938c4:	1000b826 	beq	r2,zero,93ba8 <__sfvwrite_r+0x458>
   938c8:	300b883a 	mov	r5,r6
   938cc:	e009883a 	mov	r4,fp
   938d0:	008e4640 	call	8e464 <_malloc_r>
   938d4:	10003126 	beq	r2,zero,9399c <__sfvwrite_r+0x24c>
   938d8:	91400417 	ldw	r5,16(r18)
   938dc:	1009883a 	mov	r4,r2
   938e0:	800d883a 	mov	r6,r16
   938e4:	1023883a 	mov	r17,r2
   938e8:	008ecfc0 	call	8ecfc <memcpy>
   938ec:	90c0030b 	ldhu	r3,12(r18)
   938f0:	00beffc4 	movi	r2,-1025
   938f4:	1886703a 	and	r3,r3,r2
   938f8:	18c02014 	ori	r3,r3,128
   938fc:	90c0030d 	sth	r3,12(r18)
   93900:	9c07c83a 	sub	r3,r19,r16
   93904:	8c05883a 	add	r2,r17,r16
   93908:	a00d883a 	mov	r6,r20
   9390c:	a021883a 	mov	r16,r20
   93910:	90800015 	stw	r2,0(r18)
   93914:	90c00215 	stw	r3,8(r18)
   93918:	94400415 	stw	r17,16(r18)
   9391c:	94c00515 	stw	r19,20(r18)
   93920:	91000017 	ldw	r4,0(r18)
   93924:	b80b883a 	mov	r5,r23
   93928:	a023883a 	mov	r17,r20
   9392c:	0093ebc0 	call	93ebc <memmove>
   93930:	90c00217 	ldw	r3,8(r18)
   93934:	90800017 	ldw	r2,0(r18)
   93938:	a027883a 	mov	r19,r20
   9393c:	1c07c83a 	sub	r3,r3,r16
   93940:	1405883a 	add	r2,r2,r16
   93944:	90c00215 	stw	r3,8(r18)
   93948:	a021883a 	mov	r16,r20
   9394c:	90800015 	stw	r2,0(r18)
   93950:	b0800217 	ldw	r2,8(r22)
   93954:	1405c83a 	sub	r2,r2,r16
   93958:	b0800215 	stw	r2,8(r22)
   9395c:	103fa826 	beq	r2,zero,93800 <__sfvwrite_r+0xb0>
   93960:	a469c83a 	sub	r20,r20,r17
   93964:	91c0030b 	ldhu	r7,12(r18)
   93968:	bcef883a 	add	r23,r23,r19
   9396c:	a03fbe1e 	bne	r20,zero,93868 <__sfvwrite_r+0x118>
   93970:	adc00017 	ldw	r23,0(r21)
   93974:	ad000117 	ldw	r20,4(r21)
   93978:	ad400204 	addi	r21,r21,8
   9397c:	003fb906 	br	93864 <__sfvwrite_r+0x114>
   93980:	ac400017 	ldw	r17,0(r21)
   93984:	ac000117 	ldw	r16,4(r21)
   93988:	ad400204 	addi	r21,r21,8
   9398c:	003f8a06 	br	937b8 <__sfvwrite_r+0x68>
   93990:	91400417 	ldw	r5,16(r18)
   93994:	e009883a 	mov	r4,fp
   93998:	009343c0 	call	9343c <_free_r>
   9399c:	00800304 	movi	r2,12
   939a0:	e0800015 	stw	r2,0(fp)
   939a4:	9080030b 	ldhu	r2,12(r18)
   939a8:	013fffc4 	movi	r4,-1
   939ac:	10801014 	ori	r2,r2,64
   939b0:	9080030d 	sth	r2,12(r18)
   939b4:	003f9306 	br	93804 <__sfvwrite_r+0xb4>
   939b8:	0027883a 	mov	r19,zero
   939bc:	002f883a 	mov	r23,zero
   939c0:	d8000015 	stw	zero,0(sp)
   939c4:	0029883a 	mov	r20,zero
   939c8:	98001e26 	beq	r19,zero,93a44 <__sfvwrite_r+0x2f4>
   939cc:	d8c00017 	ldw	r3,0(sp)
   939d0:	1804c03a 	cmpne	r2,r3,zero
   939d4:	10005e26 	beq	r2,zero,93b50 <__sfvwrite_r+0x400>
   939d8:	9821883a 	mov	r16,r19
   939dc:	a4c0012e 	bgeu	r20,r19,939e4 <__sfvwrite_r+0x294>
   939e0:	a021883a 	mov	r16,r20
   939e4:	91000017 	ldw	r4,0(r18)
   939e8:	90800417 	ldw	r2,16(r18)
   939ec:	91800217 	ldw	r6,8(r18)
   939f0:	91c00517 	ldw	r7,20(r18)
   939f4:	1100022e 	bgeu	r2,r4,93a00 <__sfvwrite_r+0x2b0>
   939f8:	31e3883a 	add	r17,r6,r7
   939fc:	8c001616 	blt	r17,r16,93a58 <__sfvwrite_r+0x308>
   93a00:	81c03816 	blt	r16,r7,93ae4 <__sfvwrite_r+0x394>
   93a04:	90c00917 	ldw	r3,36(r18)
   93a08:	91400717 	ldw	r5,28(r18)
   93a0c:	e009883a 	mov	r4,fp
   93a10:	b80d883a 	mov	r6,r23
   93a14:	183ee83a 	callr	r3
   93a18:	1023883a 	mov	r17,r2
   93a1c:	00bfe10e 	bge	zero,r2,939a4 <__sfvwrite_r+0x254>
   93a20:	a469c83a 	sub	r20,r20,r17
   93a24:	a0001826 	beq	r20,zero,93a88 <__sfvwrite_r+0x338>
   93a28:	b0800217 	ldw	r2,8(r22)
   93a2c:	1445c83a 	sub	r2,r2,r17
   93a30:	b0800215 	stw	r2,8(r22)
   93a34:	103f7226 	beq	r2,zero,93800 <__sfvwrite_r+0xb0>
   93a38:	9c67c83a 	sub	r19,r19,r17
   93a3c:	bc6f883a 	add	r23,r23,r17
   93a40:	983fe21e 	bne	r19,zero,939cc <__sfvwrite_r+0x27c>
   93a44:	adc00017 	ldw	r23,0(r21)
   93a48:	acc00117 	ldw	r19,4(r21)
   93a4c:	ad400204 	addi	r21,r21,8
   93a50:	d8000015 	stw	zero,0(sp)
   93a54:	003fdc06 	br	939c8 <__sfvwrite_r+0x278>
   93a58:	b80b883a 	mov	r5,r23
   93a5c:	880d883a 	mov	r6,r17
   93a60:	0093ebc0 	call	93ebc <memmove>
   93a64:	90c00017 	ldw	r3,0(r18)
   93a68:	e009883a 	mov	r4,fp
   93a6c:	900b883a 	mov	r5,r18
   93a70:	1c47883a 	add	r3,r3,r17
   93a74:	90c00015 	stw	r3,0(r18)
   93a78:	00930e00 	call	930e0 <_fflush_r>
   93a7c:	103fc91e 	bne	r2,zero,939a4 <__sfvwrite_r+0x254>
   93a80:	a469c83a 	sub	r20,r20,r17
   93a84:	a03fe81e 	bne	r20,zero,93a28 <__sfvwrite_r+0x2d8>
   93a88:	e009883a 	mov	r4,fp
   93a8c:	900b883a 	mov	r5,r18
   93a90:	00930e00 	call	930e0 <_fflush_r>
   93a94:	103fc31e 	bne	r2,zero,939a4 <__sfvwrite_r+0x254>
   93a98:	d8000015 	stw	zero,0(sp)
   93a9c:	003fe206 	br	93a28 <__sfvwrite_r+0x2d8>
   93aa0:	91000017 	ldw	r4,0(r18)
   93aa4:	90800417 	ldw	r2,16(r18)
   93aa8:	1100022e 	bgeu	r2,r4,93ab4 <__sfvwrite_r+0x364>
   93aac:	8023883a 	mov	r17,r16
   93ab0:	85003136 	bltu	r16,r20,93b78 <__sfvwrite_r+0x428>
   93ab4:	91c00517 	ldw	r7,20(r18)
   93ab8:	a1c01836 	bltu	r20,r7,93b1c <__sfvwrite_r+0x3cc>
   93abc:	90c00917 	ldw	r3,36(r18)
   93ac0:	91400717 	ldw	r5,28(r18)
   93ac4:	e009883a 	mov	r4,fp
   93ac8:	b80d883a 	mov	r6,r23
   93acc:	183ee83a 	callr	r3
   93ad0:	1021883a 	mov	r16,r2
   93ad4:	00bfb30e 	bge	zero,r2,939a4 <__sfvwrite_r+0x254>
   93ad8:	1023883a 	mov	r17,r2
   93adc:	1027883a 	mov	r19,r2
   93ae0:	003f9b06 	br	93950 <__sfvwrite_r+0x200>
   93ae4:	b80b883a 	mov	r5,r23
   93ae8:	800d883a 	mov	r6,r16
   93aec:	0093ebc0 	call	93ebc <memmove>
   93af0:	90c00217 	ldw	r3,8(r18)
   93af4:	90800017 	ldw	r2,0(r18)
   93af8:	8023883a 	mov	r17,r16
   93afc:	1c07c83a 	sub	r3,r3,r16
   93b00:	1405883a 	add	r2,r2,r16
   93b04:	90c00215 	stw	r3,8(r18)
   93b08:	90800015 	stw	r2,0(r18)
   93b0c:	003fc406 	br	93a20 <__sfvwrite_r+0x2d0>
   93b10:	a00d883a 	mov	r6,r20
   93b14:	a021883a 	mov	r16,r20
   93b18:	003f8106 	br	93920 <__sfvwrite_r+0x1d0>
   93b1c:	b80b883a 	mov	r5,r23
   93b20:	a00d883a 	mov	r6,r20
   93b24:	0093ebc0 	call	93ebc <memmove>
   93b28:	90c00217 	ldw	r3,8(r18)
   93b2c:	90800017 	ldw	r2,0(r18)
   93b30:	a021883a 	mov	r16,r20
   93b34:	1d07c83a 	sub	r3,r3,r20
   93b38:	1505883a 	add	r2,r2,r20
   93b3c:	a023883a 	mov	r17,r20
   93b40:	a027883a 	mov	r19,r20
   93b44:	90c00215 	stw	r3,8(r18)
   93b48:	90800015 	stw	r2,0(r18)
   93b4c:	003f8006 	br	93950 <__sfvwrite_r+0x200>
   93b50:	b809883a 	mov	r4,r23
   93b54:	01400284 	movi	r5,10
   93b58:	980d883a 	mov	r6,r19
   93b5c:	008eba40 	call	8eba4 <memchr>
   93b60:	10001726 	beq	r2,zero,93bc0 <__sfvwrite_r+0x470>
   93b64:	15c5c83a 	sub	r2,r2,r23
   93b68:	15000044 	addi	r20,r2,1
   93b6c:	00800044 	movi	r2,1
   93b70:	d8800015 	stw	r2,0(sp)
   93b74:	003f9806 	br	939d8 <__sfvwrite_r+0x288>
   93b78:	b80b883a 	mov	r5,r23
   93b7c:	800d883a 	mov	r6,r16
   93b80:	0093ebc0 	call	93ebc <memmove>
   93b84:	90c00017 	ldw	r3,0(r18)
   93b88:	e009883a 	mov	r4,fp
   93b8c:	900b883a 	mov	r5,r18
   93b90:	1c07883a 	add	r3,r3,r16
   93b94:	90c00015 	stw	r3,0(r18)
   93b98:	8027883a 	mov	r19,r16
   93b9c:	00930e00 	call	930e0 <_fflush_r>
   93ba0:	103f6b26 	beq	r2,zero,93950 <__sfvwrite_r+0x200>
   93ba4:	003f7f06 	br	939a4 <__sfvwrite_r+0x254>
   93ba8:	400b883a 	mov	r5,r8
   93bac:	e009883a 	mov	r4,fp
   93bb0:	00951f40 	call	951f4 <_realloc_r>
   93bb4:	103f7626 	beq	r2,zero,93990 <__sfvwrite_r+0x240>
   93bb8:	1023883a 	mov	r17,r2
   93bbc:	003f5006 	br	93900 <__sfvwrite_r+0x1b0>
   93bc0:	00c00044 	movi	r3,1
   93bc4:	9d000044 	addi	r20,r19,1
   93bc8:	d8c00015 	stw	r3,0(sp)
   93bcc:	003f8206 	br	939d8 <__sfvwrite_r+0x288>
   93bd0:	9080030b 	ldhu	r2,12(r18)
   93bd4:	00c00244 	movi	r3,9
   93bd8:	013fffc4 	movi	r4,-1
   93bdc:	10801014 	ori	r2,r2,64
   93be0:	9080030d 	sth	r2,12(r18)
   93be4:	e0c00015 	stw	r3,0(fp)
   93be8:	003f0606 	br	93804 <__sfvwrite_r+0xb4>

00093bec <__locale_charset>:
   93bec:	d0a00917 	ldw	r2,-32732(gp)
   93bf0:	f800283a 	ret

00093bf4 <_localeconv_r>:
   93bf4:	008002b4 	movhi	r2,10
   93bf8:	10b9c404 	addi	r2,r2,-6384
   93bfc:	f800283a 	ret

00093c00 <localeconv>:
   93c00:	008002b4 	movhi	r2,10
   93c04:	1081b804 	addi	r2,r2,1760
   93c08:	11000017 	ldw	r4,0(r2)
   93c0c:	0093bf41 	jmpi	93bf4 <_localeconv_r>

00093c10 <_setlocale_r>:
   93c10:	defffc04 	addi	sp,sp,-16
   93c14:	00c002b4 	movhi	r3,10
   93c18:	18f8f904 	addi	r3,r3,-7196
   93c1c:	dc800215 	stw	r18,8(sp)
   93c20:	dc400115 	stw	r17,4(sp)
   93c24:	dc000015 	stw	r16,0(sp)
   93c28:	2023883a 	mov	r17,r4
   93c2c:	2825883a 	mov	r18,r5
   93c30:	dfc00315 	stw	ra,12(sp)
   93c34:	3021883a 	mov	r16,r6
   93c38:	3009883a 	mov	r4,r6
   93c3c:	180b883a 	mov	r5,r3
   93c40:	30000926 	beq	r6,zero,93c68 <_setlocale_r+0x58>
   93c44:	00958580 	call	95858 <strcmp>
   93c48:	8009883a 	mov	r4,r16
   93c4c:	014002b4 	movhi	r5,10
   93c50:	29790a04 	addi	r5,r5,-7128
   93c54:	10000b1e 	bne	r2,zero,93c84 <_setlocale_r+0x74>
   93c58:	8c000d15 	stw	r16,52(r17)
   93c5c:	8c800c15 	stw	r18,48(r17)
   93c60:	00c002b4 	movhi	r3,10
   93c64:	18f8f904 	addi	r3,r3,-7196
   93c68:	1805883a 	mov	r2,r3
   93c6c:	dfc00317 	ldw	ra,12(sp)
   93c70:	dc800217 	ldw	r18,8(sp)
   93c74:	dc400117 	ldw	r17,4(sp)
   93c78:	dc000017 	ldw	r16,0(sp)
   93c7c:	dec00404 	addi	sp,sp,16
   93c80:	f800283a 	ret
   93c84:	00958580 	call	95858 <strcmp>
   93c88:	0007883a 	mov	r3,zero
   93c8c:	103ff226 	beq	r2,zero,93c58 <_setlocale_r+0x48>
   93c90:	003ff506 	br	93c68 <_setlocale_r+0x58>

00093c94 <setlocale>:
   93c94:	018002b4 	movhi	r6,10
   93c98:	3181b804 	addi	r6,r6,1760
   93c9c:	2007883a 	mov	r3,r4
   93ca0:	31000017 	ldw	r4,0(r6)
   93ca4:	280d883a 	mov	r6,r5
   93ca8:	180b883a 	mov	r5,r3
   93cac:	0093c101 	jmpi	93c10 <_setlocale_r>

00093cb0 <_lseek_r>:
   93cb0:	defffd04 	addi	sp,sp,-12
   93cb4:	dc000015 	stw	r16,0(sp)
   93cb8:	040002b4 	movhi	r16,10
   93cbc:	84096a04 	addi	r16,r16,9640
   93cc0:	dc400115 	stw	r17,4(sp)
   93cc4:	80000015 	stw	zero,0(r16)
   93cc8:	2023883a 	mov	r17,r4
   93ccc:	2809883a 	mov	r4,r5
   93cd0:	300b883a 	mov	r5,r6
   93cd4:	380d883a 	mov	r6,r7
   93cd8:	dfc00215 	stw	ra,8(sp)
   93cdc:	00982b40 	call	982b4 <lseek>
   93ce0:	1007883a 	mov	r3,r2
   93ce4:	00bfffc4 	movi	r2,-1
   93ce8:	18800626 	beq	r3,r2,93d04 <_lseek_r+0x54>
   93cec:	1805883a 	mov	r2,r3
   93cf0:	dfc00217 	ldw	ra,8(sp)
   93cf4:	dc400117 	ldw	r17,4(sp)
   93cf8:	dc000017 	ldw	r16,0(sp)
   93cfc:	dec00304 	addi	sp,sp,12
   93d00:	f800283a 	ret
   93d04:	80800017 	ldw	r2,0(r16)
   93d08:	103ff826 	beq	r2,zero,93cec <_lseek_r+0x3c>
   93d0c:	88800015 	stw	r2,0(r17)
   93d10:	1805883a 	mov	r2,r3
   93d14:	dfc00217 	ldw	ra,8(sp)
   93d18:	dc400117 	ldw	r17,4(sp)
   93d1c:	dc000017 	ldw	r16,0(sp)
   93d20:	dec00304 	addi	sp,sp,12
   93d24:	f800283a 	ret

00093d28 <__smakebuf_r>:
   93d28:	2880030b 	ldhu	r2,12(r5)
   93d2c:	deffed04 	addi	sp,sp,-76
   93d30:	dc401015 	stw	r17,64(sp)
   93d34:	1080008c 	andi	r2,r2,2
   93d38:	dc000f15 	stw	r16,60(sp)
   93d3c:	dfc01215 	stw	ra,72(sp)
   93d40:	dc801115 	stw	r18,68(sp)
   93d44:	2821883a 	mov	r16,r5
   93d48:	2023883a 	mov	r17,r4
   93d4c:	10000b26 	beq	r2,zero,93d7c <__smakebuf_r+0x54>
   93d50:	28c010c4 	addi	r3,r5,67
   93d54:	00800044 	movi	r2,1
   93d58:	28800515 	stw	r2,20(r5)
   93d5c:	28c00415 	stw	r3,16(r5)
   93d60:	28c00015 	stw	r3,0(r5)
   93d64:	dfc01217 	ldw	ra,72(sp)
   93d68:	dc801117 	ldw	r18,68(sp)
   93d6c:	dc401017 	ldw	r17,64(sp)
   93d70:	dc000f17 	ldw	r16,60(sp)
   93d74:	dec01304 	addi	sp,sp,76
   93d78:	f800283a 	ret
   93d7c:	2940038f 	ldh	r5,14(r5)
   93d80:	28002116 	blt	r5,zero,93e08 <__smakebuf_r+0xe0>
   93d84:	d80d883a 	mov	r6,sp
   93d88:	0095b140 	call	95b14 <_fstat_r>
   93d8c:	10001e16 	blt	r2,zero,93e08 <__smakebuf_r+0xe0>
   93d90:	d8800117 	ldw	r2,4(sp)
   93d94:	00e00014 	movui	r3,32768
   93d98:	113c000c 	andi	r4,r2,61440
   93d9c:	20c03126 	beq	r4,r3,93e64 <__smakebuf_r+0x13c>
   93da0:	8080030b 	ldhu	r2,12(r16)
   93da4:	00c80004 	movi	r3,8192
   93da8:	10820014 	ori	r2,r2,2048
   93dac:	8080030d 	sth	r2,12(r16)
   93db0:	20c01e26 	beq	r4,r3,93e2c <__smakebuf_r+0x104>
   93db4:	04810004 	movi	r18,1024
   93db8:	8809883a 	mov	r4,r17
   93dbc:	900b883a 	mov	r5,r18
   93dc0:	008e4640 	call	8e464 <_malloc_r>
   93dc4:	1009883a 	mov	r4,r2
   93dc8:	10003126 	beq	r2,zero,93e90 <__smakebuf_r+0x168>
   93dcc:	80c0030b 	ldhu	r3,12(r16)
   93dd0:	00800274 	movhi	r2,9
   93dd4:	10b85c04 	addi	r2,r2,-7824
   93dd8:	88800f15 	stw	r2,60(r17)
   93ddc:	18c02014 	ori	r3,r3,128
   93de0:	84800515 	stw	r18,20(r16)
   93de4:	80c0030d 	sth	r3,12(r16)
   93de8:	81000415 	stw	r4,16(r16)
   93dec:	81000015 	stw	r4,0(r16)
   93df0:	dfc01217 	ldw	ra,72(sp)
   93df4:	dc801117 	ldw	r18,68(sp)
   93df8:	dc401017 	ldw	r17,64(sp)
   93dfc:	dc000f17 	ldw	r16,60(sp)
   93e00:	dec01304 	addi	sp,sp,76
   93e04:	f800283a 	ret
   93e08:	80c0030b 	ldhu	r3,12(r16)
   93e0c:	1880200c 	andi	r2,r3,128
   93e10:	10000426 	beq	r2,zero,93e24 <__smakebuf_r+0xfc>
   93e14:	04801004 	movi	r18,64
   93e18:	18820014 	ori	r2,r3,2048
   93e1c:	8080030d 	sth	r2,12(r16)
   93e20:	003fe506 	br	93db8 <__smakebuf_r+0x90>
   93e24:	04810004 	movi	r18,1024
   93e28:	003ffb06 	br	93e18 <__smakebuf_r+0xf0>
   93e2c:	8140038f 	ldh	r5,14(r16)
   93e30:	8809883a 	mov	r4,r17
   93e34:	0095b880 	call	95b88 <_isatty_r>
   93e38:	103fde26 	beq	r2,zero,93db4 <__smakebuf_r+0x8c>
   93e3c:	8080030b 	ldhu	r2,12(r16)
   93e40:	80c010c4 	addi	r3,r16,67
   93e44:	04810004 	movi	r18,1024
   93e48:	10800054 	ori	r2,r2,1
   93e4c:	8080030d 	sth	r2,12(r16)
   93e50:	00800044 	movi	r2,1
   93e54:	80c00415 	stw	r3,16(r16)
   93e58:	80800515 	stw	r2,20(r16)
   93e5c:	80c00015 	stw	r3,0(r16)
   93e60:	003fd506 	br	93db8 <__smakebuf_r+0x90>
   93e64:	80c00a17 	ldw	r3,40(r16)
   93e68:	00800274 	movhi	r2,9
   93e6c:	10bc7704 	addi	r2,r2,-3620
   93e70:	18bfcb1e 	bne	r3,r2,93da0 <__smakebuf_r+0x78>
   93e74:	8080030b 	ldhu	r2,12(r16)
   93e78:	00c10004 	movi	r3,1024
   93e7c:	1825883a 	mov	r18,r3
   93e80:	10c4b03a 	or	r2,r2,r3
   93e84:	8080030d 	sth	r2,12(r16)
   93e88:	80c01315 	stw	r3,76(r16)
   93e8c:	003fca06 	br	93db8 <__smakebuf_r+0x90>
   93e90:	8100030b 	ldhu	r4,12(r16)
   93e94:	2080800c 	andi	r2,r4,512
   93e98:	103fb21e 	bne	r2,zero,93d64 <__smakebuf_r+0x3c>
   93e9c:	80c010c4 	addi	r3,r16,67
   93ea0:	21000094 	ori	r4,r4,2
   93ea4:	00800044 	movi	r2,1
   93ea8:	80800515 	stw	r2,20(r16)
   93eac:	8100030d 	sth	r4,12(r16)
   93eb0:	80c00415 	stw	r3,16(r16)
   93eb4:	80c00015 	stw	r3,0(r16)
   93eb8:	003faa06 	br	93d64 <__smakebuf_r+0x3c>

00093ebc <memmove>:
   93ebc:	2807883a 	mov	r3,r5
   93ec0:	2011883a 	mov	r8,r4
   93ec4:	29000c2e 	bgeu	r5,r4,93ef8 <memmove+0x3c>
   93ec8:	298f883a 	add	r7,r5,r6
   93ecc:	21c00a2e 	bgeu	r4,r7,93ef8 <memmove+0x3c>
   93ed0:	30000726 	beq	r6,zero,93ef0 <memmove+0x34>
   93ed4:	2187883a 	add	r3,r4,r6
   93ed8:	198dc83a 	sub	r6,r3,r6
   93edc:	39ffffc4 	addi	r7,r7,-1
   93ee0:	38800003 	ldbu	r2,0(r7)
   93ee4:	18ffffc4 	addi	r3,r3,-1
   93ee8:	18800005 	stb	r2,0(r3)
   93eec:	19bffb1e 	bne	r3,r6,93edc <memmove+0x20>
   93ef0:	2005883a 	mov	r2,r4
   93ef4:	f800283a 	ret
   93ef8:	01c003c4 	movi	r7,15
   93efc:	39800a36 	bltu	r7,r6,93f28 <memmove+0x6c>
   93f00:	303ffb26 	beq	r6,zero,93ef0 <memmove+0x34>
   93f04:	400f883a 	mov	r7,r8
   93f08:	320d883a 	add	r6,r6,r8
   93f0c:	28800003 	ldbu	r2,0(r5)
   93f10:	29400044 	addi	r5,r5,1
   93f14:	38800005 	stb	r2,0(r7)
   93f18:	39c00044 	addi	r7,r7,1
   93f1c:	39bffb1e 	bne	r7,r6,93f0c <memmove+0x50>
   93f20:	2005883a 	mov	r2,r4
   93f24:	f800283a 	ret
   93f28:	1904b03a 	or	r2,r3,r4
   93f2c:	108000cc 	andi	r2,r2,3
   93f30:	103ff31e 	bne	r2,zero,93f00 <memmove+0x44>
   93f34:	3811883a 	mov	r8,r7
   93f38:	180b883a 	mov	r5,r3
   93f3c:	200f883a 	mov	r7,r4
   93f40:	28c00017 	ldw	r3,0(r5)
   93f44:	31bffc04 	addi	r6,r6,-16
   93f48:	38c00015 	stw	r3,0(r7)
   93f4c:	28800117 	ldw	r2,4(r5)
   93f50:	38800115 	stw	r2,4(r7)
   93f54:	28c00217 	ldw	r3,8(r5)
   93f58:	38c00215 	stw	r3,8(r7)
   93f5c:	28800317 	ldw	r2,12(r5)
   93f60:	29400404 	addi	r5,r5,16
   93f64:	38800315 	stw	r2,12(r7)
   93f68:	39c00404 	addi	r7,r7,16
   93f6c:	41bff436 	bltu	r8,r6,93f40 <memmove+0x84>
   93f70:	008000c4 	movi	r2,3
   93f74:	1180072e 	bgeu	r2,r6,93f94 <memmove+0xd8>
   93f78:	1007883a 	mov	r3,r2
   93f7c:	28800017 	ldw	r2,0(r5)
   93f80:	31bfff04 	addi	r6,r6,-4
   93f84:	29400104 	addi	r5,r5,4
   93f88:	38800015 	stw	r2,0(r7)
   93f8c:	39c00104 	addi	r7,r7,4
   93f90:	19bffa36 	bltu	r3,r6,93f7c <memmove+0xc0>
   93f94:	3811883a 	mov	r8,r7
   93f98:	003fd906 	br	93f00 <memmove+0x44>

00093f9c <_Bfree>:
   93f9c:	28000826 	beq	r5,zero,93fc0 <_Bfree+0x24>
   93fa0:	28800117 	ldw	r2,4(r5)
   93fa4:	21001317 	ldw	r4,76(r4)
   93fa8:	1085883a 	add	r2,r2,r2
   93fac:	1085883a 	add	r2,r2,r2
   93fb0:	1105883a 	add	r2,r2,r4
   93fb4:	10c00017 	ldw	r3,0(r2)
   93fb8:	28c00015 	stw	r3,0(r5)
   93fbc:	11400015 	stw	r5,0(r2)
   93fc0:	f800283a 	ret

00093fc4 <__hi0bits>:
   93fc4:	20bfffec 	andhi	r2,r4,65535
   93fc8:	10001426 	beq	r2,zero,9401c <__hi0bits+0x58>
   93fcc:	0007883a 	mov	r3,zero
   93fd0:	20bfc02c 	andhi	r2,r4,65280
   93fd4:	1000021e 	bne	r2,zero,93fe0 <__hi0bits+0x1c>
   93fd8:	2008923a 	slli	r4,r4,8
   93fdc:	18c00204 	addi	r3,r3,8
   93fe0:	20bc002c 	andhi	r2,r4,61440
   93fe4:	1000021e 	bne	r2,zero,93ff0 <__hi0bits+0x2c>
   93fe8:	2008913a 	slli	r4,r4,4
   93fec:	18c00104 	addi	r3,r3,4
   93ff0:	20b0002c 	andhi	r2,r4,49152
   93ff4:	1000031e 	bne	r2,zero,94004 <__hi0bits+0x40>
   93ff8:	2105883a 	add	r2,r4,r4
   93ffc:	18c00084 	addi	r3,r3,2
   94000:	1089883a 	add	r4,r2,r2
   94004:	20000316 	blt	r4,zero,94014 <__hi0bits+0x50>
   94008:	2090002c 	andhi	r2,r4,16384
   9400c:	10000626 	beq	r2,zero,94028 <__hi0bits+0x64>
   94010:	18c00044 	addi	r3,r3,1
   94014:	1805883a 	mov	r2,r3
   94018:	f800283a 	ret
   9401c:	2008943a 	slli	r4,r4,16
   94020:	00c00404 	movi	r3,16
   94024:	003fea06 	br	93fd0 <__hi0bits+0xc>
   94028:	00c00804 	movi	r3,32
   9402c:	1805883a 	mov	r2,r3
   94030:	f800283a 	ret

00094034 <__lo0bits>:
   94034:	20c00017 	ldw	r3,0(r4)
   94038:	188001cc 	andi	r2,r3,7
   9403c:	10000a26 	beq	r2,zero,94068 <__lo0bits+0x34>
   94040:	1880004c 	andi	r2,r3,1
   94044:	1005003a 	cmpeq	r2,r2,zero
   94048:	10002126 	beq	r2,zero,940d0 <__lo0bits+0x9c>
   9404c:	1880008c 	andi	r2,r3,2
   94050:	1000251e 	bne	r2,zero,940e8 <__lo0bits+0xb4>
   94054:	1804d0ba 	srli	r2,r3,2
   94058:	01400084 	movi	r5,2
   9405c:	20800015 	stw	r2,0(r4)
   94060:	2805883a 	mov	r2,r5
   94064:	f800283a 	ret
   94068:	18bfffcc 	andi	r2,r3,65535
   9406c:	10001526 	beq	r2,zero,940c4 <__lo0bits+0x90>
   94070:	000b883a 	mov	r5,zero
   94074:	18803fcc 	andi	r2,r3,255
   94078:	1000021e 	bne	r2,zero,94084 <__lo0bits+0x50>
   9407c:	1806d23a 	srli	r3,r3,8
   94080:	29400204 	addi	r5,r5,8
   94084:	188003cc 	andi	r2,r3,15
   94088:	1000021e 	bne	r2,zero,94094 <__lo0bits+0x60>
   9408c:	1806d13a 	srli	r3,r3,4
   94090:	29400104 	addi	r5,r5,4
   94094:	188000cc 	andi	r2,r3,3
   94098:	1000021e 	bne	r2,zero,940a4 <__lo0bits+0x70>
   9409c:	1806d0ba 	srli	r3,r3,2
   940a0:	29400084 	addi	r5,r5,2
   940a4:	1880004c 	andi	r2,r3,1
   940a8:	1000031e 	bne	r2,zero,940b8 <__lo0bits+0x84>
   940ac:	1806d07a 	srli	r3,r3,1
   940b0:	18000a26 	beq	r3,zero,940dc <__lo0bits+0xa8>
   940b4:	29400044 	addi	r5,r5,1
   940b8:	2805883a 	mov	r2,r5
   940bc:	20c00015 	stw	r3,0(r4)
   940c0:	f800283a 	ret
   940c4:	1806d43a 	srli	r3,r3,16
   940c8:	01400404 	movi	r5,16
   940cc:	003fe906 	br	94074 <__lo0bits+0x40>
   940d0:	000b883a 	mov	r5,zero
   940d4:	2805883a 	mov	r2,r5
   940d8:	f800283a 	ret
   940dc:	01400804 	movi	r5,32
   940e0:	2805883a 	mov	r2,r5
   940e4:	f800283a 	ret
   940e8:	1804d07a 	srli	r2,r3,1
   940ec:	01400044 	movi	r5,1
   940f0:	20800015 	stw	r2,0(r4)
   940f4:	003fda06 	br	94060 <__lo0bits+0x2c>

000940f8 <__mcmp>:
   940f8:	20800417 	ldw	r2,16(r4)
   940fc:	28c00417 	ldw	r3,16(r5)
   94100:	10cfc83a 	sub	r7,r2,r3
   94104:	38000c1e 	bne	r7,zero,94138 <__mcmp+0x40>
   94108:	18c5883a 	add	r2,r3,r3
   9410c:	1085883a 	add	r2,r2,r2
   94110:	10c00504 	addi	r3,r2,20
   94114:	21000504 	addi	r4,r4,20
   94118:	28cb883a 	add	r5,r5,r3
   9411c:	2085883a 	add	r2,r4,r2
   94120:	10bfff04 	addi	r2,r2,-4
   94124:	297fff04 	addi	r5,r5,-4
   94128:	11800017 	ldw	r6,0(r2)
   9412c:	28c00017 	ldw	r3,0(r5)
   94130:	30c0031e 	bne	r6,r3,94140 <__mcmp+0x48>
   94134:	20bffa36 	bltu	r4,r2,94120 <__mcmp+0x28>
   94138:	3805883a 	mov	r2,r7
   9413c:	f800283a 	ret
   94140:	30c00336 	bltu	r6,r3,94150 <__mcmp+0x58>
   94144:	01c00044 	movi	r7,1
   94148:	3805883a 	mov	r2,r7
   9414c:	f800283a 	ret
   94150:	01ffffc4 	movi	r7,-1
   94154:	003ff806 	br	94138 <__mcmp+0x40>

00094158 <__ulp>:
   94158:	295ffc2c 	andhi	r5,r5,32752
   9415c:	013f3034 	movhi	r4,64704
   94160:	290b883a 	add	r5,r5,r4
   94164:	0145c83a 	sub	r2,zero,r5
   94168:	1007d53a 	srai	r3,r2,20
   9416c:	000d883a 	mov	r6,zero
   94170:	0140040e 	bge	zero,r5,94184 <__ulp+0x2c>
   94174:	280f883a 	mov	r7,r5
   94178:	3807883a 	mov	r3,r7
   9417c:	3005883a 	mov	r2,r6
   94180:	f800283a 	ret
   94184:	008004c4 	movi	r2,19
   94188:	193ffb04 	addi	r4,r3,-20
   9418c:	10c00c0e 	bge	r2,r3,941c0 <__ulp+0x68>
   94190:	008007c4 	movi	r2,31
   94194:	1107c83a 	sub	r3,r2,r4
   94198:	00800784 	movi	r2,30
   9419c:	01400044 	movi	r5,1
   941a0:	11000216 	blt	r2,r4,941ac <__ulp+0x54>
   941a4:	00800044 	movi	r2,1
   941a8:	10ca983a 	sll	r5,r2,r3
   941ac:	000f883a 	mov	r7,zero
   941b0:	280d883a 	mov	r6,r5
   941b4:	3807883a 	mov	r3,r7
   941b8:	3005883a 	mov	r2,r6
   941bc:	f800283a 	ret
   941c0:	00800234 	movhi	r2,8
   941c4:	10cfd83a 	sra	r7,r2,r3
   941c8:	000d883a 	mov	r6,zero
   941cc:	3005883a 	mov	r2,r6
   941d0:	3807883a 	mov	r3,r7
   941d4:	f800283a 	ret

000941d8 <__b2d>:
   941d8:	20800417 	ldw	r2,16(r4)
   941dc:	defff904 	addi	sp,sp,-28
   941e0:	dd000415 	stw	r20,16(sp)
   941e4:	1085883a 	add	r2,r2,r2
   941e8:	25000504 	addi	r20,r4,20
   941ec:	1085883a 	add	r2,r2,r2
   941f0:	dc000015 	stw	r16,0(sp)
   941f4:	a0a1883a 	add	r16,r20,r2
   941f8:	dd400515 	stw	r21,20(sp)
   941fc:	857fff17 	ldw	r21,-4(r16)
   94200:	dc400115 	stw	r17,4(sp)
   94204:	dfc00615 	stw	ra,24(sp)
   94208:	a809883a 	mov	r4,r21
   9420c:	2823883a 	mov	r17,r5
   94210:	dcc00315 	stw	r19,12(sp)
   94214:	dc800215 	stw	r18,8(sp)
   94218:	0093fc40 	call	93fc4 <__hi0bits>
   9421c:	100b883a 	mov	r5,r2
   94220:	00800804 	movi	r2,32
   94224:	1145c83a 	sub	r2,r2,r5
   94228:	88800015 	stw	r2,0(r17)
   9422c:	00800284 	movi	r2,10
   94230:	80ffff04 	addi	r3,r16,-4
   94234:	11401416 	blt	r2,r5,94288 <__b2d+0xb0>
   94238:	008002c4 	movi	r2,11
   9423c:	1149c83a 	sub	r4,r2,r5
   94240:	a0c02736 	bltu	r20,r3,942e0 <__b2d+0x108>
   94244:	000d883a 	mov	r6,zero
   94248:	28800544 	addi	r2,r5,21
   9424c:	a906d83a 	srl	r3,r21,r4
   94250:	a884983a 	sll	r2,r21,r2
   94254:	1ccffc34 	orhi	r19,r3,16368
   94258:	11a4b03a 	or	r18,r2,r6
   9425c:	9005883a 	mov	r2,r18
   94260:	9807883a 	mov	r3,r19
   94264:	dfc00617 	ldw	ra,24(sp)
   94268:	dd400517 	ldw	r21,20(sp)
   9426c:	dd000417 	ldw	r20,16(sp)
   94270:	dcc00317 	ldw	r19,12(sp)
   94274:	dc800217 	ldw	r18,8(sp)
   94278:	dc400117 	ldw	r17,4(sp)
   9427c:	dc000017 	ldw	r16,0(sp)
   94280:	dec00704 	addi	sp,sp,28
   94284:	f800283a 	ret
   94288:	a0c00e36 	bltu	r20,r3,942c4 <__b2d+0xec>
   9428c:	293ffd44 	addi	r4,r5,-11
   94290:	000d883a 	mov	r6,zero
   94294:	20000f26 	beq	r4,zero,942d4 <__b2d+0xfc>
   94298:	00800804 	movi	r2,32
   9429c:	110bc83a 	sub	r5,r2,r4
   942a0:	a0c01236 	bltu	r20,r3,942ec <__b2d+0x114>
   942a4:	000f883a 	mov	r7,zero
   942a8:	a904983a 	sll	r2,r21,r4
   942ac:	3146d83a 	srl	r3,r6,r5
   942b0:	3108983a 	sll	r4,r6,r4
   942b4:	108ffc34 	orhi	r2,r2,16368
   942b8:	18a6b03a 	or	r19,r3,r2
   942bc:	3924b03a 	or	r18,r7,r4
   942c0:	003fe606 	br	9425c <__b2d+0x84>
   942c4:	293ffd44 	addi	r4,r5,-11
   942c8:	81bffe17 	ldw	r6,-8(r16)
   942cc:	80fffe04 	addi	r3,r16,-8
   942d0:	203ff11e 	bne	r4,zero,94298 <__b2d+0xc0>
   942d4:	accffc34 	orhi	r19,r21,16368
   942d8:	3025883a 	mov	r18,r6
   942dc:	003fdf06 	br	9425c <__b2d+0x84>
   942e0:	18bfff17 	ldw	r2,-4(r3)
   942e4:	110cd83a 	srl	r6,r2,r4
   942e8:	003fd706 	br	94248 <__b2d+0x70>
   942ec:	18bfff17 	ldw	r2,-4(r3)
   942f0:	114ed83a 	srl	r7,r2,r5
   942f4:	003fec06 	br	942a8 <__b2d+0xd0>

000942f8 <__ratio>:
   942f8:	defff904 	addi	sp,sp,-28
   942fc:	dc400215 	stw	r17,8(sp)
   94300:	2823883a 	mov	r17,r5
   94304:	d80b883a 	mov	r5,sp
   94308:	dfc00615 	stw	ra,24(sp)
   9430c:	dd000515 	stw	r20,20(sp)
   94310:	dcc00415 	stw	r19,16(sp)
   94314:	dc800315 	stw	r18,12(sp)
   94318:	2025883a 	mov	r18,r4
   9431c:	00941d80 	call	941d8 <__b2d>
   94320:	8809883a 	mov	r4,r17
   94324:	d9400104 	addi	r5,sp,4
   94328:	1027883a 	mov	r19,r2
   9432c:	1829883a 	mov	r20,r3
   94330:	00941d80 	call	941d8 <__b2d>
   94334:	89000417 	ldw	r4,16(r17)
   94338:	91c00417 	ldw	r7,16(r18)
   9433c:	d9800117 	ldw	r6,4(sp)
   94340:	180b883a 	mov	r5,r3
   94344:	390fc83a 	sub	r7,r7,r4
   94348:	1009883a 	mov	r4,r2
   9434c:	d8800017 	ldw	r2,0(sp)
   94350:	380e917a 	slli	r7,r7,5
   94354:	2011883a 	mov	r8,r4
   94358:	1185c83a 	sub	r2,r2,r6
   9435c:	11c5883a 	add	r2,r2,r7
   94360:	1006953a 	slli	r3,r2,20
   94364:	2813883a 	mov	r9,r5
   94368:	00800d0e 	bge	zero,r2,943a0 <__ratio+0xa8>
   9436c:	1d29883a 	add	r20,r3,r20
   94370:	a00b883a 	mov	r5,r20
   94374:	480f883a 	mov	r7,r9
   94378:	9809883a 	mov	r4,r19
   9437c:	400d883a 	mov	r6,r8
   94380:	009704c0 	call	9704c <__divdf3>
   94384:	dfc00617 	ldw	ra,24(sp)
   94388:	dd000517 	ldw	r20,20(sp)
   9438c:	dcc00417 	ldw	r19,16(sp)
   94390:	dc800317 	ldw	r18,12(sp)
   94394:	dc400217 	ldw	r17,8(sp)
   94398:	dec00704 	addi	sp,sp,28
   9439c:	f800283a 	ret
   943a0:	28d3c83a 	sub	r9,r5,r3
   943a4:	003ff206 	br	94370 <__ratio+0x78>

000943a8 <_mprec_log10>:
   943a8:	defffe04 	addi	sp,sp,-8
   943ac:	008005c4 	movi	r2,23
   943b0:	dc000015 	stw	r16,0(sp)
   943b4:	dfc00115 	stw	ra,4(sp)
   943b8:	2021883a 	mov	r16,r4
   943bc:	11000c16 	blt	r2,r4,943f0 <_mprec_log10+0x48>
   943c0:	200490fa 	slli	r2,r4,3
   943c4:	00c002b4 	movhi	r3,10
   943c8:	18f9d004 	addi	r3,r3,-6336
   943cc:	10c5883a 	add	r2,r2,r3
   943d0:	12400117 	ldw	r9,4(r2)
   943d4:	12000017 	ldw	r8,0(r2)
   943d8:	4807883a 	mov	r3,r9
   943dc:	4005883a 	mov	r2,r8
   943e0:	dfc00117 	ldw	ra,4(sp)
   943e4:	dc000017 	ldw	r16,0(sp)
   943e8:	dec00204 	addi	sp,sp,8
   943ec:	f800283a 	ret
   943f0:	0011883a 	mov	r8,zero
   943f4:	024ffc34 	movhi	r9,16368
   943f8:	0005883a 	mov	r2,zero
   943fc:	00d00934 	movhi	r3,16420
   94400:	480b883a 	mov	r5,r9
   94404:	4009883a 	mov	r4,r8
   94408:	180f883a 	mov	r7,r3
   9440c:	100d883a 	mov	r6,r2
   94410:	0096c880 	call	96c88 <__muldf3>
   94414:	843fffc4 	addi	r16,r16,-1
   94418:	1011883a 	mov	r8,r2
   9441c:	1813883a 	mov	r9,r3
   94420:	803ff51e 	bne	r16,zero,943f8 <_mprec_log10+0x50>
   94424:	4005883a 	mov	r2,r8
   94428:	4807883a 	mov	r3,r9
   9442c:	dfc00117 	ldw	ra,4(sp)
   94430:	dc000017 	ldw	r16,0(sp)
   94434:	dec00204 	addi	sp,sp,8
   94438:	f800283a 	ret

0009443c <__copybits>:
   9443c:	297fffc4 	addi	r5,r5,-1
   94440:	30800417 	ldw	r2,16(r6)
   94444:	280bd17a 	srai	r5,r5,5
   94448:	31800504 	addi	r6,r6,20
   9444c:	1085883a 	add	r2,r2,r2
   94450:	294b883a 	add	r5,r5,r5
   94454:	294b883a 	add	r5,r5,r5
   94458:	1085883a 	add	r2,r2,r2
   9445c:	290b883a 	add	r5,r5,r4
   94460:	3087883a 	add	r3,r6,r2
   94464:	29400104 	addi	r5,r5,4
   94468:	30c0052e 	bgeu	r6,r3,94480 <__copybits+0x44>
   9446c:	30800017 	ldw	r2,0(r6)
   94470:	31800104 	addi	r6,r6,4
   94474:	20800015 	stw	r2,0(r4)
   94478:	21000104 	addi	r4,r4,4
   9447c:	30fffb36 	bltu	r6,r3,9446c <__copybits+0x30>
   94480:	2140032e 	bgeu	r4,r5,94490 <__copybits+0x54>
   94484:	20000015 	stw	zero,0(r4)
   94488:	21000104 	addi	r4,r4,4
   9448c:	217ffd36 	bltu	r4,r5,94484 <__copybits+0x48>
   94490:	f800283a 	ret

00094494 <__any_on>:
   94494:	20800417 	ldw	r2,16(r4)
   94498:	2807d17a 	srai	r3,r5,5
   9449c:	21000504 	addi	r4,r4,20
   944a0:	10c00d0e 	bge	r2,r3,944d8 <__any_on+0x44>
   944a4:	1085883a 	add	r2,r2,r2
   944a8:	1085883a 	add	r2,r2,r2
   944ac:	208d883a 	add	r6,r4,r2
   944b0:	2180182e 	bgeu	r4,r6,94514 <__any_on+0x80>
   944b4:	30bfff17 	ldw	r2,-4(r6)
   944b8:	30ffff04 	addi	r3,r6,-4
   944bc:	1000041e 	bne	r2,zero,944d0 <__any_on+0x3c>
   944c0:	20c0142e 	bgeu	r4,r3,94514 <__any_on+0x80>
   944c4:	18ffff04 	addi	r3,r3,-4
   944c8:	18800017 	ldw	r2,0(r3)
   944cc:	103ffc26 	beq	r2,zero,944c0 <__any_on+0x2c>
   944d0:	00800044 	movi	r2,1
   944d4:	f800283a 	ret
   944d8:	18800a0e 	bge	r3,r2,94504 <__any_on+0x70>
   944dc:	294007cc 	andi	r5,r5,31
   944e0:	28000826 	beq	r5,zero,94504 <__any_on+0x70>
   944e4:	18c5883a 	add	r2,r3,r3
   944e8:	1085883a 	add	r2,r2,r2
   944ec:	208d883a 	add	r6,r4,r2
   944f0:	30c00017 	ldw	r3,0(r6)
   944f4:	1944d83a 	srl	r2,r3,r5
   944f8:	1144983a 	sll	r2,r2,r5
   944fc:	18bff41e 	bne	r3,r2,944d0 <__any_on+0x3c>
   94500:	003feb06 	br	944b0 <__any_on+0x1c>
   94504:	18c5883a 	add	r2,r3,r3
   94508:	1085883a 	add	r2,r2,r2
   9450c:	208d883a 	add	r6,r4,r2
   94510:	003fe706 	br	944b0 <__any_on+0x1c>
   94514:	0005883a 	mov	r2,zero
   94518:	f800283a 	ret

0009451c <_Balloc>:
   9451c:	20c01317 	ldw	r3,76(r4)
   94520:	defffb04 	addi	sp,sp,-20
   94524:	dcc00315 	stw	r19,12(sp)
   94528:	dc800215 	stw	r18,8(sp)
   9452c:	dfc00415 	stw	ra,16(sp)
   94530:	2825883a 	mov	r18,r5
   94534:	dc400115 	stw	r17,4(sp)
   94538:	dc000015 	stw	r16,0(sp)
   9453c:	2027883a 	mov	r19,r4
   94540:	01800404 	movi	r6,16
   94544:	01400104 	movi	r5,4
   94548:	18001726 	beq	r3,zero,945a8 <_Balloc+0x8c>
   9454c:	01400044 	movi	r5,1
   94550:	9485883a 	add	r2,r18,r18
   94554:	2ca2983a 	sll	r17,r5,r18
   94558:	1085883a 	add	r2,r2,r2
   9455c:	10c7883a 	add	r3,r2,r3
   94560:	1c000017 	ldw	r16,0(r3)
   94564:	8c4d883a 	add	r6,r17,r17
   94568:	318d883a 	add	r6,r6,r6
   9456c:	9809883a 	mov	r4,r19
   94570:	31800504 	addi	r6,r6,20
   94574:	80001226 	beq	r16,zero,945c0 <_Balloc+0xa4>
   94578:	80800017 	ldw	r2,0(r16)
   9457c:	18800015 	stw	r2,0(r3)
   94580:	80000415 	stw	zero,16(r16)
   94584:	80000315 	stw	zero,12(r16)
   94588:	8005883a 	mov	r2,r16
   9458c:	dfc00417 	ldw	ra,16(sp)
   94590:	dcc00317 	ldw	r19,12(sp)
   94594:	dc800217 	ldw	r18,8(sp)
   94598:	dc400117 	ldw	r17,4(sp)
   9459c:	dc000017 	ldw	r16,0(sp)
   945a0:	dec00504 	addi	sp,sp,20
   945a4:	f800283a 	ret
   945a8:	0095a600 	call	95a60 <_calloc_r>
   945ac:	1007883a 	mov	r3,r2
   945b0:	0021883a 	mov	r16,zero
   945b4:	98801315 	stw	r2,76(r19)
   945b8:	103fe41e 	bne	r2,zero,9454c <_Balloc+0x30>
   945bc:	003ff206 	br	94588 <_Balloc+0x6c>
   945c0:	0095a600 	call	95a60 <_calloc_r>
   945c4:	103ff026 	beq	r2,zero,94588 <_Balloc+0x6c>
   945c8:	1021883a 	mov	r16,r2
   945cc:	14800115 	stw	r18,4(r2)
   945d0:	14400215 	stw	r17,8(r2)
   945d4:	003fea06 	br	94580 <_Balloc+0x64>

000945d8 <__d2b>:
   945d8:	defff504 	addi	sp,sp,-44
   945dc:	dcc00515 	stw	r19,20(sp)
   945e0:	04c00044 	movi	r19,1
   945e4:	dc000215 	stw	r16,8(sp)
   945e8:	2821883a 	mov	r16,r5
   945ec:	980b883a 	mov	r5,r19
   945f0:	ddc00915 	stw	r23,36(sp)
   945f4:	dd800815 	stw	r22,32(sp)
   945f8:	dd400715 	stw	r21,28(sp)
   945fc:	dd000615 	stw	r20,24(sp)
   94600:	dc800415 	stw	r18,16(sp)
   94604:	dc400315 	stw	r17,12(sp)
   94608:	dfc00a15 	stw	ra,40(sp)
   9460c:	3023883a 	mov	r17,r6
   94610:	382d883a 	mov	r22,r7
   94614:	ddc00b17 	ldw	r23,44(sp)
   94618:	009451c0 	call	9451c <_Balloc>
   9461c:	1025883a 	mov	r18,r2
   94620:	00a00034 	movhi	r2,32768
   94624:	10bfffc4 	addi	r2,r2,-1
   94628:	8888703a 	and	r4,r17,r2
   9462c:	202ad53a 	srli	r21,r4,20
   94630:	00800434 	movhi	r2,16
   94634:	10bfffc4 	addi	r2,r2,-1
   94638:	8886703a 	and	r3,r17,r2
   9463c:	a829003a 	cmpeq	r20,r21,zero
   94640:	800b883a 	mov	r5,r16
   94644:	d8c00115 	stw	r3,4(sp)
   94648:	94000504 	addi	r16,r18,20
   9464c:	a000021e 	bne	r20,zero,94658 <__d2b+0x80>
   94650:	18c00434 	orhi	r3,r3,16
   94654:	d8c00115 	stw	r3,4(sp)
   94658:	28002726 	beq	r5,zero,946f8 <__d2b+0x120>
   9465c:	d809883a 	mov	r4,sp
   94660:	d9400015 	stw	r5,0(sp)
   94664:	00940340 	call	94034 <__lo0bits>
   94668:	100d883a 	mov	r6,r2
   9466c:	10003526 	beq	r2,zero,94744 <__d2b+0x16c>
   94670:	d8c00117 	ldw	r3,4(sp)
   94674:	00800804 	movi	r2,32
   94678:	1185c83a 	sub	r2,r2,r6
   9467c:	d9000017 	ldw	r4,0(sp)
   94680:	1886983a 	sll	r3,r3,r2
   94684:	1906b03a 	or	r3,r3,r4
   94688:	90c00515 	stw	r3,20(r18)
   9468c:	d8c00117 	ldw	r3,4(sp)
   94690:	1986d83a 	srl	r3,r3,r6
   94694:	d8c00115 	stw	r3,4(sp)
   94698:	180b003a 	cmpeq	r5,r3,zero
   9469c:	00800084 	movi	r2,2
   946a0:	114bc83a 	sub	r5,r2,r5
   946a4:	80c00115 	stw	r3,4(r16)
   946a8:	91400415 	stw	r5,16(r18)
   946ac:	a0001a1e 	bne	r20,zero,94718 <__d2b+0x140>
   946b0:	3545883a 	add	r2,r6,r21
   946b4:	10bef344 	addi	r2,r2,-1075
   946b8:	00c00d44 	movi	r3,53
   946bc:	b0800015 	stw	r2,0(r22)
   946c0:	1987c83a 	sub	r3,r3,r6
   946c4:	b8c00015 	stw	r3,0(r23)
   946c8:	9005883a 	mov	r2,r18
   946cc:	dfc00a17 	ldw	ra,40(sp)
   946d0:	ddc00917 	ldw	r23,36(sp)
   946d4:	dd800817 	ldw	r22,32(sp)
   946d8:	dd400717 	ldw	r21,28(sp)
   946dc:	dd000617 	ldw	r20,24(sp)
   946e0:	dcc00517 	ldw	r19,20(sp)
   946e4:	dc800417 	ldw	r18,16(sp)
   946e8:	dc400317 	ldw	r17,12(sp)
   946ec:	dc000217 	ldw	r16,8(sp)
   946f0:	dec00b04 	addi	sp,sp,44
   946f4:	f800283a 	ret
   946f8:	d9000104 	addi	r4,sp,4
   946fc:	00940340 	call	94034 <__lo0bits>
   94700:	11800804 	addi	r6,r2,32
   94704:	d8800117 	ldw	r2,4(sp)
   94708:	94c00415 	stw	r19,16(r18)
   9470c:	980b883a 	mov	r5,r19
   94710:	90800515 	stw	r2,20(r18)
   94714:	a03fe626 	beq	r20,zero,946b0 <__d2b+0xd8>
   94718:	2945883a 	add	r2,r5,r5
   9471c:	1085883a 	add	r2,r2,r2
   94720:	1405883a 	add	r2,r2,r16
   94724:	113fff17 	ldw	r4,-4(r2)
   94728:	30fef384 	addi	r3,r6,-1074
   9472c:	2820917a 	slli	r16,r5,5
   94730:	b0c00015 	stw	r3,0(r22)
   94734:	0093fc40 	call	93fc4 <__hi0bits>
   94738:	80a1c83a 	sub	r16,r16,r2
   9473c:	bc000015 	stw	r16,0(r23)
   94740:	003fe106 	br	946c8 <__d2b+0xf0>
   94744:	d8800017 	ldw	r2,0(sp)
   94748:	90800515 	stw	r2,20(r18)
   9474c:	d8c00117 	ldw	r3,4(sp)
   94750:	003fd106 	br	94698 <__d2b+0xc0>

00094754 <__mdiff>:
   94754:	defffb04 	addi	sp,sp,-20
   94758:	dc000015 	stw	r16,0(sp)
   9475c:	2821883a 	mov	r16,r5
   94760:	dc800215 	stw	r18,8(sp)
   94764:	300b883a 	mov	r5,r6
   94768:	2025883a 	mov	r18,r4
   9476c:	8009883a 	mov	r4,r16
   94770:	dc400115 	stw	r17,4(sp)
   94774:	dfc00415 	stw	ra,16(sp)
   94778:	dcc00315 	stw	r19,12(sp)
   9477c:	3023883a 	mov	r17,r6
   94780:	00940f80 	call	940f8 <__mcmp>
   94784:	10004226 	beq	r2,zero,94890 <__mdiff+0x13c>
   94788:	10005016 	blt	r2,zero,948cc <__mdiff+0x178>
   9478c:	0027883a 	mov	r19,zero
   94790:	81400117 	ldw	r5,4(r16)
   94794:	9009883a 	mov	r4,r18
   94798:	009451c0 	call	9451c <_Balloc>
   9479c:	1019883a 	mov	r12,r2
   947a0:	82800417 	ldw	r10,16(r16)
   947a4:	88800417 	ldw	r2,16(r17)
   947a8:	81800504 	addi	r6,r16,20
   947ac:	5287883a 	add	r3,r10,r10
   947b0:	1085883a 	add	r2,r2,r2
   947b4:	18c7883a 	add	r3,r3,r3
   947b8:	1085883a 	add	r2,r2,r2
   947bc:	8a000504 	addi	r8,r17,20
   947c0:	64c00315 	stw	r19,12(r12)
   947c4:	30db883a 	add	r13,r6,r3
   947c8:	4097883a 	add	r11,r8,r2
   947cc:	61c00504 	addi	r7,r12,20
   947d0:	0013883a 	mov	r9,zero
   947d4:	31000017 	ldw	r4,0(r6)
   947d8:	41400017 	ldw	r5,0(r8)
   947dc:	42000104 	addi	r8,r8,4
   947e0:	20bfffcc 	andi	r2,r4,65535
   947e4:	28ffffcc 	andi	r3,r5,65535
   947e8:	10c5c83a 	sub	r2,r2,r3
   947ec:	1245883a 	add	r2,r2,r9
   947f0:	2008d43a 	srli	r4,r4,16
   947f4:	280ad43a 	srli	r5,r5,16
   947f8:	1007d43a 	srai	r3,r2,16
   947fc:	3880000d 	sth	r2,0(r7)
   94800:	2149c83a 	sub	r4,r4,r5
   94804:	20c9883a 	add	r4,r4,r3
   94808:	3900008d 	sth	r4,2(r7)
   9480c:	31800104 	addi	r6,r6,4
   94810:	39c00104 	addi	r7,r7,4
   94814:	2013d43a 	srai	r9,r4,16
   94818:	42ffee36 	bltu	r8,r11,947d4 <__mdiff+0x80>
   9481c:	33400c2e 	bgeu	r6,r13,94850 <__mdiff+0xfc>
   94820:	30800017 	ldw	r2,0(r6)
   94824:	31800104 	addi	r6,r6,4
   94828:	10ffffcc 	andi	r3,r2,65535
   9482c:	1a47883a 	add	r3,r3,r9
   94830:	1004d43a 	srli	r2,r2,16
   94834:	1809d43a 	srai	r4,r3,16
   94838:	38c0000d 	sth	r3,0(r7)
   9483c:	1105883a 	add	r2,r2,r4
   94840:	3880008d 	sth	r2,2(r7)
   94844:	1013d43a 	srai	r9,r2,16
   94848:	39c00104 	addi	r7,r7,4
   9484c:	337ff436 	bltu	r6,r13,94820 <__mdiff+0xcc>
   94850:	38bfff17 	ldw	r2,-4(r7)
   94854:	38ffff04 	addi	r3,r7,-4
   94858:	1000041e 	bne	r2,zero,9486c <__mdiff+0x118>
   9485c:	18ffff04 	addi	r3,r3,-4
   94860:	18800017 	ldw	r2,0(r3)
   94864:	52bfffc4 	addi	r10,r10,-1
   94868:	103ffc26 	beq	r2,zero,9485c <__mdiff+0x108>
   9486c:	6005883a 	mov	r2,r12
   94870:	62800415 	stw	r10,16(r12)
   94874:	dfc00417 	ldw	ra,16(sp)
   94878:	dcc00317 	ldw	r19,12(sp)
   9487c:	dc800217 	ldw	r18,8(sp)
   94880:	dc400117 	ldw	r17,4(sp)
   94884:	dc000017 	ldw	r16,0(sp)
   94888:	dec00504 	addi	sp,sp,20
   9488c:	f800283a 	ret
   94890:	9009883a 	mov	r4,r18
   94894:	000b883a 	mov	r5,zero
   94898:	009451c0 	call	9451c <_Balloc>
   9489c:	1019883a 	mov	r12,r2
   948a0:	00800044 	movi	r2,1
   948a4:	60800415 	stw	r2,16(r12)
   948a8:	6005883a 	mov	r2,r12
   948ac:	60000515 	stw	zero,20(r12)
   948b0:	dfc00417 	ldw	ra,16(sp)
   948b4:	dcc00317 	ldw	r19,12(sp)
   948b8:	dc800217 	ldw	r18,8(sp)
   948bc:	dc400117 	ldw	r17,4(sp)
   948c0:	dc000017 	ldw	r16,0(sp)
   948c4:	dec00504 	addi	sp,sp,20
   948c8:	f800283a 	ret
   948cc:	880d883a 	mov	r6,r17
   948d0:	04c00044 	movi	r19,1
   948d4:	8023883a 	mov	r17,r16
   948d8:	3021883a 	mov	r16,r6
   948dc:	003fac06 	br	94790 <__mdiff+0x3c>

000948e0 <__lshift>:
   948e0:	defff904 	addi	sp,sp,-28
   948e4:	28800417 	ldw	r2,16(r5)
   948e8:	dc000015 	stw	r16,0(sp)
   948ec:	3021d17a 	srai	r16,r6,5
   948f0:	28c00217 	ldw	r3,8(r5)
   948f4:	10800044 	addi	r2,r2,1
   948f8:	dc400115 	stw	r17,4(sp)
   948fc:	80a3883a 	add	r17,r16,r2
   94900:	dd400515 	stw	r21,20(sp)
   94904:	dd000415 	stw	r20,16(sp)
   94908:	dc800215 	stw	r18,8(sp)
   9490c:	dfc00615 	stw	ra,24(sp)
   94910:	2825883a 	mov	r18,r5
   94914:	dcc00315 	stw	r19,12(sp)
   94918:	3029883a 	mov	r20,r6
   9491c:	202b883a 	mov	r21,r4
   94920:	29400117 	ldw	r5,4(r5)
   94924:	1c40030e 	bge	r3,r17,94934 <__lshift+0x54>
   94928:	18c7883a 	add	r3,r3,r3
   9492c:	29400044 	addi	r5,r5,1
   94930:	1c7ffd16 	blt	r3,r17,94928 <__lshift+0x48>
   94934:	a809883a 	mov	r4,r21
   94938:	009451c0 	call	9451c <_Balloc>
   9493c:	1027883a 	mov	r19,r2
   94940:	11400504 	addi	r5,r2,20
   94944:	0400090e 	bge	zero,r16,9496c <__lshift+0x8c>
   94948:	2805883a 	mov	r2,r5
   9494c:	0007883a 	mov	r3,zero
   94950:	18c00044 	addi	r3,r3,1
   94954:	10000015 	stw	zero,0(r2)
   94958:	10800104 	addi	r2,r2,4
   9495c:	80fffc1e 	bne	r16,r3,94950 <__lshift+0x70>
   94960:	8405883a 	add	r2,r16,r16
   94964:	1085883a 	add	r2,r2,r2
   94968:	288b883a 	add	r5,r5,r2
   9496c:	90800417 	ldw	r2,16(r18)
   94970:	91000504 	addi	r4,r18,20
   94974:	a18007cc 	andi	r6,r20,31
   94978:	1085883a 	add	r2,r2,r2
   9497c:	1085883a 	add	r2,r2,r2
   94980:	208f883a 	add	r7,r4,r2
   94984:	30001e26 	beq	r6,zero,94a00 <__lshift+0x120>
   94988:	00800804 	movi	r2,32
   9498c:	1191c83a 	sub	r8,r2,r6
   94990:	0007883a 	mov	r3,zero
   94994:	20800017 	ldw	r2,0(r4)
   94998:	1184983a 	sll	r2,r2,r6
   9499c:	1884b03a 	or	r2,r3,r2
   949a0:	28800015 	stw	r2,0(r5)
   949a4:	20c00017 	ldw	r3,0(r4)
   949a8:	21000104 	addi	r4,r4,4
   949ac:	29400104 	addi	r5,r5,4
   949b0:	1a06d83a 	srl	r3,r3,r8
   949b4:	21fff736 	bltu	r4,r7,94994 <__lshift+0xb4>
   949b8:	28c00015 	stw	r3,0(r5)
   949bc:	18000126 	beq	r3,zero,949c4 <__lshift+0xe4>
   949c0:	8c400044 	addi	r17,r17,1
   949c4:	88bfffc4 	addi	r2,r17,-1
   949c8:	98800415 	stw	r2,16(r19)
   949cc:	a809883a 	mov	r4,r21
   949d0:	900b883a 	mov	r5,r18
   949d4:	0093f9c0 	call	93f9c <_Bfree>
   949d8:	9805883a 	mov	r2,r19
   949dc:	dfc00617 	ldw	ra,24(sp)
   949e0:	dd400517 	ldw	r21,20(sp)
   949e4:	dd000417 	ldw	r20,16(sp)
   949e8:	dcc00317 	ldw	r19,12(sp)
   949ec:	dc800217 	ldw	r18,8(sp)
   949f0:	dc400117 	ldw	r17,4(sp)
   949f4:	dc000017 	ldw	r16,0(sp)
   949f8:	dec00704 	addi	sp,sp,28
   949fc:	f800283a 	ret
   94a00:	20800017 	ldw	r2,0(r4)
   94a04:	21000104 	addi	r4,r4,4
   94a08:	28800015 	stw	r2,0(r5)
   94a0c:	29400104 	addi	r5,r5,4
   94a10:	21ffec2e 	bgeu	r4,r7,949c4 <__lshift+0xe4>
   94a14:	20800017 	ldw	r2,0(r4)
   94a18:	21000104 	addi	r4,r4,4
   94a1c:	28800015 	stw	r2,0(r5)
   94a20:	29400104 	addi	r5,r5,4
   94a24:	21fff636 	bltu	r4,r7,94a00 <__lshift+0x120>
   94a28:	003fe606 	br	949c4 <__lshift+0xe4>

00094a2c <__multiply>:
   94a2c:	defff904 	addi	sp,sp,-28
   94a30:	dcc00315 	stw	r19,12(sp)
   94a34:	dc800215 	stw	r18,8(sp)
   94a38:	2cc00417 	ldw	r19,16(r5)
   94a3c:	34800417 	ldw	r18,16(r6)
   94a40:	dd000415 	stw	r20,16(sp)
   94a44:	dc400115 	stw	r17,4(sp)
   94a48:	dfc00615 	stw	ra,24(sp)
   94a4c:	dd400515 	stw	r21,20(sp)
   94a50:	dc000015 	stw	r16,0(sp)
   94a54:	2823883a 	mov	r17,r5
   94a58:	3029883a 	mov	r20,r6
   94a5c:	9c80040e 	bge	r19,r18,94a70 <__multiply+0x44>
   94a60:	9027883a 	mov	r19,r18
   94a64:	2c800417 	ldw	r18,16(r5)
   94a68:	2829883a 	mov	r20,r5
   94a6c:	3023883a 	mov	r17,r6
   94a70:	88800217 	ldw	r2,8(r17)
   94a74:	9ca1883a 	add	r16,r19,r18
   94a78:	89400117 	ldw	r5,4(r17)
   94a7c:	1400010e 	bge	r2,r16,94a84 <__multiply+0x58>
   94a80:	29400044 	addi	r5,r5,1
   94a84:	009451c0 	call	9451c <_Balloc>
   94a88:	102b883a 	mov	r21,r2
   94a8c:	8405883a 	add	r2,r16,r16
   94a90:	1085883a 	add	r2,r2,r2
   94a94:	a9000504 	addi	r4,r21,20
   94a98:	209d883a 	add	r14,r4,r2
   94a9c:	2380042e 	bgeu	r4,r14,94ab0 <__multiply+0x84>
   94aa0:	2005883a 	mov	r2,r4
   94aa4:	10000015 	stw	zero,0(r2)
   94aa8:	10800104 	addi	r2,r2,4
   94aac:	13bffd36 	bltu	r2,r14,94aa4 <__multiply+0x78>
   94ab0:	9485883a 	add	r2,r18,r18
   94ab4:	9cc7883a 	add	r3,r19,r19
   94ab8:	a1800504 	addi	r6,r20,20
   94abc:	1085883a 	add	r2,r2,r2
   94ac0:	8b400504 	addi	r13,r17,20
   94ac4:	18c7883a 	add	r3,r3,r3
   94ac8:	309f883a 	add	r15,r6,r2
   94acc:	68d7883a 	add	r11,r13,r3
   94ad0:	33c03b2e 	bgeu	r6,r15,94bc0 <__multiply+0x194>
   94ad4:	2019883a 	mov	r12,r4
   94ad8:	30800017 	ldw	r2,0(r6)
   94adc:	127fffcc 	andi	r9,r2,65535
   94ae0:	48001826 	beq	r9,zero,94b44 <__multiply+0x118>
   94ae4:	6811883a 	mov	r8,r13
   94ae8:	600f883a 	mov	r7,r12
   94aec:	0015883a 	mov	r10,zero
   94af0:	40c00017 	ldw	r3,0(r8)
   94af4:	39400017 	ldw	r5,0(r7)
   94af8:	42000104 	addi	r8,r8,4
   94afc:	193fffcc 	andi	r4,r3,65535
   94b00:	4909383a 	mul	r4,r9,r4
   94b04:	1806d43a 	srli	r3,r3,16
   94b08:	28bfffcc 	andi	r2,r5,65535
   94b0c:	5085883a 	add	r2,r10,r2
   94b10:	2089883a 	add	r4,r4,r2
   94b14:	48c7383a 	mul	r3,r9,r3
   94b18:	280ad43a 	srli	r5,r5,16
   94b1c:	2004d43a 	srli	r2,r4,16
   94b20:	3900000d 	sth	r4,0(r7)
   94b24:	1947883a 	add	r3,r3,r5
   94b28:	10c5883a 	add	r2,r2,r3
   94b2c:	3880008d 	sth	r2,2(r7)
   94b30:	1014d43a 	srli	r10,r2,16
   94b34:	39c00104 	addi	r7,r7,4
   94b38:	42ffed36 	bltu	r8,r11,94af0 <__multiply+0xc4>
   94b3c:	3a800015 	stw	r10,0(r7)
   94b40:	30800017 	ldw	r2,0(r6)
   94b44:	1012d43a 	srli	r9,r2,16
   94b48:	48001926 	beq	r9,zero,94bb0 <__multiply+0x184>
   94b4c:	60800017 	ldw	r2,0(r12)
   94b50:	6811883a 	mov	r8,r13
   94b54:	600f883a 	mov	r7,r12
   94b58:	0015883a 	mov	r10,zero
   94b5c:	100b883a 	mov	r5,r2
   94b60:	41000017 	ldw	r4,0(r8)
   94b64:	2806d43a 	srli	r3,r5,16
   94b68:	3880000d 	sth	r2,0(r7)
   94b6c:	20bfffcc 	andi	r2,r4,65535
   94b70:	4885383a 	mul	r2,r9,r2
   94b74:	50c7883a 	add	r3,r10,r3
   94b78:	2008d43a 	srli	r4,r4,16
   94b7c:	10c5883a 	add	r2,r2,r3
   94b80:	3880008d 	sth	r2,2(r7)
   94b84:	39c00104 	addi	r7,r7,4
   94b88:	39400017 	ldw	r5,0(r7)
   94b8c:	4909383a 	mul	r4,r9,r4
   94b90:	1004d43a 	srli	r2,r2,16
   94b94:	28ffffcc 	andi	r3,r5,65535
   94b98:	20c9883a 	add	r4,r4,r3
   94b9c:	1105883a 	add	r2,r2,r4
   94ba0:	42000104 	addi	r8,r8,4
   94ba4:	1014d43a 	srli	r10,r2,16
   94ba8:	42ffed36 	bltu	r8,r11,94b60 <__multiply+0x134>
   94bac:	38800015 	stw	r2,0(r7)
   94bb0:	31800104 	addi	r6,r6,4
   94bb4:	33c0022e 	bgeu	r6,r15,94bc0 <__multiply+0x194>
   94bb8:	63000104 	addi	r12,r12,4
   94bbc:	003fc606 	br	94ad8 <__multiply+0xac>
   94bc0:	0400090e 	bge	zero,r16,94be8 <__multiply+0x1bc>
   94bc4:	70bfff17 	ldw	r2,-4(r14)
   94bc8:	70ffff04 	addi	r3,r14,-4
   94bcc:	10000326 	beq	r2,zero,94bdc <__multiply+0x1b0>
   94bd0:	00000506 	br	94be8 <__multiply+0x1bc>
   94bd4:	18800017 	ldw	r2,0(r3)
   94bd8:	1000031e 	bne	r2,zero,94be8 <__multiply+0x1bc>
   94bdc:	843fffc4 	addi	r16,r16,-1
   94be0:	18ffff04 	addi	r3,r3,-4
   94be4:	803ffb1e 	bne	r16,zero,94bd4 <__multiply+0x1a8>
   94be8:	a805883a 	mov	r2,r21
   94bec:	ac000415 	stw	r16,16(r21)
   94bf0:	dfc00617 	ldw	ra,24(sp)
   94bf4:	dd400517 	ldw	r21,20(sp)
   94bf8:	dd000417 	ldw	r20,16(sp)
   94bfc:	dcc00317 	ldw	r19,12(sp)
   94c00:	dc800217 	ldw	r18,8(sp)
   94c04:	dc400117 	ldw	r17,4(sp)
   94c08:	dc000017 	ldw	r16,0(sp)
   94c0c:	dec00704 	addi	sp,sp,28
   94c10:	f800283a 	ret

00094c14 <__i2b>:
   94c14:	defffd04 	addi	sp,sp,-12
   94c18:	dc000015 	stw	r16,0(sp)
   94c1c:	04000044 	movi	r16,1
   94c20:	dc800115 	stw	r18,4(sp)
   94c24:	2825883a 	mov	r18,r5
   94c28:	800b883a 	mov	r5,r16
   94c2c:	dfc00215 	stw	ra,8(sp)
   94c30:	009451c0 	call	9451c <_Balloc>
   94c34:	14000415 	stw	r16,16(r2)
   94c38:	14800515 	stw	r18,20(r2)
   94c3c:	dfc00217 	ldw	ra,8(sp)
   94c40:	dc800117 	ldw	r18,4(sp)
   94c44:	dc000017 	ldw	r16,0(sp)
   94c48:	dec00304 	addi	sp,sp,12
   94c4c:	f800283a 	ret

00094c50 <__multadd>:
   94c50:	defffa04 	addi	sp,sp,-24
   94c54:	dc800215 	stw	r18,8(sp)
   94c58:	2c800417 	ldw	r18,16(r5)
   94c5c:	dd000415 	stw	r20,16(sp)
   94c60:	dcc00315 	stw	r19,12(sp)
   94c64:	dc000015 	stw	r16,0(sp)
   94c68:	dfc00515 	stw	ra,20(sp)
   94c6c:	3821883a 	mov	r16,r7
   94c70:	dc400115 	stw	r17,4(sp)
   94c74:	2827883a 	mov	r19,r5
   94c78:	2029883a 	mov	r20,r4
   94c7c:	2a000504 	addi	r8,r5,20
   94c80:	000f883a 	mov	r7,zero
   94c84:	40800017 	ldw	r2,0(r8)
   94c88:	39c00044 	addi	r7,r7,1
   94c8c:	10ffffcc 	andi	r3,r2,65535
   94c90:	1987383a 	mul	r3,r3,r6
   94c94:	1004d43a 	srli	r2,r2,16
   94c98:	1c07883a 	add	r3,r3,r16
   94c9c:	180ad43a 	srli	r5,r3,16
   94ca0:	1185383a 	mul	r2,r2,r6
   94ca4:	18ffffcc 	andi	r3,r3,65535
   94ca8:	1145883a 	add	r2,r2,r5
   94cac:	1008943a 	slli	r4,r2,16
   94cb0:	1020d43a 	srli	r16,r2,16
   94cb4:	20c9883a 	add	r4,r4,r3
   94cb8:	41000015 	stw	r4,0(r8)
   94cbc:	42000104 	addi	r8,r8,4
   94cc0:	3cbff016 	blt	r7,r18,94c84 <__multadd+0x34>
   94cc4:	80000826 	beq	r16,zero,94ce8 <__multadd+0x98>
   94cc8:	98800217 	ldw	r2,8(r19)
   94ccc:	90800f0e 	bge	r18,r2,94d0c <__multadd+0xbc>
   94cd0:	9485883a 	add	r2,r18,r18
   94cd4:	1085883a 	add	r2,r2,r2
   94cd8:	14c5883a 	add	r2,r2,r19
   94cdc:	90c00044 	addi	r3,r18,1
   94ce0:	14000515 	stw	r16,20(r2)
   94ce4:	98c00415 	stw	r3,16(r19)
   94ce8:	9805883a 	mov	r2,r19
   94cec:	dfc00517 	ldw	ra,20(sp)
   94cf0:	dd000417 	ldw	r20,16(sp)
   94cf4:	dcc00317 	ldw	r19,12(sp)
   94cf8:	dc800217 	ldw	r18,8(sp)
   94cfc:	dc400117 	ldw	r17,4(sp)
   94d00:	dc000017 	ldw	r16,0(sp)
   94d04:	dec00604 	addi	sp,sp,24
   94d08:	f800283a 	ret
   94d0c:	99400117 	ldw	r5,4(r19)
   94d10:	a009883a 	mov	r4,r20
   94d14:	29400044 	addi	r5,r5,1
   94d18:	009451c0 	call	9451c <_Balloc>
   94d1c:	99800417 	ldw	r6,16(r19)
   94d20:	99400304 	addi	r5,r19,12
   94d24:	11000304 	addi	r4,r2,12
   94d28:	318d883a 	add	r6,r6,r6
   94d2c:	318d883a 	add	r6,r6,r6
   94d30:	31800204 	addi	r6,r6,8
   94d34:	1023883a 	mov	r17,r2
   94d38:	008ecfc0 	call	8ecfc <memcpy>
   94d3c:	980b883a 	mov	r5,r19
   94d40:	a009883a 	mov	r4,r20
   94d44:	0093f9c0 	call	93f9c <_Bfree>
   94d48:	8827883a 	mov	r19,r17
   94d4c:	003fe006 	br	94cd0 <__multadd+0x80>

00094d50 <__pow5mult>:
   94d50:	defffa04 	addi	sp,sp,-24
   94d54:	308000cc 	andi	r2,r6,3
   94d58:	dd000415 	stw	r20,16(sp)
   94d5c:	dcc00315 	stw	r19,12(sp)
   94d60:	dc000015 	stw	r16,0(sp)
   94d64:	dfc00515 	stw	ra,20(sp)
   94d68:	dc800215 	stw	r18,8(sp)
   94d6c:	dc400115 	stw	r17,4(sp)
   94d70:	3021883a 	mov	r16,r6
   94d74:	2027883a 	mov	r19,r4
   94d78:	2829883a 	mov	r20,r5
   94d7c:	10002b1e 	bne	r2,zero,94e2c <__pow5mult+0xdc>
   94d80:	8025d0ba 	srai	r18,r16,2
   94d84:	90001b26 	beq	r18,zero,94df4 <__pow5mult+0xa4>
   94d88:	9c001217 	ldw	r16,72(r19)
   94d8c:	8000081e 	bne	r16,zero,94db0 <__pow5mult+0x60>
   94d90:	00003006 	br	94e54 <__pow5mult+0x104>
   94d94:	800b883a 	mov	r5,r16
   94d98:	800d883a 	mov	r6,r16
   94d9c:	9809883a 	mov	r4,r19
   94da0:	90001426 	beq	r18,zero,94df4 <__pow5mult+0xa4>
   94da4:	80800017 	ldw	r2,0(r16)
   94da8:	10001b26 	beq	r2,zero,94e18 <__pow5mult+0xc8>
   94dac:	1021883a 	mov	r16,r2
   94db0:	9080004c 	andi	r2,r18,1
   94db4:	1005003a 	cmpeq	r2,r2,zero
   94db8:	9025d07a 	srai	r18,r18,1
   94dbc:	800d883a 	mov	r6,r16
   94dc0:	9809883a 	mov	r4,r19
   94dc4:	a00b883a 	mov	r5,r20
   94dc8:	103ff21e 	bne	r2,zero,94d94 <__pow5mult+0x44>
   94dcc:	0094a2c0 	call	94a2c <__multiply>
   94dd0:	a00b883a 	mov	r5,r20
   94dd4:	9809883a 	mov	r4,r19
   94dd8:	1023883a 	mov	r17,r2
   94ddc:	0093f9c0 	call	93f9c <_Bfree>
   94de0:	8829883a 	mov	r20,r17
   94de4:	800b883a 	mov	r5,r16
   94de8:	800d883a 	mov	r6,r16
   94dec:	9809883a 	mov	r4,r19
   94df0:	903fec1e 	bne	r18,zero,94da4 <__pow5mult+0x54>
   94df4:	a005883a 	mov	r2,r20
   94df8:	dfc00517 	ldw	ra,20(sp)
   94dfc:	dd000417 	ldw	r20,16(sp)
   94e00:	dcc00317 	ldw	r19,12(sp)
   94e04:	dc800217 	ldw	r18,8(sp)
   94e08:	dc400117 	ldw	r17,4(sp)
   94e0c:	dc000017 	ldw	r16,0(sp)
   94e10:	dec00604 	addi	sp,sp,24
   94e14:	f800283a 	ret
   94e18:	0094a2c0 	call	94a2c <__multiply>
   94e1c:	80800015 	stw	r2,0(r16)
   94e20:	1021883a 	mov	r16,r2
   94e24:	10000015 	stw	zero,0(r2)
   94e28:	003fe106 	br	94db0 <__pow5mult+0x60>
   94e2c:	1085883a 	add	r2,r2,r2
   94e30:	00c002b4 	movhi	r3,10
   94e34:	18fa1604 	addi	r3,r3,-6056
   94e38:	1085883a 	add	r2,r2,r2
   94e3c:	10c5883a 	add	r2,r2,r3
   94e40:	11bfff17 	ldw	r6,-4(r2)
   94e44:	000f883a 	mov	r7,zero
   94e48:	0094c500 	call	94c50 <__multadd>
   94e4c:	1029883a 	mov	r20,r2
   94e50:	003fcb06 	br	94d80 <__pow5mult+0x30>
   94e54:	9809883a 	mov	r4,r19
   94e58:	01409c44 	movi	r5,625
   94e5c:	0094c140 	call	94c14 <__i2b>
   94e60:	98801215 	stw	r2,72(r19)
   94e64:	1021883a 	mov	r16,r2
   94e68:	10000015 	stw	zero,0(r2)
   94e6c:	003fd006 	br	94db0 <__pow5mult+0x60>

00094e70 <__s2b>:
   94e70:	defff904 	addi	sp,sp,-28
   94e74:	dcc00315 	stw	r19,12(sp)
   94e78:	dc800215 	stw	r18,8(sp)
   94e7c:	2827883a 	mov	r19,r5
   94e80:	2025883a 	mov	r18,r4
   94e84:	01400244 	movi	r5,9
   94e88:	39000204 	addi	r4,r7,8
   94e8c:	dd000415 	stw	r20,16(sp)
   94e90:	dc400115 	stw	r17,4(sp)
   94e94:	dfc00615 	stw	ra,24(sp)
   94e98:	dd400515 	stw	r21,20(sp)
   94e9c:	dc000015 	stw	r16,0(sp)
   94ea0:	3829883a 	mov	r20,r7
   94ea4:	3023883a 	mov	r17,r6
   94ea8:	008d7940 	call	8d794 <__divsi3>
   94eac:	00c00044 	movi	r3,1
   94eb0:	1880350e 	bge	r3,r2,94f88 <__s2b+0x118>
   94eb4:	000b883a 	mov	r5,zero
   94eb8:	18c7883a 	add	r3,r3,r3
   94ebc:	29400044 	addi	r5,r5,1
   94ec0:	18bffd16 	blt	r3,r2,94eb8 <__s2b+0x48>
   94ec4:	9009883a 	mov	r4,r18
   94ec8:	009451c0 	call	9451c <_Balloc>
   94ecc:	1011883a 	mov	r8,r2
   94ed0:	d8800717 	ldw	r2,28(sp)
   94ed4:	00c00044 	movi	r3,1
   94ed8:	01800244 	movi	r6,9
   94edc:	40800515 	stw	r2,20(r8)
   94ee0:	40c00415 	stw	r3,16(r8)
   94ee4:	3440260e 	bge	r6,r17,94f80 <__s2b+0x110>
   94ee8:	3021883a 	mov	r16,r6
   94eec:	99ab883a 	add	r21,r19,r6
   94ef0:	9c05883a 	add	r2,r19,r16
   94ef4:	11c00007 	ldb	r7,0(r2)
   94ef8:	400b883a 	mov	r5,r8
   94efc:	9009883a 	mov	r4,r18
   94f00:	39fff404 	addi	r7,r7,-48
   94f04:	01800284 	movi	r6,10
   94f08:	0094c500 	call	94c50 <__multadd>
   94f0c:	84000044 	addi	r16,r16,1
   94f10:	1011883a 	mov	r8,r2
   94f14:	8c3ff61e 	bne	r17,r16,94ef0 <__s2b+0x80>
   94f18:	ac45883a 	add	r2,r21,r17
   94f1c:	117ffe04 	addi	r5,r2,-8
   94f20:	880d883a 	mov	r6,r17
   94f24:	35000c0e 	bge	r6,r20,94f58 <__s2b+0xe8>
   94f28:	a185c83a 	sub	r2,r20,r6
   94f2c:	2821883a 	mov	r16,r5
   94f30:	28a3883a 	add	r17,r5,r2
   94f34:	81c00007 	ldb	r7,0(r16)
   94f38:	400b883a 	mov	r5,r8
   94f3c:	9009883a 	mov	r4,r18
   94f40:	39fff404 	addi	r7,r7,-48
   94f44:	01800284 	movi	r6,10
   94f48:	0094c500 	call	94c50 <__multadd>
   94f4c:	84000044 	addi	r16,r16,1
   94f50:	1011883a 	mov	r8,r2
   94f54:	847ff71e 	bne	r16,r17,94f34 <__s2b+0xc4>
   94f58:	4005883a 	mov	r2,r8
   94f5c:	dfc00617 	ldw	ra,24(sp)
   94f60:	dd400517 	ldw	r21,20(sp)
   94f64:	dd000417 	ldw	r20,16(sp)
   94f68:	dcc00317 	ldw	r19,12(sp)
   94f6c:	dc800217 	ldw	r18,8(sp)
   94f70:	dc400117 	ldw	r17,4(sp)
   94f74:	dc000017 	ldw	r16,0(sp)
   94f78:	dec00704 	addi	sp,sp,28
   94f7c:	f800283a 	ret
   94f80:	99400284 	addi	r5,r19,10
   94f84:	003fe706 	br	94f24 <__s2b+0xb4>
   94f88:	000b883a 	mov	r5,zero
   94f8c:	003fcd06 	br	94ec4 <__s2b+0x54>

00094f90 <putc>:
   94f90:	defffc04 	addi	sp,sp,-16
   94f94:	dc800215 	stw	r18,8(sp)
   94f98:	048002b4 	movhi	r18,10
   94f9c:	9481b804 	addi	r18,r18,1760
   94fa0:	90c00017 	ldw	r3,0(r18)
   94fa4:	dc400115 	stw	r17,4(sp)
   94fa8:	dc000015 	stw	r16,0(sp)
   94fac:	dfc00315 	stw	ra,12(sp)
   94fb0:	2023883a 	mov	r17,r4
   94fb4:	2821883a 	mov	r16,r5
   94fb8:	18000226 	beq	r3,zero,94fc4 <putc+0x34>
   94fbc:	18800e17 	ldw	r2,56(r3)
   94fc0:	10001126 	beq	r2,zero,95008 <putc+0x78>
   94fc4:	80800217 	ldw	r2,8(r16)
   94fc8:	10ffffc4 	addi	r3,r2,-1
   94fcc:	80c00215 	stw	r3,8(r16)
   94fd0:	18001316 	blt	r3,zero,95020 <putc+0x90>
   94fd4:	80800017 	ldw	r2,0(r16)
   94fd8:	14400005 	stb	r17,0(r2)
   94fdc:	80c00017 	ldw	r3,0(r16)
   94fe0:	18800044 	addi	r2,r3,1
   94fe4:	18c00003 	ldbu	r3,0(r3)
   94fe8:	80800015 	stw	r2,0(r16)
   94fec:	1805883a 	mov	r2,r3
   94ff0:	dfc00317 	ldw	ra,12(sp)
   94ff4:	dc800217 	ldw	r18,8(sp)
   94ff8:	dc400117 	ldw	r17,4(sp)
   94ffc:	dc000017 	ldw	r16,0(sp)
   95000:	dec00404 	addi	sp,sp,16
   95004:	f800283a 	ret
   95008:	1809883a 	mov	r4,r3
   9500c:	008e08c0 	call	8e08c <__sinit>
   95010:	80800217 	ldw	r2,8(r16)
   95014:	10ffffc4 	addi	r3,r2,-1
   95018:	80c00215 	stw	r3,8(r16)
   9501c:	183fed0e 	bge	r3,zero,94fd4 <putc+0x44>
   95020:	80800617 	ldw	r2,24(r16)
   95024:	18800f16 	blt	r3,r2,95064 <putc+0xd4>
   95028:	80800017 	ldw	r2,0(r16)
   9502c:	14400005 	stb	r17,0(r2)
   95030:	81000017 	ldw	r4,0(r16)
   95034:	00800284 	movi	r2,10
   95038:	20c00003 	ldbu	r3,0(r4)
   9503c:	18801226 	beq	r3,r2,95088 <putc+0xf8>
   95040:	20800044 	addi	r2,r4,1
   95044:	80800015 	stw	r2,0(r16)
   95048:	1805883a 	mov	r2,r3
   9504c:	dfc00317 	ldw	ra,12(sp)
   95050:	dc800217 	ldw	r18,8(sp)
   95054:	dc400117 	ldw	r17,4(sp)
   95058:	dc000017 	ldw	r16,0(sp)
   9505c:	dec00404 	addi	sp,sp,16
   95060:	f800283a 	ret
   95064:	91000017 	ldw	r4,0(r18)
   95068:	880b883a 	mov	r5,r17
   9506c:	800d883a 	mov	r6,r16
   95070:	dfc00317 	ldw	ra,12(sp)
   95074:	dc800217 	ldw	r18,8(sp)
   95078:	dc400117 	ldw	r17,4(sp)
   9507c:	dc000017 	ldw	r16,0(sp)
   95080:	dec00404 	addi	sp,sp,16
   95084:	00959141 	jmpi	95914 <__swbuf_r>
   95088:	91000017 	ldw	r4,0(r18)
   9508c:	180b883a 	mov	r5,r3
   95090:	003ff606 	br	9506c <putc+0xdc>

00095094 <_putc_r>:
   95094:	defffc04 	addi	sp,sp,-16
   95098:	dc400215 	stw	r17,8(sp)
   9509c:	dc000115 	stw	r16,4(sp)
   950a0:	dfc00315 	stw	ra,12(sp)
   950a4:	2021883a 	mov	r16,r4
   950a8:	2823883a 	mov	r17,r5
   950ac:	20000226 	beq	r4,zero,950b8 <_putc_r+0x24>
   950b0:	20800e17 	ldw	r2,56(r4)
   950b4:	10001026 	beq	r2,zero,950f8 <_putc_r+0x64>
   950b8:	30800217 	ldw	r2,8(r6)
   950bc:	10ffffc4 	addi	r3,r2,-1
   950c0:	30c00215 	stw	r3,8(r6)
   950c4:	18001316 	blt	r3,zero,95114 <_putc_r+0x80>
   950c8:	30800017 	ldw	r2,0(r6)
   950cc:	14400005 	stb	r17,0(r2)
   950d0:	30c00017 	ldw	r3,0(r6)
   950d4:	18800044 	addi	r2,r3,1
   950d8:	18c00003 	ldbu	r3,0(r3)
   950dc:	30800015 	stw	r2,0(r6)
   950e0:	1805883a 	mov	r2,r3
   950e4:	dfc00317 	ldw	ra,12(sp)
   950e8:	dc400217 	ldw	r17,8(sp)
   950ec:	dc000117 	ldw	r16,4(sp)
   950f0:	dec00404 	addi	sp,sp,16
   950f4:	f800283a 	ret
   950f8:	d9800015 	stw	r6,0(sp)
   950fc:	008e08c0 	call	8e08c <__sinit>
   95100:	d9800017 	ldw	r6,0(sp)
   95104:	30800217 	ldw	r2,8(r6)
   95108:	10ffffc4 	addi	r3,r2,-1
   9510c:	30c00215 	stw	r3,8(r6)
   95110:	183fed0e 	bge	r3,zero,950c8 <_putc_r+0x34>
   95114:	30800617 	ldw	r2,24(r6)
   95118:	18800e16 	blt	r3,r2,95154 <_putc_r+0xc0>
   9511c:	30800017 	ldw	r2,0(r6)
   95120:	14400005 	stb	r17,0(r2)
   95124:	31000017 	ldw	r4,0(r6)
   95128:	00800284 	movi	r2,10
   9512c:	20c00003 	ldbu	r3,0(r4)
   95130:	18800f26 	beq	r3,r2,95170 <_putc_r+0xdc>
   95134:	20800044 	addi	r2,r4,1
   95138:	30800015 	stw	r2,0(r6)
   9513c:	1805883a 	mov	r2,r3
   95140:	dfc00317 	ldw	ra,12(sp)
   95144:	dc400217 	ldw	r17,8(sp)
   95148:	dc000117 	ldw	r16,4(sp)
   9514c:	dec00404 	addi	sp,sp,16
   95150:	f800283a 	ret
   95154:	8009883a 	mov	r4,r16
   95158:	880b883a 	mov	r5,r17
   9515c:	dfc00317 	ldw	ra,12(sp)
   95160:	dc400217 	ldw	r17,8(sp)
   95164:	dc000117 	ldw	r16,4(sp)
   95168:	dec00404 	addi	sp,sp,16
   9516c:	00959141 	jmpi	95914 <__swbuf_r>
   95170:	8009883a 	mov	r4,r16
   95174:	180b883a 	mov	r5,r3
   95178:	003ff806 	br	9515c <_putc_r+0xc8>

0009517c <_read_r>:
   9517c:	defffd04 	addi	sp,sp,-12
   95180:	dc000015 	stw	r16,0(sp)
   95184:	040002b4 	movhi	r16,10
   95188:	84096a04 	addi	r16,r16,9640
   9518c:	dc400115 	stw	r17,4(sp)
   95190:	80000015 	stw	zero,0(r16)
   95194:	2023883a 	mov	r17,r4
   95198:	2809883a 	mov	r4,r5
   9519c:	300b883a 	mov	r5,r6
   951a0:	380d883a 	mov	r6,r7
   951a4:	dfc00215 	stw	ra,8(sp)
   951a8:	00984d80 	call	984d8 <read>
   951ac:	1007883a 	mov	r3,r2
   951b0:	00bfffc4 	movi	r2,-1
   951b4:	18800626 	beq	r3,r2,951d0 <_read_r+0x54>
   951b8:	1805883a 	mov	r2,r3
   951bc:	dfc00217 	ldw	ra,8(sp)
   951c0:	dc400117 	ldw	r17,4(sp)
   951c4:	dc000017 	ldw	r16,0(sp)
   951c8:	dec00304 	addi	sp,sp,12
   951cc:	f800283a 	ret
   951d0:	80800017 	ldw	r2,0(r16)
   951d4:	103ff826 	beq	r2,zero,951b8 <_read_r+0x3c>
   951d8:	88800015 	stw	r2,0(r17)
   951dc:	1805883a 	mov	r2,r3
   951e0:	dfc00217 	ldw	ra,8(sp)
   951e4:	dc400117 	ldw	r17,4(sp)
   951e8:	dc000017 	ldw	r16,0(sp)
   951ec:	dec00304 	addi	sp,sp,12
   951f0:	f800283a 	ret

000951f4 <_realloc_r>:
   951f4:	defff404 	addi	sp,sp,-48
   951f8:	dd800815 	stw	r22,32(sp)
   951fc:	dc800415 	stw	r18,16(sp)
   95200:	dc400315 	stw	r17,12(sp)
   95204:	dfc00b15 	stw	ra,44(sp)
   95208:	df000a15 	stw	fp,40(sp)
   9520c:	ddc00915 	stw	r23,36(sp)
   95210:	dd400715 	stw	r21,28(sp)
   95214:	dd000615 	stw	r20,24(sp)
   95218:	dcc00515 	stw	r19,20(sp)
   9521c:	dc000215 	stw	r16,8(sp)
   95220:	2825883a 	mov	r18,r5
   95224:	3023883a 	mov	r17,r6
   95228:	202d883a 	mov	r22,r4
   9522c:	2800c926 	beq	r5,zero,95554 <_realloc_r+0x360>
   95230:	00984880 	call	98488 <__malloc_lock>
   95234:	943ffe04 	addi	r16,r18,-8
   95238:	88c002c4 	addi	r3,r17,11
   9523c:	00800584 	movi	r2,22
   95240:	82000117 	ldw	r8,4(r16)
   95244:	10c01b2e 	bgeu	r2,r3,952b4 <_realloc_r+0xc0>
   95248:	00bffe04 	movi	r2,-8
   9524c:	188e703a 	and	r7,r3,r2
   95250:	3839883a 	mov	fp,r7
   95254:	38001a16 	blt	r7,zero,952c0 <_realloc_r+0xcc>
   95258:	e4401936 	bltu	fp,r17,952c0 <_realloc_r+0xcc>
   9525c:	013fff04 	movi	r4,-4
   95260:	4126703a 	and	r19,r8,r4
   95264:	99c02616 	blt	r19,r7,95300 <_realloc_r+0x10c>
   95268:	802b883a 	mov	r21,r16
   9526c:	9829883a 	mov	r20,r19
   95270:	84000204 	addi	r16,r16,8
   95274:	a80f883a 	mov	r7,r21
   95278:	a70dc83a 	sub	r6,r20,fp
   9527c:	008003c4 	movi	r2,15
   95280:	1180c136 	bltu	r2,r6,95588 <_realloc_r+0x394>
   95284:	38800117 	ldw	r2,4(r7)
   95288:	a549883a 	add	r4,r20,r21
   9528c:	1080004c 	andi	r2,r2,1
   95290:	a084b03a 	or	r2,r20,r2
   95294:	38800115 	stw	r2,4(r7)
   95298:	20c00117 	ldw	r3,4(r4)
   9529c:	18c00054 	ori	r3,r3,1
   952a0:	20c00115 	stw	r3,4(r4)
   952a4:	b009883a 	mov	r4,r22
   952a8:	00984b00 	call	984b0 <__malloc_unlock>
   952ac:	8023883a 	mov	r17,r16
   952b0:	00000606 	br	952cc <_realloc_r+0xd8>
   952b4:	01c00404 	movi	r7,16
   952b8:	3839883a 	mov	fp,r7
   952bc:	e47fe72e 	bgeu	fp,r17,9525c <_realloc_r+0x68>
   952c0:	00800304 	movi	r2,12
   952c4:	0023883a 	mov	r17,zero
   952c8:	b0800015 	stw	r2,0(r22)
   952cc:	8805883a 	mov	r2,r17
   952d0:	dfc00b17 	ldw	ra,44(sp)
   952d4:	df000a17 	ldw	fp,40(sp)
   952d8:	ddc00917 	ldw	r23,36(sp)
   952dc:	dd800817 	ldw	r22,32(sp)
   952e0:	dd400717 	ldw	r21,28(sp)
   952e4:	dd000617 	ldw	r20,24(sp)
   952e8:	dcc00517 	ldw	r19,20(sp)
   952ec:	dc800417 	ldw	r18,16(sp)
   952f0:	dc400317 	ldw	r17,12(sp)
   952f4:	dc000217 	ldw	r16,8(sp)
   952f8:	dec00c04 	addi	sp,sp,48
   952fc:	f800283a 	ret
   95300:	008002b4 	movhi	r2,10
   95304:	10bbce04 	addi	r2,r2,-4296
   95308:	12400217 	ldw	r9,8(r2)
   9530c:	84cd883a 	add	r6,r16,r19
   95310:	802b883a 	mov	r21,r16
   95314:	3240b926 	beq	r6,r9,955fc <_realloc_r+0x408>
   95318:	31400117 	ldw	r5,4(r6)
   9531c:	00bfff84 	movi	r2,-2
   95320:	2884703a 	and	r2,r5,r2
   95324:	1185883a 	add	r2,r2,r6
   95328:	10c00117 	ldw	r3,4(r2)
   9532c:	18c0004c 	andi	r3,r3,1
   95330:	1807003a 	cmpeq	r3,r3,zero
   95334:	1800a326 	beq	r3,zero,955c4 <_realloc_r+0x3d0>
   95338:	2908703a 	and	r4,r5,r4
   9533c:	9929883a 	add	r20,r19,r4
   95340:	a1c0a30e 	bge	r20,r7,955d0 <_realloc_r+0x3dc>
   95344:	4080004c 	andi	r2,r8,1
   95348:	1000551e 	bne	r2,zero,954a0 <_realloc_r+0x2ac>
   9534c:	80800017 	ldw	r2,0(r16)
   95350:	80afc83a 	sub	r23,r16,r2
   95354:	b8c00117 	ldw	r3,4(r23)
   95358:	00bfff04 	movi	r2,-4
   9535c:	1884703a 	and	r2,r3,r2
   95360:	30002e26 	beq	r6,zero,9541c <_realloc_r+0x228>
   95364:	3240b926 	beq	r6,r9,9564c <_realloc_r+0x458>
   95368:	98a9883a 	add	r20,r19,r2
   9536c:	2509883a 	add	r4,r4,r20
   95370:	d9000015 	stw	r4,0(sp)
   95374:	21c02a16 	blt	r4,r7,95420 <_realloc_r+0x22c>
   95378:	30800317 	ldw	r2,12(r6)
   9537c:	30c00217 	ldw	r3,8(r6)
   95380:	01400904 	movi	r5,36
   95384:	99bfff04 	addi	r6,r19,-4
   95388:	18800315 	stw	r2,12(r3)
   9538c:	10c00215 	stw	r3,8(r2)
   95390:	b9000317 	ldw	r4,12(r23)
   95394:	b8800217 	ldw	r2,8(r23)
   95398:	b82b883a 	mov	r21,r23
   9539c:	bc000204 	addi	r16,r23,8
   953a0:	20800215 	stw	r2,8(r4)
   953a4:	11000315 	stw	r4,12(r2)
   953a8:	2980e436 	bltu	r5,r6,9573c <_realloc_r+0x548>
   953ac:	008004c4 	movi	r2,19
   953b0:	9009883a 	mov	r4,r18
   953b4:	8011883a 	mov	r8,r16
   953b8:	11800f2e 	bgeu	r2,r6,953f8 <_realloc_r+0x204>
   953bc:	90800017 	ldw	r2,0(r18)
   953c0:	ba000404 	addi	r8,r23,16
   953c4:	91000204 	addi	r4,r18,8
   953c8:	b8800215 	stw	r2,8(r23)
   953cc:	90c00117 	ldw	r3,4(r18)
   953d0:	008006c4 	movi	r2,27
   953d4:	b8c00315 	stw	r3,12(r23)
   953d8:	1180072e 	bgeu	r2,r6,953f8 <_realloc_r+0x204>
   953dc:	90c00217 	ldw	r3,8(r18)
   953e0:	ba000604 	addi	r8,r23,24
   953e4:	91000404 	addi	r4,r18,16
   953e8:	b8c00415 	stw	r3,16(r23)
   953ec:	90800317 	ldw	r2,12(r18)
   953f0:	b8800515 	stw	r2,20(r23)
   953f4:	3140e726 	beq	r6,r5,95794 <_realloc_r+0x5a0>
   953f8:	20800017 	ldw	r2,0(r4)
   953fc:	dd000017 	ldw	r20,0(sp)
   95400:	b80f883a 	mov	r7,r23
   95404:	40800015 	stw	r2,0(r8)
   95408:	20c00117 	ldw	r3,4(r4)
   9540c:	40c00115 	stw	r3,4(r8)
   95410:	20800217 	ldw	r2,8(r4)
   95414:	40800215 	stw	r2,8(r8)
   95418:	003f9706 	br	95278 <_realloc_r+0x84>
   9541c:	98a9883a 	add	r20,r19,r2
   95420:	a1c01f16 	blt	r20,r7,954a0 <_realloc_r+0x2ac>
   95424:	b8c00317 	ldw	r3,12(r23)
   95428:	b8800217 	ldw	r2,8(r23)
   9542c:	99bfff04 	addi	r6,r19,-4
   95430:	01400904 	movi	r5,36
   95434:	b82b883a 	mov	r21,r23
   95438:	18800215 	stw	r2,8(r3)
   9543c:	10c00315 	stw	r3,12(r2)
   95440:	bc000204 	addi	r16,r23,8
   95444:	2980c336 	bltu	r5,r6,95754 <_realloc_r+0x560>
   95448:	008004c4 	movi	r2,19
   9544c:	9009883a 	mov	r4,r18
   95450:	8011883a 	mov	r8,r16
   95454:	11800f2e 	bgeu	r2,r6,95494 <_realloc_r+0x2a0>
   95458:	90800017 	ldw	r2,0(r18)
   9545c:	ba000404 	addi	r8,r23,16
   95460:	91000204 	addi	r4,r18,8
   95464:	b8800215 	stw	r2,8(r23)
   95468:	90c00117 	ldw	r3,4(r18)
   9546c:	008006c4 	movi	r2,27
   95470:	b8c00315 	stw	r3,12(r23)
   95474:	1180072e 	bgeu	r2,r6,95494 <_realloc_r+0x2a0>
   95478:	90c00217 	ldw	r3,8(r18)
   9547c:	ba000604 	addi	r8,r23,24
   95480:	91000404 	addi	r4,r18,16
   95484:	b8c00415 	stw	r3,16(r23)
   95488:	90800317 	ldw	r2,12(r18)
   9548c:	b8800515 	stw	r2,20(r23)
   95490:	3140c726 	beq	r6,r5,957b0 <_realloc_r+0x5bc>
   95494:	20800017 	ldw	r2,0(r4)
   95498:	b80f883a 	mov	r7,r23
   9549c:	003fd906 	br	95404 <_realloc_r+0x210>
   954a0:	880b883a 	mov	r5,r17
   954a4:	b009883a 	mov	r4,r22
   954a8:	008e4640 	call	8e464 <_malloc_r>
   954ac:	1023883a 	mov	r17,r2
   954b0:	10002526 	beq	r2,zero,95548 <_realloc_r+0x354>
   954b4:	80800117 	ldw	r2,4(r16)
   954b8:	00ffff84 	movi	r3,-2
   954bc:	893ffe04 	addi	r4,r17,-8
   954c0:	10c4703a 	and	r2,r2,r3
   954c4:	8085883a 	add	r2,r16,r2
   954c8:	20809526 	beq	r4,r2,95720 <_realloc_r+0x52c>
   954cc:	99bfff04 	addi	r6,r19,-4
   954d0:	01c00904 	movi	r7,36
   954d4:	39804536 	bltu	r7,r6,955ec <_realloc_r+0x3f8>
   954d8:	008004c4 	movi	r2,19
   954dc:	9009883a 	mov	r4,r18
   954e0:	880b883a 	mov	r5,r17
   954e4:	11800f2e 	bgeu	r2,r6,95524 <_realloc_r+0x330>
   954e8:	90800017 	ldw	r2,0(r18)
   954ec:	89400204 	addi	r5,r17,8
   954f0:	91000204 	addi	r4,r18,8
   954f4:	88800015 	stw	r2,0(r17)
   954f8:	90c00117 	ldw	r3,4(r18)
   954fc:	008006c4 	movi	r2,27
   95500:	88c00115 	stw	r3,4(r17)
   95504:	1180072e 	bgeu	r2,r6,95524 <_realloc_r+0x330>
   95508:	90c00217 	ldw	r3,8(r18)
   9550c:	89400404 	addi	r5,r17,16
   95510:	91000404 	addi	r4,r18,16
   95514:	88c00215 	stw	r3,8(r17)
   95518:	90800317 	ldw	r2,12(r18)
   9551c:	88800315 	stw	r2,12(r17)
   95520:	31c09126 	beq	r6,r7,95768 <_realloc_r+0x574>
   95524:	20800017 	ldw	r2,0(r4)
   95528:	28800015 	stw	r2,0(r5)
   9552c:	20c00117 	ldw	r3,4(r4)
   95530:	28c00115 	stw	r3,4(r5)
   95534:	20800217 	ldw	r2,8(r4)
   95538:	28800215 	stw	r2,8(r5)
   9553c:	900b883a 	mov	r5,r18
   95540:	b009883a 	mov	r4,r22
   95544:	009343c0 	call	9343c <_free_r>
   95548:	b009883a 	mov	r4,r22
   9554c:	00984b00 	call	984b0 <__malloc_unlock>
   95550:	003f5e06 	br	952cc <_realloc_r+0xd8>
   95554:	300b883a 	mov	r5,r6
   95558:	dfc00b17 	ldw	ra,44(sp)
   9555c:	df000a17 	ldw	fp,40(sp)
   95560:	ddc00917 	ldw	r23,36(sp)
   95564:	dd800817 	ldw	r22,32(sp)
   95568:	dd400717 	ldw	r21,28(sp)
   9556c:	dd000617 	ldw	r20,24(sp)
   95570:	dcc00517 	ldw	r19,20(sp)
   95574:	dc800417 	ldw	r18,16(sp)
   95578:	dc400317 	ldw	r17,12(sp)
   9557c:	dc000217 	ldw	r16,8(sp)
   95580:	dec00c04 	addi	sp,sp,48
   95584:	008e4641 	jmpi	8e464 <_malloc_r>
   95588:	38800117 	ldw	r2,4(r7)
   9558c:	e54b883a 	add	r5,fp,r21
   95590:	31000054 	ori	r4,r6,1
   95594:	1080004c 	andi	r2,r2,1
   95598:	1704b03a 	or	r2,r2,fp
   9559c:	38800115 	stw	r2,4(r7)
   955a0:	29000115 	stw	r4,4(r5)
   955a4:	2987883a 	add	r3,r5,r6
   955a8:	18800117 	ldw	r2,4(r3)
   955ac:	29400204 	addi	r5,r5,8
   955b0:	b009883a 	mov	r4,r22
   955b4:	10800054 	ori	r2,r2,1
   955b8:	18800115 	stw	r2,4(r3)
   955bc:	009343c0 	call	9343c <_free_r>
   955c0:	003f3806 	br	952a4 <_realloc_r+0xb0>
   955c4:	000d883a 	mov	r6,zero
   955c8:	0009883a 	mov	r4,zero
   955cc:	003f5d06 	br	95344 <_realloc_r+0x150>
   955d0:	30c00217 	ldw	r3,8(r6)
   955d4:	30800317 	ldw	r2,12(r6)
   955d8:	800f883a 	mov	r7,r16
   955dc:	84000204 	addi	r16,r16,8
   955e0:	10c00215 	stw	r3,8(r2)
   955e4:	18800315 	stw	r2,12(r3)
   955e8:	003f2306 	br	95278 <_realloc_r+0x84>
   955ec:	8809883a 	mov	r4,r17
   955f0:	900b883a 	mov	r5,r18
   955f4:	0093ebc0 	call	93ebc <memmove>
   955f8:	003fd006 	br	9553c <_realloc_r+0x348>
   955fc:	30800117 	ldw	r2,4(r6)
   95600:	e0c00404 	addi	r3,fp,16
   95604:	1108703a 	and	r4,r2,r4
   95608:	9905883a 	add	r2,r19,r4
   9560c:	10ff4d16 	blt	r2,r3,95344 <_realloc_r+0x150>
   95610:	1705c83a 	sub	r2,r2,fp
   95614:	870b883a 	add	r5,r16,fp
   95618:	10800054 	ori	r2,r2,1
   9561c:	28800115 	stw	r2,4(r5)
   95620:	80c00117 	ldw	r3,4(r16)
   95624:	008002b4 	movhi	r2,10
   95628:	10bbce04 	addi	r2,r2,-4296
   9562c:	b009883a 	mov	r4,r22
   95630:	18c0004c 	andi	r3,r3,1
   95634:	e0c6b03a 	or	r3,fp,r3
   95638:	11400215 	stw	r5,8(r2)
   9563c:	80c00115 	stw	r3,4(r16)
   95640:	00984b00 	call	984b0 <__malloc_unlock>
   95644:	84400204 	addi	r17,r16,8
   95648:	003f2006 	br	952cc <_realloc_r+0xd8>
   9564c:	98a9883a 	add	r20,r19,r2
   95650:	2509883a 	add	r4,r4,r20
   95654:	e0800404 	addi	r2,fp,16
   95658:	d9000115 	stw	r4,4(sp)
   9565c:	20bf7016 	blt	r4,r2,95420 <_realloc_r+0x22c>
   95660:	b8c00317 	ldw	r3,12(r23)
   95664:	b8800217 	ldw	r2,8(r23)
   95668:	99bfff04 	addi	r6,r19,-4
   9566c:	01400904 	movi	r5,36
   95670:	18800215 	stw	r2,8(r3)
   95674:	10c00315 	stw	r3,12(r2)
   95678:	bc400204 	addi	r17,r23,8
   9567c:	29804136 	bltu	r5,r6,95784 <_realloc_r+0x590>
   95680:	008004c4 	movi	r2,19
   95684:	9009883a 	mov	r4,r18
   95688:	880f883a 	mov	r7,r17
   9568c:	11800f2e 	bgeu	r2,r6,956cc <_realloc_r+0x4d8>
   95690:	90800017 	ldw	r2,0(r18)
   95694:	b9c00404 	addi	r7,r23,16
   95698:	91000204 	addi	r4,r18,8
   9569c:	b8800215 	stw	r2,8(r23)
   956a0:	90c00117 	ldw	r3,4(r18)
   956a4:	008006c4 	movi	r2,27
   956a8:	b8c00315 	stw	r3,12(r23)
   956ac:	1180072e 	bgeu	r2,r6,956cc <_realloc_r+0x4d8>
   956b0:	90c00217 	ldw	r3,8(r18)
   956b4:	b9c00604 	addi	r7,r23,24
   956b8:	91000404 	addi	r4,r18,16
   956bc:	b8c00415 	stw	r3,16(r23)
   956c0:	90800317 	ldw	r2,12(r18)
   956c4:	b8800515 	stw	r2,20(r23)
   956c8:	31404026 	beq	r6,r5,957cc <_realloc_r+0x5d8>
   956cc:	20800017 	ldw	r2,0(r4)
   956d0:	38800015 	stw	r2,0(r7)
   956d4:	20c00117 	ldw	r3,4(r4)
   956d8:	38c00115 	stw	r3,4(r7)
   956dc:	20800217 	ldw	r2,8(r4)
   956e0:	38800215 	stw	r2,8(r7)
   956e4:	d8c00117 	ldw	r3,4(sp)
   956e8:	bf0b883a 	add	r5,r23,fp
   956ec:	b009883a 	mov	r4,r22
   956f0:	1f05c83a 	sub	r2,r3,fp
   956f4:	10800054 	ori	r2,r2,1
   956f8:	28800115 	stw	r2,4(r5)
   956fc:	b8c00117 	ldw	r3,4(r23)
   95700:	008002b4 	movhi	r2,10
   95704:	10bbce04 	addi	r2,r2,-4296
   95708:	11400215 	stw	r5,8(r2)
   9570c:	18c0004c 	andi	r3,r3,1
   95710:	e0c6b03a 	or	r3,fp,r3
   95714:	b8c00115 	stw	r3,4(r23)
   95718:	00984b00 	call	984b0 <__malloc_unlock>
   9571c:	003eeb06 	br	952cc <_realloc_r+0xd8>
   95720:	20800117 	ldw	r2,4(r4)
   95724:	00ffff04 	movi	r3,-4
   95728:	800f883a 	mov	r7,r16
   9572c:	10c4703a 	and	r2,r2,r3
   95730:	98a9883a 	add	r20,r19,r2
   95734:	84000204 	addi	r16,r16,8
   95738:	003ecf06 	br	95278 <_realloc_r+0x84>
   9573c:	900b883a 	mov	r5,r18
   95740:	8009883a 	mov	r4,r16
   95744:	0093ebc0 	call	93ebc <memmove>
   95748:	dd000017 	ldw	r20,0(sp)
   9574c:	b80f883a 	mov	r7,r23
   95750:	003ec906 	br	95278 <_realloc_r+0x84>
   95754:	900b883a 	mov	r5,r18
   95758:	8009883a 	mov	r4,r16
   9575c:	0093ebc0 	call	93ebc <memmove>
   95760:	b80f883a 	mov	r7,r23
   95764:	003ec406 	br	95278 <_realloc_r+0x84>
   95768:	90c00417 	ldw	r3,16(r18)
   9576c:	89400604 	addi	r5,r17,24
   95770:	91000604 	addi	r4,r18,24
   95774:	88c00415 	stw	r3,16(r17)
   95778:	90800517 	ldw	r2,20(r18)
   9577c:	88800515 	stw	r2,20(r17)
   95780:	003f6806 	br	95524 <_realloc_r+0x330>
   95784:	900b883a 	mov	r5,r18
   95788:	8809883a 	mov	r4,r17
   9578c:	0093ebc0 	call	93ebc <memmove>
   95790:	003fd406 	br	956e4 <_realloc_r+0x4f0>
   95794:	90c00417 	ldw	r3,16(r18)
   95798:	91000604 	addi	r4,r18,24
   9579c:	ba000804 	addi	r8,r23,32
   957a0:	b8c00615 	stw	r3,24(r23)
   957a4:	90800517 	ldw	r2,20(r18)
   957a8:	b8800715 	stw	r2,28(r23)
   957ac:	003f1206 	br	953f8 <_realloc_r+0x204>
   957b0:	90c00417 	ldw	r3,16(r18)
   957b4:	91000604 	addi	r4,r18,24
   957b8:	ba000804 	addi	r8,r23,32
   957bc:	b8c00615 	stw	r3,24(r23)
   957c0:	90800517 	ldw	r2,20(r18)
   957c4:	b8800715 	stw	r2,28(r23)
   957c8:	003f3206 	br	95494 <_realloc_r+0x2a0>
   957cc:	90c00417 	ldw	r3,16(r18)
   957d0:	91000604 	addi	r4,r18,24
   957d4:	b9c00804 	addi	r7,r23,32
   957d8:	b8c00615 	stw	r3,24(r23)
   957dc:	90800517 	ldw	r2,20(r18)
   957e0:	b8800715 	stw	r2,28(r23)
   957e4:	003fb906 	br	956cc <_realloc_r+0x4d8>

000957e8 <__isinfd>:
   957e8:	200d883a 	mov	r6,r4
   957ec:	0109c83a 	sub	r4,zero,r4
   957f0:	2188b03a 	or	r4,r4,r6
   957f4:	2008d7fa 	srli	r4,r4,31
   957f8:	00a00034 	movhi	r2,32768
   957fc:	10bfffc4 	addi	r2,r2,-1
   95800:	1144703a 	and	r2,r2,r5
   95804:	2088b03a 	or	r4,r4,r2
   95808:	009ffc34 	movhi	r2,32752
   9580c:	1105c83a 	sub	r2,r2,r4
   95810:	0087c83a 	sub	r3,zero,r2
   95814:	10c4b03a 	or	r2,r2,r3
   95818:	1004d7fa 	srli	r2,r2,31
   9581c:	00c00044 	movi	r3,1
   95820:	1885c83a 	sub	r2,r3,r2
   95824:	f800283a 	ret

00095828 <__isnand>:
   95828:	200d883a 	mov	r6,r4
   9582c:	0109c83a 	sub	r4,zero,r4
   95830:	2188b03a 	or	r4,r4,r6
   95834:	2008d7fa 	srli	r4,r4,31
   95838:	00a00034 	movhi	r2,32768
   9583c:	10bfffc4 	addi	r2,r2,-1
   95840:	1144703a 	and	r2,r2,r5
   95844:	2088b03a 	or	r4,r4,r2
   95848:	009ffc34 	movhi	r2,32752
   9584c:	1105c83a 	sub	r2,r2,r4
   95850:	1004d7fa 	srli	r2,r2,31
   95854:	f800283a 	ret

00095858 <strcmp>:
   95858:	2144b03a 	or	r2,r4,r5
   9585c:	108000cc 	andi	r2,r2,3
   95860:	10001d1e 	bne	r2,zero,958d8 <strcmp+0x80>
   95864:	200f883a 	mov	r7,r4
   95868:	28800017 	ldw	r2,0(r5)
   9586c:	21000017 	ldw	r4,0(r4)
   95870:	280d883a 	mov	r6,r5
   95874:	2080161e 	bne	r4,r2,958d0 <strcmp+0x78>
   95878:	023fbff4 	movhi	r8,65279
   9587c:	423fbfc4 	addi	r8,r8,-257
   95880:	2207883a 	add	r3,r4,r8
   95884:	01602074 	movhi	r5,32897
   95888:	29602004 	addi	r5,r5,-32640
   9588c:	1946703a 	and	r3,r3,r5
   95890:	0104303a 	nor	r2,zero,r4
   95894:	10c4703a 	and	r2,r2,r3
   95898:	10001c1e 	bne	r2,zero,9590c <strcmp+0xb4>
   9589c:	4013883a 	mov	r9,r8
   958a0:	2811883a 	mov	r8,r5
   958a4:	00000106 	br	958ac <strcmp+0x54>
   958a8:	1800181e 	bne	r3,zero,9590c <strcmp+0xb4>
   958ac:	39c00104 	addi	r7,r7,4
   958b0:	39000017 	ldw	r4,0(r7)
   958b4:	31800104 	addi	r6,r6,4
   958b8:	31400017 	ldw	r5,0(r6)
   958bc:	2245883a 	add	r2,r4,r9
   958c0:	1204703a 	and	r2,r2,r8
   958c4:	0106303a 	nor	r3,zero,r4
   958c8:	1886703a 	and	r3,r3,r2
   958cc:	217ff626 	beq	r4,r5,958a8 <strcmp+0x50>
   958d0:	3809883a 	mov	r4,r7
   958d4:	300b883a 	mov	r5,r6
   958d8:	20c00007 	ldb	r3,0(r4)
   958dc:	1800051e 	bne	r3,zero,958f4 <strcmp+0x9c>
   958e0:	00000606 	br	958fc <strcmp+0xa4>
   958e4:	21000044 	addi	r4,r4,1
   958e8:	20c00007 	ldb	r3,0(r4)
   958ec:	29400044 	addi	r5,r5,1
   958f0:	18000226 	beq	r3,zero,958fc <strcmp+0xa4>
   958f4:	28800007 	ldb	r2,0(r5)
   958f8:	18bffa26 	beq	r3,r2,958e4 <strcmp+0x8c>
   958fc:	20c00003 	ldbu	r3,0(r4)
   95900:	28800003 	ldbu	r2,0(r5)
   95904:	1885c83a 	sub	r2,r3,r2
   95908:	f800283a 	ret
   9590c:	0005883a 	mov	r2,zero
   95910:	f800283a 	ret

00095914 <__swbuf_r>:
   95914:	defffc04 	addi	sp,sp,-16
   95918:	dc400215 	stw	r17,8(sp)
   9591c:	dc000115 	stw	r16,4(sp)
   95920:	dfc00315 	stw	ra,12(sp)
   95924:	2023883a 	mov	r17,r4
   95928:	2821883a 	mov	r16,r5
   9592c:	20000226 	beq	r4,zero,95938 <__swbuf_r+0x24>
   95930:	20800e17 	ldw	r2,56(r4)
   95934:	10002f26 	beq	r2,zero,959f4 <__swbuf_r+0xe0>
   95938:	3080030b 	ldhu	r2,12(r6)
   9593c:	30c00617 	ldw	r3,24(r6)
   95940:	1080020c 	andi	r2,r2,8
   95944:	30c00215 	stw	r3,8(r6)
   95948:	10002226 	beq	r2,zero,959d4 <__swbuf_r+0xc0>
   9594c:	30c00417 	ldw	r3,16(r6)
   95950:	18002026 	beq	r3,zero,959d4 <__swbuf_r+0xc0>
   95954:	31000017 	ldw	r4,0(r6)
   95958:	30800517 	ldw	r2,20(r6)
   9595c:	20c7c83a 	sub	r3,r4,r3
   95960:	18802f0e 	bge	r3,r2,95a20 <__swbuf_r+0x10c>
   95964:	19400044 	addi	r5,r3,1
   95968:	30800217 	ldw	r2,8(r6)
   9596c:	84003fcc 	andi	r16,r16,255
   95970:	20c00044 	addi	r3,r4,1
   95974:	10bfffc4 	addi	r2,r2,-1
   95978:	30800215 	stw	r2,8(r6)
   9597c:	24000005 	stb	r16,0(r4)
   95980:	30800517 	ldw	r2,20(r6)
   95984:	30c00015 	stw	r3,0(r6)
   95988:	11400c26 	beq	r2,r5,959bc <__swbuf_r+0xa8>
   9598c:	3080030b 	ldhu	r2,12(r6)
   95990:	1080004c 	andi	r2,r2,1
   95994:	1005003a 	cmpeq	r2,r2,zero
   95998:	10000626 	beq	r2,zero,959b4 <__swbuf_r+0xa0>
   9599c:	8005883a 	mov	r2,r16
   959a0:	dfc00317 	ldw	ra,12(sp)
   959a4:	dc400217 	ldw	r17,8(sp)
   959a8:	dc000117 	ldw	r16,4(sp)
   959ac:	dec00404 	addi	sp,sp,16
   959b0:	f800283a 	ret
   959b4:	00800284 	movi	r2,10
   959b8:	80bff81e 	bne	r16,r2,9599c <__swbuf_r+0x88>
   959bc:	8809883a 	mov	r4,r17
   959c0:	300b883a 	mov	r5,r6
   959c4:	00930e00 	call	930e0 <_fflush_r>
   959c8:	103ff426 	beq	r2,zero,9599c <__swbuf_r+0x88>
   959cc:	043fffc4 	movi	r16,-1
   959d0:	003ff206 	br	9599c <__swbuf_r+0x88>
   959d4:	300b883a 	mov	r5,r6
   959d8:	8809883a 	mov	r4,r17
   959dc:	d9800015 	stw	r6,0(sp)
   959e0:	00916440 	call	91644 <__swsetup_r>
   959e4:	d9800017 	ldw	r6,0(sp)
   959e8:	1000061e 	bne	r2,zero,95a04 <__swbuf_r+0xf0>
   959ec:	30c00417 	ldw	r3,16(r6)
   959f0:	003fd806 	br	95954 <__swbuf_r+0x40>
   959f4:	d9800015 	stw	r6,0(sp)
   959f8:	008e08c0 	call	8e08c <__sinit>
   959fc:	d9800017 	ldw	r6,0(sp)
   95a00:	003fcd06 	br	95938 <__swbuf_r+0x24>
   95a04:	3080030b 	ldhu	r2,12(r6)
   95a08:	00c00244 	movi	r3,9
   95a0c:	043fffc4 	movi	r16,-1
   95a10:	10801014 	ori	r2,r2,64
   95a14:	3080030d 	sth	r2,12(r6)
   95a18:	88c00015 	stw	r3,0(r17)
   95a1c:	003fdf06 	br	9599c <__swbuf_r+0x88>
   95a20:	300b883a 	mov	r5,r6
   95a24:	8809883a 	mov	r4,r17
   95a28:	d9800015 	stw	r6,0(sp)
   95a2c:	00930e00 	call	930e0 <_fflush_r>
   95a30:	d9800017 	ldw	r6,0(sp)
   95a34:	103fe51e 	bne	r2,zero,959cc <__swbuf_r+0xb8>
   95a38:	31000017 	ldw	r4,0(r6)
   95a3c:	01400044 	movi	r5,1
   95a40:	003fc906 	br	95968 <__swbuf_r+0x54>

00095a44 <__swbuf>:
   95a44:	018002b4 	movhi	r6,10
   95a48:	3181b804 	addi	r6,r6,1760
   95a4c:	2007883a 	mov	r3,r4
   95a50:	31000017 	ldw	r4,0(r6)
   95a54:	280d883a 	mov	r6,r5
   95a58:	180b883a 	mov	r5,r3
   95a5c:	00959141 	jmpi	95914 <__swbuf_r>

00095a60 <_calloc_r>:
   95a60:	298b383a 	mul	r5,r5,r6
   95a64:	defffe04 	addi	sp,sp,-8
   95a68:	dc000015 	stw	r16,0(sp)
   95a6c:	dfc00115 	stw	ra,4(sp)
   95a70:	008e4640 	call	8e464 <_malloc_r>
   95a74:	1021883a 	mov	r16,r2
   95a78:	01c00904 	movi	r7,36
   95a7c:	10000d26 	beq	r2,zero,95ab4 <_calloc_r+0x54>
   95a80:	10ffff17 	ldw	r3,-4(r2)
   95a84:	1009883a 	mov	r4,r2
   95a88:	00bfff04 	movi	r2,-4
   95a8c:	1886703a 	and	r3,r3,r2
   95a90:	1887883a 	add	r3,r3,r2
   95a94:	180d883a 	mov	r6,r3
   95a98:	000b883a 	mov	r5,zero
   95a9c:	38c01736 	bltu	r7,r3,95afc <_calloc_r+0x9c>
   95aa0:	008004c4 	movi	r2,19
   95aa4:	10c00836 	bltu	r2,r3,95ac8 <_calloc_r+0x68>
   95aa8:	20000215 	stw	zero,8(r4)
   95aac:	20000015 	stw	zero,0(r4)
   95ab0:	20000115 	stw	zero,4(r4)
   95ab4:	8005883a 	mov	r2,r16
   95ab8:	dfc00117 	ldw	ra,4(sp)
   95abc:	dc000017 	ldw	r16,0(sp)
   95ac0:	dec00204 	addi	sp,sp,8
   95ac4:	f800283a 	ret
   95ac8:	008006c4 	movi	r2,27
   95acc:	80000015 	stw	zero,0(r16)
   95ad0:	80000115 	stw	zero,4(r16)
   95ad4:	81000204 	addi	r4,r16,8
   95ad8:	10fff32e 	bgeu	r2,r3,95aa8 <_calloc_r+0x48>
   95adc:	80000215 	stw	zero,8(r16)
   95ae0:	80000315 	stw	zero,12(r16)
   95ae4:	81000404 	addi	r4,r16,16
   95ae8:	19ffef1e 	bne	r3,r7,95aa8 <_calloc_r+0x48>
   95aec:	81000604 	addi	r4,r16,24
   95af0:	80000415 	stw	zero,16(r16)
   95af4:	80000515 	stw	zero,20(r16)
   95af8:	003feb06 	br	95aa8 <_calloc_r+0x48>
   95afc:	008ed9c0 	call	8ed9c <memset>
   95b00:	8005883a 	mov	r2,r16
   95b04:	dfc00117 	ldw	ra,4(sp)
   95b08:	dc000017 	ldw	r16,0(sp)
   95b0c:	dec00204 	addi	sp,sp,8
   95b10:	f800283a 	ret

00095b14 <_fstat_r>:
   95b14:	defffd04 	addi	sp,sp,-12
   95b18:	dc000015 	stw	r16,0(sp)
   95b1c:	040002b4 	movhi	r16,10
   95b20:	84096a04 	addi	r16,r16,9640
   95b24:	dc400115 	stw	r17,4(sp)
   95b28:	80000015 	stw	zero,0(r16)
   95b2c:	2023883a 	mov	r17,r4
   95b30:	2809883a 	mov	r4,r5
   95b34:	300b883a 	mov	r5,r6
   95b38:	dfc00215 	stw	ra,8(sp)
   95b3c:	0097c500 	call	97c50 <fstat>
   95b40:	1007883a 	mov	r3,r2
   95b44:	00bfffc4 	movi	r2,-1
   95b48:	18800626 	beq	r3,r2,95b64 <_fstat_r+0x50>
   95b4c:	1805883a 	mov	r2,r3
   95b50:	dfc00217 	ldw	ra,8(sp)
   95b54:	dc400117 	ldw	r17,4(sp)
   95b58:	dc000017 	ldw	r16,0(sp)
   95b5c:	dec00304 	addi	sp,sp,12
   95b60:	f800283a 	ret
   95b64:	80800017 	ldw	r2,0(r16)
   95b68:	103ff826 	beq	r2,zero,95b4c <_fstat_r+0x38>
   95b6c:	88800015 	stw	r2,0(r17)
   95b70:	1805883a 	mov	r2,r3
   95b74:	dfc00217 	ldw	ra,8(sp)
   95b78:	dc400117 	ldw	r17,4(sp)
   95b7c:	dc000017 	ldw	r16,0(sp)
   95b80:	dec00304 	addi	sp,sp,12
   95b84:	f800283a 	ret

00095b88 <_isatty_r>:
   95b88:	defffd04 	addi	sp,sp,-12
   95b8c:	dc000015 	stw	r16,0(sp)
   95b90:	040002b4 	movhi	r16,10
   95b94:	84096a04 	addi	r16,r16,9640
   95b98:	dc400115 	stw	r17,4(sp)
   95b9c:	80000015 	stw	zero,0(r16)
   95ba0:	2023883a 	mov	r17,r4
   95ba4:	2809883a 	mov	r4,r5
   95ba8:	dfc00215 	stw	ra,8(sp)
   95bac:	00980880 	call	98088 <isatty>
   95bb0:	1007883a 	mov	r3,r2
   95bb4:	00bfffc4 	movi	r2,-1
   95bb8:	18800626 	beq	r3,r2,95bd4 <_isatty_r+0x4c>
   95bbc:	1805883a 	mov	r2,r3
   95bc0:	dfc00217 	ldw	ra,8(sp)
   95bc4:	dc400117 	ldw	r17,4(sp)
   95bc8:	dc000017 	ldw	r16,0(sp)
   95bcc:	dec00304 	addi	sp,sp,12
   95bd0:	f800283a 	ret
   95bd4:	80800017 	ldw	r2,0(r16)
   95bd8:	103ff826 	beq	r2,zero,95bbc <_isatty_r+0x34>
   95bdc:	88800015 	stw	r2,0(r17)
   95be0:	1805883a 	mov	r2,r3
   95be4:	dfc00217 	ldw	ra,8(sp)
   95be8:	dc400117 	ldw	r17,4(sp)
   95bec:	dc000017 	ldw	r16,0(sp)
   95bf0:	dec00304 	addi	sp,sp,12
   95bf4:	f800283a 	ret

00095bf8 <__udivdi3>:
   95bf8:	defff004 	addi	sp,sp,-64
   95bfc:	2005883a 	mov	r2,r4
   95c00:	3011883a 	mov	r8,r6
   95c04:	df000e15 	stw	fp,56(sp)
   95c08:	dd000a15 	stw	r20,40(sp)
   95c0c:	dc000615 	stw	r16,24(sp)
   95c10:	dfc00f15 	stw	ra,60(sp)
   95c14:	ddc00d15 	stw	r23,52(sp)
   95c18:	dd800c15 	stw	r22,48(sp)
   95c1c:	dd400b15 	stw	r21,44(sp)
   95c20:	dcc00915 	stw	r19,36(sp)
   95c24:	dc800815 	stw	r18,32(sp)
   95c28:	dc400715 	stw	r17,28(sp)
   95c2c:	4021883a 	mov	r16,r8
   95c30:	1039883a 	mov	fp,r2
   95c34:	2829883a 	mov	r20,r5
   95c38:	38003b1e 	bne	r7,zero,95d28 <__udivdi3+0x130>
   95c3c:	2a005c36 	bltu	r5,r8,95db0 <__udivdi3+0x1b8>
   95c40:	4000a626 	beq	r8,zero,95edc <__udivdi3+0x2e4>
   95c44:	00bfffd4 	movui	r2,65535
   95c48:	14009e36 	bltu	r2,r16,95ec4 <__udivdi3+0x2cc>
   95c4c:	00803fc4 	movi	r2,255
   95c50:	14013d36 	bltu	r2,r16,96148 <__udivdi3+0x550>
   95c54:	000b883a 	mov	r5,zero
   95c58:	0005883a 	mov	r2,zero
   95c5c:	8084d83a 	srl	r2,r16,r2
   95c60:	010002b4 	movhi	r4,10
   95c64:	2138b904 	addi	r4,r4,-7452
   95c68:	01800804 	movi	r6,32
   95c6c:	1105883a 	add	r2,r2,r4
   95c70:	10c00003 	ldbu	r3,0(r2)
   95c74:	28c7883a 	add	r3,r5,r3
   95c78:	30edc83a 	sub	r22,r6,r3
   95c7c:	b000ee1e 	bne	r22,zero,96038 <__udivdi3+0x440>
   95c80:	802ad43a 	srli	r21,r16,16
   95c84:	00800044 	movi	r2,1
   95c88:	a423c83a 	sub	r17,r20,r16
   95c8c:	85ffffcc 	andi	r23,r16,65535
   95c90:	d8800315 	stw	r2,12(sp)
   95c94:	8809883a 	mov	r4,r17
   95c98:	a80b883a 	mov	r5,r21
   95c9c:	008d8540 	call	8d854 <__udivsi3>
   95ca0:	8809883a 	mov	r4,r17
   95ca4:	a80b883a 	mov	r5,r21
   95ca8:	102d883a 	mov	r22,r2
   95cac:	008d85c0 	call	8d85c <__umodsi3>
   95cb0:	1004943a 	slli	r2,r2,16
   95cb4:	e006d43a 	srli	r3,fp,16
   95cb8:	bda3383a 	mul	r17,r23,r22
   95cbc:	10c4b03a 	or	r2,r2,r3
   95cc0:	1440042e 	bgeu	r2,r17,95cd4 <__udivdi3+0xdc>
   95cc4:	1405883a 	add	r2,r2,r16
   95cc8:	b5bfffc4 	addi	r22,r22,-1
   95ccc:	14000136 	bltu	r2,r16,95cd4 <__udivdi3+0xdc>
   95cd0:	14413d36 	bltu	r2,r17,961c8 <__udivdi3+0x5d0>
   95cd4:	1463c83a 	sub	r17,r2,r17
   95cd8:	8809883a 	mov	r4,r17
   95cdc:	a80b883a 	mov	r5,r21
   95ce0:	008d8540 	call	8d854 <__udivsi3>
   95ce4:	8809883a 	mov	r4,r17
   95ce8:	a80b883a 	mov	r5,r21
   95cec:	1029883a 	mov	r20,r2
   95cf0:	008d85c0 	call	8d85c <__umodsi3>
   95cf4:	1004943a 	slli	r2,r2,16
   95cf8:	bd09383a 	mul	r4,r23,r20
   95cfc:	e0ffffcc 	andi	r3,fp,65535
   95d00:	10c4b03a 	or	r2,r2,r3
   95d04:	1100042e 	bgeu	r2,r4,95d18 <__udivdi3+0x120>
   95d08:	8085883a 	add	r2,r16,r2
   95d0c:	a53fffc4 	addi	r20,r20,-1
   95d10:	14000136 	bltu	r2,r16,95d18 <__udivdi3+0x120>
   95d14:	11012036 	bltu	r2,r4,96198 <__udivdi3+0x5a0>
   95d18:	b004943a 	slli	r2,r22,16
   95d1c:	d9000317 	ldw	r4,12(sp)
   95d20:	a084b03a 	or	r2,r20,r2
   95d24:	00001506 	br	95d7c <__udivdi3+0x184>
   95d28:	380d883a 	mov	r6,r7
   95d2c:	29c06236 	bltu	r5,r7,95eb8 <__udivdi3+0x2c0>
   95d30:	00bfffd4 	movui	r2,65535
   95d34:	11c05a36 	bltu	r2,r7,95ea0 <__udivdi3+0x2a8>
   95d38:	00803fc4 	movi	r2,255
   95d3c:	11c0fc36 	bltu	r2,r7,96130 <__udivdi3+0x538>
   95d40:	000b883a 	mov	r5,zero
   95d44:	0005883a 	mov	r2,zero
   95d48:	3084d83a 	srl	r2,r6,r2
   95d4c:	010002b4 	movhi	r4,10
   95d50:	2138b904 	addi	r4,r4,-7452
   95d54:	01c00804 	movi	r7,32
   95d58:	1105883a 	add	r2,r2,r4
   95d5c:	10c00003 	ldbu	r3,0(r2)
   95d60:	28c7883a 	add	r3,r5,r3
   95d64:	38efc83a 	sub	r23,r7,r3
   95d68:	b800691e 	bne	r23,zero,95f10 <__udivdi3+0x318>
   95d6c:	35000136 	bltu	r6,r20,95d74 <__udivdi3+0x17c>
   95d70:	e4005136 	bltu	fp,r16,95eb8 <__udivdi3+0x2c0>
   95d74:	00800044 	movi	r2,1
   95d78:	0009883a 	mov	r4,zero
   95d7c:	2007883a 	mov	r3,r4
   95d80:	dfc00f17 	ldw	ra,60(sp)
   95d84:	df000e17 	ldw	fp,56(sp)
   95d88:	ddc00d17 	ldw	r23,52(sp)
   95d8c:	dd800c17 	ldw	r22,48(sp)
   95d90:	dd400b17 	ldw	r21,44(sp)
   95d94:	dd000a17 	ldw	r20,40(sp)
   95d98:	dcc00917 	ldw	r19,36(sp)
   95d9c:	dc800817 	ldw	r18,32(sp)
   95da0:	dc400717 	ldw	r17,28(sp)
   95da4:	dc000617 	ldw	r16,24(sp)
   95da8:	dec01004 	addi	sp,sp,64
   95dac:	f800283a 	ret
   95db0:	00bfffd4 	movui	r2,65535
   95db4:	12005036 	bltu	r2,r8,95ef8 <__udivdi3+0x300>
   95db8:	00803fc4 	movi	r2,255
   95dbc:	1200e836 	bltu	r2,r8,96160 <__udivdi3+0x568>
   95dc0:	000b883a 	mov	r5,zero
   95dc4:	0005883a 	mov	r2,zero
   95dc8:	8084d83a 	srl	r2,r16,r2
   95dcc:	010002b4 	movhi	r4,10
   95dd0:	2138b904 	addi	r4,r4,-7452
   95dd4:	01800804 	movi	r6,32
   95dd8:	1105883a 	add	r2,r2,r4
   95ddc:	10c00003 	ldbu	r3,0(r2)
   95de0:	28c7883a 	add	r3,r5,r3
   95de4:	30cbc83a 	sub	r5,r6,r3
   95de8:	28000626 	beq	r5,zero,95e04 <__udivdi3+0x20c>
   95dec:	3145c83a 	sub	r2,r6,r5
   95df0:	e084d83a 	srl	r2,fp,r2
   95df4:	a146983a 	sll	r3,r20,r5
   95df8:	e178983a 	sll	fp,fp,r5
   95dfc:	8160983a 	sll	r16,r16,r5
   95e00:	18a8b03a 	or	r20,r3,r2
   95e04:	802ad43a 	srli	r21,r16,16
   95e08:	a009883a 	mov	r4,r20
   95e0c:	85ffffcc 	andi	r23,r16,65535
   95e10:	a80b883a 	mov	r5,r21
   95e14:	008d8540 	call	8d854 <__udivsi3>
   95e18:	a009883a 	mov	r4,r20
   95e1c:	a80b883a 	mov	r5,r21
   95e20:	102d883a 	mov	r22,r2
   95e24:	008d85c0 	call	8d85c <__umodsi3>
   95e28:	1004943a 	slli	r2,r2,16
   95e2c:	e006d43a 	srli	r3,fp,16
   95e30:	bda3383a 	mul	r17,r23,r22
   95e34:	10c4b03a 	or	r2,r2,r3
   95e38:	1440042e 	bgeu	r2,r17,95e4c <__udivdi3+0x254>
   95e3c:	1405883a 	add	r2,r2,r16
   95e40:	b5bfffc4 	addi	r22,r22,-1
   95e44:	14000136 	bltu	r2,r16,95e4c <__udivdi3+0x254>
   95e48:	1440d536 	bltu	r2,r17,961a0 <__udivdi3+0x5a8>
   95e4c:	1463c83a 	sub	r17,r2,r17
   95e50:	8809883a 	mov	r4,r17
   95e54:	a80b883a 	mov	r5,r21
   95e58:	008d8540 	call	8d854 <__udivsi3>
   95e5c:	8809883a 	mov	r4,r17
   95e60:	a80b883a 	mov	r5,r21
   95e64:	1029883a 	mov	r20,r2
   95e68:	008d85c0 	call	8d85c <__umodsi3>
   95e6c:	1004943a 	slli	r2,r2,16
   95e70:	bd09383a 	mul	r4,r23,r20
   95e74:	e0ffffcc 	andi	r3,fp,65535
   95e78:	10c4b03a 	or	r2,r2,r3
   95e7c:	1100042e 	bgeu	r2,r4,95e90 <__udivdi3+0x298>
   95e80:	8085883a 	add	r2,r16,r2
   95e84:	a53fffc4 	addi	r20,r20,-1
   95e88:	14000136 	bltu	r2,r16,95e90 <__udivdi3+0x298>
   95e8c:	1100c736 	bltu	r2,r4,961ac <__udivdi3+0x5b4>
   95e90:	b004943a 	slli	r2,r22,16
   95e94:	0009883a 	mov	r4,zero
   95e98:	a084b03a 	or	r2,r20,r2
   95e9c:	003fb706 	br	95d7c <__udivdi3+0x184>
   95ea0:	00804034 	movhi	r2,256
   95ea4:	10bfffc4 	addi	r2,r2,-1
   95ea8:	11c0a436 	bltu	r2,r7,9613c <__udivdi3+0x544>
   95eac:	01400404 	movi	r5,16
   95eb0:	2805883a 	mov	r2,r5
   95eb4:	003fa406 	br	95d48 <__udivdi3+0x150>
   95eb8:	0005883a 	mov	r2,zero
   95ebc:	0009883a 	mov	r4,zero
   95ec0:	003fae06 	br	95d7c <__udivdi3+0x184>
   95ec4:	00804034 	movhi	r2,256
   95ec8:	10bfffc4 	addi	r2,r2,-1
   95ecc:	1400a136 	bltu	r2,r16,96154 <__udivdi3+0x55c>
   95ed0:	01400404 	movi	r5,16
   95ed4:	2805883a 	mov	r2,r5
   95ed8:	003f6006 	br	95c5c <__udivdi3+0x64>
   95edc:	01000044 	movi	r4,1
   95ee0:	000b883a 	mov	r5,zero
   95ee4:	008d8540 	call	8d854 <__udivsi3>
   95ee8:	1021883a 	mov	r16,r2
   95eec:	00bfffd4 	movui	r2,65535
   95ef0:	143ff436 	bltu	r2,r16,95ec4 <__udivdi3+0x2cc>
   95ef4:	003f5506 	br	95c4c <__udivdi3+0x54>
   95ef8:	00804034 	movhi	r2,256
   95efc:	10bfffc4 	addi	r2,r2,-1
   95f00:	12009a36 	bltu	r2,r8,9616c <__udivdi3+0x574>
   95f04:	01400404 	movi	r5,16
   95f08:	2805883a 	mov	r2,r5
   95f0c:	003fae06 	br	95dc8 <__udivdi3+0x1d0>
   95f10:	3dc5c83a 	sub	r2,r7,r23
   95f14:	35c8983a 	sll	r4,r6,r23
   95f18:	8086d83a 	srl	r3,r16,r2
   95f1c:	a0a2d83a 	srl	r17,r20,r2
   95f20:	e084d83a 	srl	r2,fp,r2
   95f24:	20eab03a 	or	r21,r4,r3
   95f28:	a82cd43a 	srli	r22,r21,16
   95f2c:	a5c6983a 	sll	r3,r20,r23
   95f30:	8809883a 	mov	r4,r17
   95f34:	b00b883a 	mov	r5,r22
   95f38:	1886b03a 	or	r3,r3,r2
   95f3c:	d8c00215 	stw	r3,8(sp)
   95f40:	008d8540 	call	8d854 <__udivsi3>
   95f44:	8809883a 	mov	r4,r17
   95f48:	b00b883a 	mov	r5,r22
   95f4c:	1029883a 	mov	r20,r2
   95f50:	008d85c0 	call	8d85c <__umodsi3>
   95f54:	a8ffffcc 	andi	r3,r21,65535
   95f58:	d8c00515 	stw	r3,20(sp)
   95f5c:	d9000217 	ldw	r4,8(sp)
   95f60:	d9400517 	ldw	r5,20(sp)
   95f64:	1004943a 	slli	r2,r2,16
   95f68:	2006d43a 	srli	r3,r4,16
   95f6c:	85e0983a 	sll	r16,r16,r23
   95f70:	2d23383a 	mul	r17,r5,r20
   95f74:	10c4b03a 	or	r2,r2,r3
   95f78:	dc000015 	stw	r16,0(sp)
   95f7c:	1440032e 	bgeu	r2,r17,95f8c <__udivdi3+0x394>
   95f80:	1545883a 	add	r2,r2,r21
   95f84:	a53fffc4 	addi	r20,r20,-1
   95f88:	15407f2e 	bgeu	r2,r21,96188 <__udivdi3+0x590>
   95f8c:	1463c83a 	sub	r17,r2,r17
   95f90:	8809883a 	mov	r4,r17
   95f94:	b00b883a 	mov	r5,r22
   95f98:	008d8540 	call	8d854 <__udivsi3>
   95f9c:	8809883a 	mov	r4,r17
   95fa0:	b00b883a 	mov	r5,r22
   95fa4:	1021883a 	mov	r16,r2
   95fa8:	008d85c0 	call	8d85c <__umodsi3>
   95fac:	d8c00517 	ldw	r3,20(sp)
   95fb0:	d9000217 	ldw	r4,8(sp)
   95fb4:	1004943a 	slli	r2,r2,16
   95fb8:	1c0f383a 	mul	r7,r3,r16
   95fbc:	20ffffcc 	andi	r3,r4,65535
   95fc0:	10e2b03a 	or	r17,r2,r3
   95fc4:	89c0032e 	bgeu	r17,r7,95fd4 <__udivdi3+0x3dc>
   95fc8:	8d63883a 	add	r17,r17,r21
   95fcc:	843fffc4 	addi	r16,r16,-1
   95fd0:	8d40692e 	bgeu	r17,r21,96178 <__udivdi3+0x580>
   95fd4:	a008943a 	slli	r4,r20,16
   95fd8:	d9400017 	ldw	r5,0(sp)
   95fdc:	89e3c83a 	sub	r17,r17,r7
   95fe0:	8110b03a 	or	r8,r16,r4
   95fe4:	280cd43a 	srli	r6,r5,16
   95fe8:	28ffffcc 	andi	r3,r5,65535
   95fec:	40bfffcc 	andi	r2,r8,65535
   95ff0:	400ad43a 	srli	r5,r8,16
   95ff4:	10d3383a 	mul	r9,r2,r3
   95ff8:	1185383a 	mul	r2,r2,r6
   95ffc:	28c7383a 	mul	r3,r5,r3
   96000:	4808d43a 	srli	r4,r9,16
   96004:	298b383a 	mul	r5,r5,r6
   96008:	10c5883a 	add	r2,r2,r3
   9600c:	2089883a 	add	r4,r4,r2
   96010:	20c0022e 	bgeu	r4,r3,9601c <__udivdi3+0x424>
   96014:	00800074 	movhi	r2,1
   96018:	288b883a 	add	r5,r5,r2
   9601c:	2004d43a 	srli	r2,r4,16
   96020:	288b883a 	add	r5,r5,r2
   96024:	89403f36 	bltu	r17,r5,96124 <__udivdi3+0x52c>
   96028:	89403926 	beq	r17,r5,96110 <__udivdi3+0x518>
   9602c:	4005883a 	mov	r2,r8
   96030:	0009883a 	mov	r4,zero
   96034:	003f5106 	br	95d7c <__udivdi3+0x184>
   96038:	85a0983a 	sll	r16,r16,r22
   9603c:	3585c83a 	sub	r2,r6,r22
   96040:	a0a2d83a 	srl	r17,r20,r2
   96044:	802ad43a 	srli	r21,r16,16
   96048:	e084d83a 	srl	r2,fp,r2
   9604c:	a586983a 	sll	r3,r20,r22
   96050:	8809883a 	mov	r4,r17
   96054:	a80b883a 	mov	r5,r21
   96058:	1886b03a 	or	r3,r3,r2
   9605c:	d8c00115 	stw	r3,4(sp)
   96060:	008d8540 	call	8d854 <__udivsi3>
   96064:	8809883a 	mov	r4,r17
   96068:	a80b883a 	mov	r5,r21
   9606c:	d8800415 	stw	r2,16(sp)
   96070:	008d85c0 	call	8d85c <__umodsi3>
   96074:	d9000117 	ldw	r4,4(sp)
   96078:	d9400417 	ldw	r5,16(sp)
   9607c:	1004943a 	slli	r2,r2,16
   96080:	85ffffcc 	andi	r23,r16,65535
   96084:	2006d43a 	srli	r3,r4,16
   96088:	b963383a 	mul	r17,r23,r5
   9608c:	10c4b03a 	or	r2,r2,r3
   96090:	1440042e 	bgeu	r2,r17,960a4 <__udivdi3+0x4ac>
   96094:	297fffc4 	addi	r5,r5,-1
   96098:	1405883a 	add	r2,r2,r16
   9609c:	d9400415 	stw	r5,16(sp)
   960a0:	1400442e 	bgeu	r2,r16,961b4 <__udivdi3+0x5bc>
   960a4:	1463c83a 	sub	r17,r2,r17
   960a8:	8809883a 	mov	r4,r17
   960ac:	a80b883a 	mov	r5,r21
   960b0:	008d8540 	call	8d854 <__udivsi3>
   960b4:	8809883a 	mov	r4,r17
   960b8:	a80b883a 	mov	r5,r21
   960bc:	1029883a 	mov	r20,r2
   960c0:	008d85c0 	call	8d85c <__umodsi3>
   960c4:	d9400117 	ldw	r5,4(sp)
   960c8:	1004943a 	slli	r2,r2,16
   960cc:	bd09383a 	mul	r4,r23,r20
   960d0:	28ffffcc 	andi	r3,r5,65535
   960d4:	10c6b03a 	or	r3,r2,r3
   960d8:	1900062e 	bgeu	r3,r4,960f4 <__udivdi3+0x4fc>
   960dc:	1c07883a 	add	r3,r3,r16
   960e0:	a53fffc4 	addi	r20,r20,-1
   960e4:	1c000336 	bltu	r3,r16,960f4 <__udivdi3+0x4fc>
   960e8:	1900022e 	bgeu	r3,r4,960f4 <__udivdi3+0x4fc>
   960ec:	a53fffc4 	addi	r20,r20,-1
   960f0:	1c07883a 	add	r3,r3,r16
   960f4:	d9400417 	ldw	r5,16(sp)
   960f8:	e5b8983a 	sll	fp,fp,r22
   960fc:	1923c83a 	sub	r17,r3,r4
   96100:	2804943a 	slli	r2,r5,16
   96104:	a0a8b03a 	or	r20,r20,r2
   96108:	dd000315 	stw	r20,12(sp)
   9610c:	003ee106 	br	95c94 <__udivdi3+0x9c>
   96110:	2004943a 	slli	r2,r4,16
   96114:	e5c8983a 	sll	r4,fp,r23
   96118:	48ffffcc 	andi	r3,r9,65535
   9611c:	10c5883a 	add	r2,r2,r3
   96120:	20bfc22e 	bgeu	r4,r2,9602c <__udivdi3+0x434>
   96124:	40bfffc4 	addi	r2,r8,-1
   96128:	0009883a 	mov	r4,zero
   9612c:	003f1306 	br	95d7c <__udivdi3+0x184>
   96130:	01400204 	movi	r5,8
   96134:	2805883a 	mov	r2,r5
   96138:	003f0306 	br	95d48 <__udivdi3+0x150>
   9613c:	01400604 	movi	r5,24
   96140:	2805883a 	mov	r2,r5
   96144:	003f0006 	br	95d48 <__udivdi3+0x150>
   96148:	01400204 	movi	r5,8
   9614c:	2805883a 	mov	r2,r5
   96150:	003ec206 	br	95c5c <__udivdi3+0x64>
   96154:	01400604 	movi	r5,24
   96158:	2805883a 	mov	r2,r5
   9615c:	003ebf06 	br	95c5c <__udivdi3+0x64>
   96160:	01400204 	movi	r5,8
   96164:	2805883a 	mov	r2,r5
   96168:	003f1706 	br	95dc8 <__udivdi3+0x1d0>
   9616c:	01400604 	movi	r5,24
   96170:	2805883a 	mov	r2,r5
   96174:	003f1406 	br	95dc8 <__udivdi3+0x1d0>
   96178:	89ff962e 	bgeu	r17,r7,95fd4 <__udivdi3+0x3dc>
   9617c:	8d63883a 	add	r17,r17,r21
   96180:	843fffc4 	addi	r16,r16,-1
   96184:	003f9306 	br	95fd4 <__udivdi3+0x3dc>
   96188:	147f802e 	bgeu	r2,r17,95f8c <__udivdi3+0x394>
   9618c:	a53fffc4 	addi	r20,r20,-1
   96190:	1545883a 	add	r2,r2,r21
   96194:	003f7d06 	br	95f8c <__udivdi3+0x394>
   96198:	a53fffc4 	addi	r20,r20,-1
   9619c:	003ede06 	br	95d18 <__udivdi3+0x120>
   961a0:	b5bfffc4 	addi	r22,r22,-1
   961a4:	1405883a 	add	r2,r2,r16
   961a8:	003f2806 	br	95e4c <__udivdi3+0x254>
   961ac:	a53fffc4 	addi	r20,r20,-1
   961b0:	003f3706 	br	95e90 <__udivdi3+0x298>
   961b4:	147fbb2e 	bgeu	r2,r17,960a4 <__udivdi3+0x4ac>
   961b8:	297fffc4 	addi	r5,r5,-1
   961bc:	1405883a 	add	r2,r2,r16
   961c0:	d9400415 	stw	r5,16(sp)
   961c4:	003fb706 	br	960a4 <__udivdi3+0x4ac>
   961c8:	b5bfffc4 	addi	r22,r22,-1
   961cc:	1405883a 	add	r2,r2,r16
   961d0:	003ec006 	br	95cd4 <__udivdi3+0xdc>

000961d4 <__umoddi3>:
   961d4:	defff104 	addi	sp,sp,-60
   961d8:	dd800b15 	stw	r22,44(sp)
   961dc:	dd000915 	stw	r20,36(sp)
   961e0:	dc000515 	stw	r16,20(sp)
   961e4:	dfc00e15 	stw	ra,56(sp)
   961e8:	df000d15 	stw	fp,52(sp)
   961ec:	ddc00c15 	stw	r23,48(sp)
   961f0:	dd400a15 	stw	r21,40(sp)
   961f4:	dcc00815 	stw	r19,32(sp)
   961f8:	dc800715 	stw	r18,28(sp)
   961fc:	dc400615 	stw	r17,24(sp)
   96200:	3021883a 	mov	r16,r6
   96204:	202d883a 	mov	r22,r4
   96208:	2829883a 	mov	r20,r5
   9620c:	38002b1e 	bne	r7,zero,962bc <__umoddi3+0xe8>
   96210:	29805036 	bltu	r5,r6,96354 <__umoddi3+0x180>
   96214:	30008a26 	beq	r6,zero,96440 <__umoddi3+0x26c>
   96218:	00bfffd4 	movui	r2,65535
   9621c:	14008236 	bltu	r2,r16,96428 <__umoddi3+0x254>
   96220:	00803fc4 	movi	r2,255
   96224:	14013636 	bltu	r2,r16,96700 <__umoddi3+0x52c>
   96228:	000b883a 	mov	r5,zero
   9622c:	0005883a 	mov	r2,zero
   96230:	8084d83a 	srl	r2,r16,r2
   96234:	010002b4 	movhi	r4,10
   96238:	2138b904 	addi	r4,r4,-7452
   9623c:	01800804 	movi	r6,32
   96240:	1105883a 	add	r2,r2,r4
   96244:	10c00003 	ldbu	r3,0(r2)
   96248:	28c7883a 	add	r3,r5,r3
   9624c:	30efc83a 	sub	r23,r6,r3
   96250:	b800941e 	bne	r23,zero,964a4 <__umoddi3+0x2d0>
   96254:	802ad43a 	srli	r21,r16,16
   96258:	a423c83a 	sub	r17,r20,r16
   9625c:	0039883a 	mov	fp,zero
   96260:	853fffcc 	andi	r20,r16,65535
   96264:	8809883a 	mov	r4,r17
   96268:	a80b883a 	mov	r5,r21
   9626c:	008d8540 	call	8d854 <__udivsi3>
   96270:	8809883a 	mov	r4,r17
   96274:	a80b883a 	mov	r5,r21
   96278:	a0a3383a 	mul	r17,r20,r2
   9627c:	008d85c0 	call	8d85c <__umodsi3>
   96280:	1004943a 	slli	r2,r2,16
   96284:	b006d43a 	srli	r3,r22,16
   96288:	10c4b03a 	or	r2,r2,r3
   9628c:	1440032e 	bgeu	r2,r17,9629c <__umoddi3+0xc8>
   96290:	1405883a 	add	r2,r2,r16
   96294:	14000136 	bltu	r2,r16,9629c <__umoddi3+0xc8>
   96298:	14413536 	bltu	r2,r17,96770 <__umoddi3+0x59c>
   9629c:	1463c83a 	sub	r17,r2,r17
   962a0:	8809883a 	mov	r4,r17
   962a4:	a80b883a 	mov	r5,r21
   962a8:	008d8540 	call	8d854 <__udivsi3>
   962ac:	8809883a 	mov	r4,r17
   962b0:	a0a3383a 	mul	r17,r20,r2
   962b4:	a80b883a 	mov	r5,r21
   962b8:	00004d06 	br	963f0 <__umoddi3+0x21c>
   962bc:	380d883a 	mov	r6,r7
   962c0:	29c0102e 	bgeu	r5,r7,96304 <__umoddi3+0x130>
   962c4:	2011883a 	mov	r8,r4
   962c8:	2813883a 	mov	r9,r5
   962cc:	4005883a 	mov	r2,r8
   962d0:	4807883a 	mov	r3,r9
   962d4:	dfc00e17 	ldw	ra,56(sp)
   962d8:	df000d17 	ldw	fp,52(sp)
   962dc:	ddc00c17 	ldw	r23,48(sp)
   962e0:	dd800b17 	ldw	r22,44(sp)
   962e4:	dd400a17 	ldw	r21,40(sp)
   962e8:	dd000917 	ldw	r20,36(sp)
   962ec:	dcc00817 	ldw	r19,32(sp)
   962f0:	dc800717 	ldw	r18,28(sp)
   962f4:	dc400617 	ldw	r17,24(sp)
   962f8:	dc000517 	ldw	r16,20(sp)
   962fc:	dec00f04 	addi	sp,sp,60
   96300:	f800283a 	ret
   96304:	00bfffd4 	movui	r2,65535
   96308:	11c05a36 	bltu	r2,r7,96474 <__umoddi3+0x2a0>
   9630c:	00803fc4 	movi	r2,255
   96310:	11c0fe36 	bltu	r2,r7,9670c <__umoddi3+0x538>
   96314:	000b883a 	mov	r5,zero
   96318:	0005883a 	mov	r2,zero
   9631c:	3084d83a 	srl	r2,r6,r2
   96320:	010002b4 	movhi	r4,10
   96324:	2138b904 	addi	r4,r4,-7452
   96328:	01c00804 	movi	r7,32
   9632c:	1105883a 	add	r2,r2,r4
   96330:	10c00003 	ldbu	r3,0(r2)
   96334:	28c7883a 	add	r3,r5,r3
   96338:	38ebc83a 	sub	r21,r7,r3
   9633c:	a800851e 	bne	r21,zero,96554 <__umoddi3+0x380>
   96340:	35005236 	bltu	r6,r20,9648c <__umoddi3+0x2b8>
   96344:	b400512e 	bgeu	r22,r16,9648c <__umoddi3+0x2b8>
   96348:	b011883a 	mov	r8,r22
   9634c:	a013883a 	mov	r9,r20
   96350:	003fde06 	br	962cc <__umoddi3+0xf8>
   96354:	00bfffd4 	movui	r2,65535
   96358:	11804036 	bltu	r2,r6,9645c <__umoddi3+0x288>
   9635c:	00803fc4 	movi	r2,255
   96360:	1180ed36 	bltu	r2,r6,96718 <__umoddi3+0x544>
   96364:	000b883a 	mov	r5,zero
   96368:	0005883a 	mov	r2,zero
   9636c:	8084d83a 	srl	r2,r16,r2
   96370:	010002b4 	movhi	r4,10
   96374:	2138b904 	addi	r4,r4,-7452
   96378:	01800804 	movi	r6,32
   9637c:	1105883a 	add	r2,r2,r4
   96380:	10c00003 	ldbu	r3,0(r2)
   96384:	28c7883a 	add	r3,r5,r3
   96388:	30c7c83a 	sub	r3,r6,r3
   9638c:	1800bf1e 	bne	r3,zero,9668c <__umoddi3+0x4b8>
   96390:	0039883a 	mov	fp,zero
   96394:	802ad43a 	srli	r21,r16,16
   96398:	a009883a 	mov	r4,r20
   9639c:	85ffffcc 	andi	r23,r16,65535
   963a0:	a80b883a 	mov	r5,r21
   963a4:	008d8540 	call	8d854 <__udivsi3>
   963a8:	a009883a 	mov	r4,r20
   963ac:	a80b883a 	mov	r5,r21
   963b0:	b8a3383a 	mul	r17,r23,r2
   963b4:	008d85c0 	call	8d85c <__umodsi3>
   963b8:	1004943a 	slli	r2,r2,16
   963bc:	b006d43a 	srli	r3,r22,16
   963c0:	10c4b03a 	or	r2,r2,r3
   963c4:	1440032e 	bgeu	r2,r17,963d4 <__umoddi3+0x200>
   963c8:	1405883a 	add	r2,r2,r16
   963cc:	14000136 	bltu	r2,r16,963d4 <__umoddi3+0x200>
   963d0:	1440e536 	bltu	r2,r17,96768 <__umoddi3+0x594>
   963d4:	1463c83a 	sub	r17,r2,r17
   963d8:	8809883a 	mov	r4,r17
   963dc:	a80b883a 	mov	r5,r21
   963e0:	008d8540 	call	8d854 <__udivsi3>
   963e4:	8809883a 	mov	r4,r17
   963e8:	b8a3383a 	mul	r17,r23,r2
   963ec:	a80b883a 	mov	r5,r21
   963f0:	008d85c0 	call	8d85c <__umodsi3>
   963f4:	1004943a 	slli	r2,r2,16
   963f8:	b0ffffcc 	andi	r3,r22,65535
   963fc:	10c4b03a 	or	r2,r2,r3
   96400:	1440042e 	bgeu	r2,r17,96414 <__umoddi3+0x240>
   96404:	1405883a 	add	r2,r2,r16
   96408:	14000236 	bltu	r2,r16,96414 <__umoddi3+0x240>
   9640c:	1440012e 	bgeu	r2,r17,96414 <__umoddi3+0x240>
   96410:	1405883a 	add	r2,r2,r16
   96414:	1445c83a 	sub	r2,r2,r17
   96418:	1724d83a 	srl	r18,r2,fp
   9641c:	0013883a 	mov	r9,zero
   96420:	9011883a 	mov	r8,r18
   96424:	003fa906 	br	962cc <__umoddi3+0xf8>
   96428:	00804034 	movhi	r2,256
   9642c:	10bfffc4 	addi	r2,r2,-1
   96430:	1400b036 	bltu	r2,r16,966f4 <__umoddi3+0x520>
   96434:	01400404 	movi	r5,16
   96438:	2805883a 	mov	r2,r5
   9643c:	003f7c06 	br	96230 <__umoddi3+0x5c>
   96440:	01000044 	movi	r4,1
   96444:	000b883a 	mov	r5,zero
   96448:	008d8540 	call	8d854 <__udivsi3>
   9644c:	1021883a 	mov	r16,r2
   96450:	00bfffd4 	movui	r2,65535
   96454:	143ff436 	bltu	r2,r16,96428 <__umoddi3+0x254>
   96458:	003f7106 	br	96220 <__umoddi3+0x4c>
   9645c:	00804034 	movhi	r2,256
   96460:	10bfffc4 	addi	r2,r2,-1
   96464:	1180af36 	bltu	r2,r6,96724 <__umoddi3+0x550>
   96468:	01400404 	movi	r5,16
   9646c:	2805883a 	mov	r2,r5
   96470:	003fbe06 	br	9636c <__umoddi3+0x198>
   96474:	00804034 	movhi	r2,256
   96478:	10bfffc4 	addi	r2,r2,-1
   9647c:	11c0ac36 	bltu	r2,r7,96730 <__umoddi3+0x55c>
   96480:	01400404 	movi	r5,16
   96484:	2805883a 	mov	r2,r5
   96488:	003fa406 	br	9631c <__umoddi3+0x148>
   9648c:	b409c83a 	sub	r4,r22,r16
   96490:	b105803a 	cmpltu	r2,r22,r4
   96494:	a187c83a 	sub	r3,r20,r6
   96498:	18a9c83a 	sub	r20,r3,r2
   9649c:	202d883a 	mov	r22,r4
   964a0:	003fa906 	br	96348 <__umoddi3+0x174>
   964a4:	85e0983a 	sll	r16,r16,r23
   964a8:	35c5c83a 	sub	r2,r6,r23
   964ac:	a0a2d83a 	srl	r17,r20,r2
   964b0:	802ad43a 	srli	r21,r16,16
   964b4:	b084d83a 	srl	r2,r22,r2
   964b8:	a5c6983a 	sll	r3,r20,r23
   964bc:	8809883a 	mov	r4,r17
   964c0:	a80b883a 	mov	r5,r21
   964c4:	1886b03a 	or	r3,r3,r2
   964c8:	d8c00115 	stw	r3,4(sp)
   964cc:	853fffcc 	andi	r20,r16,65535
   964d0:	008d8540 	call	8d854 <__udivsi3>
   964d4:	8809883a 	mov	r4,r17
   964d8:	a80b883a 	mov	r5,r21
   964dc:	a0a3383a 	mul	r17,r20,r2
   964e0:	008d85c0 	call	8d85c <__umodsi3>
   964e4:	d9000117 	ldw	r4,4(sp)
   964e8:	1004943a 	slli	r2,r2,16
   964ec:	b839883a 	mov	fp,r23
   964f0:	2006d43a 	srli	r3,r4,16
   964f4:	10c4b03a 	or	r2,r2,r3
   964f8:	1440022e 	bgeu	r2,r17,96504 <__umoddi3+0x330>
   964fc:	1405883a 	add	r2,r2,r16
   96500:	1400962e 	bgeu	r2,r16,9675c <__umoddi3+0x588>
   96504:	1463c83a 	sub	r17,r2,r17
   96508:	8809883a 	mov	r4,r17
   9650c:	a80b883a 	mov	r5,r21
   96510:	008d8540 	call	8d854 <__udivsi3>
   96514:	8809883a 	mov	r4,r17
   96518:	a80b883a 	mov	r5,r21
   9651c:	a0a3383a 	mul	r17,r20,r2
   96520:	008d85c0 	call	8d85c <__umodsi3>
   96524:	d9400117 	ldw	r5,4(sp)
   96528:	1004943a 	slli	r2,r2,16
   9652c:	28ffffcc 	andi	r3,r5,65535
   96530:	10c4b03a 	or	r2,r2,r3
   96534:	1440042e 	bgeu	r2,r17,96548 <__umoddi3+0x374>
   96538:	1405883a 	add	r2,r2,r16
   9653c:	14000236 	bltu	r2,r16,96548 <__umoddi3+0x374>
   96540:	1440012e 	bgeu	r2,r17,96548 <__umoddi3+0x374>
   96544:	1405883a 	add	r2,r2,r16
   96548:	b5ec983a 	sll	r22,r22,r23
   9654c:	1463c83a 	sub	r17,r2,r17
   96550:	003f4406 	br	96264 <__umoddi3+0x90>
   96554:	3d4fc83a 	sub	r7,r7,r21
   96558:	3546983a 	sll	r3,r6,r21
   9655c:	81c4d83a 	srl	r2,r16,r7
   96560:	a1e2d83a 	srl	r17,r20,r7
   96564:	a54c983a 	sll	r6,r20,r21
   96568:	18aeb03a 	or	r23,r3,r2
   9656c:	b828d43a 	srli	r20,r23,16
   96570:	b1c4d83a 	srl	r2,r22,r7
   96574:	8809883a 	mov	r4,r17
   96578:	a00b883a 	mov	r5,r20
   9657c:	308cb03a 	or	r6,r6,r2
   96580:	d9c00315 	stw	r7,12(sp)
   96584:	d9800215 	stw	r6,8(sp)
   96588:	008d8540 	call	8d854 <__udivsi3>
   9658c:	8809883a 	mov	r4,r17
   96590:	a00b883a 	mov	r5,r20
   96594:	1039883a 	mov	fp,r2
   96598:	008d85c0 	call	8d85c <__umodsi3>
   9659c:	b8ffffcc 	andi	r3,r23,65535
   965a0:	d8c00415 	stw	r3,16(sp)
   965a4:	d9000217 	ldw	r4,8(sp)
   965a8:	d9400417 	ldw	r5,16(sp)
   965ac:	1004943a 	slli	r2,r2,16
   965b0:	2006d43a 	srli	r3,r4,16
   965b4:	8560983a 	sll	r16,r16,r21
   965b8:	2f23383a 	mul	r17,r5,fp
   965bc:	10c4b03a 	or	r2,r2,r3
   965c0:	dc000015 	stw	r16,0(sp)
   965c4:	b56c983a 	sll	r22,r22,r21
   965c8:	1440032e 	bgeu	r2,r17,965d8 <__umoddi3+0x404>
   965cc:	15c5883a 	add	r2,r2,r23
   965d0:	e73fffc4 	addi	fp,fp,-1
   965d4:	15c05d2e 	bgeu	r2,r23,9674c <__umoddi3+0x578>
   965d8:	1463c83a 	sub	r17,r2,r17
   965dc:	8809883a 	mov	r4,r17
   965e0:	a00b883a 	mov	r5,r20
   965e4:	008d8540 	call	8d854 <__udivsi3>
   965e8:	8809883a 	mov	r4,r17
   965ec:	a00b883a 	mov	r5,r20
   965f0:	1021883a 	mov	r16,r2
   965f4:	008d85c0 	call	8d85c <__umodsi3>
   965f8:	d8c00417 	ldw	r3,16(sp)
   965fc:	d9000217 	ldw	r4,8(sp)
   96600:	1004943a 	slli	r2,r2,16
   96604:	1c23383a 	mul	r17,r3,r16
   96608:	20ffffcc 	andi	r3,r4,65535
   9660c:	10ceb03a 	or	r7,r2,r3
   96610:	3c40032e 	bgeu	r7,r17,96620 <__umoddi3+0x44c>
   96614:	3dcf883a 	add	r7,r7,r23
   96618:	843fffc4 	addi	r16,r16,-1
   9661c:	3dc0472e 	bgeu	r7,r23,9673c <__umoddi3+0x568>
   96620:	e004943a 	slli	r2,fp,16
   96624:	d9400017 	ldw	r5,0(sp)
   96628:	3c4fc83a 	sub	r7,r7,r17
   9662c:	8084b03a 	or	r2,r16,r2
   96630:	28ffffcc 	andi	r3,r5,65535
   96634:	280cd43a 	srli	r6,r5,16
   96638:	100ad43a 	srli	r5,r2,16
   9663c:	10bfffcc 	andi	r2,r2,65535
   96640:	10d1383a 	mul	r8,r2,r3
   96644:	28c7383a 	mul	r3,r5,r3
   96648:	1185383a 	mul	r2,r2,r6
   9664c:	4008d43a 	srli	r4,r8,16
   96650:	298b383a 	mul	r5,r5,r6
   96654:	10c5883a 	add	r2,r2,r3
   96658:	2089883a 	add	r4,r4,r2
   9665c:	20c0022e 	bgeu	r4,r3,96668 <__umoddi3+0x494>
   96660:	00800074 	movhi	r2,1
   96664:	288b883a 	add	r5,r5,r2
   96668:	2004d43a 	srli	r2,r4,16
   9666c:	2008943a 	slli	r4,r4,16
   96670:	40ffffcc 	andi	r3,r8,65535
   96674:	288b883a 	add	r5,r5,r2
   96678:	20c9883a 	add	r4,r4,r3
   9667c:	39400b36 	bltu	r7,r5,966ac <__umoddi3+0x4d8>
   96680:	39403d26 	beq	r7,r5,96778 <__umoddi3+0x5a4>
   96684:	394bc83a 	sub	r5,r7,r5
   96688:	00000f06 	br	966c8 <__umoddi3+0x4f4>
   9668c:	30c5c83a 	sub	r2,r6,r3
   96690:	1839883a 	mov	fp,r3
   96694:	b084d83a 	srl	r2,r22,r2
   96698:	a0c6983a 	sll	r3,r20,r3
   9669c:	8720983a 	sll	r16,r16,fp
   966a0:	b72c983a 	sll	r22,r22,fp
   966a4:	18a8b03a 	or	r20,r3,r2
   966a8:	003f3a06 	br	96394 <__umoddi3+0x1c0>
   966ac:	d8c00017 	ldw	r3,0(sp)
   966b0:	20c5c83a 	sub	r2,r4,r3
   966b4:	2089803a 	cmpltu	r4,r4,r2
   966b8:	2dc7c83a 	sub	r3,r5,r23
   966bc:	1907c83a 	sub	r3,r3,r4
   966c0:	38cbc83a 	sub	r5,r7,r3
   966c4:	1009883a 	mov	r4,r2
   966c8:	b105c83a 	sub	r2,r22,r4
   966cc:	b087803a 	cmpltu	r3,r22,r2
   966d0:	28c7c83a 	sub	r3,r5,r3
   966d4:	d9400317 	ldw	r5,12(sp)
   966d8:	1544d83a 	srl	r2,r2,r21
   966dc:	1948983a 	sll	r4,r3,r5
   966e0:	1d46d83a 	srl	r3,r3,r21
   966e4:	20a4b03a 	or	r18,r4,r2
   966e8:	9011883a 	mov	r8,r18
   966ec:	1813883a 	mov	r9,r3
   966f0:	003ef606 	br	962cc <__umoddi3+0xf8>
   966f4:	01400604 	movi	r5,24
   966f8:	2805883a 	mov	r2,r5
   966fc:	003ecc06 	br	96230 <__umoddi3+0x5c>
   96700:	01400204 	movi	r5,8
   96704:	2805883a 	mov	r2,r5
   96708:	003ec906 	br	96230 <__umoddi3+0x5c>
   9670c:	01400204 	movi	r5,8
   96710:	2805883a 	mov	r2,r5
   96714:	003f0106 	br	9631c <__umoddi3+0x148>
   96718:	01400204 	movi	r5,8
   9671c:	2805883a 	mov	r2,r5
   96720:	003f1206 	br	9636c <__umoddi3+0x198>
   96724:	01400604 	movi	r5,24
   96728:	2805883a 	mov	r2,r5
   9672c:	003f0f06 	br	9636c <__umoddi3+0x198>
   96730:	01400604 	movi	r5,24
   96734:	2805883a 	mov	r2,r5
   96738:	003ef806 	br	9631c <__umoddi3+0x148>
   9673c:	3c7fb82e 	bgeu	r7,r17,96620 <__umoddi3+0x44c>
   96740:	843fffc4 	addi	r16,r16,-1
   96744:	3dcf883a 	add	r7,r7,r23
   96748:	003fb506 	br	96620 <__umoddi3+0x44c>
   9674c:	147fa22e 	bgeu	r2,r17,965d8 <__umoddi3+0x404>
   96750:	e73fffc4 	addi	fp,fp,-1
   96754:	15c5883a 	add	r2,r2,r23
   96758:	003f9f06 	br	965d8 <__umoddi3+0x404>
   9675c:	147f692e 	bgeu	r2,r17,96504 <__umoddi3+0x330>
   96760:	1405883a 	add	r2,r2,r16
   96764:	003f6706 	br	96504 <__umoddi3+0x330>
   96768:	1405883a 	add	r2,r2,r16
   9676c:	003f1906 	br	963d4 <__umoddi3+0x200>
   96770:	1405883a 	add	r2,r2,r16
   96774:	003ec906 	br	9629c <__umoddi3+0xc8>
   96778:	b13fcc36 	bltu	r22,r4,966ac <__umoddi3+0x4d8>
   9677c:	000b883a 	mov	r5,zero
   96780:	003fd106 	br	966c8 <__umoddi3+0x4f4>

00096784 <_fpadd_parts>:
   96784:	defff804 	addi	sp,sp,-32
   96788:	dcc00315 	stw	r19,12(sp)
   9678c:	2027883a 	mov	r19,r4
   96790:	21000017 	ldw	r4,0(r4)
   96794:	00c00044 	movi	r3,1
   96798:	dd400515 	stw	r21,20(sp)
   9679c:	dd000415 	stw	r20,16(sp)
   967a0:	ddc00715 	stw	r23,28(sp)
   967a4:	dd800615 	stw	r22,24(sp)
   967a8:	dc800215 	stw	r18,8(sp)
   967ac:	dc400115 	stw	r17,4(sp)
   967b0:	dc000015 	stw	r16,0(sp)
   967b4:	282b883a 	mov	r21,r5
   967b8:	3029883a 	mov	r20,r6
   967bc:	1900632e 	bgeu	r3,r4,9694c <_fpadd_parts+0x1c8>
   967c0:	28800017 	ldw	r2,0(r5)
   967c4:	1880812e 	bgeu	r3,r2,969cc <_fpadd_parts+0x248>
   967c8:	00c00104 	movi	r3,4
   967cc:	20c0dc26 	beq	r4,r3,96b40 <_fpadd_parts+0x3bc>
   967d0:	10c07e26 	beq	r2,r3,969cc <_fpadd_parts+0x248>
   967d4:	00c00084 	movi	r3,2
   967d8:	10c06726 	beq	r2,r3,96978 <_fpadd_parts+0x1f4>
   967dc:	20c07b26 	beq	r4,r3,969cc <_fpadd_parts+0x248>
   967e0:	9dc00217 	ldw	r23,8(r19)
   967e4:	28c00217 	ldw	r3,8(r5)
   967e8:	9c400317 	ldw	r17,12(r19)
   967ec:	2bc00317 	ldw	r15,12(r5)
   967f0:	b8cdc83a 	sub	r6,r23,r3
   967f4:	9c800417 	ldw	r18,16(r19)
   967f8:	2c000417 	ldw	r16,16(r5)
   967fc:	3009883a 	mov	r4,r6
   96800:	30009716 	blt	r6,zero,96a60 <_fpadd_parts+0x2dc>
   96804:	00800fc4 	movi	r2,63
   96808:	11806b16 	blt	r2,r6,969b8 <_fpadd_parts+0x234>
   9680c:	0100a40e 	bge	zero,r4,96aa0 <_fpadd_parts+0x31c>
   96810:	35bff804 	addi	r22,r6,-32
   96814:	b000bc16 	blt	r22,zero,96b08 <_fpadd_parts+0x384>
   96818:	8596d83a 	srl	r11,r16,r22
   9681c:	0019883a 	mov	r12,zero
   96820:	0013883a 	mov	r9,zero
   96824:	01000044 	movi	r4,1
   96828:	0015883a 	mov	r10,zero
   9682c:	b000be16 	blt	r22,zero,96b28 <_fpadd_parts+0x3a4>
   96830:	2590983a 	sll	r8,r4,r22
   96834:	000f883a 	mov	r7,zero
   96838:	00bfffc4 	movi	r2,-1
   9683c:	3889883a 	add	r4,r7,r2
   96840:	408b883a 	add	r5,r8,r2
   96844:	21cd803a 	cmpltu	r6,r4,r7
   96848:	314b883a 	add	r5,r6,r5
   9684c:	7904703a 	and	r2,r15,r4
   96850:	8146703a 	and	r3,r16,r5
   96854:	10c4b03a 	or	r2,r2,r3
   96858:	10000226 	beq	r2,zero,96864 <_fpadd_parts+0xe0>
   9685c:	02400044 	movi	r9,1
   96860:	0015883a 	mov	r10,zero
   96864:	5a5eb03a 	or	r15,r11,r9
   96868:	62a0b03a 	or	r16,r12,r10
   9686c:	99400117 	ldw	r5,4(r19)
   96870:	a8800117 	ldw	r2,4(r21)
   96874:	28806e26 	beq	r5,r2,96a30 <_fpadd_parts+0x2ac>
   96878:	28006626 	beq	r5,zero,96a14 <_fpadd_parts+0x290>
   9687c:	7c45c83a 	sub	r2,r15,r17
   96880:	7889803a 	cmpltu	r4,r15,r2
   96884:	8487c83a 	sub	r3,r16,r18
   96888:	1909c83a 	sub	r4,r3,r4
   9688c:	100d883a 	mov	r6,r2
   96890:	200f883a 	mov	r7,r4
   96894:	38007716 	blt	r7,zero,96a74 <_fpadd_parts+0x2f0>
   96898:	a5c00215 	stw	r23,8(r20)
   9689c:	a1c00415 	stw	r7,16(r20)
   968a0:	a0000115 	stw	zero,4(r20)
   968a4:	a1800315 	stw	r6,12(r20)
   968a8:	a2000317 	ldw	r8,12(r20)
   968ac:	a2400417 	ldw	r9,16(r20)
   968b0:	00bfffc4 	movi	r2,-1
   968b4:	408b883a 	add	r5,r8,r2
   968b8:	2a09803a 	cmpltu	r4,r5,r8
   968bc:	488d883a 	add	r6,r9,r2
   968c0:	01c40034 	movhi	r7,4096
   968c4:	39ffffc4 	addi	r7,r7,-1
   968c8:	218d883a 	add	r6,r4,r6
   968cc:	39801736 	bltu	r7,r6,9692c <_fpadd_parts+0x1a8>
   968d0:	31c06526 	beq	r6,r7,96a68 <_fpadd_parts+0x2e4>
   968d4:	a3000217 	ldw	r12,8(r20)
   968d8:	4209883a 	add	r4,r8,r8
   968dc:	00bfffc4 	movi	r2,-1
   968e0:	220f803a 	cmpltu	r7,r4,r8
   968e4:	4a4b883a 	add	r5,r9,r9
   968e8:	394f883a 	add	r7,r7,r5
   968ec:	2095883a 	add	r10,r4,r2
   968f0:	3897883a 	add	r11,r7,r2
   968f4:	510d803a 	cmpltu	r6,r10,r4
   968f8:	6099883a 	add	r12,r12,r2
   968fc:	32d7883a 	add	r11,r6,r11
   96900:	00840034 	movhi	r2,4096
   96904:	10bfffc4 	addi	r2,r2,-1
   96908:	2011883a 	mov	r8,r4
   9690c:	3813883a 	mov	r9,r7
   96910:	a1000315 	stw	r4,12(r20)
   96914:	a1c00415 	stw	r7,16(r20)
   96918:	a3000215 	stw	r12,8(r20)
   9691c:	12c00336 	bltu	r2,r11,9692c <_fpadd_parts+0x1a8>
   96920:	58bfed1e 	bne	r11,r2,968d8 <_fpadd_parts+0x154>
   96924:	00bfff84 	movi	r2,-2
   96928:	12bfeb2e 	bgeu	r2,r10,968d8 <_fpadd_parts+0x154>
   9692c:	a2800417 	ldw	r10,16(r20)
   96930:	008000c4 	movi	r2,3
   96934:	00c80034 	movhi	r3,8192
   96938:	18ffffc4 	addi	r3,r3,-1
   9693c:	a2400317 	ldw	r9,12(r20)
   96940:	a0800015 	stw	r2,0(r20)
   96944:	1a802336 	bltu	r3,r10,969d4 <_fpadd_parts+0x250>
   96948:	a027883a 	mov	r19,r20
   9694c:	9805883a 	mov	r2,r19
   96950:	ddc00717 	ldw	r23,28(sp)
   96954:	dd800617 	ldw	r22,24(sp)
   96958:	dd400517 	ldw	r21,20(sp)
   9695c:	dd000417 	ldw	r20,16(sp)
   96960:	dcc00317 	ldw	r19,12(sp)
   96964:	dc800217 	ldw	r18,8(sp)
   96968:	dc400117 	ldw	r17,4(sp)
   9696c:	dc000017 	ldw	r16,0(sp)
   96970:	dec00804 	addi	sp,sp,32
   96974:	f800283a 	ret
   96978:	20fff41e 	bne	r4,r3,9694c <_fpadd_parts+0x1c8>
   9697c:	31000015 	stw	r4,0(r6)
   96980:	98800117 	ldw	r2,4(r19)
   96984:	30800115 	stw	r2,4(r6)
   96988:	98c00217 	ldw	r3,8(r19)
   9698c:	30c00215 	stw	r3,8(r6)
   96990:	98800317 	ldw	r2,12(r19)
   96994:	30800315 	stw	r2,12(r6)
   96998:	98c00417 	ldw	r3,16(r19)
   9699c:	30c00415 	stw	r3,16(r6)
   969a0:	98800117 	ldw	r2,4(r19)
   969a4:	28c00117 	ldw	r3,4(r5)
   969a8:	3027883a 	mov	r19,r6
   969ac:	10c4703a 	and	r2,r2,r3
   969b0:	30800115 	stw	r2,4(r6)
   969b4:	003fe506 	br	9694c <_fpadd_parts+0x1c8>
   969b8:	1dc02616 	blt	r3,r23,96a54 <_fpadd_parts+0x2d0>
   969bc:	0023883a 	mov	r17,zero
   969c0:	182f883a 	mov	r23,r3
   969c4:	0025883a 	mov	r18,zero
   969c8:	003fa806 	br	9686c <_fpadd_parts+0xe8>
   969cc:	a827883a 	mov	r19,r21
   969d0:	003fde06 	br	9694c <_fpadd_parts+0x1c8>
   969d4:	01800044 	movi	r6,1
   969d8:	500497fa 	slli	r2,r10,31
   969dc:	4808d07a 	srli	r4,r9,1
   969e0:	518ad83a 	srl	r5,r10,r6
   969e4:	a2000217 	ldw	r8,8(r20)
   969e8:	1108b03a 	or	r4,r2,r4
   969ec:	0007883a 	mov	r3,zero
   969f0:	4984703a 	and	r2,r9,r6
   969f4:	208cb03a 	or	r6,r4,r2
   969f8:	28ceb03a 	or	r7,r5,r3
   969fc:	42000044 	addi	r8,r8,1
   96a00:	a027883a 	mov	r19,r20
   96a04:	a1c00415 	stw	r7,16(r20)
   96a08:	a2000215 	stw	r8,8(r20)
   96a0c:	a1800315 	stw	r6,12(r20)
   96a10:	003fce06 	br	9694c <_fpadd_parts+0x1c8>
   96a14:	8bc5c83a 	sub	r2,r17,r15
   96a18:	8889803a 	cmpltu	r4,r17,r2
   96a1c:	9407c83a 	sub	r3,r18,r16
   96a20:	1909c83a 	sub	r4,r3,r4
   96a24:	100d883a 	mov	r6,r2
   96a28:	200f883a 	mov	r7,r4
   96a2c:	003f9906 	br	96894 <_fpadd_parts+0x110>
   96a30:	7c45883a 	add	r2,r15,r17
   96a34:	13c9803a 	cmpltu	r4,r2,r15
   96a38:	8487883a 	add	r3,r16,r18
   96a3c:	20c9883a 	add	r4,r4,r3
   96a40:	a1400115 	stw	r5,4(r20)
   96a44:	a5c00215 	stw	r23,8(r20)
   96a48:	a0800315 	stw	r2,12(r20)
   96a4c:	a1000415 	stw	r4,16(r20)
   96a50:	003fb606 	br	9692c <_fpadd_parts+0x1a8>
   96a54:	001f883a 	mov	r15,zero
   96a58:	0021883a 	mov	r16,zero
   96a5c:	003f8306 	br	9686c <_fpadd_parts+0xe8>
   96a60:	018dc83a 	sub	r6,zero,r6
   96a64:	003f6706 	br	96804 <_fpadd_parts+0x80>
   96a68:	00bfff84 	movi	r2,-2
   96a6c:	117faf36 	bltu	r2,r5,9692c <_fpadd_parts+0x1a8>
   96a70:	003f9806 	br	968d4 <_fpadd_parts+0x150>
   96a74:	0005883a 	mov	r2,zero
   96a78:	1189c83a 	sub	r4,r2,r6
   96a7c:	1105803a 	cmpltu	r2,r2,r4
   96a80:	01cbc83a 	sub	r5,zero,r7
   96a84:	2885c83a 	sub	r2,r5,r2
   96a88:	01800044 	movi	r6,1
   96a8c:	a1800115 	stw	r6,4(r20)
   96a90:	a5c00215 	stw	r23,8(r20)
   96a94:	a1000315 	stw	r4,12(r20)
   96a98:	a0800415 	stw	r2,16(r20)
   96a9c:	003f8206 	br	968a8 <_fpadd_parts+0x124>
   96aa0:	203f7226 	beq	r4,zero,9686c <_fpadd_parts+0xe8>
   96aa4:	35bff804 	addi	r22,r6,-32
   96aa8:	b9af883a 	add	r23,r23,r6
   96aac:	b0003116 	blt	r22,zero,96b74 <_fpadd_parts+0x3f0>
   96ab0:	959ad83a 	srl	r13,r18,r22
   96ab4:	001d883a 	mov	r14,zero
   96ab8:	000f883a 	mov	r7,zero
   96abc:	01000044 	movi	r4,1
   96ac0:	0011883a 	mov	r8,zero
   96ac4:	b0002516 	blt	r22,zero,96b5c <_fpadd_parts+0x3d8>
   96ac8:	2594983a 	sll	r10,r4,r22
   96acc:	0013883a 	mov	r9,zero
   96ad0:	00bfffc4 	movi	r2,-1
   96ad4:	4889883a 	add	r4,r9,r2
   96ad8:	508b883a 	add	r5,r10,r2
   96adc:	224d803a 	cmpltu	r6,r4,r9
   96ae0:	314b883a 	add	r5,r6,r5
   96ae4:	8904703a 	and	r2,r17,r4
   96ae8:	9146703a 	and	r3,r18,r5
   96aec:	10c4b03a 	or	r2,r2,r3
   96af0:	10000226 	beq	r2,zero,96afc <_fpadd_parts+0x378>
   96af4:	01c00044 	movi	r7,1
   96af8:	0011883a 	mov	r8,zero
   96afc:	69e2b03a 	or	r17,r13,r7
   96b00:	7224b03a 	or	r18,r14,r8
   96b04:	003f5906 	br	9686c <_fpadd_parts+0xe8>
   96b08:	8407883a 	add	r3,r16,r16
   96b0c:	008007c4 	movi	r2,31
   96b10:	1185c83a 	sub	r2,r2,r6
   96b14:	1886983a 	sll	r3,r3,r2
   96b18:	7996d83a 	srl	r11,r15,r6
   96b1c:	8198d83a 	srl	r12,r16,r6
   96b20:	1ad6b03a 	or	r11,r3,r11
   96b24:	003f3e06 	br	96820 <_fpadd_parts+0x9c>
   96b28:	2006d07a 	srli	r3,r4,1
   96b2c:	008007c4 	movi	r2,31
   96b30:	1185c83a 	sub	r2,r2,r6
   96b34:	1890d83a 	srl	r8,r3,r2
   96b38:	218e983a 	sll	r7,r4,r6
   96b3c:	003f3e06 	br	96838 <_fpadd_parts+0xb4>
   96b40:	113f821e 	bne	r2,r4,9694c <_fpadd_parts+0x1c8>
   96b44:	28c00117 	ldw	r3,4(r5)
   96b48:	98800117 	ldw	r2,4(r19)
   96b4c:	10ff7f26 	beq	r2,r3,9694c <_fpadd_parts+0x1c8>
   96b50:	04c002b4 	movhi	r19,10
   96b54:	9cfa1904 	addi	r19,r19,-6044
   96b58:	003f7c06 	br	9694c <_fpadd_parts+0x1c8>
   96b5c:	2006d07a 	srli	r3,r4,1
   96b60:	008007c4 	movi	r2,31
   96b64:	1185c83a 	sub	r2,r2,r6
   96b68:	1894d83a 	srl	r10,r3,r2
   96b6c:	2192983a 	sll	r9,r4,r6
   96b70:	003fd706 	br	96ad0 <_fpadd_parts+0x34c>
   96b74:	9487883a 	add	r3,r18,r18
   96b78:	008007c4 	movi	r2,31
   96b7c:	1185c83a 	sub	r2,r2,r6
   96b80:	1886983a 	sll	r3,r3,r2
   96b84:	899ad83a 	srl	r13,r17,r6
   96b88:	919cd83a 	srl	r14,r18,r6
   96b8c:	1b5ab03a 	or	r13,r3,r13
   96b90:	003fc906 	br	96ab8 <_fpadd_parts+0x334>

00096b94 <__subdf3>:
   96b94:	deffea04 	addi	sp,sp,-88
   96b98:	dcc01415 	stw	r19,80(sp)
   96b9c:	dcc00404 	addi	r19,sp,16
   96ba0:	2011883a 	mov	r8,r4
   96ba4:	2813883a 	mov	r9,r5
   96ba8:	dc401315 	stw	r17,76(sp)
   96bac:	d809883a 	mov	r4,sp
   96bb0:	980b883a 	mov	r5,r19
   96bb4:	dc400904 	addi	r17,sp,36
   96bb8:	dfc01515 	stw	ra,84(sp)
   96bbc:	da400115 	stw	r9,4(sp)
   96bc0:	d9c00315 	stw	r7,12(sp)
   96bc4:	da000015 	stw	r8,0(sp)
   96bc8:	d9800215 	stw	r6,8(sp)
   96bcc:	00978b00 	call	978b0 <__unpack_d>
   96bd0:	d9000204 	addi	r4,sp,8
   96bd4:	880b883a 	mov	r5,r17
   96bd8:	00978b00 	call	978b0 <__unpack_d>
   96bdc:	d8800a17 	ldw	r2,40(sp)
   96be0:	880b883a 	mov	r5,r17
   96be4:	9809883a 	mov	r4,r19
   96be8:	d9800e04 	addi	r6,sp,56
   96bec:	1080005c 	xori	r2,r2,1
   96bf0:	d8800a15 	stw	r2,40(sp)
   96bf4:	00967840 	call	96784 <_fpadd_parts>
   96bf8:	1009883a 	mov	r4,r2
   96bfc:	008dba40 	call	8dba4 <__pack_d>
   96c00:	dfc01517 	ldw	ra,84(sp)
   96c04:	dcc01417 	ldw	r19,80(sp)
   96c08:	dc401317 	ldw	r17,76(sp)
   96c0c:	dec01604 	addi	sp,sp,88
   96c10:	f800283a 	ret

00096c14 <__adddf3>:
   96c14:	deffea04 	addi	sp,sp,-88
   96c18:	dcc01415 	stw	r19,80(sp)
   96c1c:	dcc00404 	addi	r19,sp,16
   96c20:	2011883a 	mov	r8,r4
   96c24:	2813883a 	mov	r9,r5
   96c28:	dc401315 	stw	r17,76(sp)
   96c2c:	d809883a 	mov	r4,sp
   96c30:	980b883a 	mov	r5,r19
   96c34:	dc400904 	addi	r17,sp,36
   96c38:	dfc01515 	stw	ra,84(sp)
   96c3c:	da400115 	stw	r9,4(sp)
   96c40:	d9c00315 	stw	r7,12(sp)
   96c44:	da000015 	stw	r8,0(sp)
   96c48:	d9800215 	stw	r6,8(sp)
   96c4c:	00978b00 	call	978b0 <__unpack_d>
   96c50:	d9000204 	addi	r4,sp,8
   96c54:	880b883a 	mov	r5,r17
   96c58:	00978b00 	call	978b0 <__unpack_d>
   96c5c:	d9800e04 	addi	r6,sp,56
   96c60:	9809883a 	mov	r4,r19
   96c64:	880b883a 	mov	r5,r17
   96c68:	00967840 	call	96784 <_fpadd_parts>
   96c6c:	1009883a 	mov	r4,r2
   96c70:	008dba40 	call	8dba4 <__pack_d>
   96c74:	dfc01517 	ldw	ra,84(sp)
   96c78:	dcc01417 	ldw	r19,80(sp)
   96c7c:	dc401317 	ldw	r17,76(sp)
   96c80:	dec01604 	addi	sp,sp,88
   96c84:	f800283a 	ret

00096c88 <__muldf3>:
   96c88:	deffe004 	addi	sp,sp,-128
   96c8c:	dc401815 	stw	r17,96(sp)
   96c90:	dc400404 	addi	r17,sp,16
   96c94:	2011883a 	mov	r8,r4
   96c98:	2813883a 	mov	r9,r5
   96c9c:	dc001715 	stw	r16,92(sp)
   96ca0:	d809883a 	mov	r4,sp
   96ca4:	880b883a 	mov	r5,r17
   96ca8:	dc000904 	addi	r16,sp,36
   96cac:	dfc01f15 	stw	ra,124(sp)
   96cb0:	da400115 	stw	r9,4(sp)
   96cb4:	d9c00315 	stw	r7,12(sp)
   96cb8:	da000015 	stw	r8,0(sp)
   96cbc:	d9800215 	stw	r6,8(sp)
   96cc0:	ddc01e15 	stw	r23,120(sp)
   96cc4:	dd801d15 	stw	r22,116(sp)
   96cc8:	dd401c15 	stw	r21,112(sp)
   96ccc:	dd001b15 	stw	r20,108(sp)
   96cd0:	dcc01a15 	stw	r19,104(sp)
   96cd4:	dc801915 	stw	r18,100(sp)
   96cd8:	00978b00 	call	978b0 <__unpack_d>
   96cdc:	d9000204 	addi	r4,sp,8
   96ce0:	800b883a 	mov	r5,r16
   96ce4:	00978b00 	call	978b0 <__unpack_d>
   96ce8:	d9000417 	ldw	r4,16(sp)
   96cec:	00800044 	movi	r2,1
   96cf0:	1100102e 	bgeu	r2,r4,96d34 <__muldf3+0xac>
   96cf4:	d8c00917 	ldw	r3,36(sp)
   96cf8:	10c0062e 	bgeu	r2,r3,96d14 <__muldf3+0x8c>
   96cfc:	00800104 	movi	r2,4
   96d00:	20800a26 	beq	r4,r2,96d2c <__muldf3+0xa4>
   96d04:	1880cc26 	beq	r3,r2,97038 <__muldf3+0x3b0>
   96d08:	00800084 	movi	r2,2
   96d0c:	20800926 	beq	r4,r2,96d34 <__muldf3+0xac>
   96d10:	1880191e 	bne	r3,r2,96d78 <__muldf3+0xf0>
   96d14:	d8c00a17 	ldw	r3,40(sp)
   96d18:	d8800517 	ldw	r2,20(sp)
   96d1c:	8009883a 	mov	r4,r16
   96d20:	10c4c03a 	cmpne	r2,r2,r3
   96d24:	d8800a15 	stw	r2,40(sp)
   96d28:	00000706 	br	96d48 <__muldf3+0xc0>
   96d2c:	00800084 	movi	r2,2
   96d30:	1880c326 	beq	r3,r2,97040 <__muldf3+0x3b8>
   96d34:	d8800517 	ldw	r2,20(sp)
   96d38:	d8c00a17 	ldw	r3,40(sp)
   96d3c:	8809883a 	mov	r4,r17
   96d40:	10c4c03a 	cmpne	r2,r2,r3
   96d44:	d8800515 	stw	r2,20(sp)
   96d48:	008dba40 	call	8dba4 <__pack_d>
   96d4c:	dfc01f17 	ldw	ra,124(sp)
   96d50:	ddc01e17 	ldw	r23,120(sp)
   96d54:	dd801d17 	ldw	r22,116(sp)
   96d58:	dd401c17 	ldw	r21,112(sp)
   96d5c:	dd001b17 	ldw	r20,108(sp)
   96d60:	dcc01a17 	ldw	r19,104(sp)
   96d64:	dc801917 	ldw	r18,100(sp)
   96d68:	dc401817 	ldw	r17,96(sp)
   96d6c:	dc001717 	ldw	r16,92(sp)
   96d70:	dec02004 	addi	sp,sp,128
   96d74:	f800283a 	ret
   96d78:	dd800717 	ldw	r22,28(sp)
   96d7c:	dc800c17 	ldw	r18,48(sp)
   96d80:	002b883a 	mov	r21,zero
   96d84:	0023883a 	mov	r17,zero
   96d88:	a80b883a 	mov	r5,r21
   96d8c:	b00d883a 	mov	r6,r22
   96d90:	880f883a 	mov	r7,r17
   96d94:	ddc00817 	ldw	r23,32(sp)
   96d98:	dcc00d17 	ldw	r19,52(sp)
   96d9c:	9009883a 	mov	r4,r18
   96da0:	008d8640 	call	8d864 <__muldi3>
   96da4:	001b883a 	mov	r13,zero
   96da8:	680f883a 	mov	r7,r13
   96dac:	b009883a 	mov	r4,r22
   96db0:	000b883a 	mov	r5,zero
   96db4:	980d883a 	mov	r6,r19
   96db8:	b82d883a 	mov	r22,r23
   96dbc:	002f883a 	mov	r23,zero
   96dc0:	db401615 	stw	r13,88(sp)
   96dc4:	d8801315 	stw	r2,76(sp)
   96dc8:	d8c01415 	stw	r3,80(sp)
   96dcc:	dcc01515 	stw	r19,84(sp)
   96dd0:	008d8640 	call	8d864 <__muldi3>
   96dd4:	b00d883a 	mov	r6,r22
   96dd8:	000b883a 	mov	r5,zero
   96ddc:	9009883a 	mov	r4,r18
   96de0:	b80f883a 	mov	r7,r23
   96de4:	1021883a 	mov	r16,r2
   96de8:	1823883a 	mov	r17,r3
   96dec:	008d8640 	call	8d864 <__muldi3>
   96df0:	8085883a 	add	r2,r16,r2
   96df4:	140d803a 	cmpltu	r6,r2,r16
   96df8:	88c7883a 	add	r3,r17,r3
   96dfc:	30cd883a 	add	r6,r6,r3
   96e00:	1029883a 	mov	r20,r2
   96e04:	302b883a 	mov	r21,r6
   96e08:	da801317 	ldw	r10,76(sp)
   96e0c:	dac01417 	ldw	r11,80(sp)
   96e10:	db001517 	ldw	r12,84(sp)
   96e14:	db401617 	ldw	r13,88(sp)
   96e18:	3440612e 	bgeu	r6,r17,96fa0 <__muldf3+0x318>
   96e1c:	0009883a 	mov	r4,zero
   96e20:	5105883a 	add	r2,r10,r4
   96e24:	128d803a 	cmpltu	r6,r2,r10
   96e28:	5d07883a 	add	r3,r11,r20
   96e2c:	30cd883a 	add	r6,r6,r3
   96e30:	0021883a 	mov	r16,zero
   96e34:	04400044 	movi	r17,1
   96e38:	1025883a 	mov	r18,r2
   96e3c:	3027883a 	mov	r19,r6
   96e40:	32c06236 	bltu	r6,r11,96fcc <__muldf3+0x344>
   96e44:	59807a26 	beq	r11,r6,97030 <__muldf3+0x3a8>
   96e48:	680b883a 	mov	r5,r13
   96e4c:	b80f883a 	mov	r7,r23
   96e50:	6009883a 	mov	r4,r12
   96e54:	b00d883a 	mov	r6,r22
   96e58:	008d8640 	call	8d864 <__muldi3>
   96e5c:	1009883a 	mov	r4,r2
   96e60:	000f883a 	mov	r7,zero
   96e64:	1545883a 	add	r2,r2,r21
   96e68:	1111803a 	cmpltu	r8,r2,r4
   96e6c:	19c7883a 	add	r3,r3,r7
   96e70:	40c7883a 	add	r3,r8,r3
   96e74:	88cb883a 	add	r5,r17,r3
   96e78:	d8c00617 	ldw	r3,24(sp)
   96e7c:	8089883a 	add	r4,r16,r2
   96e80:	d8800b17 	ldw	r2,44(sp)
   96e84:	18c00104 	addi	r3,r3,4
   96e88:	240d803a 	cmpltu	r6,r4,r16
   96e8c:	10c7883a 	add	r3,r2,r3
   96e90:	2013883a 	mov	r9,r4
   96e94:	d8800a17 	ldw	r2,40(sp)
   96e98:	d9000517 	ldw	r4,20(sp)
   96e9c:	314d883a 	add	r6,r6,r5
   96ea0:	3015883a 	mov	r10,r6
   96ea4:	2088c03a 	cmpne	r4,r4,r2
   96ea8:	00880034 	movhi	r2,8192
   96eac:	10bfffc4 	addi	r2,r2,-1
   96eb0:	d9000f15 	stw	r4,60(sp)
   96eb4:	d8c01015 	stw	r3,64(sp)
   96eb8:	1180162e 	bgeu	r2,r6,96f14 <__muldf3+0x28c>
   96ebc:	1811883a 	mov	r8,r3
   96ec0:	101f883a 	mov	r15,r2
   96ec4:	980497fa 	slli	r2,r19,31
   96ec8:	9016d07a 	srli	r11,r18,1
   96ecc:	500697fa 	slli	r3,r10,31
   96ed0:	480cd07a 	srli	r6,r9,1
   96ed4:	500ed07a 	srli	r7,r10,1
   96ed8:	12d6b03a 	or	r11,r2,r11
   96edc:	00800044 	movi	r2,1
   96ee0:	198cb03a 	or	r6,r3,r6
   96ee4:	4888703a 	and	r4,r9,r2
   96ee8:	9818d07a 	srli	r12,r19,1
   96eec:	001b883a 	mov	r13,zero
   96ef0:	03a00034 	movhi	r14,32768
   96ef4:	3013883a 	mov	r9,r6
   96ef8:	3815883a 	mov	r10,r7
   96efc:	4091883a 	add	r8,r8,r2
   96f00:	20000226 	beq	r4,zero,96f0c <__muldf3+0x284>
   96f04:	5b64b03a 	or	r18,r11,r13
   96f08:	63a6b03a 	or	r19,r12,r14
   96f0c:	7abfed36 	bltu	r15,r10,96ec4 <__muldf3+0x23c>
   96f10:	da001015 	stw	r8,64(sp)
   96f14:	00840034 	movhi	r2,4096
   96f18:	10bfffc4 	addi	r2,r2,-1
   96f1c:	12801436 	bltu	r2,r10,96f70 <__muldf3+0x2e8>
   96f20:	da001017 	ldw	r8,64(sp)
   96f24:	101f883a 	mov	r15,r2
   96f28:	4a45883a 	add	r2,r9,r9
   96f2c:	124d803a 	cmpltu	r6,r2,r9
   96f30:	5287883a 	add	r3,r10,r10
   96f34:	9497883a 	add	r11,r18,r18
   96f38:	5c8f803a 	cmpltu	r7,r11,r18
   96f3c:	9cd9883a 	add	r12,r19,r19
   96f40:	01000044 	movi	r4,1
   96f44:	30cd883a 	add	r6,r6,r3
   96f48:	3b0f883a 	add	r7,r7,r12
   96f4c:	423fffc4 	addi	r8,r8,-1
   96f50:	1013883a 	mov	r9,r2
   96f54:	3015883a 	mov	r10,r6
   96f58:	111ab03a 	or	r13,r2,r4
   96f5c:	98003016 	blt	r19,zero,97020 <__muldf3+0x398>
   96f60:	5825883a 	mov	r18,r11
   96f64:	3827883a 	mov	r19,r7
   96f68:	7abfef2e 	bgeu	r15,r10,96f28 <__muldf3+0x2a0>
   96f6c:	da001015 	stw	r8,64(sp)
   96f70:	00803fc4 	movi	r2,255
   96f74:	488e703a 	and	r7,r9,r2
   96f78:	00802004 	movi	r2,128
   96f7c:	0007883a 	mov	r3,zero
   96f80:	0011883a 	mov	r8,zero
   96f84:	38801826 	beq	r7,r2,96fe8 <__muldf3+0x360>
   96f88:	008000c4 	movi	r2,3
   96f8c:	d9000e04 	addi	r4,sp,56
   96f90:	da801215 	stw	r10,72(sp)
   96f94:	d8800e15 	stw	r2,56(sp)
   96f98:	da401115 	stw	r9,68(sp)
   96f9c:	003f6a06 	br	96d48 <__muldf3+0xc0>
   96fa0:	89802126 	beq	r17,r6,97028 <__muldf3+0x3a0>
   96fa4:	0009883a 	mov	r4,zero
   96fa8:	5105883a 	add	r2,r10,r4
   96fac:	128d803a 	cmpltu	r6,r2,r10
   96fb0:	5d07883a 	add	r3,r11,r20
   96fb4:	30cd883a 	add	r6,r6,r3
   96fb8:	0021883a 	mov	r16,zero
   96fbc:	0023883a 	mov	r17,zero
   96fc0:	1025883a 	mov	r18,r2
   96fc4:	3027883a 	mov	r19,r6
   96fc8:	32ff9e2e 	bgeu	r6,r11,96e44 <__muldf3+0x1bc>
   96fcc:	00800044 	movi	r2,1
   96fd0:	8089883a 	add	r4,r16,r2
   96fd4:	240d803a 	cmpltu	r6,r4,r16
   96fd8:	344d883a 	add	r6,r6,r17
   96fdc:	2021883a 	mov	r16,r4
   96fe0:	3023883a 	mov	r17,r6
   96fe4:	003f9806 	br	96e48 <__muldf3+0x1c0>
   96fe8:	403fe71e 	bne	r8,zero,96f88 <__muldf3+0x300>
   96fec:	01004004 	movi	r4,256
   96ff0:	4904703a 	and	r2,r9,r4
   96ff4:	10c4b03a 	or	r2,r2,r3
   96ff8:	103fe31e 	bne	r2,zero,96f88 <__muldf3+0x300>
   96ffc:	94c4b03a 	or	r2,r18,r19
   97000:	103fe126 	beq	r2,zero,96f88 <__muldf3+0x300>
   97004:	49c5883a 	add	r2,r9,r7
   97008:	1251803a 	cmpltu	r8,r2,r9
   9700c:	4291883a 	add	r8,r8,r10
   97010:	013fc004 	movi	r4,-256
   97014:	1112703a 	and	r9,r2,r4
   97018:	4015883a 	mov	r10,r8
   9701c:	003fda06 	br	96f88 <__muldf3+0x300>
   97020:	6813883a 	mov	r9,r13
   97024:	003fce06 	br	96f60 <__muldf3+0x2d8>
   97028:	143f7c36 	bltu	r2,r16,96e1c <__muldf3+0x194>
   9702c:	003fdd06 	br	96fa4 <__muldf3+0x31c>
   97030:	12bf852e 	bgeu	r2,r10,96e48 <__muldf3+0x1c0>
   97034:	003fe506 	br	96fcc <__muldf3+0x344>
   97038:	00800084 	movi	r2,2
   9703c:	20bf351e 	bne	r4,r2,96d14 <__muldf3+0x8c>
   97040:	010002b4 	movhi	r4,10
   97044:	213a1904 	addi	r4,r4,-6044
   97048:	003f3f06 	br	96d48 <__muldf3+0xc0>

0009704c <__divdf3>:
   9704c:	deffed04 	addi	sp,sp,-76
   97050:	dcc01115 	stw	r19,68(sp)
   97054:	dcc00404 	addi	r19,sp,16
   97058:	2011883a 	mov	r8,r4
   9705c:	2813883a 	mov	r9,r5
   97060:	dc000e15 	stw	r16,56(sp)
   97064:	d809883a 	mov	r4,sp
   97068:	980b883a 	mov	r5,r19
   9706c:	dc000904 	addi	r16,sp,36
   97070:	dfc01215 	stw	ra,72(sp)
   97074:	da400115 	stw	r9,4(sp)
   97078:	d9c00315 	stw	r7,12(sp)
   9707c:	da000015 	stw	r8,0(sp)
   97080:	d9800215 	stw	r6,8(sp)
   97084:	dc801015 	stw	r18,64(sp)
   97088:	dc400f15 	stw	r17,60(sp)
   9708c:	00978b00 	call	978b0 <__unpack_d>
   97090:	d9000204 	addi	r4,sp,8
   97094:	800b883a 	mov	r5,r16
   97098:	00978b00 	call	978b0 <__unpack_d>
   9709c:	d9000417 	ldw	r4,16(sp)
   970a0:	00800044 	movi	r2,1
   970a4:	11000b2e 	bgeu	r2,r4,970d4 <__divdf3+0x88>
   970a8:	d9400917 	ldw	r5,36(sp)
   970ac:	1140762e 	bgeu	r2,r5,97288 <__divdf3+0x23c>
   970b0:	d8800517 	ldw	r2,20(sp)
   970b4:	d8c00a17 	ldw	r3,40(sp)
   970b8:	01800104 	movi	r6,4
   970bc:	10c4f03a 	xor	r2,r2,r3
   970c0:	d8800515 	stw	r2,20(sp)
   970c4:	21800226 	beq	r4,r6,970d0 <__divdf3+0x84>
   970c8:	00800084 	movi	r2,2
   970cc:	2080141e 	bne	r4,r2,97120 <__divdf3+0xd4>
   970d0:	29000926 	beq	r5,r4,970f8 <__divdf3+0xac>
   970d4:	9809883a 	mov	r4,r19
   970d8:	008dba40 	call	8dba4 <__pack_d>
   970dc:	dfc01217 	ldw	ra,72(sp)
   970e0:	dcc01117 	ldw	r19,68(sp)
   970e4:	dc801017 	ldw	r18,64(sp)
   970e8:	dc400f17 	ldw	r17,60(sp)
   970ec:	dc000e17 	ldw	r16,56(sp)
   970f0:	dec01304 	addi	sp,sp,76
   970f4:	f800283a 	ret
   970f8:	010002b4 	movhi	r4,10
   970fc:	213a1904 	addi	r4,r4,-6044
   97100:	008dba40 	call	8dba4 <__pack_d>
   97104:	dfc01217 	ldw	ra,72(sp)
   97108:	dcc01117 	ldw	r19,68(sp)
   9710c:	dc801017 	ldw	r18,64(sp)
   97110:	dc400f17 	ldw	r17,60(sp)
   97114:	dc000e17 	ldw	r16,56(sp)
   97118:	dec01304 	addi	sp,sp,76
   9711c:	f800283a 	ret
   97120:	29805b26 	beq	r5,r6,97290 <__divdf3+0x244>
   97124:	28802d26 	beq	r5,r2,971dc <__divdf3+0x190>
   97128:	d8c00617 	ldw	r3,24(sp)
   9712c:	d8800b17 	ldw	r2,44(sp)
   97130:	d9c00817 	ldw	r7,32(sp)
   97134:	dc400d17 	ldw	r17,52(sp)
   97138:	188bc83a 	sub	r5,r3,r2
   9713c:	d9800717 	ldw	r6,28(sp)
   97140:	dc000c17 	ldw	r16,48(sp)
   97144:	d9400615 	stw	r5,24(sp)
   97148:	3c403836 	bltu	r7,r17,9722c <__divdf3+0x1e0>
   9714c:	89c03626 	beq	r17,r7,97228 <__divdf3+0x1dc>
   97150:	0015883a 	mov	r10,zero
   97154:	001d883a 	mov	r14,zero
   97158:	02c40034 	movhi	r11,4096
   9715c:	001f883a 	mov	r15,zero
   97160:	003f883a 	mov	ra,zero
   97164:	04800f44 	movi	r18,61
   97168:	00000f06 	br	971a8 <__divdf3+0x15c>
   9716c:	601d883a 	mov	r14,r12
   97170:	681f883a 	mov	r15,r13
   97174:	400d883a 	mov	r6,r8
   97178:	100f883a 	mov	r7,r2
   9717c:	3191883a 	add	r8,r6,r6
   97180:	5808d07a 	srli	r4,r11,1
   97184:	4185803a 	cmpltu	r2,r8,r6
   97188:	39d3883a 	add	r9,r7,r7
   9718c:	28c6b03a 	or	r3,r5,r3
   97190:	1245883a 	add	r2,r2,r9
   97194:	1815883a 	mov	r10,r3
   97198:	2017883a 	mov	r11,r4
   9719c:	400d883a 	mov	r6,r8
   971a0:	100f883a 	mov	r7,r2
   971a4:	fc801726 	beq	ra,r18,97204 <__divdf3+0x1b8>
   971a8:	580a97fa 	slli	r5,r11,31
   971ac:	5006d07a 	srli	r3,r10,1
   971b0:	ffc00044 	addi	ra,ra,1
   971b4:	3c7ff136 	bltu	r7,r17,9717c <__divdf3+0x130>
   971b8:	3411c83a 	sub	r8,r6,r16
   971bc:	3205803a 	cmpltu	r2,r6,r8
   971c0:	3c53c83a 	sub	r9,r7,r17
   971c4:	7298b03a 	or	r12,r14,r10
   971c8:	7adab03a 	or	r13,r15,r11
   971cc:	4885c83a 	sub	r2,r9,r2
   971d0:	89ffe61e 	bne	r17,r7,9716c <__divdf3+0x120>
   971d4:	343fe936 	bltu	r6,r16,9717c <__divdf3+0x130>
   971d8:	003fe406 	br	9716c <__divdf3+0x120>
   971dc:	9809883a 	mov	r4,r19
   971e0:	d9800415 	stw	r6,16(sp)
   971e4:	008dba40 	call	8dba4 <__pack_d>
   971e8:	dfc01217 	ldw	ra,72(sp)
   971ec:	dcc01117 	ldw	r19,68(sp)
   971f0:	dc801017 	ldw	r18,64(sp)
   971f4:	dc400f17 	ldw	r17,60(sp)
   971f8:	dc000e17 	ldw	r16,56(sp)
   971fc:	dec01304 	addi	sp,sp,76
   97200:	f800283a 	ret
   97204:	00803fc4 	movi	r2,255
   97208:	7090703a 	and	r8,r14,r2
   9720c:	00802004 	movi	r2,128
   97210:	0007883a 	mov	r3,zero
   97214:	0013883a 	mov	r9,zero
   97218:	40800d26 	beq	r8,r2,97250 <__divdf3+0x204>
   9721c:	dbc00815 	stw	r15,32(sp)
   97220:	db800715 	stw	r14,28(sp)
   97224:	003fab06 	br	970d4 <__divdf3+0x88>
   97228:	343fc92e 	bgeu	r6,r16,97150 <__divdf3+0x104>
   9722c:	3185883a 	add	r2,r6,r6
   97230:	1189803a 	cmpltu	r4,r2,r6
   97234:	39c7883a 	add	r3,r7,r7
   97238:	20c9883a 	add	r4,r4,r3
   9723c:	297fffc4 	addi	r5,r5,-1
   97240:	100d883a 	mov	r6,r2
   97244:	200f883a 	mov	r7,r4
   97248:	d9400615 	stw	r5,24(sp)
   9724c:	003fc006 	br	97150 <__divdf3+0x104>
   97250:	483ff21e 	bne	r9,zero,9721c <__divdf3+0x1d0>
   97254:	01004004 	movi	r4,256
   97258:	7104703a 	and	r2,r14,r4
   9725c:	10c4b03a 	or	r2,r2,r3
   97260:	103fee1e 	bne	r2,zero,9721c <__divdf3+0x1d0>
   97264:	31c4b03a 	or	r2,r6,r7
   97268:	103fec26 	beq	r2,zero,9721c <__divdf3+0x1d0>
   9726c:	7205883a 	add	r2,r14,r8
   97270:	1391803a 	cmpltu	r8,r2,r14
   97274:	43d1883a 	add	r8,r8,r15
   97278:	013fc004 	movi	r4,-256
   9727c:	111c703a 	and	r14,r2,r4
   97280:	401f883a 	mov	r15,r8
   97284:	003fe506 	br	9721c <__divdf3+0x1d0>
   97288:	8009883a 	mov	r4,r16
   9728c:	003f9206 	br	970d8 <__divdf3+0x8c>
   97290:	9809883a 	mov	r4,r19
   97294:	d8000715 	stw	zero,28(sp)
   97298:	d8000815 	stw	zero,32(sp)
   9729c:	d8000615 	stw	zero,24(sp)
   972a0:	003f8d06 	br	970d8 <__divdf3+0x8c>

000972a4 <__eqdf2>:
   972a4:	deffef04 	addi	sp,sp,-68
   972a8:	dc400f15 	stw	r17,60(sp)
   972ac:	dc400404 	addi	r17,sp,16
   972b0:	2005883a 	mov	r2,r4
   972b4:	2807883a 	mov	r3,r5
   972b8:	dc000e15 	stw	r16,56(sp)
   972bc:	d809883a 	mov	r4,sp
   972c0:	880b883a 	mov	r5,r17
   972c4:	dc000904 	addi	r16,sp,36
   972c8:	d8c00115 	stw	r3,4(sp)
   972cc:	d8800015 	stw	r2,0(sp)
   972d0:	d9800215 	stw	r6,8(sp)
   972d4:	dfc01015 	stw	ra,64(sp)
   972d8:	d9c00315 	stw	r7,12(sp)
   972dc:	00978b00 	call	978b0 <__unpack_d>
   972e0:	d9000204 	addi	r4,sp,8
   972e4:	800b883a 	mov	r5,r16
   972e8:	00978b00 	call	978b0 <__unpack_d>
   972ec:	d8800417 	ldw	r2,16(sp)
   972f0:	00c00044 	movi	r3,1
   972f4:	180d883a 	mov	r6,r3
   972f8:	1880062e 	bgeu	r3,r2,97314 <__eqdf2+0x70>
   972fc:	d8800917 	ldw	r2,36(sp)
   97300:	8809883a 	mov	r4,r17
   97304:	800b883a 	mov	r5,r16
   97308:	1880022e 	bgeu	r3,r2,97314 <__eqdf2+0x70>
   9730c:	00979e80 	call	979e8 <__fpcmp_parts_d>
   97310:	100d883a 	mov	r6,r2
   97314:	3005883a 	mov	r2,r6
   97318:	dfc01017 	ldw	ra,64(sp)
   9731c:	dc400f17 	ldw	r17,60(sp)
   97320:	dc000e17 	ldw	r16,56(sp)
   97324:	dec01104 	addi	sp,sp,68
   97328:	f800283a 	ret

0009732c <__nedf2>:
   9732c:	deffef04 	addi	sp,sp,-68
   97330:	dc400f15 	stw	r17,60(sp)
   97334:	dc400404 	addi	r17,sp,16
   97338:	2005883a 	mov	r2,r4
   9733c:	2807883a 	mov	r3,r5
   97340:	dc000e15 	stw	r16,56(sp)
   97344:	d809883a 	mov	r4,sp
   97348:	880b883a 	mov	r5,r17
   9734c:	dc000904 	addi	r16,sp,36
   97350:	d8c00115 	stw	r3,4(sp)
   97354:	d8800015 	stw	r2,0(sp)
   97358:	d9800215 	stw	r6,8(sp)
   9735c:	dfc01015 	stw	ra,64(sp)
   97360:	d9c00315 	stw	r7,12(sp)
   97364:	00978b00 	call	978b0 <__unpack_d>
   97368:	d9000204 	addi	r4,sp,8
   9736c:	800b883a 	mov	r5,r16
   97370:	00978b00 	call	978b0 <__unpack_d>
   97374:	d8800417 	ldw	r2,16(sp)
   97378:	00c00044 	movi	r3,1
   9737c:	180d883a 	mov	r6,r3
   97380:	1880062e 	bgeu	r3,r2,9739c <__nedf2+0x70>
   97384:	d8800917 	ldw	r2,36(sp)
   97388:	8809883a 	mov	r4,r17
   9738c:	800b883a 	mov	r5,r16
   97390:	1880022e 	bgeu	r3,r2,9739c <__nedf2+0x70>
   97394:	00979e80 	call	979e8 <__fpcmp_parts_d>
   97398:	100d883a 	mov	r6,r2
   9739c:	3005883a 	mov	r2,r6
   973a0:	dfc01017 	ldw	ra,64(sp)
   973a4:	dc400f17 	ldw	r17,60(sp)
   973a8:	dc000e17 	ldw	r16,56(sp)
   973ac:	dec01104 	addi	sp,sp,68
   973b0:	f800283a 	ret

000973b4 <__gtdf2>:
   973b4:	deffef04 	addi	sp,sp,-68
   973b8:	dc400f15 	stw	r17,60(sp)
   973bc:	dc400404 	addi	r17,sp,16
   973c0:	2005883a 	mov	r2,r4
   973c4:	2807883a 	mov	r3,r5
   973c8:	dc000e15 	stw	r16,56(sp)
   973cc:	d809883a 	mov	r4,sp
   973d0:	880b883a 	mov	r5,r17
   973d4:	dc000904 	addi	r16,sp,36
   973d8:	d8c00115 	stw	r3,4(sp)
   973dc:	d8800015 	stw	r2,0(sp)
   973e0:	d9800215 	stw	r6,8(sp)
   973e4:	dfc01015 	stw	ra,64(sp)
   973e8:	d9c00315 	stw	r7,12(sp)
   973ec:	00978b00 	call	978b0 <__unpack_d>
   973f0:	d9000204 	addi	r4,sp,8
   973f4:	800b883a 	mov	r5,r16
   973f8:	00978b00 	call	978b0 <__unpack_d>
   973fc:	d8800417 	ldw	r2,16(sp)
   97400:	00c00044 	movi	r3,1
   97404:	01bfffc4 	movi	r6,-1
   97408:	1880062e 	bgeu	r3,r2,97424 <__gtdf2+0x70>
   9740c:	d8800917 	ldw	r2,36(sp)
   97410:	8809883a 	mov	r4,r17
   97414:	800b883a 	mov	r5,r16
   97418:	1880022e 	bgeu	r3,r2,97424 <__gtdf2+0x70>
   9741c:	00979e80 	call	979e8 <__fpcmp_parts_d>
   97420:	100d883a 	mov	r6,r2
   97424:	3005883a 	mov	r2,r6
   97428:	dfc01017 	ldw	ra,64(sp)
   9742c:	dc400f17 	ldw	r17,60(sp)
   97430:	dc000e17 	ldw	r16,56(sp)
   97434:	dec01104 	addi	sp,sp,68
   97438:	f800283a 	ret

0009743c <__gedf2>:
   9743c:	deffef04 	addi	sp,sp,-68
   97440:	dc400f15 	stw	r17,60(sp)
   97444:	dc400404 	addi	r17,sp,16
   97448:	2005883a 	mov	r2,r4
   9744c:	2807883a 	mov	r3,r5
   97450:	dc000e15 	stw	r16,56(sp)
   97454:	d809883a 	mov	r4,sp
   97458:	880b883a 	mov	r5,r17
   9745c:	dc000904 	addi	r16,sp,36
   97460:	d8c00115 	stw	r3,4(sp)
   97464:	d8800015 	stw	r2,0(sp)
   97468:	d9800215 	stw	r6,8(sp)
   9746c:	dfc01015 	stw	ra,64(sp)
   97470:	d9c00315 	stw	r7,12(sp)
   97474:	00978b00 	call	978b0 <__unpack_d>
   97478:	d9000204 	addi	r4,sp,8
   9747c:	800b883a 	mov	r5,r16
   97480:	00978b00 	call	978b0 <__unpack_d>
   97484:	d8800417 	ldw	r2,16(sp)
   97488:	00c00044 	movi	r3,1
   9748c:	01bfffc4 	movi	r6,-1
   97490:	1880062e 	bgeu	r3,r2,974ac <__gedf2+0x70>
   97494:	d8800917 	ldw	r2,36(sp)
   97498:	8809883a 	mov	r4,r17
   9749c:	800b883a 	mov	r5,r16
   974a0:	1880022e 	bgeu	r3,r2,974ac <__gedf2+0x70>
   974a4:	00979e80 	call	979e8 <__fpcmp_parts_d>
   974a8:	100d883a 	mov	r6,r2
   974ac:	3005883a 	mov	r2,r6
   974b0:	dfc01017 	ldw	ra,64(sp)
   974b4:	dc400f17 	ldw	r17,60(sp)
   974b8:	dc000e17 	ldw	r16,56(sp)
   974bc:	dec01104 	addi	sp,sp,68
   974c0:	f800283a 	ret

000974c4 <__ltdf2>:
   974c4:	deffef04 	addi	sp,sp,-68
   974c8:	dc400f15 	stw	r17,60(sp)
   974cc:	dc400404 	addi	r17,sp,16
   974d0:	2005883a 	mov	r2,r4
   974d4:	2807883a 	mov	r3,r5
   974d8:	dc000e15 	stw	r16,56(sp)
   974dc:	d809883a 	mov	r4,sp
   974e0:	880b883a 	mov	r5,r17
   974e4:	dc000904 	addi	r16,sp,36
   974e8:	d8c00115 	stw	r3,4(sp)
   974ec:	d8800015 	stw	r2,0(sp)
   974f0:	d9800215 	stw	r6,8(sp)
   974f4:	dfc01015 	stw	ra,64(sp)
   974f8:	d9c00315 	stw	r7,12(sp)
   974fc:	00978b00 	call	978b0 <__unpack_d>
   97500:	d9000204 	addi	r4,sp,8
   97504:	800b883a 	mov	r5,r16
   97508:	00978b00 	call	978b0 <__unpack_d>
   9750c:	d8800417 	ldw	r2,16(sp)
   97510:	00c00044 	movi	r3,1
   97514:	180d883a 	mov	r6,r3
   97518:	1880062e 	bgeu	r3,r2,97534 <__ltdf2+0x70>
   9751c:	d8800917 	ldw	r2,36(sp)
   97520:	8809883a 	mov	r4,r17
   97524:	800b883a 	mov	r5,r16
   97528:	1880022e 	bgeu	r3,r2,97534 <__ltdf2+0x70>
   9752c:	00979e80 	call	979e8 <__fpcmp_parts_d>
   97530:	100d883a 	mov	r6,r2
   97534:	3005883a 	mov	r2,r6
   97538:	dfc01017 	ldw	ra,64(sp)
   9753c:	dc400f17 	ldw	r17,60(sp)
   97540:	dc000e17 	ldw	r16,56(sp)
   97544:	dec01104 	addi	sp,sp,68
   97548:	f800283a 	ret

0009754c <__floatsidf>:
   9754c:	2006d7fa 	srli	r3,r4,31
   97550:	defff604 	addi	sp,sp,-40
   97554:	008000c4 	movi	r2,3
   97558:	dfc00915 	stw	ra,36(sp)
   9755c:	dcc00815 	stw	r19,32(sp)
   97560:	dc800715 	stw	r18,28(sp)
   97564:	dc400615 	stw	r17,24(sp)
   97568:	dc000515 	stw	r16,20(sp)
   9756c:	d8800015 	stw	r2,0(sp)
   97570:	d8c00115 	stw	r3,4(sp)
   97574:	20000f1e 	bne	r4,zero,975b4 <__floatsidf+0x68>
   97578:	00800084 	movi	r2,2
   9757c:	d8800015 	stw	r2,0(sp)
   97580:	d809883a 	mov	r4,sp
   97584:	008dba40 	call	8dba4 <__pack_d>
   97588:	1009883a 	mov	r4,r2
   9758c:	180b883a 	mov	r5,r3
   97590:	2005883a 	mov	r2,r4
   97594:	2807883a 	mov	r3,r5
   97598:	dfc00917 	ldw	ra,36(sp)
   9759c:	dcc00817 	ldw	r19,32(sp)
   975a0:	dc800717 	ldw	r18,28(sp)
   975a4:	dc400617 	ldw	r17,24(sp)
   975a8:	dc000517 	ldw	r16,20(sp)
   975ac:	dec00a04 	addi	sp,sp,40
   975b0:	f800283a 	ret
   975b4:	00800f04 	movi	r2,60
   975b8:	1807003a 	cmpeq	r3,r3,zero
   975bc:	d8800215 	stw	r2,8(sp)
   975c0:	18001126 	beq	r3,zero,97608 <__floatsidf+0xbc>
   975c4:	0027883a 	mov	r19,zero
   975c8:	2025883a 	mov	r18,r4
   975cc:	d9000315 	stw	r4,12(sp)
   975d0:	dcc00415 	stw	r19,16(sp)
   975d4:	008d8fc0 	call	8d8fc <__clzsi2>
   975d8:	11000744 	addi	r4,r2,29
   975dc:	013fe80e 	bge	zero,r4,97580 <__floatsidf+0x34>
   975e0:	10bfff44 	addi	r2,r2,-3
   975e4:	10000c16 	blt	r2,zero,97618 <__floatsidf+0xcc>
   975e8:	90a2983a 	sll	r17,r18,r2
   975ec:	0021883a 	mov	r16,zero
   975f0:	d8800217 	ldw	r2,8(sp)
   975f4:	dc400415 	stw	r17,16(sp)
   975f8:	dc000315 	stw	r16,12(sp)
   975fc:	1105c83a 	sub	r2,r2,r4
   97600:	d8800215 	stw	r2,8(sp)
   97604:	003fde06 	br	97580 <__floatsidf+0x34>
   97608:	00a00034 	movhi	r2,32768
   9760c:	20800a26 	beq	r4,r2,97638 <__floatsidf+0xec>
   97610:	0109c83a 	sub	r4,zero,r4
   97614:	003feb06 	br	975c4 <__floatsidf+0x78>
   97618:	9006d07a 	srli	r3,r18,1
   9761c:	008007c4 	movi	r2,31
   97620:	1105c83a 	sub	r2,r2,r4
   97624:	1886d83a 	srl	r3,r3,r2
   97628:	9922983a 	sll	r17,r19,r4
   9762c:	9120983a 	sll	r16,r18,r4
   97630:	1c62b03a 	or	r17,r3,r17
   97634:	003fee06 	br	975f0 <__floatsidf+0xa4>
   97638:	0009883a 	mov	r4,zero
   9763c:	01707834 	movhi	r5,49632
   97640:	003fd306 	br	97590 <__floatsidf+0x44>

00097644 <__fixdfsi>:
   97644:	defff804 	addi	sp,sp,-32
   97648:	2005883a 	mov	r2,r4
   9764c:	2807883a 	mov	r3,r5
   97650:	d809883a 	mov	r4,sp
   97654:	d9400204 	addi	r5,sp,8
   97658:	d8c00115 	stw	r3,4(sp)
   9765c:	d8800015 	stw	r2,0(sp)
   97660:	dfc00715 	stw	ra,28(sp)
   97664:	00978b00 	call	978b0 <__unpack_d>
   97668:	d8c00217 	ldw	r3,8(sp)
   9766c:	00800084 	movi	r2,2
   97670:	1880051e 	bne	r3,r2,97688 <__fixdfsi+0x44>
   97674:	0007883a 	mov	r3,zero
   97678:	1805883a 	mov	r2,r3
   9767c:	dfc00717 	ldw	ra,28(sp)
   97680:	dec00804 	addi	sp,sp,32
   97684:	f800283a 	ret
   97688:	00800044 	movi	r2,1
   9768c:	10fff92e 	bgeu	r2,r3,97674 <__fixdfsi+0x30>
   97690:	00800104 	movi	r2,4
   97694:	18800426 	beq	r3,r2,976a8 <__fixdfsi+0x64>
   97698:	d8c00417 	ldw	r3,16(sp)
   9769c:	183ff516 	blt	r3,zero,97674 <__fixdfsi+0x30>
   976a0:	00800784 	movi	r2,30
   976a4:	10c0080e 	bge	r2,r3,976c8 <__fixdfsi+0x84>
   976a8:	d8800317 	ldw	r2,12(sp)
   976ac:	1000121e 	bne	r2,zero,976f8 <__fixdfsi+0xb4>
   976b0:	00e00034 	movhi	r3,32768
   976b4:	18ffffc4 	addi	r3,r3,-1
   976b8:	1805883a 	mov	r2,r3
   976bc:	dfc00717 	ldw	ra,28(sp)
   976c0:	dec00804 	addi	sp,sp,32
   976c4:	f800283a 	ret
   976c8:	00800f04 	movi	r2,60
   976cc:	10d1c83a 	sub	r8,r2,r3
   976d0:	40bff804 	addi	r2,r8,-32
   976d4:	d9800517 	ldw	r6,20(sp)
   976d8:	d9c00617 	ldw	r7,24(sp)
   976dc:	10000816 	blt	r2,zero,97700 <__fixdfsi+0xbc>
   976e0:	3888d83a 	srl	r4,r7,r2
   976e4:	d8800317 	ldw	r2,12(sp)
   976e8:	2007883a 	mov	r3,r4
   976ec:	103fe226 	beq	r2,zero,97678 <__fixdfsi+0x34>
   976f0:	0107c83a 	sub	r3,zero,r4
   976f4:	003fe006 	br	97678 <__fixdfsi+0x34>
   976f8:	00e00034 	movhi	r3,32768
   976fc:	003fde06 	br	97678 <__fixdfsi+0x34>
   97700:	39c7883a 	add	r3,r7,r7
   97704:	008007c4 	movi	r2,31
   97708:	1205c83a 	sub	r2,r2,r8
   9770c:	1886983a 	sll	r3,r3,r2
   97710:	3208d83a 	srl	r4,r6,r8
   97714:	1908b03a 	or	r4,r3,r4
   97718:	003ff206 	br	976e4 <__fixdfsi+0xa0>

0009771c <__floatunsidf>:
   9771c:	defff204 	addi	sp,sp,-56
   97720:	dfc00d15 	stw	ra,52(sp)
   97724:	ddc00c15 	stw	r23,48(sp)
   97728:	dd800b15 	stw	r22,44(sp)
   9772c:	dd400a15 	stw	r21,40(sp)
   97730:	dd000915 	stw	r20,36(sp)
   97734:	dcc00815 	stw	r19,32(sp)
   97738:	dc800715 	stw	r18,28(sp)
   9773c:	dc400615 	stw	r17,24(sp)
   97740:	dc000515 	stw	r16,20(sp)
   97744:	d8000115 	stw	zero,4(sp)
   97748:	20000f1e 	bne	r4,zero,97788 <__floatunsidf+0x6c>
   9774c:	00800084 	movi	r2,2
   97750:	d8800015 	stw	r2,0(sp)
   97754:	d809883a 	mov	r4,sp
   97758:	008dba40 	call	8dba4 <__pack_d>
   9775c:	dfc00d17 	ldw	ra,52(sp)
   97760:	ddc00c17 	ldw	r23,48(sp)
   97764:	dd800b17 	ldw	r22,44(sp)
   97768:	dd400a17 	ldw	r21,40(sp)
   9776c:	dd000917 	ldw	r20,36(sp)
   97770:	dcc00817 	ldw	r19,32(sp)
   97774:	dc800717 	ldw	r18,28(sp)
   97778:	dc400617 	ldw	r17,24(sp)
   9777c:	dc000517 	ldw	r16,20(sp)
   97780:	dec00e04 	addi	sp,sp,56
   97784:	f800283a 	ret
   97788:	008000c4 	movi	r2,3
   9778c:	00c00f04 	movi	r3,60
   97790:	002f883a 	mov	r23,zero
   97794:	202d883a 	mov	r22,r4
   97798:	d8800015 	stw	r2,0(sp)
   9779c:	d8c00215 	stw	r3,8(sp)
   977a0:	d9000315 	stw	r4,12(sp)
   977a4:	ddc00415 	stw	r23,16(sp)
   977a8:	008d8fc0 	call	8d8fc <__clzsi2>
   977ac:	12400744 	addi	r9,r2,29
   977b0:	48000b16 	blt	r9,zero,977e0 <__floatunsidf+0xc4>
   977b4:	483fe726 	beq	r9,zero,97754 <__floatunsidf+0x38>
   977b8:	10bfff44 	addi	r2,r2,-3
   977bc:	10002e16 	blt	r2,zero,97878 <__floatunsidf+0x15c>
   977c0:	b0a2983a 	sll	r17,r22,r2
   977c4:	0021883a 	mov	r16,zero
   977c8:	d8800217 	ldw	r2,8(sp)
   977cc:	dc400415 	stw	r17,16(sp)
   977d0:	dc000315 	stw	r16,12(sp)
   977d4:	1245c83a 	sub	r2,r2,r9
   977d8:	d8800215 	stw	r2,8(sp)
   977dc:	003fdd06 	br	97754 <__floatunsidf+0x38>
   977e0:	0255c83a 	sub	r10,zero,r9
   977e4:	51bff804 	addi	r6,r10,-32
   977e8:	30001b16 	blt	r6,zero,97858 <__floatunsidf+0x13c>
   977ec:	b9a8d83a 	srl	r20,r23,r6
   977f0:	002b883a 	mov	r21,zero
   977f4:	000f883a 	mov	r7,zero
   977f8:	01000044 	movi	r4,1
   977fc:	0011883a 	mov	r8,zero
   97800:	30002516 	blt	r6,zero,97898 <__floatunsidf+0x17c>
   97804:	21a6983a 	sll	r19,r4,r6
   97808:	0025883a 	mov	r18,zero
   9780c:	00bfffc4 	movi	r2,-1
   97810:	9089883a 	add	r4,r18,r2
   97814:	988b883a 	add	r5,r19,r2
   97818:	248d803a 	cmpltu	r6,r4,r18
   9781c:	314b883a 	add	r5,r6,r5
   97820:	b104703a 	and	r2,r22,r4
   97824:	b946703a 	and	r3,r23,r5
   97828:	10c4b03a 	or	r2,r2,r3
   9782c:	10000226 	beq	r2,zero,97838 <__floatunsidf+0x11c>
   97830:	01c00044 	movi	r7,1
   97834:	0011883a 	mov	r8,zero
   97838:	d9000217 	ldw	r4,8(sp)
   9783c:	a1c4b03a 	or	r2,r20,r7
   97840:	aa06b03a 	or	r3,r21,r8
   97844:	2249c83a 	sub	r4,r4,r9
   97848:	d8c00415 	stw	r3,16(sp)
   9784c:	d9000215 	stw	r4,8(sp)
   97850:	d8800315 	stw	r2,12(sp)
   97854:	003fbf06 	br	97754 <__floatunsidf+0x38>
   97858:	bdc7883a 	add	r3,r23,r23
   9785c:	008007c4 	movi	r2,31
   97860:	1285c83a 	sub	r2,r2,r10
   97864:	1886983a 	sll	r3,r3,r2
   97868:	b2a8d83a 	srl	r20,r22,r10
   9786c:	baaad83a 	srl	r21,r23,r10
   97870:	1d28b03a 	or	r20,r3,r20
   97874:	003fdf06 	br	977f4 <__floatunsidf+0xd8>
   97878:	b006d07a 	srli	r3,r22,1
   9787c:	008007c4 	movi	r2,31
   97880:	1245c83a 	sub	r2,r2,r9
   97884:	1886d83a 	srl	r3,r3,r2
   97888:	ba62983a 	sll	r17,r23,r9
   9788c:	b260983a 	sll	r16,r22,r9
   97890:	1c62b03a 	or	r17,r3,r17
   97894:	003fcc06 	br	977c8 <__floatunsidf+0xac>
   97898:	2006d07a 	srli	r3,r4,1
   9789c:	008007c4 	movi	r2,31
   978a0:	1285c83a 	sub	r2,r2,r10
   978a4:	18a6d83a 	srl	r19,r3,r2
   978a8:	22a4983a 	sll	r18,r4,r10
   978ac:	003fd706 	br	9780c <__floatunsidf+0xf0>

000978b0 <__unpack_d>:
   978b0:	20c00117 	ldw	r3,4(r4)
   978b4:	22400017 	ldw	r9,0(r4)
   978b8:	00800434 	movhi	r2,16
   978bc:	10bfffc4 	addi	r2,r2,-1
   978c0:	1808d53a 	srli	r4,r3,20
   978c4:	180cd7fa 	srli	r6,r3,31
   978c8:	1894703a 	and	r10,r3,r2
   978cc:	2201ffcc 	andi	r8,r4,2047
   978d0:	281b883a 	mov	r13,r5
   978d4:	4817883a 	mov	r11,r9
   978d8:	29800115 	stw	r6,4(r5)
   978dc:	5019883a 	mov	r12,r10
   978e0:	40001e1e 	bne	r8,zero,9795c <__unpack_d+0xac>
   978e4:	4a84b03a 	or	r2,r9,r10
   978e8:	10001926 	beq	r2,zero,97950 <__unpack_d+0xa0>
   978ec:	4804d63a 	srli	r2,r9,24
   978f0:	500c923a 	slli	r6,r10,8
   978f4:	013f0084 	movi	r4,-1022
   978f8:	00c40034 	movhi	r3,4096
   978fc:	18ffffc4 	addi	r3,r3,-1
   97900:	118cb03a 	or	r6,r2,r6
   97904:	008000c4 	movi	r2,3
   97908:	480a923a 	slli	r5,r9,8
   9790c:	68800015 	stw	r2,0(r13)
   97910:	69000215 	stw	r4,8(r13)
   97914:	19800b36 	bltu	r3,r6,97944 <__unpack_d+0x94>
   97918:	200f883a 	mov	r7,r4
   9791c:	1811883a 	mov	r8,r3
   97920:	2945883a 	add	r2,r5,r5
   97924:	1149803a 	cmpltu	r4,r2,r5
   97928:	3187883a 	add	r3,r6,r6
   9792c:	20c9883a 	add	r4,r4,r3
   97930:	100b883a 	mov	r5,r2
   97934:	200d883a 	mov	r6,r4
   97938:	39ffffc4 	addi	r7,r7,-1
   9793c:	413ff82e 	bgeu	r8,r4,97920 <__unpack_d+0x70>
   97940:	69c00215 	stw	r7,8(r13)
   97944:	69800415 	stw	r6,16(r13)
   97948:	69400315 	stw	r5,12(r13)
   9794c:	f800283a 	ret
   97950:	00800084 	movi	r2,2
   97954:	28800015 	stw	r2,0(r5)
   97958:	f800283a 	ret
   9795c:	0081ffc4 	movi	r2,2047
   97960:	40800f26 	beq	r8,r2,979a0 <__unpack_d+0xf0>
   97964:	480cd63a 	srli	r6,r9,24
   97968:	5006923a 	slli	r3,r10,8
   9796c:	4804923a 	slli	r2,r9,8
   97970:	0009883a 	mov	r4,zero
   97974:	30c6b03a 	or	r3,r6,r3
   97978:	01440034 	movhi	r5,4096
   9797c:	110cb03a 	or	r6,r2,r4
   97980:	423f0044 	addi	r8,r8,-1023
   97984:	194eb03a 	or	r7,r3,r5
   97988:	008000c4 	movi	r2,3
   9798c:	69c00415 	stw	r7,16(r13)
   97990:	6a000215 	stw	r8,8(r13)
   97994:	68800015 	stw	r2,0(r13)
   97998:	69800315 	stw	r6,12(r13)
   9799c:	f800283a 	ret
   979a0:	4a84b03a 	or	r2,r9,r10
   979a4:	1000031e 	bne	r2,zero,979b4 <__unpack_d+0x104>
   979a8:	00800104 	movi	r2,4
   979ac:	28800015 	stw	r2,0(r5)
   979b0:	f800283a 	ret
   979b4:	0009883a 	mov	r4,zero
   979b8:	01400234 	movhi	r5,8
   979bc:	4904703a 	and	r2,r9,r4
   979c0:	5146703a 	and	r3,r10,r5
   979c4:	10c4b03a 	or	r2,r2,r3
   979c8:	10000526 	beq	r2,zero,979e0 <__unpack_d+0x130>
   979cc:	00800044 	movi	r2,1
   979d0:	68800015 	stw	r2,0(r13)
   979d4:	6b000415 	stw	r12,16(r13)
   979d8:	6ac00315 	stw	r11,12(r13)
   979dc:	f800283a 	ret
   979e0:	68000015 	stw	zero,0(r13)
   979e4:	003ffb06 	br	979d4 <__unpack_d+0x124>

000979e8 <__fpcmp_parts_d>:
   979e8:	21800017 	ldw	r6,0(r4)
   979ec:	00c00044 	movi	r3,1
   979f0:	19800a2e 	bgeu	r3,r6,97a1c <__fpcmp_parts_d+0x34>
   979f4:	28800017 	ldw	r2,0(r5)
   979f8:	1880082e 	bgeu	r3,r2,97a1c <__fpcmp_parts_d+0x34>
   979fc:	00c00104 	movi	r3,4
   97a00:	30c02626 	beq	r6,r3,97a9c <__fpcmp_parts_d+0xb4>
   97a04:	10c02226 	beq	r2,r3,97a90 <__fpcmp_parts_d+0xa8>
   97a08:	00c00084 	movi	r3,2
   97a0c:	30c00526 	beq	r6,r3,97a24 <__fpcmp_parts_d+0x3c>
   97a10:	10c0071e 	bne	r2,r3,97a30 <__fpcmp_parts_d+0x48>
   97a14:	20800117 	ldw	r2,4(r4)
   97a18:	1000091e 	bne	r2,zero,97a40 <__fpcmp_parts_d+0x58>
   97a1c:	00800044 	movi	r2,1
   97a20:	f800283a 	ret
   97a24:	10c01a1e 	bne	r2,r3,97a90 <__fpcmp_parts_d+0xa8>
   97a28:	0005883a 	mov	r2,zero
   97a2c:	f800283a 	ret
   97a30:	22000117 	ldw	r8,4(r4)
   97a34:	28800117 	ldw	r2,4(r5)
   97a38:	40800326 	beq	r8,r2,97a48 <__fpcmp_parts_d+0x60>
   97a3c:	403ff726 	beq	r8,zero,97a1c <__fpcmp_parts_d+0x34>
   97a40:	00bfffc4 	movi	r2,-1
   97a44:	f800283a 	ret
   97a48:	20c00217 	ldw	r3,8(r4)
   97a4c:	28800217 	ldw	r2,8(r5)
   97a50:	10fffa16 	blt	r2,r3,97a3c <__fpcmp_parts_d+0x54>
   97a54:	18800916 	blt	r3,r2,97a7c <__fpcmp_parts_d+0x94>
   97a58:	21c00417 	ldw	r7,16(r4)
   97a5c:	28c00417 	ldw	r3,16(r5)
   97a60:	21800317 	ldw	r6,12(r4)
   97a64:	28800317 	ldw	r2,12(r5)
   97a68:	19fff436 	bltu	r3,r7,97a3c <__fpcmp_parts_d+0x54>
   97a6c:	38c00526 	beq	r7,r3,97a84 <__fpcmp_parts_d+0x9c>
   97a70:	38c00236 	bltu	r7,r3,97a7c <__fpcmp_parts_d+0x94>
   97a74:	19ffec1e 	bne	r3,r7,97a28 <__fpcmp_parts_d+0x40>
   97a78:	30bfeb2e 	bgeu	r6,r2,97a28 <__fpcmp_parts_d+0x40>
   97a7c:	403fe71e 	bne	r8,zero,97a1c <__fpcmp_parts_d+0x34>
   97a80:	003fef06 	br	97a40 <__fpcmp_parts_d+0x58>
   97a84:	11bffa2e 	bgeu	r2,r6,97a70 <__fpcmp_parts_d+0x88>
   97a88:	403fe426 	beq	r8,zero,97a1c <__fpcmp_parts_d+0x34>
   97a8c:	003fec06 	br	97a40 <__fpcmp_parts_d+0x58>
   97a90:	28800117 	ldw	r2,4(r5)
   97a94:	103fe11e 	bne	r2,zero,97a1c <__fpcmp_parts_d+0x34>
   97a98:	003fe906 	br	97a40 <__fpcmp_parts_d+0x58>
   97a9c:	11bfdd1e 	bne	r2,r6,97a14 <__fpcmp_parts_d+0x2c>
   97aa0:	28c00117 	ldw	r3,4(r5)
   97aa4:	20800117 	ldw	r2,4(r4)
   97aa8:	1885c83a 	sub	r2,r3,r2
   97aac:	f800283a 	ret

00097ab0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   97ab0:	defff804 	addi	sp,sp,-32
   97ab4:	de00012e 	bgeu	sp,et,97abc <close+0xc>
   97ab8:	003da0fa 	break	3
   97abc:	dfc00715 	stw	ra,28(sp)
   97ac0:	df000615 	stw	fp,24(sp)
   97ac4:	df000604 	addi	fp,sp,24
   97ac8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   97acc:	e0bffc17 	ldw	r2,-16(fp)
   97ad0:	1004803a 	cmplt	r2,r2,zero
   97ad4:	1000081e 	bne	r2,zero,97af8 <close+0x48>
   97ad8:	e0bffc17 	ldw	r2,-16(fp)
   97adc:	10800324 	muli	r2,r2,12
   97ae0:	1007883a 	mov	r3,r2
   97ae4:	008002b4 	movhi	r2,10
   97ae8:	10bcdd04 	addi	r2,r2,-3212
   97aec:	1887883a 	add	r3,r3,r2
   97af0:	e0ffff15 	stw	r3,-4(fp)
   97af4:	00000106 	br	97afc <close+0x4c>
   97af8:	e03fff15 	stw	zero,-4(fp)
   97afc:	e0bfff17 	ldw	r2,-4(fp)
   97b00:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   97b04:	e0bffb17 	ldw	r2,-20(fp)
   97b08:	1005003a 	cmpeq	r2,r2,zero
   97b0c:	10001d1e 	bne	r2,zero,97b84 <close+0xd4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   97b10:	e0bffb17 	ldw	r2,-20(fp)
   97b14:	10800017 	ldw	r2,0(r2)
   97b18:	10800417 	ldw	r2,16(r2)
   97b1c:	1005003a 	cmpeq	r2,r2,zero
   97b20:	1000071e 	bne	r2,zero,97b40 <close+0x90>
   97b24:	e0bffb17 	ldw	r2,-20(fp)
   97b28:	10800017 	ldw	r2,0(r2)
   97b2c:	10800417 	ldw	r2,16(r2)
   97b30:	e13ffb17 	ldw	r4,-20(fp)
   97b34:	103ee83a 	callr	r2
   97b38:	e0bffe15 	stw	r2,-8(fp)
   97b3c:	00000106 	br	97b44 <close+0x94>
   97b40:	e03ffe15 	stw	zero,-8(fp)
   97b44:	e0bffe17 	ldw	r2,-8(fp)
   97b48:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   97b4c:	e13ffc17 	ldw	r4,-16(fp)
   97b50:	00986680 	call	98668 <alt_release_fd>
    if (rval < 0)
   97b54:	e0bffa17 	ldw	r2,-24(fp)
   97b58:	1004403a 	cmpge	r2,r2,zero
   97b5c:	1000071e 	bne	r2,zero,97b7c <close+0xcc>
    {
      ALT_ERRNO = -rval;
   97b60:	0097bb40 	call	97bb4 <alt_get_errno>
   97b64:	e0fffa17 	ldw	r3,-24(fp)
   97b68:	00c7c83a 	sub	r3,zero,r3
   97b6c:	10c00015 	stw	r3,0(r2)
      return -1;
   97b70:	00bfffc4 	movi	r2,-1
   97b74:	e0bffd15 	stw	r2,-12(fp)
   97b78:	00000806 	br	97b9c <close+0xec>
    }
    return 0;
   97b7c:	e03ffd15 	stw	zero,-12(fp)
   97b80:	00000606 	br	97b9c <close+0xec>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   97b84:	0097bb40 	call	97bb4 <alt_get_errno>
   97b88:	1007883a 	mov	r3,r2
   97b8c:	00801444 	movi	r2,81
   97b90:	18800015 	stw	r2,0(r3)
    return -1;
   97b94:	00bfffc4 	movi	r2,-1
   97b98:	e0bffd15 	stw	r2,-12(fp)
   97b9c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   97ba0:	e037883a 	mov	sp,fp
   97ba4:	dfc00117 	ldw	ra,4(sp)
   97ba8:	df000017 	ldw	fp,0(sp)
   97bac:	dec00204 	addi	sp,sp,8
   97bb0:	f800283a 	ret

00097bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   97bb4:	defffd04 	addi	sp,sp,-12
   97bb8:	de00012e 	bgeu	sp,et,97bc0 <alt_get_errno+0xc>
   97bbc:	003da0fa 	break	3
   97bc0:	dfc00215 	stw	ra,8(sp)
   97bc4:	df000115 	stw	fp,4(sp)
   97bc8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   97bcc:	008002b4 	movhi	r2,10
   97bd0:	1081c404 	addi	r2,r2,1808
   97bd4:	10800017 	ldw	r2,0(r2)
   97bd8:	1005003a 	cmpeq	r2,r2,zero
   97bdc:	1000061e 	bne	r2,zero,97bf8 <alt_get_errno+0x44>
   97be0:	008002b4 	movhi	r2,10
   97be4:	1081c404 	addi	r2,r2,1808
   97be8:	10800017 	ldw	r2,0(r2)
   97bec:	103ee83a 	callr	r2
   97bf0:	e0bfff15 	stw	r2,-4(fp)
   97bf4:	00000306 	br	97c04 <alt_get_errno+0x50>
   97bf8:	008002b4 	movhi	r2,10
   97bfc:	10896a04 	addi	r2,r2,9640
   97c00:	e0bfff15 	stw	r2,-4(fp)
   97c04:	e0bfff17 	ldw	r2,-4(fp)
}
   97c08:	e037883a 	mov	sp,fp
   97c0c:	dfc00117 	ldw	ra,4(sp)
   97c10:	df000017 	ldw	fp,0(sp)
   97c14:	dec00204 	addi	sp,sp,8
   97c18:	f800283a 	ret

00097c1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   97c1c:	defffc04 	addi	sp,sp,-16
   97c20:	de00012e 	bgeu	sp,et,97c28 <alt_dev_null_write+0xc>
   97c24:	003da0fa 	break	3
   97c28:	df000315 	stw	fp,12(sp)
   97c2c:	df000304 	addi	fp,sp,12
   97c30:	e13ffd15 	stw	r4,-12(fp)
   97c34:	e17ffe15 	stw	r5,-8(fp)
   97c38:	e1bfff15 	stw	r6,-4(fp)
  return len;
   97c3c:	e0bfff17 	ldw	r2,-4(fp)
}
   97c40:	e037883a 	mov	sp,fp
   97c44:	df000017 	ldw	fp,0(sp)
   97c48:	dec00104 	addi	sp,sp,4
   97c4c:	f800283a 	ret

00097c50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   97c50:	defff904 	addi	sp,sp,-28
   97c54:	de00012e 	bgeu	sp,et,97c5c <fstat+0xc>
   97c58:	003da0fa 	break	3
   97c5c:	dfc00615 	stw	ra,24(sp)
   97c60:	df000515 	stw	fp,20(sp)
   97c64:	df000504 	addi	fp,sp,20
   97c68:	e13ffc15 	stw	r4,-16(fp)
   97c6c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   97c70:	e0bffc17 	ldw	r2,-16(fp)
   97c74:	1004803a 	cmplt	r2,r2,zero
   97c78:	1000081e 	bne	r2,zero,97c9c <fstat+0x4c>
   97c7c:	e0bffc17 	ldw	r2,-16(fp)
   97c80:	10800324 	muli	r2,r2,12
   97c84:	1007883a 	mov	r3,r2
   97c88:	008002b4 	movhi	r2,10
   97c8c:	10bcdd04 	addi	r2,r2,-3212
   97c90:	1887883a 	add	r3,r3,r2
   97c94:	e0ffff15 	stw	r3,-4(fp)
   97c98:	00000106 	br	97ca0 <fstat+0x50>
   97c9c:	e03fff15 	stw	zero,-4(fp)
   97ca0:	e0bfff17 	ldw	r2,-4(fp)
   97ca4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   97ca8:	e0bffb17 	ldw	r2,-20(fp)
   97cac:	1005003a 	cmpeq	r2,r2,zero
   97cb0:	1000121e 	bne	r2,zero,97cfc <fstat+0xac>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   97cb4:	e0bffb17 	ldw	r2,-20(fp)
   97cb8:	10800017 	ldw	r2,0(r2)
   97cbc:	10800817 	ldw	r2,32(r2)
   97cc0:	1005003a 	cmpeq	r2,r2,zero
   97cc4:	1000081e 	bne	r2,zero,97ce8 <fstat+0x98>
    {
      return fd->dev->fstat(fd, st);
   97cc8:	e0bffb17 	ldw	r2,-20(fp)
   97ccc:	10800017 	ldw	r2,0(r2)
   97cd0:	10800817 	ldw	r2,32(r2)
   97cd4:	e13ffb17 	ldw	r4,-20(fp)
   97cd8:	e17ffd17 	ldw	r5,-12(fp)
   97cdc:	103ee83a 	callr	r2
   97ce0:	e0bffe15 	stw	r2,-8(fp)
   97ce4:	00000b06 	br	97d14 <fstat+0xc4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   97ce8:	e0fffd17 	ldw	r3,-12(fp)
   97cec:	00880004 	movi	r2,8192
   97cf0:	18800115 	stw	r2,4(r3)
      return 0;
   97cf4:	e03ffe15 	stw	zero,-8(fp)
   97cf8:	00000606 	br	97d14 <fstat+0xc4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   97cfc:	0097d2c0 	call	97d2c <alt_get_errno>
   97d00:	1007883a 	mov	r3,r2
   97d04:	00801444 	movi	r2,81
   97d08:	18800015 	stw	r2,0(r3)
    return -1;
   97d0c:	00bfffc4 	movi	r2,-1
   97d10:	e0bffe15 	stw	r2,-8(fp)
   97d14:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   97d18:	e037883a 	mov	sp,fp
   97d1c:	dfc00117 	ldw	ra,4(sp)
   97d20:	df000017 	ldw	fp,0(sp)
   97d24:	dec00204 	addi	sp,sp,8
   97d28:	f800283a 	ret

00097d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   97d2c:	defffd04 	addi	sp,sp,-12
   97d30:	de00012e 	bgeu	sp,et,97d38 <alt_get_errno+0xc>
   97d34:	003da0fa 	break	3
   97d38:	dfc00215 	stw	ra,8(sp)
   97d3c:	df000115 	stw	fp,4(sp)
   97d40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   97d44:	008002b4 	movhi	r2,10
   97d48:	1081c404 	addi	r2,r2,1808
   97d4c:	10800017 	ldw	r2,0(r2)
   97d50:	1005003a 	cmpeq	r2,r2,zero
   97d54:	1000061e 	bne	r2,zero,97d70 <alt_get_errno+0x44>
   97d58:	008002b4 	movhi	r2,10
   97d5c:	1081c404 	addi	r2,r2,1808
   97d60:	10800017 	ldw	r2,0(r2)
   97d64:	103ee83a 	callr	r2
   97d68:	e0bfff15 	stw	r2,-4(fp)
   97d6c:	00000306 	br	97d7c <alt_get_errno+0x50>
   97d70:	008002b4 	movhi	r2,10
   97d74:	10896a04 	addi	r2,r2,9640
   97d78:	e0bfff15 	stw	r2,-4(fp)
   97d7c:	e0bfff17 	ldw	r2,-4(fp)
}
   97d80:	e037883a 	mov	sp,fp
   97d84:	dfc00117 	ldw	ra,4(sp)
   97d88:	df000017 	ldw	fp,0(sp)
   97d8c:	dec00204 	addi	sp,sp,8
   97d90:	f800283a 	ret

00097d94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   97d94:	defff904 	addi	sp,sp,-28
   97d98:	de00012e 	bgeu	sp,et,97da0 <alt_ic_isr_register+0xc>
   97d9c:	003da0fa 	break	3
   97da0:	dfc00615 	stw	ra,24(sp)
   97da4:	df000515 	stw	fp,20(sp)
   97da8:	df000504 	addi	fp,sp,20
   97dac:	e13ffc15 	stw	r4,-16(fp)
   97db0:	e17ffd15 	stw	r5,-12(fp)
   97db4:	e1bffe15 	stw	r6,-8(fp)
   97db8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   97dbc:	e0800217 	ldw	r2,8(fp)
   97dc0:	d8800015 	stw	r2,0(sp)
   97dc4:	e13ffc17 	ldw	r4,-16(fp)
   97dc8:	e17ffd17 	ldw	r5,-12(fp)
   97dcc:	e1bffe17 	ldw	r6,-8(fp)
   97dd0:	e1ffff17 	ldw	r7,-4(fp)
   97dd4:	0097f880 	call	97f88 <alt_iic_isr_register>
}  
   97dd8:	e037883a 	mov	sp,fp
   97ddc:	dfc00117 	ldw	ra,4(sp)
   97de0:	df000017 	ldw	fp,0(sp)
   97de4:	dec00204 	addi	sp,sp,8
   97de8:	f800283a 	ret

00097dec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   97dec:	defff904 	addi	sp,sp,-28
   97df0:	de00012e 	bgeu	sp,et,97df8 <alt_ic_irq_enable+0xc>
   97df4:	003da0fa 	break	3
   97df8:	df000615 	stw	fp,24(sp)
   97dfc:	df000604 	addi	fp,sp,24
   97e00:	e13ffe15 	stw	r4,-8(fp)
   97e04:	e17fff15 	stw	r5,-4(fp)
   97e08:	e0bfff17 	ldw	r2,-4(fp)
   97e0c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97e10:	0005303a 	rdctl	r2,status
   97e14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97e18:	e0fffb17 	ldw	r3,-20(fp)
   97e1c:	00bfff84 	movi	r2,-2
   97e20:	1884703a 	and	r2,r3,r2
   97e24:	1001703a 	wrctl	status,r2
  
  return context;
   97e28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   97e2c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   97e30:	e0fffc17 	ldw	r3,-16(fp)
   97e34:	00800044 	movi	r2,1
   97e38:	10c4983a 	sll	r2,r2,r3
   97e3c:	1007883a 	mov	r3,r2
   97e40:	008002b4 	movhi	r2,10
   97e44:	10896e04 	addi	r2,r2,9656
   97e48:	10800017 	ldw	r2,0(r2)
   97e4c:	1886b03a 	or	r3,r3,r2
   97e50:	008002b4 	movhi	r2,10
   97e54:	10896e04 	addi	r2,r2,9656
   97e58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   97e5c:	008002b4 	movhi	r2,10
   97e60:	10896e04 	addi	r2,r2,9656
   97e64:	10800017 	ldw	r2,0(r2)
   97e68:	100170fa 	wrctl	ienable,r2
   97e6c:	e0bffd17 	ldw	r2,-12(fp)
   97e70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97e74:	e0bffa17 	ldw	r2,-24(fp)
   97e78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   97e7c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   97e80:	e037883a 	mov	sp,fp
   97e84:	df000017 	ldw	fp,0(sp)
   97e88:	dec00104 	addi	sp,sp,4
   97e8c:	f800283a 	ret

00097e90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   97e90:	defff904 	addi	sp,sp,-28
   97e94:	de00012e 	bgeu	sp,et,97e9c <alt_ic_irq_disable+0xc>
   97e98:	003da0fa 	break	3
   97e9c:	df000615 	stw	fp,24(sp)
   97ea0:	df000604 	addi	fp,sp,24
   97ea4:	e13ffe15 	stw	r4,-8(fp)
   97ea8:	e17fff15 	stw	r5,-4(fp)
   97eac:	e0bfff17 	ldw	r2,-4(fp)
   97eb0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97eb4:	0005303a 	rdctl	r2,status
   97eb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97ebc:	e0fffb17 	ldw	r3,-20(fp)
   97ec0:	00bfff84 	movi	r2,-2
   97ec4:	1884703a 	and	r2,r3,r2
   97ec8:	1001703a 	wrctl	status,r2
  
  return context;
   97ecc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   97ed0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   97ed4:	e0fffc17 	ldw	r3,-16(fp)
   97ed8:	00800044 	movi	r2,1
   97edc:	10c4983a 	sll	r2,r2,r3
   97ee0:	0084303a 	nor	r2,zero,r2
   97ee4:	1007883a 	mov	r3,r2
   97ee8:	008002b4 	movhi	r2,10
   97eec:	10896e04 	addi	r2,r2,9656
   97ef0:	10800017 	ldw	r2,0(r2)
   97ef4:	1886703a 	and	r3,r3,r2
   97ef8:	008002b4 	movhi	r2,10
   97efc:	10896e04 	addi	r2,r2,9656
   97f00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   97f04:	008002b4 	movhi	r2,10
   97f08:	10896e04 	addi	r2,r2,9656
   97f0c:	10800017 	ldw	r2,0(r2)
   97f10:	100170fa 	wrctl	ienable,r2
   97f14:	e0bffd17 	ldw	r2,-12(fp)
   97f18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97f1c:	e0bffa17 	ldw	r2,-24(fp)
   97f20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   97f24:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   97f28:	e037883a 	mov	sp,fp
   97f2c:	df000017 	ldw	fp,0(sp)
   97f30:	dec00104 	addi	sp,sp,4
   97f34:	f800283a 	ret

00097f38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   97f38:	defffc04 	addi	sp,sp,-16
   97f3c:	de00012e 	bgeu	sp,et,97f44 <alt_ic_irq_enabled+0xc>
   97f40:	003da0fa 	break	3
   97f44:	df000315 	stw	fp,12(sp)
   97f48:	df000304 	addi	fp,sp,12
   97f4c:	e13ffe15 	stw	r4,-8(fp)
   97f50:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   97f54:	000530fa 	rdctl	r2,ienable
   97f58:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   97f5c:	e0ffff17 	ldw	r3,-4(fp)
   97f60:	00800044 	movi	r2,1
   97f64:	10c4983a 	sll	r2,r2,r3
   97f68:	1007883a 	mov	r3,r2
   97f6c:	e0bffd17 	ldw	r2,-12(fp)
   97f70:	1884703a 	and	r2,r3,r2
   97f74:	1004c03a 	cmpne	r2,r2,zero
}
   97f78:	e037883a 	mov	sp,fp
   97f7c:	df000017 	ldw	fp,0(sp)
   97f80:	dec00104 	addi	sp,sp,4
   97f84:	f800283a 	ret

00097f88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   97f88:	defff404 	addi	sp,sp,-48
   97f8c:	de00012e 	bgeu	sp,et,97f94 <alt_iic_isr_register+0xc>
   97f90:	003da0fa 	break	3
   97f94:	dfc00b15 	stw	ra,44(sp)
   97f98:	df000a15 	stw	fp,40(sp)
   97f9c:	df000a04 	addi	fp,sp,40
   97fa0:	e13ffb15 	stw	r4,-20(fp)
   97fa4:	e17ffc15 	stw	r5,-16(fp)
   97fa8:	e1bffd15 	stw	r6,-12(fp)
   97fac:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   97fb0:	00bffa84 	movi	r2,-22
   97fb4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   97fb8:	e0bffc17 	ldw	r2,-16(fp)
   97fbc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   97fc0:	e0bff917 	ldw	r2,-28(fp)
   97fc4:	10800808 	cmpgei	r2,r2,32
   97fc8:	1000291e 	bne	r2,zero,98070 <alt_iic_isr_register+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97fcc:	0005303a 	rdctl	r2,status
   97fd0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97fd4:	e0fff717 	ldw	r3,-36(fp)
   97fd8:	00bfff84 	movi	r2,-2
   97fdc:	1884703a 	and	r2,r3,r2
   97fe0:	1001703a 	wrctl	status,r2
  
  return context;
   97fe4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   97fe8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   97fec:	e0bff917 	ldw	r2,-28(fp)
   97ff0:	00c002b4 	movhi	r3,10
   97ff4:	18c9bf04 	addi	r3,r3,9980
   97ff8:	100490fa 	slli	r2,r2,3
   97ffc:	10c7883a 	add	r3,r2,r3
   98000:	e0bffd17 	ldw	r2,-12(fp)
   98004:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   98008:	e0bff917 	ldw	r2,-28(fp)
   9800c:	00c002b4 	movhi	r3,10
   98010:	18c9bf04 	addi	r3,r3,9980
   98014:	100490fa 	slli	r2,r2,3
   98018:	10c5883a 	add	r2,r2,r3
   9801c:	10c00104 	addi	r3,r2,4
   98020:	e0bffe17 	ldw	r2,-8(fp)
   98024:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   98028:	e0bffd17 	ldw	r2,-12(fp)
   9802c:	1005003a 	cmpeq	r2,r2,zero
   98030:	1000051e 	bne	r2,zero,98048 <alt_iic_isr_register+0xc0>
   98034:	e17ff917 	ldw	r5,-28(fp)
   98038:	e13ffb17 	ldw	r4,-20(fp)
   9803c:	0097dec0 	call	97dec <alt_ic_irq_enable>
   98040:	e0bfff15 	stw	r2,-4(fp)
   98044:	00000406 	br	98058 <alt_iic_isr_register+0xd0>
   98048:	e17ff917 	ldw	r5,-28(fp)
   9804c:	e13ffb17 	ldw	r4,-20(fp)
   98050:	0097e900 	call	97e90 <alt_ic_irq_disable>
   98054:	e0bfff15 	stw	r2,-4(fp)
   98058:	e0bfff17 	ldw	r2,-4(fp)
   9805c:	e0bffa15 	stw	r2,-24(fp)
   98060:	e0bff817 	ldw	r2,-32(fp)
   98064:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98068:	e0bff617 	ldw	r2,-40(fp)
   9806c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   98070:	e0bffa17 	ldw	r2,-24(fp)
}
   98074:	e037883a 	mov	sp,fp
   98078:	dfc00117 	ldw	ra,4(sp)
   9807c:	df000017 	ldw	fp,0(sp)
   98080:	dec00204 	addi	sp,sp,8
   98084:	f800283a 	ret

00098088 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   98088:	deffeb04 	addi	sp,sp,-84
   9808c:	de00012e 	bgeu	sp,et,98094 <isatty+0xc>
   98090:	003da0fa 	break	3
   98094:	dfc01415 	stw	ra,80(sp)
   98098:	df001315 	stw	fp,76(sp)
   9809c:	df001304 	addi	fp,sp,76
   980a0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   980a4:	e0bffd17 	ldw	r2,-12(fp)
   980a8:	1004803a 	cmplt	r2,r2,zero
   980ac:	1000081e 	bne	r2,zero,980d0 <isatty+0x48>
   980b0:	e0bffd17 	ldw	r2,-12(fp)
   980b4:	10800324 	muli	r2,r2,12
   980b8:	1007883a 	mov	r3,r2
   980bc:	008002b4 	movhi	r2,10
   980c0:	10bcdd04 	addi	r2,r2,-3212
   980c4:	1887883a 	add	r3,r3,r2
   980c8:	e0ffff15 	stw	r3,-4(fp)
   980cc:	00000106 	br	980d4 <isatty+0x4c>
   980d0:	e03fff15 	stw	zero,-4(fp)
   980d4:	e0bfff17 	ldw	r2,-4(fp)
   980d8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   980dc:	e0bfed17 	ldw	r2,-76(fp)
   980e0:	1005003a 	cmpeq	r2,r2,zero
   980e4:	10000f1e 	bne	r2,zero,98124 <isatty+0x9c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   980e8:	e0bfed17 	ldw	r2,-76(fp)
   980ec:	10800017 	ldw	r2,0(r2)
   980f0:	10800817 	ldw	r2,32(r2)
   980f4:	1004c03a 	cmpne	r2,r2,zero
   980f8:	1000031e 	bne	r2,zero,98108 <isatty+0x80>
    {
      return 1;
   980fc:	00800044 	movi	r2,1
   98100:	e0bffe15 	stw	r2,-8(fp)
   98104:	00000c06 	br	98138 <isatty+0xb0>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   98108:	e17fee04 	addi	r5,fp,-72
   9810c:	e13ffd17 	ldw	r4,-12(fp)
   98110:	0097c500 	call	97c50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   98114:	e0bfef17 	ldw	r2,-68(fp)
   98118:	10880020 	cmpeqi	r2,r2,8192
   9811c:	e0bffe15 	stw	r2,-8(fp)
   98120:	00000506 	br	98138 <isatty+0xb0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   98124:	00981500 	call	98150 <alt_get_errno>
   98128:	1007883a 	mov	r3,r2
   9812c:	00801444 	movi	r2,81
   98130:	18800015 	stw	r2,0(r3)
    return 0;
   98134:	e03ffe15 	stw	zero,-8(fp)
   98138:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   9813c:	e037883a 	mov	sp,fp
   98140:	dfc00117 	ldw	ra,4(sp)
   98144:	df000017 	ldw	fp,0(sp)
   98148:	dec00204 	addi	sp,sp,8
   9814c:	f800283a 	ret

00098150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   98150:	defffd04 	addi	sp,sp,-12
   98154:	de00012e 	bgeu	sp,et,9815c <alt_get_errno+0xc>
   98158:	003da0fa 	break	3
   9815c:	dfc00215 	stw	ra,8(sp)
   98160:	df000115 	stw	fp,4(sp)
   98164:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   98168:	008002b4 	movhi	r2,10
   9816c:	1081c404 	addi	r2,r2,1808
   98170:	10800017 	ldw	r2,0(r2)
   98174:	1005003a 	cmpeq	r2,r2,zero
   98178:	1000061e 	bne	r2,zero,98194 <alt_get_errno+0x44>
   9817c:	008002b4 	movhi	r2,10
   98180:	1081c404 	addi	r2,r2,1808
   98184:	10800017 	ldw	r2,0(r2)
   98188:	103ee83a 	callr	r2
   9818c:	e0bfff15 	stw	r2,-4(fp)
   98190:	00000306 	br	981a0 <alt_get_errno+0x50>
   98194:	008002b4 	movhi	r2,10
   98198:	10896a04 	addi	r2,r2,9640
   9819c:	e0bfff15 	stw	r2,-4(fp)
   981a0:	e0bfff17 	ldw	r2,-4(fp)
}
   981a4:	e037883a 	mov	sp,fp
   981a8:	dfc00117 	ldw	ra,4(sp)
   981ac:	df000017 	ldw	fp,0(sp)
   981b0:	dec00204 	addi	sp,sp,8
   981b4:	f800283a 	ret

000981b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   981b8:	defffe04 	addi	sp,sp,-8
   981bc:	de00012e 	bgeu	sp,et,981c4 <alt_load+0xc>
   981c0:	003da0fa 	break	3
   981c4:	dfc00115 	stw	ra,4(sp)
   981c8:	df000015 	stw	fp,0(sp)
   981cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   981d0:	010002b4 	movhi	r4,10
   981d4:	2101c804 	addi	r4,r4,1824
   981d8:	014002b4 	movhi	r5,10
   981dc:	297a2904 	addi	r5,r5,-5980
   981e0:	018002b4 	movhi	r6,10
   981e4:	3181c804 	addi	r6,r6,1824
   981e8:	00982400 	call	98240 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   981ec:	01000234 	movhi	r4,8
   981f0:	21000804 	addi	r4,r4,32
   981f4:	01400234 	movhi	r5,8
   981f8:	29400804 	addi	r5,r5,32
   981fc:	01800234 	movhi	r6,8
   98200:	31807a04 	addi	r6,r6,488
   98204:	00982400 	call	98240 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   98208:	010002b4 	movhi	r4,10
   9820c:	212a3004 	addi	r4,r4,-22336
   98210:	014002b4 	movhi	r5,10
   98214:	296a3004 	addi	r5,r5,-22336
   98218:	018002b4 	movhi	r6,10
   9821c:	31ba2904 	addi	r6,r6,-5980
   98220:	00982400 	call	98240 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   98224:	00999780 	call	99978 <alt_dcache_flush_all>
  alt_icache_flush_all();
   98228:	0099bc00 	call	99bc0 <alt_icache_flush_all>
}
   9822c:	e037883a 	mov	sp,fp
   98230:	dfc00117 	ldw	ra,4(sp)
   98234:	df000017 	ldw	fp,0(sp)
   98238:	dec00204 	addi	sp,sp,8
   9823c:	f800283a 	ret

00098240 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   98240:	defffc04 	addi	sp,sp,-16
   98244:	de00012e 	bgeu	sp,et,9824c <alt_load_section+0xc>
   98248:	003da0fa 	break	3
   9824c:	df000315 	stw	fp,12(sp)
   98250:	df000304 	addi	fp,sp,12
   98254:	e13ffd15 	stw	r4,-12(fp)
   98258:	e17ffe15 	stw	r5,-8(fp)
   9825c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   98260:	e0fffe17 	ldw	r3,-8(fp)
   98264:	e0bffd17 	ldw	r2,-12(fp)
   98268:	18800e26 	beq	r3,r2,982a4 <alt_load_section+0x64>
  {
    while( to != end )
   9826c:	00000a06 	br	98298 <alt_load_section+0x58>
    {
      *to++ = *from++;
   98270:	e0bffd17 	ldw	r2,-12(fp)
   98274:	10c00017 	ldw	r3,0(r2)
   98278:	e0bffe17 	ldw	r2,-8(fp)
   9827c:	10c00015 	stw	r3,0(r2)
   98280:	e0bffe17 	ldw	r2,-8(fp)
   98284:	10800104 	addi	r2,r2,4
   98288:	e0bffe15 	stw	r2,-8(fp)
   9828c:	e0bffd17 	ldw	r2,-12(fp)
   98290:	10800104 	addi	r2,r2,4
   98294:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   98298:	e0fffe17 	ldw	r3,-8(fp)
   9829c:	e0bfff17 	ldw	r2,-4(fp)
   982a0:	18bff31e 	bne	r3,r2,98270 <alt_load_section+0x30>
    {
      *to++ = *from++;
    }
  }
}
   982a4:	e037883a 	mov	sp,fp
   982a8:	df000017 	ldw	fp,0(sp)
   982ac:	dec00104 	addi	sp,sp,4
   982b0:	f800283a 	ret

000982b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   982b4:	defff804 	addi	sp,sp,-32
   982b8:	de00012e 	bgeu	sp,et,982c0 <lseek+0xc>
   982bc:	003da0fa 	break	3
   982c0:	dfc00715 	stw	ra,28(sp)
   982c4:	df000615 	stw	fp,24(sp)
   982c8:	df000604 	addi	fp,sp,24
   982cc:	e13ffc15 	stw	r4,-16(fp)
   982d0:	e17ffd15 	stw	r5,-12(fp)
   982d4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   982d8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   982dc:	e0bffc17 	ldw	r2,-16(fp)
   982e0:	1004803a 	cmplt	r2,r2,zero
   982e4:	1000081e 	bne	r2,zero,98308 <lseek+0x54>
   982e8:	e0bffc17 	ldw	r2,-16(fp)
   982ec:	10800324 	muli	r2,r2,12
   982f0:	1007883a 	mov	r3,r2
   982f4:	008002b4 	movhi	r2,10
   982f8:	10bcdd04 	addi	r2,r2,-3212
   982fc:	1887883a 	add	r3,r3,r2
   98300:	e0ffff15 	stw	r3,-4(fp)
   98304:	00000106 	br	9830c <lseek+0x58>
   98308:	e03fff15 	stw	zero,-4(fp)
   9830c:	e0bfff17 	ldw	r2,-4(fp)
   98310:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   98314:	e0bffb17 	ldw	r2,-20(fp)
   98318:	1005003a 	cmpeq	r2,r2,zero
   9831c:	1000111e 	bne	r2,zero,98364 <lseek+0xb0>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   98320:	e0bffb17 	ldw	r2,-20(fp)
   98324:	10800017 	ldw	r2,0(r2)
   98328:	10800717 	ldw	r2,28(r2)
   9832c:	1005003a 	cmpeq	r2,r2,zero
   98330:	1000091e 	bne	r2,zero,98358 <lseek+0xa4>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   98334:	e0bffb17 	ldw	r2,-20(fp)
   98338:	10800017 	ldw	r2,0(r2)
   9833c:	10800717 	ldw	r2,28(r2)
   98340:	e13ffb17 	ldw	r4,-20(fp)
   98344:	e17ffd17 	ldw	r5,-12(fp)
   98348:	e1bffe17 	ldw	r6,-8(fp)
   9834c:	103ee83a 	callr	r2
   98350:	e0bffa15 	stw	r2,-24(fp)
   98354:	00000506 	br	9836c <lseek+0xb8>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   98358:	00bfde84 	movi	r2,-134
   9835c:	e0bffa15 	stw	r2,-24(fp)
   98360:	00000206 	br	9836c <lseek+0xb8>
    }
  }
  else  
  {
    rc = -EBADFD;
   98364:	00bfebc4 	movi	r2,-81
   98368:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   9836c:	e0bffa17 	ldw	r2,-24(fp)
   98370:	1004403a 	cmpge	r2,r2,zero
   98374:	1000071e 	bne	r2,zero,98394 <lseek+0xe0>
  {
    ALT_ERRNO = -rc;
   98378:	00983ac0 	call	983ac <alt_get_errno>
   9837c:	1007883a 	mov	r3,r2
   98380:	e0bffa17 	ldw	r2,-24(fp)
   98384:	0085c83a 	sub	r2,zero,r2
   98388:	18800015 	stw	r2,0(r3)
    rc = -1;
   9838c:	00bfffc4 	movi	r2,-1
   98390:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   98394:	e0bffa17 	ldw	r2,-24(fp)
}
   98398:	e037883a 	mov	sp,fp
   9839c:	dfc00117 	ldw	ra,4(sp)
   983a0:	df000017 	ldw	fp,0(sp)
   983a4:	dec00204 	addi	sp,sp,8
   983a8:	f800283a 	ret

000983ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   983ac:	defffd04 	addi	sp,sp,-12
   983b0:	de00012e 	bgeu	sp,et,983b8 <alt_get_errno+0xc>
   983b4:	003da0fa 	break	3
   983b8:	dfc00215 	stw	ra,8(sp)
   983bc:	df000115 	stw	fp,4(sp)
   983c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   983c4:	008002b4 	movhi	r2,10
   983c8:	1081c404 	addi	r2,r2,1808
   983cc:	10800017 	ldw	r2,0(r2)
   983d0:	1005003a 	cmpeq	r2,r2,zero
   983d4:	1000061e 	bne	r2,zero,983f0 <alt_get_errno+0x44>
   983d8:	008002b4 	movhi	r2,10
   983dc:	1081c404 	addi	r2,r2,1808
   983e0:	10800017 	ldw	r2,0(r2)
   983e4:	103ee83a 	callr	r2
   983e8:	e0bfff15 	stw	r2,-4(fp)
   983ec:	00000306 	br	983fc <alt_get_errno+0x50>
   983f0:	008002b4 	movhi	r2,10
   983f4:	10896a04 	addi	r2,r2,9640
   983f8:	e0bfff15 	stw	r2,-4(fp)
   983fc:	e0bfff17 	ldw	r2,-4(fp)
}
   98400:	e037883a 	mov	sp,fp
   98404:	dfc00117 	ldw	ra,4(sp)
   98408:	df000017 	ldw	fp,0(sp)
   9840c:	dec00204 	addi	sp,sp,8
   98410:	f800283a 	ret

00098414 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   98414:	defffd04 	addi	sp,sp,-12
   98418:	de00012e 	bgeu	sp,et,98420 <alt_main+0xc>
   9841c:	003da0fa 	break	3
   98420:	dfc00215 	stw	ra,8(sp)
   98424:	df000115 	stw	fp,4(sp)
   98428:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   9842c:	0009883a 	mov	r4,zero
   98430:	00989d40 	call	989d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   98434:	0098a100 	call	98a10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   98438:	010002b4 	movhi	r4,10
   9843c:	213a2104 	addi	r4,r4,-6012
   98440:	014002b4 	movhi	r5,10
   98444:	297a2104 	addi	r5,r5,-6012
   98448:	018002b4 	movhi	r6,10
   9844c:	31ba2104 	addi	r6,r6,-6012
   98450:	0099cc40 	call	99cc4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   98454:	0099ae80 	call	99ae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   98458:	010002b4 	movhi	r4,10
   9845c:	2126d504 	addi	r4,r4,-25772
   98460:	009a5180 	call	9a518 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   98464:	d127ba17 	ldw	r4,-24856(gp)
   98468:	d167bb17 	ldw	r5,-24852(gp)
   9846c:	d1a7bc17 	ldw	r6,-24848(gp)
   98470:	008c8700 	call	8c870 <main>
   98474:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   98478:	01000044 	movi	r4,1
   9847c:	0097ab00 	call	97ab0 <close>
  exit (result);
   98480:	e13fff17 	ldw	r4,-4(fp)
   98484:	009a52c0 	call	9a52c <exit>

00098488 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   98488:	defffe04 	addi	sp,sp,-8
   9848c:	de00012e 	bgeu	sp,et,98494 <__malloc_lock+0xc>
   98490:	003da0fa 	break	3
   98494:	df000115 	stw	fp,4(sp)
   98498:	df000104 	addi	fp,sp,4
   9849c:	e13fff15 	stw	r4,-4(fp)
}
   984a0:	e037883a 	mov	sp,fp
   984a4:	df000017 	ldw	fp,0(sp)
   984a8:	dec00104 	addi	sp,sp,4
   984ac:	f800283a 	ret

000984b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   984b0:	defffe04 	addi	sp,sp,-8
   984b4:	de00012e 	bgeu	sp,et,984bc <__malloc_unlock+0xc>
   984b8:	003da0fa 	break	3
   984bc:	df000115 	stw	fp,4(sp)
   984c0:	df000104 	addi	fp,sp,4
   984c4:	e13fff15 	stw	r4,-4(fp)
}
   984c8:	e037883a 	mov	sp,fp
   984cc:	df000017 	ldw	fp,0(sp)
   984d0:	dec00104 	addi	sp,sp,4
   984d4:	f800283a 	ret

000984d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   984d8:	defff704 	addi	sp,sp,-36
   984dc:	de00012e 	bgeu	sp,et,984e4 <read+0xc>
   984e0:	003da0fa 	break	3
   984e4:	dfc00815 	stw	ra,32(sp)
   984e8:	df000715 	stw	fp,28(sp)
   984ec:	df000704 	addi	fp,sp,28
   984f0:	e13ffb15 	stw	r4,-20(fp)
   984f4:	e17ffc15 	stw	r5,-16(fp)
   984f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   984fc:	e0bffb17 	ldw	r2,-20(fp)
   98500:	1004803a 	cmplt	r2,r2,zero
   98504:	1000081e 	bne	r2,zero,98528 <read+0x50>
   98508:	e0bffb17 	ldw	r2,-20(fp)
   9850c:	10800324 	muli	r2,r2,12
   98510:	1007883a 	mov	r3,r2
   98514:	008002b4 	movhi	r2,10
   98518:	10bcdd04 	addi	r2,r2,-3212
   9851c:	1887883a 	add	r3,r3,r2
   98520:	e0ffff15 	stw	r3,-4(fp)
   98524:	00000106 	br	9852c <read+0x54>
   98528:	e03fff15 	stw	zero,-4(fp)
   9852c:	e0bfff17 	ldw	r2,-4(fp)
   98530:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   98534:	e0bffa17 	ldw	r2,-24(fp)
   98538:	1005003a 	cmpeq	r2,r2,zero
   9853c:	1000241e 	bne	r2,zero,985d0 <read+0xf8>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   98540:	e0bffa17 	ldw	r2,-24(fp)
   98544:	10800217 	ldw	r2,8(r2)
   98548:	108000cc 	andi	r2,r2,3
   9854c:	10800060 	cmpeqi	r2,r2,1
   98550:	10001a1e 	bne	r2,zero,985bc <read+0xe4>
   98554:	e0bffa17 	ldw	r2,-24(fp)
   98558:	10800017 	ldw	r2,0(r2)
   9855c:	10800517 	ldw	r2,20(r2)
   98560:	1005003a 	cmpeq	r2,r2,zero
   98564:	1000151e 	bne	r2,zero,985bc <read+0xe4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   98568:	e0bffa17 	ldw	r2,-24(fp)
   9856c:	10800017 	ldw	r2,0(r2)
   98570:	10800517 	ldw	r2,20(r2)
   98574:	e17ffc17 	ldw	r5,-16(fp)
   98578:	e1bffd17 	ldw	r6,-12(fp)
   9857c:	e13ffa17 	ldw	r4,-24(fp)
   98580:	103ee83a 	callr	r2
   98584:	e0bff915 	stw	r2,-28(fp)
   98588:	e0bff917 	ldw	r2,-28(fp)
   9858c:	1004403a 	cmpge	r2,r2,zero
   98590:	1000071e 	bne	r2,zero,985b0 <read+0xd8>
        {
          ALT_ERRNO = -rval;
   98594:	00986000 	call	98600 <alt_get_errno>
   98598:	e0fff917 	ldw	r3,-28(fp)
   9859c:	00c7c83a 	sub	r3,zero,r3
   985a0:	10c00015 	stw	r3,0(r2)
          return -1;
   985a4:	00bfffc4 	movi	r2,-1
   985a8:	e0bffe15 	stw	r2,-8(fp)
   985ac:	00000e06 	br	985e8 <read+0x110>
        }
        return rval;
   985b0:	e0bff917 	ldw	r2,-28(fp)
   985b4:	e0bffe15 	stw	r2,-8(fp)
   985b8:	00000b06 	br	985e8 <read+0x110>
      }
      else
      {
        ALT_ERRNO = EACCES;
   985bc:	00986000 	call	98600 <alt_get_errno>
   985c0:	1007883a 	mov	r3,r2
   985c4:	00800344 	movi	r2,13
   985c8:	18800015 	stw	r2,0(r3)
   985cc:	00000406 	br	985e0 <read+0x108>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   985d0:	00986000 	call	98600 <alt_get_errno>
   985d4:	1007883a 	mov	r3,r2
   985d8:	00801444 	movi	r2,81
   985dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   985e0:	00bfffc4 	movi	r2,-1
   985e4:	e0bffe15 	stw	r2,-8(fp)
   985e8:	e0bffe17 	ldw	r2,-8(fp)
}
   985ec:	e037883a 	mov	sp,fp
   985f0:	dfc00117 	ldw	ra,4(sp)
   985f4:	df000017 	ldw	fp,0(sp)
   985f8:	dec00204 	addi	sp,sp,8
   985fc:	f800283a 	ret

00098600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   98600:	defffd04 	addi	sp,sp,-12
   98604:	de00012e 	bgeu	sp,et,9860c <alt_get_errno+0xc>
   98608:	003da0fa 	break	3
   9860c:	dfc00215 	stw	ra,8(sp)
   98610:	df000115 	stw	fp,4(sp)
   98614:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   98618:	008002b4 	movhi	r2,10
   9861c:	1081c404 	addi	r2,r2,1808
   98620:	10800017 	ldw	r2,0(r2)
   98624:	1005003a 	cmpeq	r2,r2,zero
   98628:	1000061e 	bne	r2,zero,98644 <alt_get_errno+0x44>
   9862c:	008002b4 	movhi	r2,10
   98630:	1081c404 	addi	r2,r2,1808
   98634:	10800017 	ldw	r2,0(r2)
   98638:	103ee83a 	callr	r2
   9863c:	e0bfff15 	stw	r2,-4(fp)
   98640:	00000306 	br	98650 <alt_get_errno+0x50>
   98644:	008002b4 	movhi	r2,10
   98648:	10896a04 	addi	r2,r2,9640
   9864c:	e0bfff15 	stw	r2,-4(fp)
   98650:	e0bfff17 	ldw	r2,-4(fp)
}
   98654:	e037883a 	mov	sp,fp
   98658:	dfc00117 	ldw	ra,4(sp)
   9865c:	df000017 	ldw	fp,0(sp)
   98660:	dec00204 	addi	sp,sp,8
   98664:	f800283a 	ret

00098668 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   98668:	defffe04 	addi	sp,sp,-8
   9866c:	de00012e 	bgeu	sp,et,98674 <alt_release_fd+0xc>
   98670:	003da0fa 	break	3
   98674:	df000115 	stw	fp,4(sp)
   98678:	df000104 	addi	fp,sp,4
   9867c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   98680:	e0bfff17 	ldw	r2,-4(fp)
   98684:	108000d0 	cmplti	r2,r2,3
   98688:	10000d1e 	bne	r2,zero,986c0 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
   9868c:	e0bfff17 	ldw	r2,-4(fp)
   98690:	00c002b4 	movhi	r3,10
   98694:	18fcdd04 	addi	r3,r3,-3212
   98698:	10800324 	muli	r2,r2,12
   9869c:	10c5883a 	add	r2,r2,r3
   986a0:	10800204 	addi	r2,r2,8
   986a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   986a8:	e0bfff17 	ldw	r2,-4(fp)
   986ac:	00c002b4 	movhi	r3,10
   986b0:	18fcdd04 	addi	r3,r3,-3212
   986b4:	10800324 	muli	r2,r2,12
   986b8:	10c5883a 	add	r2,r2,r3
   986bc:	10000015 	stw	zero,0(r2)
  }
}
   986c0:	e037883a 	mov	sp,fp
   986c4:	df000017 	ldw	fp,0(sp)
   986c8:	dec00104 	addi	sp,sp,4
   986cc:	f800283a 	ret

000986d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   986d0:	defff504 	addi	sp,sp,-44
   986d4:	de00012e 	bgeu	sp,et,986dc <sbrk+0xc>
   986d8:	003da0fa 	break	3
   986dc:	df000a15 	stw	fp,40(sp)
   986e0:	df000a04 	addi	fp,sp,40
   986e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   986e8:	0005303a 	rdctl	r2,status
   986ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   986f0:	e0fffb17 	ldw	r3,-20(fp)
   986f4:	00bfff84 	movi	r2,-2
   986f8:	1884703a 	and	r2,r3,r2
   986fc:	1001703a 	wrctl	status,r2
  
  return context;
   98700:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   98704:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   98708:	d0a01017 	ldw	r2,-32704(gp)
   9870c:	10c000c4 	addi	r3,r2,3
   98710:	00bfff04 	movi	r2,-4
   98714:	1884703a 	and	r2,r3,r2
   98718:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   9871c:	d0e01017 	ldw	r3,-32704(gp)
   98720:	e0bffe17 	ldw	r2,-8(fp)
   98724:	1887883a 	add	r3,r3,r2
   98728:	00800374 	movhi	r2,13
   9872c:	10aabc04 	addi	r2,r2,-21776
   98730:	10c0072e 	bgeu	r2,r3,98750 <sbrk+0x80>
   98734:	e0bffd17 	ldw	r2,-12(fp)
   98738:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9873c:	e0bffa17 	ldw	r2,-24(fp)
   98740:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   98744:	00bfffc4 	movi	r2,-1
   98748:	e0bfff15 	stw	r2,-4(fp)
   9874c:	00002a06 	br	987f8 <sbrk+0x128>
  }
#endif

  prev_heap_end = heap_end; 
   98750:	d0a01017 	ldw	r2,-32704(gp)
   98754:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   98758:	d0e01017 	ldw	r3,-32704(gp)
   9875c:	e0bffe17 	ldw	r2,-8(fp)
   98760:	1885883a 	add	r2,r3,r2
   98764:	d0a01015 	stw	r2,-32704(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
   98768:	c005883a 	mov	r2,et
   9876c:	e0bff915 	stw	r2,-28(fp)

  return limit; 
   98770:	e0bff917 	ldw	r2,-28(fp)
   98774:	1007883a 	mov	r3,r2
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
   98778:	e0bffc17 	ldw	r2,-16(fp)
   9877c:	18800f1e 	bne	r3,r2,987bc <sbrk+0xec>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
   98780:	d805883a 	mov	r2,sp
   98784:	e0bff815 	stw	r2,-32(fp)

  return pointer; 
   98788:	e0bff817 	ldw	r2,-32(fp)
   9878c:	1007883a 	mov	r3,r2
  {
    if (alt_stack_pointer() <= heap_end)
   98790:	d0a01017 	ldw	r2,-32704(gp)
   98794:	10c00136 	bltu	r2,r3,9879c <sbrk+0xcc>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
   98798:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
   9879c:	d0a01017 	ldw	r2,-32704(gp)
   987a0:	e0bff715 	stw	r2,-36(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
   987a4:	00c002b4 	movhi	r3,10
   987a8:	18c1b504 	addi	r3,r3,1748
   987ac:	e0bff717 	ldw	r2,-36(fp)
   987b0:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_ET(limit);
   987b4:	e0bff717 	ldw	r2,-36(fp)
   987b8:	1031883a 	mov	et,r2
   * If we are executing from the exception stack then compare against the
   * stack we switched away from as well.  The exception stack is a fixed
   * size so doesn't need to be checked.
   */

  if (alt_exception_old_stack_limit == prev_heap_end)
   987bc:	d0e7bd17 	ldw	r3,-24844(gp)
   987c0:	e0bffc17 	ldw	r2,-16(fp)
   987c4:	1880061e 	bne	r3,r2,987e0 <sbrk+0x110>
  {
    if (alt_exception_old_stack_limit <= heap_end)
   987c8:	d0e7bd17 	ldw	r3,-24844(gp)
   987cc:	d0a01017 	ldw	r2,-32704(gp)
   987d0:	10c00136 	bltu	r2,r3,987d8 <sbrk+0x108>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
   987d4:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_exception_old_stack_limit = heap_end;
   987d8:	d0a01017 	ldw	r2,-32704(gp)
   987dc:	d0a7bd15 	stw	r2,-24844(gp)
   987e0:	e0bffd17 	ldw	r2,-12(fp)
   987e4:	e0bff615 	stw	r2,-40(fp)
   987e8:	e0bff617 	ldw	r2,-40(fp)
   987ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   987f0:	e0bffc17 	ldw	r2,-16(fp)
   987f4:	e0bfff15 	stw	r2,-4(fp)
   987f8:	e0bfff17 	ldw	r2,-4(fp)
} 
   987fc:	e037883a 	mov	sp,fp
   98800:	df000017 	ldw	fp,0(sp)
   98804:	dec00104 	addi	sp,sp,4
   98808:	f800283a 	ret

0009880c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   9880c:	defffd04 	addi	sp,sp,-12
   98810:	de00012e 	bgeu	sp,et,98818 <usleep+0xc>
   98814:	003da0fa 	break	3
   98818:	dfc00215 	stw	ra,8(sp)
   9881c:	df000115 	stw	fp,4(sp)
   98820:	df000104 	addi	fp,sp,4
   98824:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   98828:	e13fff17 	ldw	r4,-4(fp)
   9882c:	00998240 	call	99824 <alt_busy_sleep>
}
   98830:	e037883a 	mov	sp,fp
   98834:	dfc00117 	ldw	ra,4(sp)
   98838:	df000017 	ldw	fp,0(sp)
   9883c:	dec00204 	addi	sp,sp,8
   98840:	f800283a 	ret

00098844 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   98844:	defff704 	addi	sp,sp,-36
   98848:	de00012e 	bgeu	sp,et,98850 <write+0xc>
   9884c:	003da0fa 	break	3
   98850:	dfc00815 	stw	ra,32(sp)
   98854:	df000715 	stw	fp,28(sp)
   98858:	df000704 	addi	fp,sp,28
   9885c:	e13ffb15 	stw	r4,-20(fp)
   98860:	e17ffc15 	stw	r5,-16(fp)
   98864:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   98868:	e0bffb17 	ldw	r2,-20(fp)
   9886c:	1004803a 	cmplt	r2,r2,zero
   98870:	1000081e 	bne	r2,zero,98894 <write+0x50>
   98874:	e0bffb17 	ldw	r2,-20(fp)
   98878:	10800324 	muli	r2,r2,12
   9887c:	1007883a 	mov	r3,r2
   98880:	008002b4 	movhi	r2,10
   98884:	10bcdd04 	addi	r2,r2,-3212
   98888:	1887883a 	add	r3,r3,r2
   9888c:	e0ffff15 	stw	r3,-4(fp)
   98890:	00000106 	br	98898 <write+0x54>
   98894:	e03fff15 	stw	zero,-4(fp)
   98898:	e0bfff17 	ldw	r2,-4(fp)
   9889c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   988a0:	e0bffa17 	ldw	r2,-24(fp)
   988a4:	1005003a 	cmpeq	r2,r2,zero
   988a8:	1000241e 	bne	r2,zero,9893c <write+0xf8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   988ac:	e0bffa17 	ldw	r2,-24(fp)
   988b0:	10800217 	ldw	r2,8(r2)
   988b4:	108000cc 	andi	r2,r2,3
   988b8:	1005003a 	cmpeq	r2,r2,zero
   988bc:	10001a1e 	bne	r2,zero,98928 <write+0xe4>
   988c0:	e0bffa17 	ldw	r2,-24(fp)
   988c4:	10800017 	ldw	r2,0(r2)
   988c8:	10800617 	ldw	r2,24(r2)
   988cc:	1005003a 	cmpeq	r2,r2,zero
   988d0:	1000151e 	bne	r2,zero,98928 <write+0xe4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   988d4:	e0bffa17 	ldw	r2,-24(fp)
   988d8:	10800017 	ldw	r2,0(r2)
   988dc:	10800617 	ldw	r2,24(r2)
   988e0:	e17ffc17 	ldw	r5,-16(fp)
   988e4:	e1bffd17 	ldw	r6,-12(fp)
   988e8:	e13ffa17 	ldw	r4,-24(fp)
   988ec:	103ee83a 	callr	r2
   988f0:	e0bff915 	stw	r2,-28(fp)
   988f4:	e0bff917 	ldw	r2,-28(fp)
   988f8:	1004403a 	cmpge	r2,r2,zero
   988fc:	1000071e 	bne	r2,zero,9891c <write+0xd8>
      {
        ALT_ERRNO = -rval;
   98900:	009896c0 	call	9896c <alt_get_errno>
   98904:	e0fff917 	ldw	r3,-28(fp)
   98908:	00c7c83a 	sub	r3,zero,r3
   9890c:	10c00015 	stw	r3,0(r2)
        return -1;
   98910:	00bfffc4 	movi	r2,-1
   98914:	e0bffe15 	stw	r2,-8(fp)
   98918:	00000e06 	br	98954 <write+0x110>
      }
      return rval;
   9891c:	e0bff917 	ldw	r2,-28(fp)
   98920:	e0bffe15 	stw	r2,-8(fp)
   98924:	00000b06 	br	98954 <write+0x110>
    }
    else
    {
      ALT_ERRNO = EACCES;
   98928:	009896c0 	call	9896c <alt_get_errno>
   9892c:	1007883a 	mov	r3,r2
   98930:	00800344 	movi	r2,13
   98934:	18800015 	stw	r2,0(r3)
   98938:	00000406 	br	9894c <write+0x108>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   9893c:	009896c0 	call	9896c <alt_get_errno>
   98940:	1007883a 	mov	r3,r2
   98944:	00801444 	movi	r2,81
   98948:	18800015 	stw	r2,0(r3)
  }
  return -1;
   9894c:	00bfffc4 	movi	r2,-1
   98950:	e0bffe15 	stw	r2,-8(fp)
   98954:	e0bffe17 	ldw	r2,-8(fp)
}
   98958:	e037883a 	mov	sp,fp
   9895c:	dfc00117 	ldw	ra,4(sp)
   98960:	df000017 	ldw	fp,0(sp)
   98964:	dec00204 	addi	sp,sp,8
   98968:	f800283a 	ret

0009896c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9896c:	defffd04 	addi	sp,sp,-12
   98970:	de00012e 	bgeu	sp,et,98978 <alt_get_errno+0xc>
   98974:	003da0fa 	break	3
   98978:	dfc00215 	stw	ra,8(sp)
   9897c:	df000115 	stw	fp,4(sp)
   98980:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   98984:	008002b4 	movhi	r2,10
   98988:	1081c404 	addi	r2,r2,1808
   9898c:	10800017 	ldw	r2,0(r2)
   98990:	1005003a 	cmpeq	r2,r2,zero
   98994:	1000061e 	bne	r2,zero,989b0 <alt_get_errno+0x44>
   98998:	008002b4 	movhi	r2,10
   9899c:	1081c404 	addi	r2,r2,1808
   989a0:	10800017 	ldw	r2,0(r2)
   989a4:	103ee83a 	callr	r2
   989a8:	e0bfff15 	stw	r2,-4(fp)
   989ac:	00000306 	br	989bc <alt_get_errno+0x50>
   989b0:	008002b4 	movhi	r2,10
   989b4:	10896a04 	addi	r2,r2,9640
   989b8:	e0bfff15 	stw	r2,-4(fp)
   989bc:	e0bfff17 	ldw	r2,-4(fp)
}
   989c0:	e037883a 	mov	sp,fp
   989c4:	dfc00117 	ldw	ra,4(sp)
   989c8:	df000017 	ldw	fp,0(sp)
   989cc:	dec00204 	addi	sp,sp,8
   989d0:	f800283a 	ret

000989d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   989d4:	defffd04 	addi	sp,sp,-12
   989d8:	de00012e 	bgeu	sp,et,989e0 <alt_irq_init+0xc>
   989dc:	003da0fa 	break	3
   989e0:	dfc00215 	stw	ra,8(sp)
   989e4:	df000115 	stw	fp,4(sp)
   989e8:	df000104 	addi	fp,sp,4
   989ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   989f0:	009a1d40 	call	9a1d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   989f4:	00800044 	movi	r2,1
   989f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   989fc:	e037883a 	mov	sp,fp
   98a00:	dfc00117 	ldw	ra,4(sp)
   98a04:	df000017 	ldw	fp,0(sp)
   98a08:	dec00204 	addi	sp,sp,8
   98a0c:	f800283a 	ret

00098a10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   98a10:	defffe04 	addi	sp,sp,-8
   98a14:	de00012e 	bgeu	sp,et,98a1c <alt_sys_init+0xc>
   98a18:	003da0fa 	break	3
   98a1c:	dfc00115 	stw	ra,4(sp)
   98a20:	df000015 	stw	fp,0(sp)
   98a24:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   98a28:	01000434 	movhi	r4,16
   98a2c:	21040004 	addi	r4,r4,4096
   98a30:	000b883a 	mov	r5,zero
   98a34:	000d883a 	mov	r6,zero
   98a38:	01c0fa04 	movi	r7,1000
   98a3c:	00996300 	call	99630 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   98a40:	010002b4 	movhi	r4,10
   98a44:	213da704 	addi	r4,r4,-2404
   98a48:	000b883a 	mov	r5,zero
   98a4c:	01800044 	movi	r6,1
   98a50:	0098c1c0 	call	98c1c <altera_avalon_jtag_uart_init>
   98a54:	010002b4 	movhi	r4,10
   98a58:	213d9d04 	addi	r4,r4,-2444
   98a5c:	0098a740 	call	98a74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
}
   98a60:	e037883a 	mov	sp,fp
   98a64:	dfc00117 	ldw	ra,4(sp)
   98a68:	df000017 	ldw	fp,0(sp)
   98a6c:	dec00204 	addi	sp,sp,8
   98a70:	f800283a 	ret

00098a74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   98a74:	defffd04 	addi	sp,sp,-12
   98a78:	de00012e 	bgeu	sp,et,98a80 <alt_dev_reg+0xc>
   98a7c:	003da0fa 	break	3
   98a80:	dfc00215 	stw	ra,8(sp)
   98a84:	df000115 	stw	fp,4(sp)
   98a88:	df000104 	addi	fp,sp,4
   98a8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   98a90:	e13fff17 	ldw	r4,-4(fp)
   98a94:	014002b4 	movhi	r5,10
   98a98:	2941c104 	addi	r5,r5,1796
   98a9c:	00999c40 	call	999c4 <alt_dev_llist_insert>
}
   98aa0:	e037883a 	mov	sp,fp
   98aa4:	dfc00117 	ldw	ra,4(sp)
   98aa8:	df000017 	ldw	fp,0(sp)
   98aac:	dec00204 	addi	sp,sp,8
   98ab0:	f800283a 	ret

00098ab4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   98ab4:	defffa04 	addi	sp,sp,-24
   98ab8:	de00012e 	bgeu	sp,et,98ac0 <altera_avalon_jtag_uart_read_fd+0xc>
   98abc:	003da0fa 	break	3
   98ac0:	dfc00515 	stw	ra,20(sp)
   98ac4:	df000415 	stw	fp,16(sp)
   98ac8:	df000404 	addi	fp,sp,16
   98acc:	e13ffd15 	stw	r4,-12(fp)
   98ad0:	e17ffe15 	stw	r5,-8(fp)
   98ad4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   98ad8:	e0bffd17 	ldw	r2,-12(fp)
   98adc:	10800017 	ldw	r2,0(r2)
   98ae0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   98ae4:	e0bffc17 	ldw	r2,-16(fp)
   98ae8:	11000a04 	addi	r4,r2,40
   98aec:	e0bffd17 	ldw	r2,-12(fp)
   98af0:	11c00217 	ldw	r7,8(r2)
   98af4:	e17ffe17 	ldw	r5,-8(fp)
   98af8:	e1bfff17 	ldw	r6,-4(fp)
   98afc:	00991440 	call	99144 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   98b00:	e037883a 	mov	sp,fp
   98b04:	dfc00117 	ldw	ra,4(sp)
   98b08:	df000017 	ldw	fp,0(sp)
   98b0c:	dec00204 	addi	sp,sp,8
   98b10:	f800283a 	ret

00098b14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   98b14:	defffa04 	addi	sp,sp,-24
   98b18:	de00012e 	bgeu	sp,et,98b20 <altera_avalon_jtag_uart_write_fd+0xc>
   98b1c:	003da0fa 	break	3
   98b20:	dfc00515 	stw	ra,20(sp)
   98b24:	df000415 	stw	fp,16(sp)
   98b28:	df000404 	addi	fp,sp,16
   98b2c:	e13ffd15 	stw	r4,-12(fp)
   98b30:	e17ffe15 	stw	r5,-8(fp)
   98b34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   98b38:	e0bffd17 	ldw	r2,-12(fp)
   98b3c:	10800017 	ldw	r2,0(r2)
   98b40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   98b44:	e0bffc17 	ldw	r2,-16(fp)
   98b48:	11000a04 	addi	r4,r2,40
   98b4c:	e0bffd17 	ldw	r2,-12(fp)
   98b50:	11c00217 	ldw	r7,8(r2)
   98b54:	e17ffe17 	ldw	r5,-8(fp)
   98b58:	e1bfff17 	ldw	r6,-4(fp)
   98b5c:	00993700 	call	99370 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   98b60:	e037883a 	mov	sp,fp
   98b64:	dfc00117 	ldw	ra,4(sp)
   98b68:	df000017 	ldw	fp,0(sp)
   98b6c:	dec00204 	addi	sp,sp,8
   98b70:	f800283a 	ret

00098b74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   98b74:	defffc04 	addi	sp,sp,-16
   98b78:	de00012e 	bgeu	sp,et,98b80 <altera_avalon_jtag_uart_close_fd+0xc>
   98b7c:	003da0fa 	break	3
   98b80:	dfc00315 	stw	ra,12(sp)
   98b84:	df000215 	stw	fp,8(sp)
   98b88:	df000204 	addi	fp,sp,8
   98b8c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   98b90:	e0bfff17 	ldw	r2,-4(fp)
   98b94:	10800017 	ldw	r2,0(r2)
   98b98:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   98b9c:	e0bffe17 	ldw	r2,-8(fp)
   98ba0:	11000a04 	addi	r4,r2,40
   98ba4:	e0bfff17 	ldw	r2,-4(fp)
   98ba8:	11400217 	ldw	r5,8(r2)
   98bac:	0098fcc0 	call	98fcc <altera_avalon_jtag_uart_close>
}
   98bb0:	e037883a 	mov	sp,fp
   98bb4:	dfc00117 	ldw	ra,4(sp)
   98bb8:	df000017 	ldw	fp,0(sp)
   98bbc:	dec00204 	addi	sp,sp,8
   98bc0:	f800283a 	ret

00098bc4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   98bc4:	defffa04 	addi	sp,sp,-24
   98bc8:	de00012e 	bgeu	sp,et,98bd0 <altera_avalon_jtag_uart_ioctl_fd+0xc>
   98bcc:	003da0fa 	break	3
   98bd0:	dfc00515 	stw	ra,20(sp)
   98bd4:	df000415 	stw	fp,16(sp)
   98bd8:	df000404 	addi	fp,sp,16
   98bdc:	e13ffd15 	stw	r4,-12(fp)
   98be0:	e17ffe15 	stw	r5,-8(fp)
   98be4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   98be8:	e0bffd17 	ldw	r2,-12(fp)
   98bec:	10800017 	ldw	r2,0(r2)
   98bf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   98bf4:	e0bffc17 	ldw	r2,-16(fp)
   98bf8:	11000a04 	addi	r4,r2,40
   98bfc:	e17ffe17 	ldw	r5,-8(fp)
   98c00:	e1bfff17 	ldw	r6,-4(fp)
   98c04:	00990480 	call	99048 <altera_avalon_jtag_uart_ioctl>
}
   98c08:	e037883a 	mov	sp,fp
   98c0c:	dfc00117 	ldw	ra,4(sp)
   98c10:	df000017 	ldw	fp,0(sp)
   98c14:	dec00204 	addi	sp,sp,8
   98c18:	f800283a 	ret

00098c1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   98c1c:	defffa04 	addi	sp,sp,-24
   98c20:	de00012e 	bgeu	sp,et,98c28 <altera_avalon_jtag_uart_init+0xc>
   98c24:	003da0fa 	break	3
   98c28:	dfc00515 	stw	ra,20(sp)
   98c2c:	df000415 	stw	fp,16(sp)
   98c30:	df000404 	addi	fp,sp,16
   98c34:	e13ffd15 	stw	r4,-12(fp)
   98c38:	e17ffe15 	stw	r5,-8(fp)
   98c3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   98c40:	e0fffd17 	ldw	r3,-12(fp)
   98c44:	00800044 	movi	r2,1
   98c48:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   98c4c:	e0bffd17 	ldw	r2,-12(fp)
   98c50:	10800017 	ldw	r2,0(r2)
   98c54:	11000104 	addi	r4,r2,4
   98c58:	e0bffd17 	ldw	r2,-12(fp)
   98c5c:	10800817 	ldw	r2,32(r2)
   98c60:	1007883a 	mov	r3,r2
   98c64:	2005883a 	mov	r2,r4
   98c68:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   98c6c:	e13ffe17 	ldw	r4,-8(fp)
   98c70:	e17fff17 	ldw	r5,-4(fp)
   98c74:	d8000015 	stw	zero,0(sp)
   98c78:	018002b4 	movhi	r6,10
   98c7c:	31a33904 	addi	r6,r6,-29468
   98c80:	e1fffd17 	ldw	r7,-12(fp)
   98c84:	0097d940 	call	97d94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   98c88:	e0bffd17 	ldw	r2,-12(fp)
   98c8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   98c90:	e0bffd17 	ldw	r2,-12(fp)
   98c94:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   98c98:	008002b4 	movhi	r2,10
   98c9c:	10897304 	addi	r2,r2,9676
   98ca0:	10800017 	ldw	r2,0(r2)
   98ca4:	100b883a 	mov	r5,r2
   98ca8:	018002b4 	movhi	r6,10
   98cac:	31a3c504 	addi	r6,r6,-28908
   98cb0:	e1fffd17 	ldw	r7,-12(fp)
   98cb4:	00996c80 	call	996c8 <alt_alarm_start>
   98cb8:	1004403a 	cmpge	r2,r2,zero
   98cbc:	1000041e 	bne	r2,zero,98cd0 <altera_avalon_jtag_uart_init+0xb4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   98cc0:	e0fffd17 	ldw	r3,-12(fp)
   98cc4:	00a00034 	movhi	r2,32768
   98cc8:	10bfffc4 	addi	r2,r2,-1
   98ccc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   98cd0:	e037883a 	mov	sp,fp
   98cd4:	dfc00117 	ldw	ra,4(sp)
   98cd8:	df000017 	ldw	fp,0(sp)
   98cdc:	dec00204 	addi	sp,sp,8
   98ce0:	f800283a 	ret

00098ce4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   98ce4:	defff804 	addi	sp,sp,-32
   98ce8:	de00012e 	bgeu	sp,et,98cf0 <altera_avalon_jtag_uart_irq+0xc>
   98cec:	003da0fa 	break	3
   98cf0:	df000715 	stw	fp,28(sp)
   98cf4:	df000704 	addi	fp,sp,28
   98cf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   98cfc:	e0bfff17 	ldw	r2,-4(fp)
   98d00:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   98d04:	e0bffe17 	ldw	r2,-8(fp)
   98d08:	10800017 	ldw	r2,0(r2)
   98d0c:	e0bffd15 	stw	r2,-12(fp)
   98d10:	00000006 	br	98d14 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   98d14:	e0bffd17 	ldw	r2,-12(fp)
   98d18:	10800104 	addi	r2,r2,4
   98d1c:	10800037 	ldwio	r2,0(r2)
   98d20:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   98d24:	e0bffc17 	ldw	r2,-16(fp)
   98d28:	1080c00c 	andi	r2,r2,768
   98d2c:	1005003a 	cmpeq	r2,r2,zero
   98d30:	1000741e 	bne	r2,zero,98f04 <altera_avalon_jtag_uart_irq+0x220>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   98d34:	e0bffc17 	ldw	r2,-16(fp)
   98d38:	1080400c 	andi	r2,r2,256
   98d3c:	1005003a 	cmpeq	r2,r2,zero
   98d40:	1000351e 	bne	r2,zero,98e18 <altera_avalon_jtag_uart_irq+0x134>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   98d44:	00800074 	movhi	r2,1
   98d48:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   98d4c:	e0bffe17 	ldw	r2,-8(fp)
   98d50:	10800a17 	ldw	r2,40(r2)
   98d54:	10800044 	addi	r2,r2,1
   98d58:	1081ffcc 	andi	r2,r2,2047
   98d5c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   98d60:	e0bffe17 	ldw	r2,-8(fp)
   98d64:	10c00b17 	ldw	r3,44(r2)
   98d68:	e0bffa17 	ldw	r2,-24(fp)
   98d6c:	18801626 	beq	r3,r2,98dc8 <altera_avalon_jtag_uart_irq+0xe4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   98d70:	e0bffd17 	ldw	r2,-12(fp)
   98d74:	10800037 	ldwio	r2,0(r2)
   98d78:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   98d7c:	e0bffb17 	ldw	r2,-20(fp)
   98d80:	10a0000c 	andi	r2,r2,32768
   98d84:	1005003a 	cmpeq	r2,r2,zero
   98d88:	10000f1e 	bne	r2,zero,98dc8 <altera_avalon_jtag_uart_irq+0xe4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   98d8c:	e0bffe17 	ldw	r2,-8(fp)
   98d90:	10c00a17 	ldw	r3,40(r2)
   98d94:	e0bffb17 	ldw	r2,-20(fp)
   98d98:	1009883a 	mov	r4,r2
   98d9c:	e0bffe17 	ldw	r2,-8(fp)
   98da0:	1885883a 	add	r2,r3,r2
   98da4:	10800e04 	addi	r2,r2,56
   98da8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   98dac:	e0bffe17 	ldw	r2,-8(fp)
   98db0:	10800a17 	ldw	r2,40(r2)
   98db4:	10800044 	addi	r2,r2,1
   98db8:	10c1ffcc 	andi	r3,r2,2047
   98dbc:	e0bffe17 	ldw	r2,-8(fp)
   98dc0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   98dc4:	003fe106 	br	98d4c <altera_avalon_jtag_uart_irq+0x68>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   98dc8:	e0bffb17 	ldw	r2,-20(fp)
   98dcc:	10bfffec 	andhi	r2,r2,65535
   98dd0:	1005003a 	cmpeq	r2,r2,zero
   98dd4:	1000101e 	bne	r2,zero,98e18 <altera_avalon_jtag_uart_irq+0x134>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   98dd8:	e0bffe17 	ldw	r2,-8(fp)
   98ddc:	10c00817 	ldw	r3,32(r2)
   98de0:	00bfff84 	movi	r2,-2
   98de4:	1886703a 	and	r3,r3,r2
   98de8:	e0bffe17 	ldw	r2,-8(fp)
   98dec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   98df0:	e0bffd17 	ldw	r2,-12(fp)
   98df4:	11000104 	addi	r4,r2,4
   98df8:	e0bffe17 	ldw	r2,-8(fp)
   98dfc:	10800817 	ldw	r2,32(r2)
   98e00:	1007883a 	mov	r3,r2
   98e04:	2005883a 	mov	r2,r4
   98e08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   98e0c:	e0bffd17 	ldw	r2,-12(fp)
   98e10:	10800104 	addi	r2,r2,4
   98e14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   98e18:	e0bffc17 	ldw	r2,-16(fp)
   98e1c:	1080800c 	andi	r2,r2,512
   98e20:	1005003a 	cmpeq	r2,r2,zero
   98e24:	103fbb1e 	bne	r2,zero,98d14 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   98e28:	e0bffc17 	ldw	r2,-16(fp)
   98e2c:	10bfffec 	andhi	r2,r2,65535
   98e30:	1004d43a 	srli	r2,r2,16
   98e34:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   98e38:	00001506 	br	98e90 <altera_avalon_jtag_uart_irq+0x1ac>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   98e3c:	e13ffd17 	ldw	r4,-12(fp)
   98e40:	e0bffe17 	ldw	r2,-8(fp)
   98e44:	10c00d17 	ldw	r3,52(r2)
   98e48:	e0bffe17 	ldw	r2,-8(fp)
   98e4c:	1885883a 	add	r2,r3,r2
   98e50:	10820e04 	addi	r2,r2,2104
   98e54:	10800003 	ldbu	r2,0(r2)
   98e58:	10c03fcc 	andi	r3,r2,255
   98e5c:	18c0201c 	xori	r3,r3,128
   98e60:	18ffe004 	addi	r3,r3,-128
   98e64:	2005883a 	mov	r2,r4
   98e68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   98e6c:	e0bffe17 	ldw	r2,-8(fp)
   98e70:	10800d17 	ldw	r2,52(r2)
   98e74:	10800044 	addi	r2,r2,1
   98e78:	10c1ffcc 	andi	r3,r2,2047
   98e7c:	e0bffe17 	ldw	r2,-8(fp)
   98e80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   98e84:	e0bff917 	ldw	r2,-28(fp)
   98e88:	10bfffc4 	addi	r2,r2,-1
   98e8c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   98e90:	e0bff917 	ldw	r2,-28(fp)
   98e94:	1005003a 	cmpeq	r2,r2,zero
   98e98:	1000051e 	bne	r2,zero,98eb0 <altera_avalon_jtag_uart_irq+0x1cc>
   98e9c:	e0bffe17 	ldw	r2,-8(fp)
   98ea0:	10c00d17 	ldw	r3,52(r2)
   98ea4:	e0bffe17 	ldw	r2,-8(fp)
   98ea8:	10800c17 	ldw	r2,48(r2)
   98eac:	18bfe31e 	bne	r3,r2,98e3c <altera_avalon_jtag_uart_irq+0x158>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   98eb0:	e0bff917 	ldw	r2,-28(fp)
   98eb4:	1005003a 	cmpeq	r2,r2,zero
   98eb8:	103f961e 	bne	r2,zero,98d14 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   98ebc:	e0bffe17 	ldw	r2,-8(fp)
   98ec0:	10c00817 	ldw	r3,32(r2)
   98ec4:	00bfff44 	movi	r2,-3
   98ec8:	1886703a 	and	r3,r3,r2
   98ecc:	e0bffe17 	ldw	r2,-8(fp)
   98ed0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   98ed4:	e0bffe17 	ldw	r2,-8(fp)
   98ed8:	10800017 	ldw	r2,0(r2)
   98edc:	11000104 	addi	r4,r2,4
   98ee0:	e0bffe17 	ldw	r2,-8(fp)
   98ee4:	10800817 	ldw	r2,32(r2)
   98ee8:	1007883a 	mov	r3,r2
   98eec:	2005883a 	mov	r2,r4
   98ef0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   98ef4:	e0bffd17 	ldw	r2,-12(fp)
   98ef8:	10800104 	addi	r2,r2,4
   98efc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   98f00:	003f8406 	br	98d14 <altera_avalon_jtag_uart_irq+0x30>
}
   98f04:	e037883a 	mov	sp,fp
   98f08:	df000017 	ldw	fp,0(sp)
   98f0c:	dec00104 	addi	sp,sp,4
   98f10:	f800283a 	ret

00098f14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   98f14:	defffc04 	addi	sp,sp,-16
   98f18:	de00012e 	bgeu	sp,et,98f20 <altera_avalon_jtag_uart_timeout+0xc>
   98f1c:	003da0fa 	break	3
   98f20:	df000315 	stw	fp,12(sp)
   98f24:	df000304 	addi	fp,sp,12
   98f28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   98f2c:	e0bfff17 	ldw	r2,-4(fp)
   98f30:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   98f34:	e0bffe17 	ldw	r2,-8(fp)
   98f38:	10800017 	ldw	r2,0(r2)
   98f3c:	10800104 	addi	r2,r2,4
   98f40:	10800037 	ldwio	r2,0(r2)
   98f44:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   98f48:	e0bffd17 	ldw	r2,-12(fp)
   98f4c:	1081000c 	andi	r2,r2,1024
   98f50:	1005003a 	cmpeq	r2,r2,zero
   98f54:	10000c1e 	bne	r2,zero,98f88 <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   98f58:	e0bffe17 	ldw	r2,-8(fp)
   98f5c:	10800017 	ldw	r2,0(r2)
   98f60:	11000104 	addi	r4,r2,4
   98f64:	e0bffe17 	ldw	r2,-8(fp)
   98f68:	10800817 	ldw	r2,32(r2)
   98f6c:	10810014 	ori	r2,r2,1024
   98f70:	1007883a 	mov	r3,r2
   98f74:	2005883a 	mov	r2,r4
   98f78:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   98f7c:	e0bffe17 	ldw	r2,-8(fp)
   98f80:	10000915 	stw	zero,36(r2)
   98f84:	00000a06 	br	98fb0 <altera_avalon_jtag_uart_timeout+0x9c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   98f88:	e0bffe17 	ldw	r2,-8(fp)
   98f8c:	10c00917 	ldw	r3,36(r2)
   98f90:	00a00034 	movhi	r2,32768
   98f94:	10bfff04 	addi	r2,r2,-4
   98f98:	10c00536 	bltu	r2,r3,98fb0 <altera_avalon_jtag_uart_timeout+0x9c>
    sp->host_inactive++;
   98f9c:	e0bffe17 	ldw	r2,-8(fp)
   98fa0:	10800917 	ldw	r2,36(r2)
   98fa4:	10c00044 	addi	r3,r2,1
   98fa8:	e0bffe17 	ldw	r2,-8(fp)
   98fac:	10c00915 	stw	r3,36(r2)
   98fb0:	008002b4 	movhi	r2,10
   98fb4:	10897304 	addi	r2,r2,9676
   98fb8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   98fbc:	e037883a 	mov	sp,fp
   98fc0:	df000017 	ldw	fp,0(sp)
   98fc4:	dec00104 	addi	sp,sp,4
   98fc8:	f800283a 	ret

00098fcc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   98fcc:	defffc04 	addi	sp,sp,-16
   98fd0:	de00012e 	bgeu	sp,et,98fd8 <altera_avalon_jtag_uart_close+0xc>
   98fd4:	003da0fa 	break	3
   98fd8:	df000315 	stw	fp,12(sp)
   98fdc:	df000304 	addi	fp,sp,12
   98fe0:	e13ffd15 	stw	r4,-12(fp)
   98fe4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   98fe8:	00000706 	br	99008 <altera_avalon_jtag_uart_close+0x3c>
    if (flags & O_NONBLOCK) {
   98fec:	e0bffe17 	ldw	r2,-8(fp)
   98ff0:	1090000c 	andi	r2,r2,16384
   98ff4:	1005003a 	cmpeq	r2,r2,zero
   98ff8:	1000031e 	bne	r2,zero,99008 <altera_avalon_jtag_uart_close+0x3c>
      return -EWOULDBLOCK; 
   98ffc:	00bffd44 	movi	r2,-11
   99000:	e0bfff15 	stw	r2,-4(fp)
   99004:	00000b06 	br	99034 <altera_avalon_jtag_uart_close+0x68>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   99008:	e0bffd17 	ldw	r2,-12(fp)
   9900c:	10c00d17 	ldw	r3,52(r2)
   99010:	e0bffd17 	ldw	r2,-12(fp)
   99014:	10800c17 	ldw	r2,48(r2)
   99018:	18800526 	beq	r3,r2,99030 <altera_avalon_jtag_uart_close+0x64>
   9901c:	e0bffd17 	ldw	r2,-12(fp)
   99020:	10c00917 	ldw	r3,36(r2)
   99024:	e0bffd17 	ldw	r2,-12(fp)
   99028:	10800117 	ldw	r2,4(r2)
   9902c:	18bfef36 	bltu	r3,r2,98fec <altera_avalon_jtag_uart_close+0x20>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   99030:	e03fff15 	stw	zero,-4(fp)
   99034:	e0bfff17 	ldw	r2,-4(fp)
}
   99038:	e037883a 	mov	sp,fp
   9903c:	df000017 	ldw	fp,0(sp)
   99040:	dec00104 	addi	sp,sp,4
   99044:	f800283a 	ret

00099048 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   99048:	defff804 	addi	sp,sp,-32
   9904c:	de00012e 	bgeu	sp,et,99054 <altera_avalon_jtag_uart_ioctl+0xc>
   99050:	003da0fa 	break	3
   99054:	df000715 	stw	fp,28(sp)
   99058:	df000704 	addi	fp,sp,28
   9905c:	e13ffb15 	stw	r4,-20(fp)
   99060:	e17ffc15 	stw	r5,-16(fp)
   99064:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   99068:	00bff9c4 	movi	r2,-25
   9906c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   99070:	e0bffc17 	ldw	r2,-16(fp)
   99074:	e0bfff15 	stw	r2,-4(fp)
   99078:	e0ffff17 	ldw	r3,-4(fp)
   9907c:	189a8060 	cmpeqi	r2,r3,27137
   99080:	1000041e 	bne	r2,zero,99094 <altera_avalon_jtag_uart_ioctl+0x4c>
   99084:	e0ffff17 	ldw	r3,-4(fp)
   99088:	189a80a0 	cmpeqi	r2,r3,27138
   9908c:	10001b1e 	bne	r2,zero,990fc <altera_avalon_jtag_uart_ioctl+0xb4>
   99090:	00002706 	br	99130 <altera_avalon_jtag_uart_ioctl+0xe8>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   99094:	e0bffb17 	ldw	r2,-20(fp)
   99098:	10c00117 	ldw	r3,4(r2)
   9909c:	00a00034 	movhi	r2,32768
   990a0:	10bfffc4 	addi	r2,r2,-1
   990a4:	18802226 	beq	r3,r2,99130 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      int timeout = *((int *)arg);
   990a8:	e0bffd17 	ldw	r2,-12(fp)
   990ac:	10800017 	ldw	r2,0(r2)
   990b0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   990b4:	e0bff917 	ldw	r2,-28(fp)
   990b8:	10800090 	cmplti	r2,r2,2
   990bc:	1000071e 	bne	r2,zero,990dc <altera_avalon_jtag_uart_ioctl+0x94>
   990c0:	e0fff917 	ldw	r3,-28(fp)
   990c4:	00a00034 	movhi	r2,32768
   990c8:	10bfffc4 	addi	r2,r2,-1
   990cc:	18800326 	beq	r3,r2,990dc <altera_avalon_jtag_uart_ioctl+0x94>
   990d0:	e0bff917 	ldw	r2,-28(fp)
   990d4:	e0bffe15 	stw	r2,-8(fp)
   990d8:	00000306 	br	990e8 <altera_avalon_jtag_uart_ioctl+0xa0>
   990dc:	00e00034 	movhi	r3,32768
   990e0:	18ffff84 	addi	r3,r3,-2
   990e4:	e0fffe15 	stw	r3,-8(fp)
   990e8:	e0bffb17 	ldw	r2,-20(fp)
   990ec:	e0fffe17 	ldw	r3,-8(fp)
   990f0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   990f4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   990f8:	00000d06 	br	99130 <altera_avalon_jtag_uart_ioctl+0xe8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   990fc:	e0bffb17 	ldw	r2,-20(fp)
   99100:	10c00117 	ldw	r3,4(r2)
   99104:	00a00034 	movhi	r2,32768
   99108:	10bfffc4 	addi	r2,r2,-1
   9910c:	18800826 	beq	r3,r2,99130 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   99110:	e13ffd17 	ldw	r4,-12(fp)
   99114:	e0bffb17 	ldw	r2,-20(fp)
   99118:	10c00917 	ldw	r3,36(r2)
   9911c:	e0bffb17 	ldw	r2,-20(fp)
   99120:	10800117 	ldw	r2,4(r2)
   99124:	1885803a 	cmpltu	r2,r3,r2
   99128:	20800015 	stw	r2,0(r4)
      rc = 0;
   9912c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   99130:	e0bffa17 	ldw	r2,-24(fp)
}
   99134:	e037883a 	mov	sp,fp
   99138:	df000017 	ldw	fp,0(sp)
   9913c:	dec00104 	addi	sp,sp,4
   99140:	f800283a 	ret

00099144 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   99144:	defff204 	addi	sp,sp,-56
   99148:	de00012e 	bgeu	sp,et,99150 <altera_avalon_jtag_uart_read+0xc>
   9914c:	003da0fa 	break	3
   99150:	dfc00d15 	stw	ra,52(sp)
   99154:	df000c15 	stw	fp,48(sp)
   99158:	df000c04 	addi	fp,sp,48
   9915c:	e13ffb15 	stw	r4,-20(fp)
   99160:	e17ffc15 	stw	r5,-16(fp)
   99164:	e1bffd15 	stw	r6,-12(fp)
   99168:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   9916c:	e0bffc17 	ldw	r2,-16(fp)
   99170:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   99174:	00004806 	br	99298 <altera_avalon_jtag_uart_read+0x154>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   99178:	e0bffb17 	ldw	r2,-20(fp)
   9917c:	10800a17 	ldw	r2,40(r2)
   99180:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   99184:	e0bffb17 	ldw	r2,-20(fp)
   99188:	10800b17 	ldw	r2,44(r2)
   9918c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   99190:	e0fff717 	ldw	r3,-36(fp)
   99194:	e0bff617 	ldw	r2,-40(fp)
   99198:	18800536 	bltu	r3,r2,991b0 <altera_avalon_jtag_uart_read+0x6c>
        n = in - out;
   9919c:	e0bff717 	ldw	r2,-36(fp)
   991a0:	e0fff617 	ldw	r3,-40(fp)
   991a4:	10c5c83a 	sub	r2,r2,r3
   991a8:	e0bff815 	stw	r2,-32(fp)
   991ac:	00000406 	br	991c0 <altera_avalon_jtag_uart_read+0x7c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   991b0:	00820004 	movi	r2,2048
   991b4:	e0fff617 	ldw	r3,-40(fp)
   991b8:	10c5c83a 	sub	r2,r2,r3
   991bc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   991c0:	e0bff817 	ldw	r2,-32(fp)
   991c4:	1005003a 	cmpeq	r2,r2,zero
   991c8:	10001f1e 	bne	r2,zero,99248 <altera_avalon_jtag_uart_read+0x104>
        break; /* No more data available */

      if (n > space)
   991cc:	e0fffd17 	ldw	r3,-12(fp)
   991d0:	e0bff817 	ldw	r2,-32(fp)
   991d4:	1880022e 	bgeu	r3,r2,991e0 <altera_avalon_jtag_uart_read+0x9c>
        n = space;
   991d8:	e0bffd17 	ldw	r2,-12(fp)
   991dc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   991e0:	e0bffb17 	ldw	r2,-20(fp)
   991e4:	10c00e04 	addi	r3,r2,56
   991e8:	e0bff617 	ldw	r2,-40(fp)
   991ec:	1887883a 	add	r3,r3,r2
   991f0:	e0bffa17 	ldw	r2,-24(fp)
   991f4:	1009883a 	mov	r4,r2
   991f8:	180b883a 	mov	r5,r3
   991fc:	e1bff817 	ldw	r6,-32(fp)
   99200:	008ecfc0 	call	8ecfc <memcpy>
      ptr   += n;
   99204:	e0fff817 	ldw	r3,-32(fp)
   99208:	e0bffa17 	ldw	r2,-24(fp)
   9920c:	10c5883a 	add	r2,r2,r3
   99210:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   99214:	e0fffd17 	ldw	r3,-12(fp)
   99218:	e0bff817 	ldw	r2,-32(fp)
   9921c:	1885c83a 	sub	r2,r3,r2
   99220:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   99224:	e0fff617 	ldw	r3,-40(fp)
   99228:	e0bff817 	ldw	r2,-32(fp)
   9922c:	1885883a 	add	r2,r3,r2
   99230:	10c1ffcc 	andi	r3,r2,2047
   99234:	e0bffb17 	ldw	r2,-20(fp)
   99238:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   9923c:	e0bffd17 	ldw	r2,-12(fp)
   99240:	10800048 	cmpgei	r2,r2,1
   99244:	103fcc1e 	bne	r2,zero,99178 <altera_avalon_jtag_uart_read+0x34>

    /* If we read any data then return it */
    if (ptr != buffer)
   99248:	e0fffa17 	ldw	r3,-24(fp)
   9924c:	e0bffc17 	ldw	r2,-16(fp)
   99250:	1880141e 	bne	r3,r2,992a4 <altera_avalon_jtag_uart_read+0x160>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   99254:	e0bffe17 	ldw	r2,-8(fp)
   99258:	1090000c 	andi	r2,r2,16384
   9925c:	1004c03a 	cmpne	r2,r2,zero
   99260:	1000101e 	bne	r2,zero,992a4 <altera_avalon_jtag_uart_read+0x160>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   99264:	e0bffb17 	ldw	r2,-20(fp)
   99268:	10c00a17 	ldw	r3,40(r2)
   9926c:	e0bff717 	ldw	r2,-36(fp)
   99270:	1880051e 	bne	r3,r2,99288 <altera_avalon_jtag_uart_read+0x144>
   99274:	e0bffb17 	ldw	r2,-20(fp)
   99278:	10c00917 	ldw	r3,36(r2)
   9927c:	e0bffb17 	ldw	r2,-20(fp)
   99280:	10800117 	ldw	r2,4(r2)
   99284:	18bff736 	bltu	r3,r2,99264 <altera_avalon_jtag_uart_read+0x120>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   99288:	e0bffb17 	ldw	r2,-20(fp)
   9928c:	10c00a17 	ldw	r3,40(r2)
   99290:	e0bff717 	ldw	r2,-36(fp)
   99294:	18800326 	beq	r3,r2,992a4 <altera_avalon_jtag_uart_read+0x160>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   99298:	e0bffd17 	ldw	r2,-12(fp)
   9929c:	10800048 	cmpgei	r2,r2,1
   992a0:	103fb51e 	bne	r2,zero,99178 <altera_avalon_jtag_uart_read+0x34>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   992a4:	e0fffa17 	ldw	r3,-24(fp)
   992a8:	e0bffc17 	ldw	r2,-16(fp)
   992ac:	18801926 	beq	r3,r2,99314 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   992b0:	0005303a 	rdctl	r2,status
   992b4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   992b8:	e0fff517 	ldw	r3,-44(fp)
   992bc:	00bfff84 	movi	r2,-2
   992c0:	1884703a 	and	r2,r3,r2
   992c4:	1001703a 	wrctl	status,r2
  
  return context;
   992c8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   992cc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   992d0:	e0bffb17 	ldw	r2,-20(fp)
   992d4:	10800817 	ldw	r2,32(r2)
   992d8:	10c00054 	ori	r3,r2,1
   992dc:	e0bffb17 	ldw	r2,-20(fp)
   992e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   992e4:	e0bffb17 	ldw	r2,-20(fp)
   992e8:	10800017 	ldw	r2,0(r2)
   992ec:	11000104 	addi	r4,r2,4
   992f0:	e0bffb17 	ldw	r2,-20(fp)
   992f4:	10800817 	ldw	r2,32(r2)
   992f8:	1007883a 	mov	r3,r2
   992fc:	2005883a 	mov	r2,r4
   99300:	10c00035 	stwio	r3,0(r2)
   99304:	e0bff917 	ldw	r2,-28(fp)
   99308:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9930c:	e0bff417 	ldw	r2,-48(fp)
   99310:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   99314:	e0fffa17 	ldw	r3,-24(fp)
   99318:	e0bffc17 	ldw	r2,-16(fp)
   9931c:	18800526 	beq	r3,r2,99334 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   99320:	e0fffa17 	ldw	r3,-24(fp)
   99324:	e0bffc17 	ldw	r2,-16(fp)
   99328:	1887c83a 	sub	r3,r3,r2
   9932c:	e0ffff15 	stw	r3,-4(fp)
   99330:	00000906 	br	99358 <altera_avalon_jtag_uart_read+0x214>
  else if (flags & O_NONBLOCK)
   99334:	e0bffe17 	ldw	r2,-8(fp)
   99338:	1090000c 	andi	r2,r2,16384
   9933c:	1005003a 	cmpeq	r2,r2,zero
   99340:	1000031e 	bne	r2,zero,99350 <altera_avalon_jtag_uart_read+0x20c>
    return -EWOULDBLOCK;
   99344:	00bffd44 	movi	r2,-11
   99348:	e0bfff15 	stw	r2,-4(fp)
   9934c:	00000206 	br	99358 <altera_avalon_jtag_uart_read+0x214>
  else
    return -EIO;
   99350:	00bffec4 	movi	r2,-5
   99354:	e0bfff15 	stw	r2,-4(fp)
   99358:	e0bfff17 	ldw	r2,-4(fp)
}
   9935c:	e037883a 	mov	sp,fp
   99360:	dfc00117 	ldw	ra,4(sp)
   99364:	df000017 	ldw	fp,0(sp)
   99368:	dec00204 	addi	sp,sp,8
   9936c:	f800283a 	ret

00099370 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   99370:	defff204 	addi	sp,sp,-56
   99374:	de00012e 	bgeu	sp,et,9937c <altera_avalon_jtag_uart_write+0xc>
   99378:	003da0fa 	break	3
   9937c:	dfc00d15 	stw	ra,52(sp)
   99380:	df000c15 	stw	fp,48(sp)
   99384:	df000c04 	addi	fp,sp,48
   99388:	e13ffb15 	stw	r4,-20(fp)
   9938c:	e17ffc15 	stw	r5,-16(fp)
   99390:	e1bffd15 	stw	r6,-12(fp)
   99394:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   99398:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   9939c:	e0bffc17 	ldw	r2,-16(fp)
   993a0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   993a4:	00003a06 	br	99490 <altera_avalon_jtag_uart_write+0x120>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   993a8:	e0bffb17 	ldw	r2,-20(fp)
   993ac:	10800c17 	ldw	r2,48(r2)
   993b0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   993b4:	e0bffb17 	ldw	r2,-20(fp)
   993b8:	10800d17 	ldw	r2,52(r2)
   993bc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   993c0:	e0fffa17 	ldw	r3,-24(fp)
   993c4:	e0bff917 	ldw	r2,-28(fp)
   993c8:	1880062e 	bgeu	r3,r2,993e4 <altera_avalon_jtag_uart_write+0x74>
        n = out - 1 - in;
   993cc:	e0fff917 	ldw	r3,-28(fp)
   993d0:	e0bffa17 	ldw	r2,-24(fp)
   993d4:	1885c83a 	sub	r2,r3,r2
   993d8:	10bfffc4 	addi	r2,r2,-1
   993dc:	e0bff815 	stw	r2,-32(fp)
   993e0:	00000c06 	br	99414 <altera_avalon_jtag_uart_write+0xa4>
      else if (out > 0)
   993e4:	e0bff917 	ldw	r2,-28(fp)
   993e8:	1005003a 	cmpeq	r2,r2,zero
   993ec:	1000051e 	bne	r2,zero,99404 <altera_avalon_jtag_uart_write+0x94>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   993f0:	00820004 	movi	r2,2048
   993f4:	e0fffa17 	ldw	r3,-24(fp)
   993f8:	10c5c83a 	sub	r2,r2,r3
   993fc:	e0bff815 	stw	r2,-32(fp)
   99400:	00000406 	br	99414 <altera_avalon_jtag_uart_write+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   99404:	0081ffc4 	movi	r2,2047
   99408:	e0fffa17 	ldw	r3,-24(fp)
   9940c:	10c5c83a 	sub	r2,r2,r3
   99410:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   99414:	e0bff817 	ldw	r2,-32(fp)
   99418:	1005003a 	cmpeq	r2,r2,zero
   9941c:	10001f1e 	bne	r2,zero,9949c <altera_avalon_jtag_uart_write+0x12c>
        break;

      if (n > count)
   99420:	e0fffd17 	ldw	r3,-12(fp)
   99424:	e0bff817 	ldw	r2,-32(fp)
   99428:	1880022e 	bgeu	r3,r2,99434 <altera_avalon_jtag_uart_write+0xc4>
        n = count;
   9942c:	e0bffd17 	ldw	r2,-12(fp)
   99430:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   99434:	e0bffb17 	ldw	r2,-20(fp)
   99438:	10c20e04 	addi	r3,r2,2104
   9943c:	e0bffa17 	ldw	r2,-24(fp)
   99440:	1885883a 	add	r2,r3,r2
   99444:	e0fffc17 	ldw	r3,-16(fp)
   99448:	1009883a 	mov	r4,r2
   9944c:	180b883a 	mov	r5,r3
   99450:	e1bff817 	ldw	r6,-32(fp)
   99454:	008ecfc0 	call	8ecfc <memcpy>
      ptr   += n;
   99458:	e0fff817 	ldw	r3,-32(fp)
   9945c:	e0bffc17 	ldw	r2,-16(fp)
   99460:	10c5883a 	add	r2,r2,r3
   99464:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   99468:	e0fffd17 	ldw	r3,-12(fp)
   9946c:	e0bff817 	ldw	r2,-32(fp)
   99470:	1885c83a 	sub	r2,r3,r2
   99474:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   99478:	e0fffa17 	ldw	r3,-24(fp)
   9947c:	e0bff817 	ldw	r2,-32(fp)
   99480:	1885883a 	add	r2,r3,r2
   99484:	10c1ffcc 	andi	r3,r2,2047
   99488:	e0bffb17 	ldw	r2,-20(fp)
   9948c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   99490:	e0bffd17 	ldw	r2,-12(fp)
   99494:	10800048 	cmpgei	r2,r2,1
   99498:	103fc31e 	bne	r2,zero,993a8 <altera_avalon_jtag_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9949c:	0005303a 	rdctl	r2,status
   994a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   994a4:	e0fff517 	ldw	r3,-44(fp)
   994a8:	00bfff84 	movi	r2,-2
   994ac:	1884703a 	and	r2,r3,r2
   994b0:	1001703a 	wrctl	status,r2
  
  return context;
   994b4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   994b8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   994bc:	e0bffb17 	ldw	r2,-20(fp)
   994c0:	10800817 	ldw	r2,32(r2)
   994c4:	10c00094 	ori	r3,r2,2
   994c8:	e0bffb17 	ldw	r2,-20(fp)
   994cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   994d0:	e0bffb17 	ldw	r2,-20(fp)
   994d4:	10800017 	ldw	r2,0(r2)
   994d8:	11000104 	addi	r4,r2,4
   994dc:	e0bffb17 	ldw	r2,-20(fp)
   994e0:	10800817 	ldw	r2,32(r2)
   994e4:	1007883a 	mov	r3,r2
   994e8:	2005883a 	mov	r2,r4
   994ec:	10c00035 	stwio	r3,0(r2)
   994f0:	e0bff717 	ldw	r2,-36(fp)
   994f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   994f8:	e0bff417 	ldw	r2,-48(fp)
   994fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   99500:	e0bffd17 	ldw	r2,-12(fp)
   99504:	10800050 	cmplti	r2,r2,1
   99508:	1000111e 	bne	r2,zero,99550 <altera_avalon_jtag_uart_write+0x1e0>
    {
      if (flags & O_NONBLOCK)
   9950c:	e0bffe17 	ldw	r2,-8(fp)
   99510:	1090000c 	andi	r2,r2,16384
   99514:	1004c03a 	cmpne	r2,r2,zero
   99518:	1000101e 	bne	r2,zero,9955c <altera_avalon_jtag_uart_write+0x1ec>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   9951c:	e0bffb17 	ldw	r2,-20(fp)
   99520:	10c00d17 	ldw	r3,52(r2)
   99524:	e0bff917 	ldw	r2,-28(fp)
   99528:	1880051e 	bne	r3,r2,99540 <altera_avalon_jtag_uart_write+0x1d0>
   9952c:	e0bffb17 	ldw	r2,-20(fp)
   99530:	10c00917 	ldw	r3,36(r2)
   99534:	e0bffb17 	ldw	r2,-20(fp)
   99538:	10800117 	ldw	r2,4(r2)
   9953c:	18bff736 	bltu	r3,r2,9951c <altera_avalon_jtag_uart_write+0x1ac>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   99540:	e0bffb17 	ldw	r2,-20(fp)
   99544:	10c00d17 	ldw	r3,52(r2)
   99548:	e0bff917 	ldw	r2,-28(fp)
   9954c:	18800326 	beq	r3,r2,9955c <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
   99550:	e0bffd17 	ldw	r2,-12(fp)
   99554:	10800048 	cmpgei	r2,r2,1
   99558:	103fcd1e 	bne	r2,zero,99490 <altera_avalon_jtag_uart_write+0x120>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   9955c:	e0fffc17 	ldw	r3,-16(fp)
   99560:	e0bff617 	ldw	r2,-40(fp)
   99564:	18800526 	beq	r3,r2,9957c <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
   99568:	e0fffc17 	ldw	r3,-16(fp)
   9956c:	e0bff617 	ldw	r2,-40(fp)
   99570:	1887c83a 	sub	r3,r3,r2
   99574:	e0ffff15 	stw	r3,-4(fp)
   99578:	00000906 	br	995a0 <altera_avalon_jtag_uart_write+0x230>
  else if (flags & O_NONBLOCK)
   9957c:	e0bffe17 	ldw	r2,-8(fp)
   99580:	1090000c 	andi	r2,r2,16384
   99584:	1005003a 	cmpeq	r2,r2,zero
   99588:	1000031e 	bne	r2,zero,99598 <altera_avalon_jtag_uart_write+0x228>
    return -EWOULDBLOCK;
   9958c:	00bffd44 	movi	r2,-11
   99590:	e0bfff15 	stw	r2,-4(fp)
   99594:	00000206 	br	995a0 <altera_avalon_jtag_uart_write+0x230>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   99598:	00bffec4 	movi	r2,-5
   9959c:	e0bfff15 	stw	r2,-4(fp)
   995a0:	e0bfff17 	ldw	r2,-4(fp)
}
   995a4:	e037883a 	mov	sp,fp
   995a8:	dfc00117 	ldw	ra,4(sp)
   995ac:	df000017 	ldw	fp,0(sp)
   995b0:	dec00204 	addi	sp,sp,8
   995b4:	f800283a 	ret

000995b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   995b8:	defffa04 	addi	sp,sp,-24
   995bc:	de00012e 	bgeu	sp,et,995c4 <alt_avalon_timer_sc_irq+0xc>
   995c0:	003da0fa 	break	3
   995c4:	dfc00515 	stw	ra,20(sp)
   995c8:	df000415 	stw	fp,16(sp)
   995cc:	df000404 	addi	fp,sp,16
   995d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   995d4:	e0bfff17 	ldw	r2,-4(fp)
   995d8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   995dc:	e0bfff17 	ldw	r2,-4(fp)
   995e0:	10800104 	addi	r2,r2,4
   995e4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   995e8:	0005303a 	rdctl	r2,status
   995ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   995f0:	e0fffd17 	ldw	r3,-12(fp)
   995f4:	00bfff84 	movi	r2,-2
   995f8:	1884703a 	and	r2,r3,r2
   995fc:	1001703a 	wrctl	status,r2
  
  return context;
   99600:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   99604:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   99608:	009a0c00 	call	9a0c0 <alt_tick>
   9960c:	e0bffe17 	ldw	r2,-8(fp)
   99610:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99614:	e0bffc17 	ldw	r2,-16(fp)
   99618:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   9961c:	e037883a 	mov	sp,fp
   99620:	dfc00117 	ldw	ra,4(sp)
   99624:	df000017 	ldw	fp,0(sp)
   99628:	dec00204 	addi	sp,sp,8
   9962c:	f800283a 	ret

00099630 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   99630:	defff804 	addi	sp,sp,-32
   99634:	de00012e 	bgeu	sp,et,9963c <alt_avalon_timer_sc_init+0xc>
   99638:	003da0fa 	break	3
   9963c:	dfc00715 	stw	ra,28(sp)
   99640:	df000615 	stw	fp,24(sp)
   99644:	df000604 	addi	fp,sp,24
   99648:	e13ffc15 	stw	r4,-16(fp)
   9964c:	e17ffd15 	stw	r5,-12(fp)
   99650:	e1bffe15 	stw	r6,-8(fp)
   99654:	e1ffff15 	stw	r7,-4(fp)
   99658:	e0bfff17 	ldw	r2,-4(fp)
   9965c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   99660:	008002b4 	movhi	r2,10
   99664:	10897304 	addi	r2,r2,9676
   99668:	10800017 	ldw	r2,0(r2)
   9966c:	1004c03a 	cmpne	r2,r2,zero
   99670:	1000041e 	bne	r2,zero,99684 <alt_avalon_timer_sc_init+0x54>
  {
    _alt_tick_rate = nticks;
   99674:	00c002b4 	movhi	r3,10
   99678:	18c97304 	addi	r3,r3,9676
   9967c:	e0bffb17 	ldw	r2,-20(fp)
   99680:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   99684:	e0bffc17 	ldw	r2,-16(fp)
   99688:	10800104 	addi	r2,r2,4
   9968c:	1007883a 	mov	r3,r2
   99690:	008001c4 	movi	r2,7
   99694:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   99698:	d8000015 	stw	zero,0(sp)
   9969c:	e13ffd17 	ldw	r4,-12(fp)
   996a0:	e17ffe17 	ldw	r5,-8(fp)
   996a4:	018002b4 	movhi	r6,10
   996a8:	31a56e04 	addi	r6,r6,-27208
   996ac:	e1fffc17 	ldw	r7,-16(fp)
   996b0:	0097d940 	call	97d94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   996b4:	e037883a 	mov	sp,fp
   996b8:	dfc00117 	ldw	ra,4(sp)
   996bc:	df000017 	ldw	fp,0(sp)
   996c0:	dec00204 	addi	sp,sp,8
   996c4:	f800283a 	ret

000996c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   996c8:	defff404 	addi	sp,sp,-48
   996cc:	de00012e 	bgeu	sp,et,996d4 <alt_alarm_start+0xc>
   996d0:	003da0fa 	break	3
   996d4:	df000b15 	stw	fp,44(sp)
   996d8:	df000b04 	addi	fp,sp,44
   996dc:	e13ffb15 	stw	r4,-20(fp)
   996e0:	e17ffc15 	stw	r5,-16(fp)
   996e4:	e1bffd15 	stw	r6,-12(fp)
   996e8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   996ec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   996f0:	008002b4 	movhi	r2,10
   996f4:	10897304 	addi	r2,r2,9676
   996f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   996fc:	1005003a 	cmpeq	r2,r2,zero
   99700:	1000411e 	bne	r2,zero,99808 <alt_alarm_start+0x140>
  {
    if (alarm)
   99704:	e0bffb17 	ldw	r2,-20(fp)
   99708:	1005003a 	cmpeq	r2,r2,zero
   9970c:	10003b1e 	bne	r2,zero,997fc <alt_alarm_start+0x134>
    {
      alarm->callback = callback;
   99710:	e0fffb17 	ldw	r3,-20(fp)
   99714:	e0bffd17 	ldw	r2,-12(fp)
   99718:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   9971c:	e0fffb17 	ldw	r3,-20(fp)
   99720:	e0bffe17 	ldw	r2,-8(fp)
   99724:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99728:	0005303a 	rdctl	r2,status
   9972c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99730:	e0fff817 	ldw	r3,-32(fp)
   99734:	00bfff84 	movi	r2,-2
   99738:	1884703a 	and	r2,r3,r2
   9973c:	1001703a 	wrctl	status,r2
  
  return context;
   99740:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   99744:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   99748:	008002b4 	movhi	r2,10
   9974c:	10897404 	addi	r2,r2,9680
   99750:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   99754:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   99758:	e0fffc17 	ldw	r3,-16(fp)
   9975c:	e0bff917 	ldw	r2,-28(fp)
   99760:	1885883a 	add	r2,r3,r2
   99764:	10c00044 	addi	r3,r2,1
   99768:	e0bffb17 	ldw	r2,-20(fp)
   9976c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   99770:	e0bffb17 	ldw	r2,-20(fp)
   99774:	10c00217 	ldw	r3,8(r2)
   99778:	e0bff917 	ldw	r2,-28(fp)
   9977c:	1880042e 	bgeu	r3,r2,99790 <alt_alarm_start+0xc8>
      {
        alarm->rollover = 1;
   99780:	e0fffb17 	ldw	r3,-20(fp)
   99784:	00800044 	movi	r2,1
   99788:	18800405 	stb	r2,16(r3)
   9978c:	00000206 	br	99798 <alt_alarm_start+0xd0>
      }
      else
      {
        alarm->rollover = 0;
   99790:	e0bffb17 	ldw	r2,-20(fp)
   99794:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   99798:	e0fffb17 	ldw	r3,-20(fp)
   9979c:	008002b4 	movhi	r2,10
   997a0:	1081c604 	addi	r2,r2,1816
   997a4:	e0bff615 	stw	r2,-40(fp)
   997a8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   997ac:	e0fff717 	ldw	r3,-36(fp)
   997b0:	e0bff617 	ldw	r2,-40(fp)
   997b4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   997b8:	e0bff617 	ldw	r2,-40(fp)
   997bc:	10c00017 	ldw	r3,0(r2)
   997c0:	e0bff717 	ldw	r2,-36(fp)
   997c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   997c8:	e0bff617 	ldw	r2,-40(fp)
   997cc:	10c00017 	ldw	r3,0(r2)
   997d0:	e0bff717 	ldw	r2,-36(fp)
   997d4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   997d8:	e0fff617 	ldw	r3,-40(fp)
   997dc:	e0bff717 	ldw	r2,-36(fp)
   997e0:	18800015 	stw	r2,0(r3)
   997e4:	e0bffa17 	ldw	r2,-24(fp)
   997e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   997ec:	e0bff517 	ldw	r2,-44(fp)
   997f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   997f4:	e03fff15 	stw	zero,-4(fp)
   997f8:	00000506 	br	99810 <alt_alarm_start+0x148>
    }
    else
    {
      return -EINVAL;
   997fc:	00bffa84 	movi	r2,-22
   99800:	e0bfff15 	stw	r2,-4(fp)
   99804:	00000206 	br	99810 <alt_alarm_start+0x148>
    }
  }
  else
  {
    return -ENOTSUP;
   99808:	00bfde84 	movi	r2,-134
   9980c:	e0bfff15 	stw	r2,-4(fp)
   99810:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   99814:	e037883a 	mov	sp,fp
   99818:	df000017 	ldw	fp,0(sp)
   9981c:	dec00104 	addi	sp,sp,4
   99820:	f800283a 	ret

00099824 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   99824:	defffa04 	addi	sp,sp,-24
   99828:	de00012e 	bgeu	sp,et,99830 <alt_busy_sleep+0xc>
   9982c:	003da0fa 	break	3
   99830:	dfc00515 	stw	ra,20(sp)
   99834:	df000415 	stw	fp,16(sp)
   99838:	df000404 	addi	fp,sp,16
   9983c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   99840:	008000c4 	movi	r2,3
   99844:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   99848:	e0fffc17 	ldw	r3,-16(fp)
   9984c:	008003f4 	movhi	r2,15
   99850:	10909004 	addi	r2,r2,16960
   99854:	188b383a 	mul	r5,r3,r2
   99858:	0100bef4 	movhi	r4,763
   9985c:	213c2004 	addi	r4,r4,-3968
   99860:	008d8540 	call	8d854 <__udivsi3>
   99864:	100b883a 	mov	r5,r2
   99868:	01200034 	movhi	r4,32768
   9986c:	213fffc4 	addi	r4,r4,-1
   99870:	008d8540 	call	8d854 <__udivsi3>
   99874:	100b883a 	mov	r5,r2
   99878:	e13fff17 	ldw	r4,-4(fp)
   9987c:	008d8540 	call	8d854 <__udivsi3>
   99880:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   99884:	e0bffd17 	ldw	r2,-12(fp)
   99888:	1005003a 	cmpeq	r2,r2,zero
   9988c:	1000281e 	bne	r2,zero,99930 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   99890:	e03ffe15 	stw	zero,-8(fp)
   99894:	00001606 	br	998f0 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   99898:	00a00034 	movhi	r2,32768
   9989c:	10bfffc4 	addi	r2,r2,-1
   998a0:	10bfffc4 	addi	r2,r2,-1
   998a4:	103ffe1e 	bne	r2,zero,998a0 <alt_busy_sleep+0x7c>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   998a8:	e0fffc17 	ldw	r3,-16(fp)
   998ac:	008003f4 	movhi	r2,15
   998b0:	10909004 	addi	r2,r2,16960
   998b4:	188b383a 	mul	r5,r3,r2
   998b8:	0100bef4 	movhi	r4,763
   998bc:	213c2004 	addi	r4,r4,-3968
   998c0:	008d8540 	call	8d854 <__udivsi3>
   998c4:	100b883a 	mov	r5,r2
   998c8:	01200034 	movhi	r4,32768
   998cc:	213fffc4 	addi	r4,r4,-1
   998d0:	008d8540 	call	8d854 <__udivsi3>
   998d4:	1007883a 	mov	r3,r2
   998d8:	e0bfff17 	ldw	r2,-4(fp)
   998dc:	10c5c83a 	sub	r2,r2,r3
   998e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   998e4:	e0bffe17 	ldw	r2,-8(fp)
   998e8:	10800044 	addi	r2,r2,1
   998ec:	e0bffe15 	stw	r2,-8(fp)
   998f0:	e0fffe17 	ldw	r3,-8(fp)
   998f4:	e0bffd17 	ldw	r2,-12(fp)
   998f8:	18bfe716 	blt	r3,r2,99898 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   998fc:	e0fffc17 	ldw	r3,-16(fp)
   99900:	008003f4 	movhi	r2,15
   99904:	10909004 	addi	r2,r2,16960
   99908:	188b383a 	mul	r5,r3,r2
   9990c:	0100bef4 	movhi	r4,763
   99910:	213c2004 	addi	r4,r4,-3968
   99914:	008d8540 	call	8d854 <__udivsi3>
   99918:	1007883a 	mov	r3,r2
   9991c:	e0bfff17 	ldw	r2,-4(fp)
   99920:	1885383a 	mul	r2,r3,r2
   99924:	10bfffc4 	addi	r2,r2,-1
   99928:	103ffe1e 	bne	r2,zero,99924 <alt_busy_sleep+0x100>
   9992c:	00000c06 	br	99960 <alt_busy_sleep+0x13c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   99930:	e0fffc17 	ldw	r3,-16(fp)
   99934:	008003f4 	movhi	r2,15
   99938:	10909004 	addi	r2,r2,16960
   9993c:	188b383a 	mul	r5,r3,r2
   99940:	0100bef4 	movhi	r4,763
   99944:	213c2004 	addi	r4,r4,-3968
   99948:	008d8540 	call	8d854 <__udivsi3>
   9994c:	1007883a 	mov	r3,r2
   99950:	e0bfff17 	ldw	r2,-4(fp)
   99954:	1885383a 	mul	r2,r3,r2
   99958:	10bfffc4 	addi	r2,r2,-1
   9995c:	00bffe16 	blt	zero,r2,99958 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   99960:	0005883a 	mov	r2,zero
}
   99964:	e037883a 	mov	sp,fp
   99968:	dfc00117 	ldw	ra,4(sp)
   9996c:	df000017 	ldw	fp,0(sp)
   99970:	dec00204 	addi	sp,sp,8
   99974:	f800283a 	ret

00099978 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   99978:	defffe04 	addi	sp,sp,-8
   9997c:	de00012e 	bgeu	sp,et,99984 <alt_dcache_flush_all+0xc>
   99980:	003da0fa 	break	3
   99984:	df000115 	stw	fp,4(sp)
   99988:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   9998c:	e03fff15 	stw	zero,-4(fp)
   99990:	00000506 	br	999a8 <alt_dcache_flush_all+0x30>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   99994:	e0bfff17 	ldw	r2,-4(fp)
   99998:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   9999c:	e0bfff17 	ldw	r2,-4(fp)
   999a0:	10800804 	addi	r2,r2,32
   999a4:	e0bfff15 	stw	r2,-4(fp)
   999a8:	e0bfff17 	ldw	r2,-4(fp)
   999ac:	10820030 	cmpltui	r2,r2,2048
   999b0:	103ff81e 	bne	r2,zero,99994 <alt_dcache_flush_all+0x1c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   999b4:	e037883a 	mov	sp,fp
   999b8:	df000017 	ldw	fp,0(sp)
   999bc:	dec00104 	addi	sp,sp,4
   999c0:	f800283a 	ret

000999c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   999c4:	defff904 	addi	sp,sp,-28
   999c8:	de00012e 	bgeu	sp,et,999d0 <alt_dev_llist_insert+0xc>
   999cc:	003da0fa 	break	3
   999d0:	dfc00615 	stw	ra,24(sp)
   999d4:	df000515 	stw	fp,20(sp)
   999d8:	df000504 	addi	fp,sp,20
   999dc:	e13ffd15 	stw	r4,-12(fp)
   999e0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   999e4:	e0bffd17 	ldw	r2,-12(fp)
   999e8:	1005003a 	cmpeq	r2,r2,zero
   999ec:	1000041e 	bne	r2,zero,99a00 <alt_dev_llist_insert+0x3c>
   999f0:	e0bffd17 	ldw	r2,-12(fp)
   999f4:	10800217 	ldw	r2,8(r2)
   999f8:	1004c03a 	cmpne	r2,r2,zero
   999fc:	1000071e 	bne	r2,zero,99a1c <alt_dev_llist_insert+0x58>
  {
    ALT_ERRNO = EINVAL;
   99a00:	0099a800 	call	99a80 <alt_get_errno>
   99a04:	1007883a 	mov	r3,r2
   99a08:	00800584 	movi	r2,22
   99a0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   99a10:	00bffa84 	movi	r2,-22
   99a14:	e0bfff15 	stw	r2,-4(fp)
   99a18:	00001306 	br	99a68 <alt_dev_llist_insert+0xa4>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   99a1c:	e0fffd17 	ldw	r3,-12(fp)
   99a20:	e0bffe17 	ldw	r2,-8(fp)
   99a24:	e0bffb15 	stw	r2,-20(fp)
   99a28:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   99a2c:	e0fffc17 	ldw	r3,-16(fp)
   99a30:	e0bffb17 	ldw	r2,-20(fp)
   99a34:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   99a38:	e0bffb17 	ldw	r2,-20(fp)
   99a3c:	10c00017 	ldw	r3,0(r2)
   99a40:	e0bffc17 	ldw	r2,-16(fp)
   99a44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   99a48:	e0bffb17 	ldw	r2,-20(fp)
   99a4c:	10c00017 	ldw	r3,0(r2)
   99a50:	e0bffc17 	ldw	r2,-16(fp)
   99a54:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   99a58:	e0fffb17 	ldw	r3,-20(fp)
   99a5c:	e0bffc17 	ldw	r2,-16(fp)
   99a60:	18800015 	stw	r2,0(r3)

  return 0;  
   99a64:	e03fff15 	stw	zero,-4(fp)
   99a68:	e0bfff17 	ldw	r2,-4(fp)
}
   99a6c:	e037883a 	mov	sp,fp
   99a70:	dfc00117 	ldw	ra,4(sp)
   99a74:	df000017 	ldw	fp,0(sp)
   99a78:	dec00204 	addi	sp,sp,8
   99a7c:	f800283a 	ret

00099a80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99a80:	defffd04 	addi	sp,sp,-12
   99a84:	de00012e 	bgeu	sp,et,99a8c <alt_get_errno+0xc>
   99a88:	003da0fa 	break	3
   99a8c:	dfc00215 	stw	ra,8(sp)
   99a90:	df000115 	stw	fp,4(sp)
   99a94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   99a98:	008002b4 	movhi	r2,10
   99a9c:	1081c404 	addi	r2,r2,1808
   99aa0:	10800017 	ldw	r2,0(r2)
   99aa4:	1005003a 	cmpeq	r2,r2,zero
   99aa8:	1000061e 	bne	r2,zero,99ac4 <alt_get_errno+0x44>
   99aac:	008002b4 	movhi	r2,10
   99ab0:	1081c404 	addi	r2,r2,1808
   99ab4:	10800017 	ldw	r2,0(r2)
   99ab8:	103ee83a 	callr	r2
   99abc:	e0bfff15 	stw	r2,-4(fp)
   99ac0:	00000306 	br	99ad0 <alt_get_errno+0x50>
   99ac4:	008002b4 	movhi	r2,10
   99ac8:	10896a04 	addi	r2,r2,9640
   99acc:	e0bfff15 	stw	r2,-4(fp)
   99ad0:	e0bfff17 	ldw	r2,-4(fp)
}
   99ad4:	e037883a 	mov	sp,fp
   99ad8:	dfc00117 	ldw	ra,4(sp)
   99adc:	df000017 	ldw	fp,0(sp)
   99ae0:	dec00204 	addi	sp,sp,8
   99ae4:	f800283a 	ret

00099ae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   99ae8:	defffd04 	addi	sp,sp,-12
   99aec:	de00012e 	bgeu	sp,et,99af4 <_do_ctors+0xc>
   99af0:	003da0fa 	break	3
   99af4:	dfc00215 	stw	ra,8(sp)
   99af8:	df000115 	stw	fp,4(sp)
   99afc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   99b00:	00bfff04 	movi	r2,-4
   99b04:	00c002b4 	movhi	r3,10
   99b08:	18ea3004 	addi	r3,r3,-22336
   99b0c:	1885883a 	add	r2,r3,r2
   99b10:	e0bfff15 	stw	r2,-4(fp)
   99b14:	00000606 	br	99b30 <_do_ctors+0x48>
        (*ctor) (); 
   99b18:	e0bfff17 	ldw	r2,-4(fp)
   99b1c:	10800017 	ldw	r2,0(r2)
   99b20:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   99b24:	e0bfff17 	ldw	r2,-4(fp)
   99b28:	10bfff04 	addi	r2,r2,-4
   99b2c:	e0bfff15 	stw	r2,-4(fp)
   99b30:	e0ffff17 	ldw	r3,-4(fp)
   99b34:	008002b4 	movhi	r2,10
   99b38:	10aa2f04 	addi	r2,r2,-22340
   99b3c:	18bff62e 	bgeu	r3,r2,99b18 <_do_ctors+0x30>
        (*ctor) (); 
}
   99b40:	e037883a 	mov	sp,fp
   99b44:	dfc00117 	ldw	ra,4(sp)
   99b48:	df000017 	ldw	fp,0(sp)
   99b4c:	dec00204 	addi	sp,sp,8
   99b50:	f800283a 	ret

00099b54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   99b54:	defffd04 	addi	sp,sp,-12
   99b58:	de00012e 	bgeu	sp,et,99b60 <_do_dtors+0xc>
   99b5c:	003da0fa 	break	3
   99b60:	dfc00215 	stw	ra,8(sp)
   99b64:	df000115 	stw	fp,4(sp)
   99b68:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   99b6c:	00bfff04 	movi	r2,-4
   99b70:	00c002b4 	movhi	r3,10
   99b74:	18ea3004 	addi	r3,r3,-22336
   99b78:	1885883a 	add	r2,r3,r2
   99b7c:	e0bfff15 	stw	r2,-4(fp)
   99b80:	00000606 	br	99b9c <_do_dtors+0x48>
        (*dtor) (); 
   99b84:	e0bfff17 	ldw	r2,-4(fp)
   99b88:	10800017 	ldw	r2,0(r2)
   99b8c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   99b90:	e0bfff17 	ldw	r2,-4(fp)
   99b94:	10bfff04 	addi	r2,r2,-4
   99b98:	e0bfff15 	stw	r2,-4(fp)
   99b9c:	e0ffff17 	ldw	r3,-4(fp)
   99ba0:	008002b4 	movhi	r2,10
   99ba4:	10aa3004 	addi	r2,r2,-22336
   99ba8:	18bff62e 	bgeu	r3,r2,99b84 <_do_dtors+0x30>
        (*dtor) (); 
}
   99bac:	e037883a 	mov	sp,fp
   99bb0:	dfc00117 	ldw	ra,4(sp)
   99bb4:	df000017 	ldw	fp,0(sp)
   99bb8:	dec00204 	addi	sp,sp,8
   99bbc:	f800283a 	ret

00099bc0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   99bc0:	defffe04 	addi	sp,sp,-8
   99bc4:	de00012e 	bgeu	sp,et,99bcc <alt_icache_flush_all+0xc>
   99bc8:	003da0fa 	break	3
   99bcc:	dfc00115 	stw	ra,4(sp)
   99bd0:	df000015 	stw	fp,0(sp)
   99bd4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   99bd8:	0009883a 	mov	r4,zero
   99bdc:	01440004 	movi	r5,4096
   99be0:	009a4800 	call	9a480 <alt_icache_flush>
#endif
}
   99be4:	e037883a 	mov	sp,fp
   99be8:	dfc00117 	ldw	ra,4(sp)
   99bec:	df000017 	ldw	fp,0(sp)
   99bf0:	dec00204 	addi	sp,sp,8
   99bf4:	f800283a 	ret

00099bf8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   99bf8:	defff904 	addi	sp,sp,-28
   99bfc:	de00012e 	bgeu	sp,et,99c04 <alt_open_fd+0xc>
   99c00:	003da0fa 	break	3
   99c04:	dfc00615 	stw	ra,24(sp)
   99c08:	df000515 	stw	fp,20(sp)
   99c0c:	df000504 	addi	fp,sp,20
   99c10:	e13ffc15 	stw	r4,-16(fp)
   99c14:	e17ffd15 	stw	r5,-12(fp)
   99c18:	e1bffe15 	stw	r6,-8(fp)
   99c1c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   99c20:	e13ffd17 	ldw	r4,-12(fp)
   99c24:	e17ffe17 	ldw	r5,-8(fp)
   99c28:	e1bfff17 	ldw	r6,-4(fp)
   99c2c:	0099e280 	call	99e28 <open>
   99c30:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   99c34:	e0bffb17 	ldw	r2,-20(fp)
   99c38:	1004803a 	cmplt	r2,r2,zero
   99c3c:	10001c1e 	bne	r2,zero,99cb0 <alt_open_fd+0xb8>
  {
    fd->dev      = alt_fd_list[old].dev;
   99c40:	e0bffb17 	ldw	r2,-20(fp)
   99c44:	00c002b4 	movhi	r3,10
   99c48:	18fcdd04 	addi	r3,r3,-3212
   99c4c:	10800324 	muli	r2,r2,12
   99c50:	10c5883a 	add	r2,r2,r3
   99c54:	10c00017 	ldw	r3,0(r2)
   99c58:	e0bffc17 	ldw	r2,-16(fp)
   99c5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   99c60:	e0bffb17 	ldw	r2,-20(fp)
   99c64:	00c002b4 	movhi	r3,10
   99c68:	18fcdd04 	addi	r3,r3,-3212
   99c6c:	10800324 	muli	r2,r2,12
   99c70:	10c5883a 	add	r2,r2,r3
   99c74:	10800104 	addi	r2,r2,4
   99c78:	10c00017 	ldw	r3,0(r2)
   99c7c:	e0bffc17 	ldw	r2,-16(fp)
   99c80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   99c84:	e0bffb17 	ldw	r2,-20(fp)
   99c88:	00c002b4 	movhi	r3,10
   99c8c:	18fcdd04 	addi	r3,r3,-3212
   99c90:	10800324 	muli	r2,r2,12
   99c94:	10c5883a 	add	r2,r2,r3
   99c98:	10800204 	addi	r2,r2,8
   99c9c:	10c00017 	ldw	r3,0(r2)
   99ca0:	e0bffc17 	ldw	r2,-16(fp)
   99ca4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   99ca8:	e13ffb17 	ldw	r4,-20(fp)
   99cac:	00986680 	call	98668 <alt_release_fd>
  }
} 
   99cb0:	e037883a 	mov	sp,fp
   99cb4:	dfc00117 	ldw	ra,4(sp)
   99cb8:	df000017 	ldw	fp,0(sp)
   99cbc:	dec00204 	addi	sp,sp,8
   99cc0:	f800283a 	ret

00099cc4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   99cc4:	defffb04 	addi	sp,sp,-20
   99cc8:	de00012e 	bgeu	sp,et,99cd0 <alt_io_redirect+0xc>
   99ccc:	003da0fa 	break	3
   99cd0:	dfc00415 	stw	ra,16(sp)
   99cd4:	df000315 	stw	fp,12(sp)
   99cd8:	df000304 	addi	fp,sp,12
   99cdc:	e13ffd15 	stw	r4,-12(fp)
   99ce0:	e17ffe15 	stw	r5,-8(fp)
   99ce4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   99ce8:	010002b4 	movhi	r4,10
   99cec:	213ce004 	addi	r4,r4,-3200
   99cf0:	e17ffd17 	ldw	r5,-12(fp)
   99cf4:	01800044 	movi	r6,1
   99cf8:	01c07fc4 	movi	r7,511
   99cfc:	0099bf80 	call	99bf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   99d00:	010002b4 	movhi	r4,10
   99d04:	213cdd04 	addi	r4,r4,-3212
   99d08:	e17ffe17 	ldw	r5,-8(fp)
   99d0c:	000d883a 	mov	r6,zero
   99d10:	01c07fc4 	movi	r7,511
   99d14:	0099bf80 	call	99bf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   99d18:	010002b4 	movhi	r4,10
   99d1c:	213ce304 	addi	r4,r4,-3188
   99d20:	e17fff17 	ldw	r5,-4(fp)
   99d24:	01800044 	movi	r6,1
   99d28:	01c07fc4 	movi	r7,511
   99d2c:	0099bf80 	call	99bf8 <alt_open_fd>
}  
   99d30:	e037883a 	mov	sp,fp
   99d34:	dfc00117 	ldw	ra,4(sp)
   99d38:	df000017 	ldw	fp,0(sp)
   99d3c:	dec00204 	addi	sp,sp,8
   99d40:	f800283a 	ret

00099d44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   99d44:	defffc04 	addi	sp,sp,-16
   99d48:	de00012e 	bgeu	sp,et,99d50 <alt_file_locked+0xc>
   99d4c:	003da0fa 	break	3
   99d50:	df000315 	stw	fp,12(sp)
   99d54:	df000304 	addi	fp,sp,12
   99d58:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   99d5c:	e0bffe17 	ldw	r2,-8(fp)
   99d60:	10800217 	ldw	r2,8(r2)
   99d64:	10d00034 	orhi	r3,r2,16384
   99d68:	e0bffe17 	ldw	r2,-8(fp)
   99d6c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   99d70:	e03ffd15 	stw	zero,-12(fp)
   99d74:	00002006 	br	99df8 <alt_file_locked+0xb4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   99d78:	e0bffd17 	ldw	r2,-12(fp)
   99d7c:	00c002b4 	movhi	r3,10
   99d80:	18fcdd04 	addi	r3,r3,-3212
   99d84:	10800324 	muli	r2,r2,12
   99d88:	10c5883a 	add	r2,r2,r3
   99d8c:	10c00017 	ldw	r3,0(r2)
   99d90:	e0bffe17 	ldw	r2,-8(fp)
   99d94:	10800017 	ldw	r2,0(r2)
   99d98:	1880141e 	bne	r3,r2,99dec <alt_file_locked+0xa8>
   99d9c:	e0bffd17 	ldw	r2,-12(fp)
   99da0:	00c002b4 	movhi	r3,10
   99da4:	18fcdd04 	addi	r3,r3,-3212
   99da8:	10800324 	muli	r2,r2,12
   99dac:	10c5883a 	add	r2,r2,r3
   99db0:	10800204 	addi	r2,r2,8
   99db4:	10800017 	ldw	r2,0(r2)
   99db8:	1004403a 	cmpge	r2,r2,zero
   99dbc:	10000b1e 	bne	r2,zero,99dec <alt_file_locked+0xa8>
   99dc0:	e0bffd17 	ldw	r2,-12(fp)
   99dc4:	10800324 	muli	r2,r2,12
   99dc8:	1007883a 	mov	r3,r2
   99dcc:	008002b4 	movhi	r2,10
   99dd0:	10bcdd04 	addi	r2,r2,-3212
   99dd4:	1887883a 	add	r3,r3,r2
   99dd8:	e0bffe17 	ldw	r2,-8(fp)
   99ddc:	18800326 	beq	r3,r2,99dec <alt_file_locked+0xa8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   99de0:	00bffcc4 	movi	r2,-13
   99de4:	e0bfff15 	stw	r2,-4(fp)
   99de8:	00000a06 	br	99e14 <alt_file_locked+0xd0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   99dec:	e0bffd17 	ldw	r2,-12(fp)
   99df0:	10800044 	addi	r2,r2,1
   99df4:	e0bffd15 	stw	r2,-12(fp)
   99df8:	008002b4 	movhi	r2,10
   99dfc:	1081c304 	addi	r2,r2,1804
   99e00:	10800017 	ldw	r2,0(r2)
   99e04:	1007883a 	mov	r3,r2
   99e08:	e0bffd17 	ldw	r2,-12(fp)
   99e0c:	18bfda2e 	bgeu	r3,r2,99d78 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   99e10:	e03fff15 	stw	zero,-4(fp)
   99e14:	e0bfff17 	ldw	r2,-4(fp)
}
   99e18:	e037883a 	mov	sp,fp
   99e1c:	df000017 	ldw	fp,0(sp)
   99e20:	dec00104 	addi	sp,sp,4
   99e24:	f800283a 	ret

00099e28 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   99e28:	defff404 	addi	sp,sp,-48
   99e2c:	de00012e 	bgeu	sp,et,99e34 <open+0xc>
   99e30:	003da0fa 	break	3
   99e34:	dfc00b15 	stw	ra,44(sp)
   99e38:	df000a15 	stw	fp,40(sp)
   99e3c:	df000a04 	addi	fp,sp,40
   99e40:	e13ffb15 	stw	r4,-20(fp)
   99e44:	e17ffc15 	stw	r5,-16(fp)
   99e48:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   99e4c:	00bfffc4 	movi	r2,-1
   99e50:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   99e54:	00bffb44 	movi	r2,-19
   99e58:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   99e5c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   99e60:	e13ffb17 	ldw	r4,-20(fp)
   99e64:	014002b4 	movhi	r5,10
   99e68:	2941c104 	addi	r5,r5,1796
   99e6c:	009a1fc0 	call	9a1fc <alt_find_dev>
   99e70:	e0bffa15 	stw	r2,-24(fp)
   99e74:	e0bffa17 	ldw	r2,-24(fp)
   99e78:	1004c03a 	cmpne	r2,r2,zero
   99e7c:	1000051e 	bne	r2,zero,99e94 <open+0x6c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   99e80:	e13ffb17 	ldw	r4,-20(fp)
   99e84:	009a2980 	call	9a298 <alt_find_file>
   99e88:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   99e8c:	00800044 	movi	r2,1
   99e90:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   99e94:	e0bffa17 	ldw	r2,-24(fp)
   99e98:	1005003a 	cmpeq	r2,r2,zero
   99e9c:	1000301e 	bne	r2,zero,99f60 <open+0x138>
  {
    if ((index = alt_get_fd (dev)) < 0)
   99ea0:	e13ffa17 	ldw	r4,-24(fp)
   99ea4:	009a3c00 	call	9a3c0 <alt_get_fd>
   99ea8:	e0bff815 	stw	r2,-32(fp)
   99eac:	e0bff817 	ldw	r2,-32(fp)
   99eb0:	1004403a 	cmpge	r2,r2,zero
   99eb4:	1000031e 	bne	r2,zero,99ec4 <open+0x9c>
    {
      status = index;
   99eb8:	e0bff817 	ldw	r2,-32(fp)
   99ebc:	e0bff715 	stw	r2,-36(fp)
   99ec0:	00002906 	br	99f68 <open+0x140>
    }
    else
    {
      fd = &alt_fd_list[index];
   99ec4:	e0bff817 	ldw	r2,-32(fp)
   99ec8:	10800324 	muli	r2,r2,12
   99ecc:	1007883a 	mov	r3,r2
   99ed0:	008002b4 	movhi	r2,10
   99ed4:	10bcdd04 	addi	r2,r2,-3212
   99ed8:	1885883a 	add	r2,r3,r2
   99edc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   99ee0:	e0fffc17 	ldw	r3,-16(fp)
   99ee4:	00900034 	movhi	r2,16384
   99ee8:	10bfffc4 	addi	r2,r2,-1
   99eec:	1886703a 	and	r3,r3,r2
   99ef0:	e0bff917 	ldw	r2,-28(fp)
   99ef4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   99ef8:	e0bff617 	ldw	r2,-40(fp)
   99efc:	1004c03a 	cmpne	r2,r2,zero
   99f00:	1000061e 	bne	r2,zero,99f1c <open+0xf4>
   99f04:	e13ff917 	ldw	r4,-28(fp)
   99f08:	0099d440 	call	99d44 <alt_file_locked>
   99f0c:	e0bff715 	stw	r2,-36(fp)
   99f10:	e0bff717 	ldw	r2,-36(fp)
   99f14:	1004803a 	cmplt	r2,r2,zero
   99f18:	1000131e 	bne	r2,zero,99f68 <open+0x140>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   99f1c:	e0bffa17 	ldw	r2,-24(fp)
   99f20:	10800317 	ldw	r2,12(r2)
   99f24:	1005003a 	cmpeq	r2,r2,zero
   99f28:	1000091e 	bne	r2,zero,99f50 <open+0x128>
   99f2c:	e0bffa17 	ldw	r2,-24(fp)
   99f30:	10800317 	ldw	r2,12(r2)
   99f34:	e13ff917 	ldw	r4,-28(fp)
   99f38:	e17ffb17 	ldw	r5,-20(fp)
   99f3c:	e1bffc17 	ldw	r6,-16(fp)
   99f40:	e1fffd17 	ldw	r7,-12(fp)
   99f44:	103ee83a 	callr	r2
   99f48:	e0bfff15 	stw	r2,-4(fp)
   99f4c:	00000106 	br	99f54 <open+0x12c>
   99f50:	e03fff15 	stw	zero,-4(fp)
   99f54:	e0bfff17 	ldw	r2,-4(fp)
   99f58:	e0bff715 	stw	r2,-36(fp)
   99f5c:	00000206 	br	99f68 <open+0x140>
      }
    }
  }
  else
  {
    status = -ENODEV;
   99f60:	00bffb44 	movi	r2,-19
   99f64:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   99f68:	e0bff717 	ldw	r2,-36(fp)
   99f6c:	1004403a 	cmpge	r2,r2,zero
   99f70:	1000091e 	bne	r2,zero,99f98 <open+0x170>
  {
    alt_release_fd (index);  
   99f74:	e13ff817 	ldw	r4,-32(fp)
   99f78:	00986680 	call	98668 <alt_release_fd>
    ALT_ERRNO = -status;
   99f7c:	0099fb80 	call	99fb8 <alt_get_errno>
   99f80:	e0fff717 	ldw	r3,-36(fp)
   99f84:	00c7c83a 	sub	r3,zero,r3
   99f88:	10c00015 	stw	r3,0(r2)
    return -1;
   99f8c:	00bfffc4 	movi	r2,-1
   99f90:	e0bffe15 	stw	r2,-8(fp)
   99f94:	00000206 	br	99fa0 <open+0x178>
  }
  
  /* return the reference upon success */

  return index;
   99f98:	e0bff817 	ldw	r2,-32(fp)
   99f9c:	e0bffe15 	stw	r2,-8(fp)
   99fa0:	e0bffe17 	ldw	r2,-8(fp)
}
   99fa4:	e037883a 	mov	sp,fp
   99fa8:	dfc00117 	ldw	ra,4(sp)
   99fac:	df000017 	ldw	fp,0(sp)
   99fb0:	dec00204 	addi	sp,sp,8
   99fb4:	f800283a 	ret

00099fb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   99fb8:	defffd04 	addi	sp,sp,-12
   99fbc:	de00012e 	bgeu	sp,et,99fc4 <alt_get_errno+0xc>
   99fc0:	003da0fa 	break	3
   99fc4:	dfc00215 	stw	ra,8(sp)
   99fc8:	df000115 	stw	fp,4(sp)
   99fcc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   99fd0:	008002b4 	movhi	r2,10
   99fd4:	1081c404 	addi	r2,r2,1808
   99fd8:	10800017 	ldw	r2,0(r2)
   99fdc:	1005003a 	cmpeq	r2,r2,zero
   99fe0:	1000061e 	bne	r2,zero,99ffc <alt_get_errno+0x44>
   99fe4:	008002b4 	movhi	r2,10
   99fe8:	1081c404 	addi	r2,r2,1808
   99fec:	10800017 	ldw	r2,0(r2)
   99ff0:	103ee83a 	callr	r2
   99ff4:	e0bfff15 	stw	r2,-4(fp)
   99ff8:	00000306 	br	9a008 <alt_get_errno+0x50>
   99ffc:	008002b4 	movhi	r2,10
   9a000:	10896a04 	addi	r2,r2,9640
   9a004:	e0bfff15 	stw	r2,-4(fp)
   9a008:	e0bfff17 	ldw	r2,-4(fp)
}
   9a00c:	e037883a 	mov	sp,fp
   9a010:	dfc00117 	ldw	ra,4(sp)
   9a014:	df000017 	ldw	fp,0(sp)
   9a018:	dec00204 	addi	sp,sp,8
   9a01c:	f800283a 	ret

0009a020 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   9a020:	defffa04 	addi	sp,sp,-24
   9a024:	de00012e 	bgeu	sp,et,9a02c <alt_alarm_stop+0xc>
   9a028:	003da0fa 	break	3
   9a02c:	df000515 	stw	fp,20(sp)
   9a030:	df000504 	addi	fp,sp,20
   9a034:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a038:	0005303a 	rdctl	r2,status
   9a03c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a040:	e0fffd17 	ldw	r3,-12(fp)
   9a044:	00bfff84 	movi	r2,-2
   9a048:	1884703a 	and	r2,r3,r2
   9a04c:	1001703a 	wrctl	status,r2
  
  return context;
   9a050:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   9a054:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   9a058:	e0bfff17 	ldw	r2,-4(fp)
   9a05c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   9a060:	e0bffc17 	ldw	r2,-16(fp)
   9a064:	10c00017 	ldw	r3,0(r2)
   9a068:	e0bffc17 	ldw	r2,-16(fp)
   9a06c:	10800117 	ldw	r2,4(r2)
   9a070:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   9a074:	e0bffc17 	ldw	r2,-16(fp)
   9a078:	10c00117 	ldw	r3,4(r2)
   9a07c:	e0bffc17 	ldw	r2,-16(fp)
   9a080:	10800017 	ldw	r2,0(r2)
   9a084:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   9a088:	e0fffc17 	ldw	r3,-16(fp)
   9a08c:	e0bffc17 	ldw	r2,-16(fp)
   9a090:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   9a094:	e0fffc17 	ldw	r3,-16(fp)
   9a098:	e0bffc17 	ldw	r2,-16(fp)
   9a09c:	18800015 	stw	r2,0(r3)
   9a0a0:	e0bffe17 	ldw	r2,-8(fp)
   9a0a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a0a8:	e0bffb17 	ldw	r2,-20(fp)
   9a0ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   9a0b0:	e037883a 	mov	sp,fp
   9a0b4:	df000017 	ldw	fp,0(sp)
   9a0b8:	dec00104 	addi	sp,sp,4
   9a0bc:	f800283a 	ret

0009a0c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   9a0c0:	defffb04 	addi	sp,sp,-20
   9a0c4:	de00012e 	bgeu	sp,et,9a0cc <alt_tick+0xc>
   9a0c8:	003da0fa 	break	3
   9a0cc:	dfc00415 	stw	ra,16(sp)
   9a0d0:	df000315 	stw	fp,12(sp)
   9a0d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   9a0d8:	d0a01117 	ldw	r2,-32700(gp)
   9a0dc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   9a0e0:	d0a7bf17 	ldw	r2,-24836(gp)
   9a0e4:	10800044 	addi	r2,r2,1
   9a0e8:	d0a7bf15 	stw	r2,-24836(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9a0ec:	00003106 	br	9a1b4 <alt_tick+0xf4>
  {
    next = (alt_alarm*) alarm->llist.next;
   9a0f0:	e0bffe17 	ldw	r2,-8(fp)
   9a0f4:	10800017 	ldw	r2,0(r2)
   9a0f8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   9a0fc:	e0bffe17 	ldw	r2,-8(fp)
   9a100:	10800403 	ldbu	r2,16(r2)
   9a104:	10803fcc 	andi	r2,r2,255
   9a108:	1005003a 	cmpeq	r2,r2,zero
   9a10c:	1000051e 	bne	r2,zero,9a124 <alt_tick+0x64>
   9a110:	d0a7bf17 	ldw	r2,-24836(gp)
   9a114:	1004c03a 	cmpne	r2,r2,zero
   9a118:	1000021e 	bne	r2,zero,9a124 <alt_tick+0x64>
    {
      alarm->rollover = 0;
   9a11c:	e0bffe17 	ldw	r2,-8(fp)
   9a120:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   9a124:	e0bffe17 	ldw	r2,-8(fp)
   9a128:	10c00217 	ldw	r3,8(r2)
   9a12c:	d0a7bf17 	ldw	r2,-24836(gp)
   9a130:	10c01e36 	bltu	r2,r3,9a1ac <alt_tick+0xec>
   9a134:	e0bffe17 	ldw	r2,-8(fp)
   9a138:	10800403 	ldbu	r2,16(r2)
   9a13c:	10803fcc 	andi	r2,r2,255
   9a140:	1004c03a 	cmpne	r2,r2,zero
   9a144:	1000191e 	bne	r2,zero,9a1ac <alt_tick+0xec>
    {
      next_callback = alarm->callback (alarm->context);
   9a148:	e0bffe17 	ldw	r2,-8(fp)
   9a14c:	10c00317 	ldw	r3,12(r2)
   9a150:	e0bffe17 	ldw	r2,-8(fp)
   9a154:	11000517 	ldw	r4,20(r2)
   9a158:	183ee83a 	callr	r3
   9a15c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   9a160:	e0bffd17 	ldw	r2,-12(fp)
   9a164:	1004c03a 	cmpne	r2,r2,zero
   9a168:	1000031e 	bne	r2,zero,9a178 <alt_tick+0xb8>
      {
        alt_alarm_stop (alarm);
   9a16c:	e13ffe17 	ldw	r4,-8(fp)
   9a170:	009a0200 	call	9a020 <alt_alarm_stop>
   9a174:	00000d06 	br	9a1ac <alt_tick+0xec>
      }
      else
      {
        alarm->time += next_callback;
   9a178:	e0bffe17 	ldw	r2,-8(fp)
   9a17c:	10c00217 	ldw	r3,8(r2)
   9a180:	e0bffd17 	ldw	r2,-12(fp)
   9a184:	1887883a 	add	r3,r3,r2
   9a188:	e0bffe17 	ldw	r2,-8(fp)
   9a18c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   9a190:	e0bffe17 	ldw	r2,-8(fp)
   9a194:	10c00217 	ldw	r3,8(r2)
   9a198:	d0a7bf17 	ldw	r2,-24836(gp)
   9a19c:	1880032e 	bgeu	r3,r2,9a1ac <alt_tick+0xec>
        {
          alarm->rollover = 1;
   9a1a0:	e0fffe17 	ldw	r3,-8(fp)
   9a1a4:	00800044 	movi	r2,1
   9a1a8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   9a1ac:	e0bfff17 	ldw	r2,-4(fp)
   9a1b0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9a1b4:	d0e01104 	addi	r3,gp,-32700
   9a1b8:	e0bffe17 	ldw	r2,-8(fp)
   9a1bc:	10ffcc1e 	bne	r2,r3,9a0f0 <alt_tick+0x30>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   9a1c0:	e037883a 	mov	sp,fp
   9a1c4:	dfc00117 	ldw	ra,4(sp)
   9a1c8:	df000017 	ldw	fp,0(sp)
   9a1cc:	dec00204 	addi	sp,sp,8
   9a1d0:	f800283a 	ret

0009a1d4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   9a1d4:	deffff04 	addi	sp,sp,-4
   9a1d8:	de00012e 	bgeu	sp,et,9a1e0 <altera_nios2_qsys_irq_init+0xc>
   9a1dc:	003da0fa 	break	3
   9a1e0:	df000015 	stw	fp,0(sp)
   9a1e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9a1e8:	000170fa 	wrctl	ienable,zero
}
   9a1ec:	e037883a 	mov	sp,fp
   9a1f0:	df000017 	ldw	fp,0(sp)
   9a1f4:	dec00104 	addi	sp,sp,4
   9a1f8:	f800283a 	ret

0009a1fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   9a1fc:	defff904 	addi	sp,sp,-28
   9a200:	de00012e 	bgeu	sp,et,9a208 <alt_find_dev+0xc>
   9a204:	003da0fa 	break	3
   9a208:	dfc00615 	stw	ra,24(sp)
   9a20c:	df000515 	stw	fp,20(sp)
   9a210:	df000504 	addi	fp,sp,20
   9a214:	e13ffd15 	stw	r4,-12(fp)
   9a218:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9a21c:	e0bffe17 	ldw	r2,-8(fp)
   9a220:	10800017 	ldw	r2,0(r2)
   9a224:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9a228:	e13ffd17 	ldw	r4,-12(fp)
   9a22c:	008f3200 	call	8f320 <strlen>
   9a230:	10800044 	addi	r2,r2,1
   9a234:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9a238:	00000d06 	br	9a270 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9a23c:	e0bffc17 	ldw	r2,-16(fp)
   9a240:	11000217 	ldw	r4,8(r2)
   9a244:	e1bffb17 	ldw	r6,-20(fp)
   9a248:	e17ffd17 	ldw	r5,-12(fp)
   9a24c:	008ec880 	call	8ec88 <memcmp>
   9a250:	1004c03a 	cmpne	r2,r2,zero
   9a254:	1000031e 	bne	r2,zero,9a264 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
   9a258:	e0bffc17 	ldw	r2,-16(fp)
   9a25c:	e0bfff15 	stw	r2,-4(fp)
   9a260:	00000706 	br	9a280 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
   9a264:	e0bffc17 	ldw	r2,-16(fp)
   9a268:	10800017 	ldw	r2,0(r2)
   9a26c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9a270:	e0fffe17 	ldw	r3,-8(fp)
   9a274:	e0bffc17 	ldw	r2,-16(fp)
   9a278:	10fff01e 	bne	r2,r3,9a23c <alt_find_dev+0x40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9a27c:	e03fff15 	stw	zero,-4(fp)
   9a280:	e0bfff17 	ldw	r2,-4(fp)
}
   9a284:	e037883a 	mov	sp,fp
   9a288:	dfc00117 	ldw	ra,4(sp)
   9a28c:	df000017 	ldw	fp,0(sp)
   9a290:	dec00204 	addi	sp,sp,8
   9a294:	f800283a 	ret

0009a298 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   9a298:	defffa04 	addi	sp,sp,-24
   9a29c:	de00012e 	bgeu	sp,et,9a2a4 <alt_find_file+0xc>
   9a2a0:	003da0fa 	break	3
   9a2a4:	dfc00515 	stw	ra,20(sp)
   9a2a8:	df000415 	stw	fp,16(sp)
   9a2ac:	df000404 	addi	fp,sp,16
   9a2b0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9a2b4:	008002b4 	movhi	r2,10
   9a2b8:	1081bf04 	addi	r2,r2,1788
   9a2bc:	10800017 	ldw	r2,0(r2)
   9a2c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9a2c4:	00003306 	br	9a394 <alt_find_file+0xfc>
  {
    len = strlen(next->name);
   9a2c8:	e0bffd17 	ldw	r2,-12(fp)
   9a2cc:	11000217 	ldw	r4,8(r2)
   9a2d0:	008f3200 	call	8f320 <strlen>
   9a2d4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   9a2d8:	e0bffd17 	ldw	r2,-12(fp)
   9a2dc:	10c00217 	ldw	r3,8(r2)
   9a2e0:	e0bffc17 	ldw	r2,-16(fp)
   9a2e4:	1885883a 	add	r2,r3,r2
   9a2e8:	10bfffc4 	addi	r2,r2,-1
   9a2ec:	10800003 	ldbu	r2,0(r2)
   9a2f0:	10803fcc 	andi	r2,r2,255
   9a2f4:	1080201c 	xori	r2,r2,128
   9a2f8:	10bfe004 	addi	r2,r2,-128
   9a2fc:	10800bd8 	cmpnei	r2,r2,47
   9a300:	1000031e 	bne	r2,zero,9a310 <alt_find_file+0x78>
    {
      len -= 1;
   9a304:	e0bffc17 	ldw	r2,-16(fp)
   9a308:	10bfffc4 	addi	r2,r2,-1
   9a30c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9a310:	e0bffc17 	ldw	r2,-16(fp)
   9a314:	1007883a 	mov	r3,r2
   9a318:	e0bffe17 	ldw	r2,-8(fp)
   9a31c:	1885883a 	add	r2,r3,r2
   9a320:	10800003 	ldbu	r2,0(r2)
   9a324:	10803fcc 	andi	r2,r2,255
   9a328:	1080201c 	xori	r2,r2,128
   9a32c:	10bfe004 	addi	r2,r2,-128
   9a330:	10800be0 	cmpeqi	r2,r2,47
   9a334:	10000a1e 	bne	r2,zero,9a360 <alt_find_file+0xc8>
   9a338:	e0bffc17 	ldw	r2,-16(fp)
   9a33c:	1007883a 	mov	r3,r2
   9a340:	e0bffe17 	ldw	r2,-8(fp)
   9a344:	1885883a 	add	r2,r3,r2
   9a348:	10800003 	ldbu	r2,0(r2)
   9a34c:	10803fcc 	andi	r2,r2,255
   9a350:	1080201c 	xori	r2,r2,128
   9a354:	10bfe004 	addi	r2,r2,-128
   9a358:	1004c03a 	cmpne	r2,r2,zero
   9a35c:	10000a1e 	bne	r2,zero,9a388 <alt_find_file+0xf0>
   9a360:	e0bffd17 	ldw	r2,-12(fp)
   9a364:	11000217 	ldw	r4,8(r2)
   9a368:	e1bffc17 	ldw	r6,-16(fp)
   9a36c:	e17ffe17 	ldw	r5,-8(fp)
   9a370:	008ec880 	call	8ec88 <memcmp>
   9a374:	1004c03a 	cmpne	r2,r2,zero
   9a378:	1000031e 	bne	r2,zero,9a388 <alt_find_file+0xf0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   9a37c:	e0bffd17 	ldw	r2,-12(fp)
   9a380:	e0bfff15 	stw	r2,-4(fp)
   9a384:	00000806 	br	9a3a8 <alt_find_file+0x110>
    }
    next = (alt_dev*) next->llist.next;
   9a388:	e0bffd17 	ldw	r2,-12(fp)
   9a38c:	10800017 	ldw	r2,0(r2)
   9a390:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9a394:	00c002b4 	movhi	r3,10
   9a398:	18c1bf04 	addi	r3,r3,1788
   9a39c:	e0bffd17 	ldw	r2,-12(fp)
   9a3a0:	10ffc91e 	bne	r2,r3,9a2c8 <alt_find_file+0x30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   9a3a4:	e03fff15 	stw	zero,-4(fp)
   9a3a8:	e0bfff17 	ldw	r2,-4(fp)
}
   9a3ac:	e037883a 	mov	sp,fp
   9a3b0:	dfc00117 	ldw	ra,4(sp)
   9a3b4:	df000017 	ldw	fp,0(sp)
   9a3b8:	dec00204 	addi	sp,sp,8
   9a3bc:	f800283a 	ret

0009a3c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9a3c0:	defffc04 	addi	sp,sp,-16
   9a3c4:	de00012e 	bgeu	sp,et,9a3cc <alt_get_fd+0xc>
   9a3c8:	003da0fa 	break	3
   9a3cc:	df000315 	stw	fp,12(sp)
   9a3d0:	df000304 	addi	fp,sp,12
   9a3d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   9a3d8:	00bffa04 	movi	r2,-24
   9a3dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9a3e0:	e03ffe15 	stw	zero,-8(fp)
   9a3e4:	00001e06 	br	9a460 <alt_get_fd+0xa0>
  {
    if (!alt_fd_list[i].dev)
   9a3e8:	e0bffe17 	ldw	r2,-8(fp)
   9a3ec:	00c002b4 	movhi	r3,10
   9a3f0:	18fcdd04 	addi	r3,r3,-3212
   9a3f4:	10800324 	muli	r2,r2,12
   9a3f8:	10c5883a 	add	r2,r2,r3
   9a3fc:	10800017 	ldw	r2,0(r2)
   9a400:	1004c03a 	cmpne	r2,r2,zero
   9a404:	1000131e 	bne	r2,zero,9a454 <alt_get_fd+0x94>
    {
      alt_fd_list[i].dev = dev;
   9a408:	e0bffe17 	ldw	r2,-8(fp)
   9a40c:	00c002b4 	movhi	r3,10
   9a410:	18fcdd04 	addi	r3,r3,-3212
   9a414:	10800324 	muli	r2,r2,12
   9a418:	10c7883a 	add	r3,r2,r3
   9a41c:	e0bfff17 	ldw	r2,-4(fp)
   9a420:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   9a424:	008002b4 	movhi	r2,10
   9a428:	1081c304 	addi	r2,r2,1804
   9a42c:	10c00017 	ldw	r3,0(r2)
   9a430:	e0bffe17 	ldw	r2,-8(fp)
   9a434:	1880040e 	bge	r3,r2,9a448 <alt_get_fd+0x88>
      {
        alt_max_fd = i;
   9a438:	00c002b4 	movhi	r3,10
   9a43c:	18c1c304 	addi	r3,r3,1804
   9a440:	e0bffe17 	ldw	r2,-8(fp)
   9a444:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   9a448:	e0bffe17 	ldw	r2,-8(fp)
   9a44c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   9a450:	00000606 	br	9a46c <alt_get_fd+0xac>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9a454:	e0bffe17 	ldw	r2,-8(fp)
   9a458:	10800044 	addi	r2,r2,1
   9a45c:	e0bffe15 	stw	r2,-8(fp)
   9a460:	e0bffe17 	ldw	r2,-8(fp)
   9a464:	10801010 	cmplti	r2,r2,64
   9a468:	103fdf1e 	bne	r2,zero,9a3e8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   9a46c:	e0bffd17 	ldw	r2,-12(fp)
}
   9a470:	e037883a 	mov	sp,fp
   9a474:	df000017 	ldw	fp,0(sp)
   9a478:	dec00104 	addi	sp,sp,4
   9a47c:	f800283a 	ret

0009a480 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   9a480:	defffb04 	addi	sp,sp,-20
   9a484:	de00012e 	bgeu	sp,et,9a48c <alt_icache_flush+0xc>
   9a488:	003da0fa 	break	3
   9a48c:	df000415 	stw	fp,16(sp)
   9a490:	df000404 	addi	fp,sp,16
   9a494:	e13ffe15 	stw	r4,-8(fp)
   9a498:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   9a49c:	e0bfff17 	ldw	r2,-4(fp)
   9a4a0:	10840070 	cmpltui	r2,r2,4097
   9a4a4:	1000021e 	bne	r2,zero,9a4b0 <alt_icache_flush+0x30>
  {
    len = NIOS2_ICACHE_SIZE;
   9a4a8:	00840004 	movi	r2,4096
   9a4ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   9a4b0:	e0fffe17 	ldw	r3,-8(fp)
   9a4b4:	e0bfff17 	ldw	r2,-4(fp)
   9a4b8:	1885883a 	add	r2,r3,r2
   9a4bc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   9a4c0:	e0bffe17 	ldw	r2,-8(fp)
   9a4c4:	e0bffd15 	stw	r2,-12(fp)
   9a4c8:	00000506 	br	9a4e0 <alt_icache_flush+0x60>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   9a4cc:	e0bffd17 	ldw	r2,-12(fp)
   9a4d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   9a4d4:	e0bffd17 	ldw	r2,-12(fp)
   9a4d8:	10800804 	addi	r2,r2,32
   9a4dc:	e0bffd15 	stw	r2,-12(fp)
   9a4e0:	e0fffd17 	ldw	r3,-12(fp)
   9a4e4:	e0bffc17 	ldw	r2,-16(fp)
   9a4e8:	18bff836 	bltu	r3,r2,9a4cc <alt_icache_flush+0x4c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   9a4ec:	e0bffe17 	ldw	r2,-8(fp)
   9a4f0:	108007cc 	andi	r2,r2,31
   9a4f4:	1005003a 	cmpeq	r2,r2,zero
   9a4f8:	1000021e 	bne	r2,zero,9a504 <alt_icache_flush+0x84>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   9a4fc:	e0bffd17 	ldw	r2,-12(fp)
   9a500:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   9a504:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   9a508:	e037883a 	mov	sp,fp
   9a50c:	df000017 	ldw	fp,0(sp)
   9a510:	dec00104 	addi	sp,sp,4
   9a514:	f800283a 	ret

0009a518 <atexit>:
   9a518:	200b883a 	mov	r5,r4
   9a51c:	000d883a 	mov	r6,zero
   9a520:	0009883a 	mov	r4,zero
   9a524:	000f883a 	mov	r7,zero
   9a528:	009a5641 	jmpi	9a564 <__register_exitproc>

0009a52c <exit>:
   9a52c:	defffe04 	addi	sp,sp,-8
   9a530:	000b883a 	mov	r5,zero
   9a534:	dc000015 	stw	r16,0(sp)
   9a538:	dfc00115 	stw	ra,4(sp)
   9a53c:	2021883a 	mov	r16,r4
   9a540:	009a69c0 	call	9a69c <__call_exitprocs>
   9a544:	008002b4 	movhi	r2,10
   9a548:	1081b904 	addi	r2,r2,1764
   9a54c:	11000017 	ldw	r4,0(r2)
   9a550:	20800f17 	ldw	r2,60(r4)
   9a554:	10000126 	beq	r2,zero,9a55c <exit+0x30>
   9a558:	103ee83a 	callr	r2
   9a55c:	8009883a 	mov	r4,r16
   9a560:	009a8940 	call	9a894 <_exit>

0009a564 <__register_exitproc>:
   9a564:	defffa04 	addi	sp,sp,-24
   9a568:	008002b4 	movhi	r2,10
   9a56c:	1081b904 	addi	r2,r2,1764
   9a570:	dc000015 	stw	r16,0(sp)
   9a574:	14000017 	ldw	r16,0(r2)
   9a578:	dd000415 	stw	r20,16(sp)
   9a57c:	2829883a 	mov	r20,r5
   9a580:	81405217 	ldw	r5,328(r16)
   9a584:	dcc00315 	stw	r19,12(sp)
   9a588:	dc800215 	stw	r18,8(sp)
   9a58c:	dc400115 	stw	r17,4(sp)
   9a590:	dfc00515 	stw	ra,20(sp)
   9a594:	2023883a 	mov	r17,r4
   9a598:	3027883a 	mov	r19,r6
   9a59c:	3825883a 	mov	r18,r7
   9a5a0:	28002526 	beq	r5,zero,9a638 <__register_exitproc+0xd4>
   9a5a4:	29000117 	ldw	r4,4(r5)
   9a5a8:	008007c4 	movi	r2,31
   9a5ac:	11002716 	blt	r2,r4,9a64c <__register_exitproc+0xe8>
   9a5b0:	8800101e 	bne	r17,zero,9a5f4 <__register_exitproc+0x90>
   9a5b4:	2105883a 	add	r2,r4,r4
   9a5b8:	1085883a 	add	r2,r2,r2
   9a5bc:	20c00044 	addi	r3,r4,1
   9a5c0:	1145883a 	add	r2,r2,r5
   9a5c4:	0009883a 	mov	r4,zero
   9a5c8:	15000215 	stw	r20,8(r2)
   9a5cc:	28c00115 	stw	r3,4(r5)
   9a5d0:	2005883a 	mov	r2,r4
   9a5d4:	dfc00517 	ldw	ra,20(sp)
   9a5d8:	dd000417 	ldw	r20,16(sp)
   9a5dc:	dcc00317 	ldw	r19,12(sp)
   9a5e0:	dc800217 	ldw	r18,8(sp)
   9a5e4:	dc400117 	ldw	r17,4(sp)
   9a5e8:	dc000017 	ldw	r16,0(sp)
   9a5ec:	dec00604 	addi	sp,sp,24
   9a5f0:	f800283a 	ret
   9a5f4:	29802204 	addi	r6,r5,136
   9a5f8:	00800044 	movi	r2,1
   9a5fc:	110e983a 	sll	r7,r2,r4
   9a600:	30c04017 	ldw	r3,256(r6)
   9a604:	2105883a 	add	r2,r4,r4
   9a608:	1085883a 	add	r2,r2,r2
   9a60c:	1185883a 	add	r2,r2,r6
   9a610:	19c6b03a 	or	r3,r3,r7
   9a614:	14802015 	stw	r18,128(r2)
   9a618:	14c00015 	stw	r19,0(r2)
   9a61c:	00800084 	movi	r2,2
   9a620:	30c04015 	stw	r3,256(r6)
   9a624:	88bfe31e 	bne	r17,r2,9a5b4 <__register_exitproc+0x50>
   9a628:	30804117 	ldw	r2,260(r6)
   9a62c:	11c4b03a 	or	r2,r2,r7
   9a630:	30804115 	stw	r2,260(r6)
   9a634:	003fdf06 	br	9a5b4 <__register_exitproc+0x50>
   9a638:	008002b4 	movhi	r2,10
   9a63c:	1089ff04 	addi	r2,r2,10236
   9a640:	100b883a 	mov	r5,r2
   9a644:	80805215 	stw	r2,328(r16)
   9a648:	003fd606 	br	9a5a4 <__register_exitproc+0x40>
   9a64c:	00800034 	movhi	r2,0
   9a650:	10800004 	addi	r2,r2,0
   9a654:	1000021e 	bne	r2,zero,9a660 <__register_exitproc+0xfc>
   9a658:	013fffc4 	movi	r4,-1
   9a65c:	003fdc06 	br	9a5d0 <__register_exitproc+0x6c>
   9a660:	01006404 	movi	r4,400
   9a664:	103ee83a 	callr	r2
   9a668:	1007883a 	mov	r3,r2
   9a66c:	103ffa26 	beq	r2,zero,9a658 <__register_exitproc+0xf4>
   9a670:	80805217 	ldw	r2,328(r16)
   9a674:	180b883a 	mov	r5,r3
   9a678:	18000115 	stw	zero,4(r3)
   9a67c:	18800015 	stw	r2,0(r3)
   9a680:	80c05215 	stw	r3,328(r16)
   9a684:	18006215 	stw	zero,392(r3)
   9a688:	18006315 	stw	zero,396(r3)
   9a68c:	0009883a 	mov	r4,zero
   9a690:	883fc826 	beq	r17,zero,9a5b4 <__register_exitproc+0x50>
   9a694:	003fd706 	br	9a5f4 <__register_exitproc+0x90>

0009a698 <register_fini>:
   9a698:	f800283a 	ret

0009a69c <__call_exitprocs>:
   9a69c:	008002b4 	movhi	r2,10
   9a6a0:	1081b904 	addi	r2,r2,1764
   9a6a4:	10800017 	ldw	r2,0(r2)
   9a6a8:	defff304 	addi	sp,sp,-52
   9a6ac:	df000b15 	stw	fp,44(sp)
   9a6b0:	d8800115 	stw	r2,4(sp)
   9a6b4:	00800034 	movhi	r2,0
   9a6b8:	10800004 	addi	r2,r2,0
   9a6bc:	1005003a 	cmpeq	r2,r2,zero
   9a6c0:	d8800215 	stw	r2,8(sp)
   9a6c4:	d8800117 	ldw	r2,4(sp)
   9a6c8:	dd400815 	stw	r21,32(sp)
   9a6cc:	dd000715 	stw	r20,28(sp)
   9a6d0:	10805204 	addi	r2,r2,328
   9a6d4:	dfc00c15 	stw	ra,48(sp)
   9a6d8:	ddc00a15 	stw	r23,40(sp)
   9a6dc:	dd800915 	stw	r22,36(sp)
   9a6e0:	dcc00615 	stw	r19,24(sp)
   9a6e4:	dc800515 	stw	r18,20(sp)
   9a6e8:	dc400415 	stw	r17,16(sp)
   9a6ec:	dc000315 	stw	r16,12(sp)
   9a6f0:	282b883a 	mov	r21,r5
   9a6f4:	2039883a 	mov	fp,r4
   9a6f8:	d8800015 	stw	r2,0(sp)
   9a6fc:	2829003a 	cmpeq	r20,r5,zero
   9a700:	d8800117 	ldw	r2,4(sp)
   9a704:	14405217 	ldw	r17,328(r2)
   9a708:	88001026 	beq	r17,zero,9a74c <__call_exitprocs+0xb0>
   9a70c:	ddc00017 	ldw	r23,0(sp)
   9a710:	88800117 	ldw	r2,4(r17)
   9a714:	8c802204 	addi	r18,r17,136
   9a718:	143fffc4 	addi	r16,r2,-1
   9a71c:	80000916 	blt	r16,zero,9a744 <__call_exitprocs+0xa8>
   9a720:	05bfffc4 	movi	r22,-1
   9a724:	a000151e 	bne	r20,zero,9a77c <__call_exitprocs+0xe0>
   9a728:	8409883a 	add	r4,r16,r16
   9a72c:	2105883a 	add	r2,r4,r4
   9a730:	1485883a 	add	r2,r2,r18
   9a734:	10c02017 	ldw	r3,128(r2)
   9a738:	a8c01126 	beq	r21,r3,9a780 <__call_exitprocs+0xe4>
   9a73c:	843fffc4 	addi	r16,r16,-1
   9a740:	85bff81e 	bne	r16,r22,9a724 <__call_exitprocs+0x88>
   9a744:	d8800217 	ldw	r2,8(sp)
   9a748:	10003126 	beq	r2,zero,9a810 <__call_exitprocs+0x174>
   9a74c:	dfc00c17 	ldw	ra,48(sp)
   9a750:	df000b17 	ldw	fp,44(sp)
   9a754:	ddc00a17 	ldw	r23,40(sp)
   9a758:	dd800917 	ldw	r22,36(sp)
   9a75c:	dd400817 	ldw	r21,32(sp)
   9a760:	dd000717 	ldw	r20,28(sp)
   9a764:	dcc00617 	ldw	r19,24(sp)
   9a768:	dc800517 	ldw	r18,20(sp)
   9a76c:	dc400417 	ldw	r17,16(sp)
   9a770:	dc000317 	ldw	r16,12(sp)
   9a774:	dec00d04 	addi	sp,sp,52
   9a778:	f800283a 	ret
   9a77c:	8409883a 	add	r4,r16,r16
   9a780:	88c00117 	ldw	r3,4(r17)
   9a784:	2105883a 	add	r2,r4,r4
   9a788:	1445883a 	add	r2,r2,r17
   9a78c:	18ffffc4 	addi	r3,r3,-1
   9a790:	11800217 	ldw	r6,8(r2)
   9a794:	1c001526 	beq	r3,r16,9a7ec <__call_exitprocs+0x150>
   9a798:	10000215 	stw	zero,8(r2)
   9a79c:	303fe726 	beq	r6,zero,9a73c <__call_exitprocs+0xa0>
   9a7a0:	00c00044 	movi	r3,1
   9a7a4:	1c06983a 	sll	r3,r3,r16
   9a7a8:	90804017 	ldw	r2,256(r18)
   9a7ac:	8cc00117 	ldw	r19,4(r17)
   9a7b0:	1884703a 	and	r2,r3,r2
   9a7b4:	10001426 	beq	r2,zero,9a808 <__call_exitprocs+0x16c>
   9a7b8:	90804117 	ldw	r2,260(r18)
   9a7bc:	1884703a 	and	r2,r3,r2
   9a7c0:	10000c1e 	bne	r2,zero,9a7f4 <__call_exitprocs+0x158>
   9a7c4:	2105883a 	add	r2,r4,r4
   9a7c8:	1485883a 	add	r2,r2,r18
   9a7cc:	11400017 	ldw	r5,0(r2)
   9a7d0:	e009883a 	mov	r4,fp
   9a7d4:	303ee83a 	callr	r6
   9a7d8:	88800117 	ldw	r2,4(r17)
   9a7dc:	98bfc81e 	bne	r19,r2,9a700 <__call_exitprocs+0x64>
   9a7e0:	b8800017 	ldw	r2,0(r23)
   9a7e4:	147fd526 	beq	r2,r17,9a73c <__call_exitprocs+0xa0>
   9a7e8:	003fc506 	br	9a700 <__call_exitprocs+0x64>
   9a7ec:	8c000115 	stw	r16,4(r17)
   9a7f0:	003fea06 	br	9a79c <__call_exitprocs+0x100>
   9a7f4:	2105883a 	add	r2,r4,r4
   9a7f8:	1485883a 	add	r2,r2,r18
   9a7fc:	11000017 	ldw	r4,0(r2)
   9a800:	303ee83a 	callr	r6
   9a804:	003ff406 	br	9a7d8 <__call_exitprocs+0x13c>
   9a808:	303ee83a 	callr	r6
   9a80c:	003ff206 	br	9a7d8 <__call_exitprocs+0x13c>
   9a810:	88800117 	ldw	r2,4(r17)
   9a814:	1000081e 	bne	r2,zero,9a838 <__call_exitprocs+0x19c>
   9a818:	89000017 	ldw	r4,0(r17)
   9a81c:	20000726 	beq	r4,zero,9a83c <__call_exitprocs+0x1a0>
   9a820:	b9000015 	stw	r4,0(r23)
   9a824:	8809883a 	mov	r4,r17
   9a828:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>
   9a82c:	bc400017 	ldw	r17,0(r23)
   9a830:	883fb71e 	bne	r17,zero,9a710 <__call_exitprocs+0x74>
   9a834:	003fc506 	br	9a74c <__call_exitprocs+0xb0>
   9a838:	89000017 	ldw	r4,0(r17)
   9a83c:	882f883a 	mov	r23,r17
   9a840:	2023883a 	mov	r17,r4
   9a844:	883fb21e 	bne	r17,zero,9a710 <__call_exitprocs+0x74>
   9a848:	003fc006 	br	9a74c <__call_exitprocs+0xb0>

0009a84c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   9a84c:	defffd04 	addi	sp,sp,-12
   9a850:	de00012e 	bgeu	sp,et,9a858 <alt_sim_halt+0xc>
   9a854:	003da0fa 	break	3
   9a858:	df000215 	stw	fp,8(sp)
   9a85c:	df000204 	addi	fp,sp,8
   9a860:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   9a864:	e0bfff17 	ldw	r2,-4(fp)
   9a868:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   9a86c:	e0bffe17 	ldw	r2,-8(fp)
   9a870:	1005003a 	cmpeq	r2,r2,zero
   9a874:	1000021e 	bne	r2,zero,9a880 <alt_sim_halt+0x34>
    ALT_SIM_FAIL();
   9a878:	002af070 	cmpltui	zero,zero,43969
   9a87c:	00000106 	br	9a884 <alt_sim_halt+0x38>
  } else {
    ALT_SIM_PASS();
   9a880:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   9a884:	e037883a 	mov	sp,fp
   9a888:	df000017 	ldw	fp,0(sp)
   9a88c:	dec00104 	addi	sp,sp,4
   9a890:	f800283a 	ret

0009a894 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9a894:	defffd04 	addi	sp,sp,-12
   9a898:	de00012e 	bgeu	sp,et,9a8a0 <_exit+0xc>
   9a89c:	003da0fa 	break	3
   9a8a0:	dfc00215 	stw	ra,8(sp)
   9a8a4:	df000115 	stw	fp,4(sp)
   9a8a8:	df000104 	addi	fp,sp,4
   9a8ac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   9a8b0:	e13fff17 	ldw	r4,-4(fp)
   9a8b4:	009a84c0 	call	9a84c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   9a8b8:	003fff06 	br	9a8b8 <_exit+0x24>
   9a8bc:	0009a698 	cmpnei	zero,zero,9882
