
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00002b8c memsz 0x00002b8c flags r-x
    LOAD off    0x00003bac vaddr 0x00042bac paddr 0x000441e0 align 2**12
         filesz 0x00001634 memsz 0x00001634 flags rw-
    LOAD off    0x00005814 vaddr 0x00045814 paddr 0x00045814 align 2**12
         filesz 0x00000000 memsz 0x000002b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000029c0  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00042b74  00042b74  00003b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001634  00042bac  000441e0  00003bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b0  00045814  00045814  00005814  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000558  00000000  00000000  00005208  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000840  00000000  00000000  00005760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a0cb  00000000  00000000  00005fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002627  00000000  00000000  0001006b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000663f  00000000  00000000  00012692  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000970  00000000  00000000  00018cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000aca  00000000  00000000  00019644  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000f1f  00000000  00000000  0001a10e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001b030  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001b060  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001cc80  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001cc83  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001cc8f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001cc90  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001cc91  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001cc95  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001cc99  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001cc9d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001cca8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001ccb3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0001ccbe  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  0001ccc2  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005929e  00000000  00000000  0001ccdf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
00042b74 l    d  .rodata	00000000 .rodata
00042bac l    d  .rwdata	00000000 .rwdata
00045814 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00040320 l     F .text	00000258 handle_buttons_interrupt
00040578 l     F .text	000000d8 handle_switch_interrupt
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00040908 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00042bac l     O .rwdata	00001060 jtag_uart_0
00040a58 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00040c98 l     F .text	00000228 altera_avalon_jtag_uart_irq
00040ec0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0004178c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00041830 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00041910 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00041d34 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00041e70 l     F .text	000000dc alt_file_locked
000420d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00043db4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004295c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00042b10 l     F .text	00000040 alt_sim_halt
00040974 g     F .text	0000006c alt_main
00045834 g     O .bss	00000100 alt_irq
000441e0 g       *ABS*	00000000 __flash_rwdata_start
00045814 g     O .bss	00000001 pause
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00045830 g     O .bss	00000004 errno
00045820 g     O .bss	00000004 alt_argv
0004c1b4 g       *ABS*	00000000 _gp
00043c34 g     O .rwdata	00000180 alt_fd_list
00042358 g     F .text	00000094 alt_find_dev
00042714 g     F .text	000000a0 memcpy
00041df8 g     F .text	00000078 alt_io_redirect
00042b74 g       *ABS*	00000000 __DTOR_END__
000410d8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000425c4 g     F .text	00000090 alt_icache_flush
000441c8 g     O .rwdata	00000004 alt_max_fd
000402c0 g     F .text	00000030 set_left
000406c8 g     F .text	000001c0 alt_irq_register
000441dc g     O .rwdata	00000004 _global_impure_ptr
00040200 g     F .text	00000030 set_led
00045ac4 g       *ABS*	00000000 __bss_end
00041c3c g     F .text	000000f8 alt_iic_isr_register
0004222c g     F .text	0000010c alt_tick
00041bf4 g     F .text	00000048 alt_ic_irq_enabled
00042194 g     F .text	00000098 alt_alarm_stop
00045818 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
00043c0c g     O .rwdata	00000028 alt_dev_null
000417ec g     F .text	00000044 alt_dcache_flush_all
000441e0 g       *ABS*	00000000 __ram_rwdata_end
000441c0 g     O .rwdata	00000008 alt_dev_list
00042bac g       *ABS*	00000000 __ram_rodata_end
00045ac4 g       *ABS*	00000000 end
00040bd8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00042b70 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
000412fc g     F .text	00000240 altera_avalon_jtag_uart_write
00042960 g     F .text	000001b0 __call_exitprocs
000401b4 g     F .text	0000004c _start
00045828 g     O .bss	00000004 _alt_tick_rate
0004582c g     O .bss	00000004 _alt_nticks
00040a14 g     F .text	00000044 alt_sys_init
00042828 g     F .text	00000134 __register_exitproc
00040f70 g     F .text	00000074 altera_avalon_jtag_uart_close
00042bac g       *ABS*	00000000 __ram_rwdata_start
00042b74 g       *ABS*	00000000 __ram_rodata_start
00040a90 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004250c g     F .text	000000b8 alt_get_fd
000426a0 g     F .text	00000074 memcmp
00040b40 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00045ac4 g       *ABS*	00000000 __alt_stack_base
00040b88 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00040290 g     F .text	00000030 set_down
000423ec g     F .text	00000120 alt_find_file
0004185c g     F .text	000000b4 alt_dev_llist_insert
00045814 g       *ABS*	00000000 __bss_start
00040650 g     F .text	00000078 main
00045824 g     O .bss	00000004 alt_envp
00040ae8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00045934 g     O .bss	00000190 _atexit0
000441cc g     O .rwdata	00000004 alt_errno
00042b74 g       *ABS*	00000000 __CTOR_END__
00042b74 g       *ABS*	00000000 __flash_rodata_start
00042b74 g       *ABS*	00000000 __DTOR_LIST__
000409e0 g     F .text	00000034 alt_irq_init
00042134 g     F .text	00000060 alt_release_fd
00040230 g     F .text	00000030 set_action
000402f0 g     F .text	00000030 set_right
00042654 g     F .text	00000014 atexit
000441d8 g     O .rwdata	00000004 _impure_ptr
0004581c g     O .bss	00000004 alt_argc
00040260 g     F .text	00000030 set_up
000419d4 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000441b8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00041a68 g     F .text	00000050 alt_ic_isr_register
000441e0 g       *ABS*	00000000 _edata
00045ac4 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
00040fe4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00041b54 g     F .text	000000a0 alt_ic_irq_disable
00042338 g     F .text	00000020 altera_nios2_qsys_irq_init
00042668 g     F .text	00000038 exit
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042b50 g     F .text	00000020 _exit
0004153c g     F .text	00000154 alt_alarm_start
000427b4 g     F .text	00000074 strlen
00041f4c g     F .text	00000188 open
00041a38 g     F .text	00000030 alt_icache_flush_all
000441b4 g     O .rwdata	00000004 alt_priority_mask
00041ab8 g     F .text	0000009c alt_ic_irq_enable
000441d0 g     O .rwdata	00000008 alt_alarm_list
00041970 g     F .text	00000064 _do_ctors
00041690 g     F .text	000000fc close
00040888 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00134 	movhi	r3,4
   40134:	18d60d04 	addi	r3,r3,22580
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00134 	movhi	r3,4
   4014c:	18d60d04 	addi	r3,r3,22580
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401d0:	d6b06d14 	ori	gp,gp,49588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401d8:	10960514 	ori	r2,r2,22548

    movhi r3, %hi(__bss_end)
   401dc:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401e0:	18d6b114 	ori	r3,r3,23236

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	00408880 	call	40888 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	00409740 	call	40974 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <set_led>:
#include "io.h"
#include "system.h"
#include <stdio.h>
#include "sys/alt_irq.h"

void set_led(unsigned char pattern) {
   40200:	defffe04 	addi	sp,sp,-8
   40204:	df000115 	stw	fp,4(sp)
   40208:	df000104 	addi	fp,sp,4
   4020c:	e13fff05 	stb	r4,-4(fp)
	IOWR(PAUSE_BASE, 0, pattern);
   40210:	e0ffff03 	ldbu	r3,-4(fp)
   40214:	00800234 	movhi	r2,8
   40218:	10841404 	addi	r2,r2,4176
   4021c:	10c00035 	stwio	r3,0(r2)
}
   40220:	e037883a 	mov	sp,fp
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00104 	addi	sp,sp,4
   4022c:	f800283a 	ret

00040230 <set_action>:

void set_action(unsigned char pattern) {
   40230:	defffe04 	addi	sp,sp,-8
   40234:	df000115 	stw	fp,4(sp)
   40238:	df000104 	addi	fp,sp,4
   4023c:	e13fff05 	stb	r4,-4(fp)
	IOWR(ACTION_BASE, 0, pattern);
   40240:	e0ffff03 	ldbu	r3,-4(fp)
   40244:	00800234 	movhi	r2,8
   40248:	10841004 	addi	r2,r2,4160
   4024c:	10c00035 	stwio	r3,0(r2)
}
   40250:	e037883a 	mov	sp,fp
   40254:	df000017 	ldw	fp,0(sp)
   40258:	dec00104 	addi	sp,sp,4
   4025c:	f800283a 	ret

00040260 <set_up>:

void set_up(unsigned char pattern) {
   40260:	defffe04 	addi	sp,sp,-8
   40264:	df000115 	stw	fp,4(sp)
   40268:	df000104 	addi	fp,sp,4
   4026c:	e13fff05 	stb	r4,-4(fp)
	IOWR(UP_BASE, 0, pattern);
   40270:	e0ffff03 	ldbu	r3,-4(fp)
   40274:	00800234 	movhi	r2,8
   40278:	10840c04 	addi	r2,r2,4144
   4027c:	10c00035 	stwio	r3,0(r2)
}
   40280:	e037883a 	mov	sp,fp
   40284:	df000017 	ldw	fp,0(sp)
   40288:	dec00104 	addi	sp,sp,4
   4028c:	f800283a 	ret

00040290 <set_down>:

void set_down(unsigned char pattern) {
   40290:	defffe04 	addi	sp,sp,-8
   40294:	df000115 	stw	fp,4(sp)
   40298:	df000104 	addi	fp,sp,4
   4029c:	e13fff05 	stb	r4,-4(fp)
	IOWR(DOWN_BASE, 0, pattern);
   402a0:	e0ffff03 	ldbu	r3,-4(fp)
   402a4:	00800234 	movhi	r2,8
   402a8:	10840804 	addi	r2,r2,4128
   402ac:	10c00035 	stwio	r3,0(r2)
}
   402b0:	e037883a 	mov	sp,fp
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00104 	addi	sp,sp,4
   402bc:	f800283a 	ret

000402c0 <set_left>:

void set_left(unsigned char pattern) {
   402c0:	defffe04 	addi	sp,sp,-8
   402c4:	df000115 	stw	fp,4(sp)
   402c8:	df000104 	addi	fp,sp,4
   402cc:	e13fff05 	stb	r4,-4(fp)
	IOWR(LEFT_BASE, 0, pattern);
   402d0:	e0ffff03 	ldbu	r3,-4(fp)
   402d4:	00800234 	movhi	r2,8
   402d8:	10840404 	addi	r2,r2,4112
   402dc:	10c00035 	stwio	r3,0(r2)
}
   402e0:	e037883a 	mov	sp,fp
   402e4:	df000017 	ldw	fp,0(sp)
   402e8:	dec00104 	addi	sp,sp,4
   402ec:	f800283a 	ret

000402f0 <set_right>:

void set_right(unsigned char pattern) {
   402f0:	defffe04 	addi	sp,sp,-8
   402f4:	df000115 	stw	fp,4(sp)
   402f8:	df000104 	addi	fp,sp,4
   402fc:	e13fff05 	stb	r4,-4(fp)
	IOWR(RIGHT_BASE, 0, pattern);
   40300:	e0ffff03 	ldbu	r3,-4(fp)
   40304:	00800234 	movhi	r2,8
   40308:	10840004 	addi	r2,r2,4096
   4030c:	10c00035 	stwio	r3,0(r2)
}
   40310:	e037883a 	mov	sp,fp
   40314:	df000017 	ldw	fp,0(sp)
   40318:	dec00104 	addi	sp,sp,4
   4031c:	f800283a 	ret

00040320 <handle_buttons_interrupt>:

unsigned char pause;

static void handle_buttons_interrupt(void* context, alt_u32 id){
   40320:	defffa04 	addi	sp,sp,-24
   40324:	dfc00515 	stw	ra,20(sp)
   40328:	df000415 	stw	fp,16(sp)
   4032c:	df000404 	addi	fp,sp,16
   40330:	e13ffd15 	stw	r4,-12(fp)
   40334:	e17ffe15 	stw	r5,-8(fp)
	int code;
	code = IORD(BUTTONS_BASE,0);
   40338:	00800234 	movhi	r2,8
   4033c:	10841804 	addi	r2,r2,4192
   40340:	10800037 	ldwio	r2,0(r2)
   40344:	e0bffc15 	stw	r2,-16(fp)
	//printf("boutons :%x\n",code);
	switch(code) {
   40348:	e0bffc17 	ldw	r2,-16(fp)
   4034c:	e0bfff15 	stw	r2,-4(fp)
   40350:	e0ffff17 	ldw	r3,-4(fp)
   40354:	188002e0 	cmpeqi	r2,r3,11
   40358:	1000281e 	bne	r2,zero,403fc <handle_buttons_interrupt+0xdc>
   4035c:	e0ffff17 	ldw	r3,-4(fp)
   40360:	18800308 	cmpgei	r2,r3,12
   40364:	1000041e 	bne	r2,zero,40378 <handle_buttons_interrupt+0x58>
   40368:	e0ffff17 	ldw	r3,-4(fp)
   4036c:	188001e0 	cmpeqi	r2,r3,7
   40370:	1000081e 	bne	r2,zero,40394 <handle_buttons_interrupt+0x74>
   40374:	00006f06 	br	40534 <handle_buttons_interrupt+0x214>
   40378:	e0ffff17 	ldw	r3,-4(fp)
   4037c:	18800360 	cmpeqi	r2,r3,13
   40380:	1000381e 	bne	r2,zero,40464 <handle_buttons_interrupt+0x144>
   40384:	e0ffff17 	ldw	r3,-4(fp)
   40388:	188003a0 	cmpeqi	r2,r3,14
   4038c:	10004f1e 	bne	r2,zero,404cc <handle_buttons_interrupt+0x1ac>
   40390:	00006806 	br	40534 <handle_buttons_interrupt+0x214>
	case 7 :
		if (pause == 1 || pause == 3) {
   40394:	d0a59803 	ldbu	r2,-27040(gp)
   40398:	10803fcc 	andi	r2,r2,255
   4039c:	10800060 	cmpeqi	r2,r2,1
   403a0:	1000041e 	bne	r2,zero,403b4 <handle_buttons_interrupt+0x94>
   403a4:	d0a59803 	ldbu	r2,-27040(gp)
   403a8:	10803fcc 	andi	r2,r2,255
   403ac:	108000d8 	cmpnei	r2,r2,3
   403b0:	1000091e 	bne	r2,zero,403d8 <handle_buttons_interrupt+0xb8>
			set_up('1');
   403b4:	01000c44 	movi	r4,49
   403b8:	00402600 	call	40260 <set_up>
			set_down('0');
   403bc:	01000c04 	movi	r4,48
   403c0:	00402900 	call	40290 <set_down>
			set_left('0');
   403c4:	01000c04 	movi	r4,48
   403c8:	00402c00 	call	402c0 <set_left>
			set_right('0');
   403cc:	01000c04 	movi	r4,48
   403d0:	00402f00 	call	402f0 <set_right>
	int code;
	code = IORD(BUTTONS_BASE,0);
	//printf("boutons :%x\n",code);
	switch(code) {
	case 7 :
		if (pause == 1 || pause == 3) {
   403d4:	00005f06 	br	40554 <handle_buttons_interrupt+0x234>
			set_down('0');
			set_left('0');
			set_right('0');
		}
		else {
			set_up('0');
   403d8:	01000c04 	movi	r4,48
   403dc:	00402600 	call	40260 <set_up>
			set_down('0');
   403e0:	01000c04 	movi	r4,48
   403e4:	00402900 	call	40290 <set_down>
			set_left('0');
   403e8:	01000c04 	movi	r4,48
   403ec:	00402c00 	call	402c0 <set_left>
			set_right('0');
   403f0:	01000c04 	movi	r4,48
   403f4:	00402f00 	call	402f0 <set_right>
		}
		break;
   403f8:	00005606 	br	40554 <handle_buttons_interrupt+0x234>
	case 11 :
		if (pause == 1 || pause == 3) {
   403fc:	d0a59803 	ldbu	r2,-27040(gp)
   40400:	10803fcc 	andi	r2,r2,255
   40404:	10800060 	cmpeqi	r2,r2,1
   40408:	1000041e 	bne	r2,zero,4041c <handle_buttons_interrupt+0xfc>
   4040c:	d0a59803 	ldbu	r2,-27040(gp)
   40410:	10803fcc 	andi	r2,r2,255
   40414:	108000d8 	cmpnei	r2,r2,3
   40418:	1000091e 	bne	r2,zero,40440 <handle_buttons_interrupt+0x120>
			set_up('0');
   4041c:	01000c04 	movi	r4,48
   40420:	00402600 	call	40260 <set_up>
			set_down('1');
   40424:	01000c44 	movi	r4,49
   40428:	00402900 	call	40290 <set_down>
			set_left('0');
   4042c:	01000c04 	movi	r4,48
   40430:	00402c00 	call	402c0 <set_left>
			set_right('0');
   40434:	01000c04 	movi	r4,48
   40438:	00402f00 	call	402f0 <set_right>
			set_left('0');
			set_right('0');
		}
		break;
	case 11 :
		if (pause == 1 || pause == 3) {
   4043c:	00004506 	br	40554 <handle_buttons_interrupt+0x234>
			set_down('1');
			set_left('0');
			set_right('0');
		}
		else {
			set_up('0');
   40440:	01000c04 	movi	r4,48
   40444:	00402600 	call	40260 <set_up>
			set_down('0');
   40448:	01000c04 	movi	r4,48
   4044c:	00402900 	call	40290 <set_down>
			set_left('0');
   40450:	01000c04 	movi	r4,48
   40454:	00402c00 	call	402c0 <set_left>
			set_right('0');
   40458:	01000c04 	movi	r4,48
   4045c:	00402f00 	call	402f0 <set_right>
		}
		break;
   40460:	00003c06 	br	40554 <handle_buttons_interrupt+0x234>
	case 13 :
		if (pause == 1 || pause == 3) {
   40464:	d0a59803 	ldbu	r2,-27040(gp)
   40468:	10803fcc 	andi	r2,r2,255
   4046c:	10800060 	cmpeqi	r2,r2,1
   40470:	1000041e 	bne	r2,zero,40484 <handle_buttons_interrupt+0x164>
   40474:	d0a59803 	ldbu	r2,-27040(gp)
   40478:	10803fcc 	andi	r2,r2,255
   4047c:	108000d8 	cmpnei	r2,r2,3
   40480:	1000091e 	bne	r2,zero,404a8 <handle_buttons_interrupt+0x188>
			set_up('0');
   40484:	01000c04 	movi	r4,48
   40488:	00402600 	call	40260 <set_up>
			set_down('0');
   4048c:	01000c04 	movi	r4,48
   40490:	00402900 	call	40290 <set_down>
			set_left('1');
   40494:	01000c44 	movi	r4,49
   40498:	00402c00 	call	402c0 <set_left>
			set_right('0');
   4049c:	01000c04 	movi	r4,48
   404a0:	00402f00 	call	402f0 <set_right>
			set_left('0');
			set_right('0');
		}
		break;
	case 13 :
		if (pause == 1 || pause == 3) {
   404a4:	00002b06 	br	40554 <handle_buttons_interrupt+0x234>
			set_down('0');
			set_left('1');
			set_right('0');
		}
		else {
			set_up('0');
   404a8:	01000c04 	movi	r4,48
   404ac:	00402600 	call	40260 <set_up>
			set_down('0');
   404b0:	01000c04 	movi	r4,48
   404b4:	00402900 	call	40290 <set_down>
			set_left('0');
   404b8:	01000c04 	movi	r4,48
   404bc:	00402c00 	call	402c0 <set_left>
			set_right('0');
   404c0:	01000c04 	movi	r4,48
   404c4:	00402f00 	call	402f0 <set_right>
		}
		break;
   404c8:	00002206 	br	40554 <handle_buttons_interrupt+0x234>
	case 14 :
		if (pause == 1 || pause == 3) {
   404cc:	d0a59803 	ldbu	r2,-27040(gp)
   404d0:	10803fcc 	andi	r2,r2,255
   404d4:	10800060 	cmpeqi	r2,r2,1
   404d8:	1000041e 	bne	r2,zero,404ec <handle_buttons_interrupt+0x1cc>
   404dc:	d0a59803 	ldbu	r2,-27040(gp)
   404e0:	10803fcc 	andi	r2,r2,255
   404e4:	108000d8 	cmpnei	r2,r2,3
   404e8:	1000091e 	bne	r2,zero,40510 <handle_buttons_interrupt+0x1f0>
			set_up('0');
   404ec:	01000c04 	movi	r4,48
   404f0:	00402600 	call	40260 <set_up>
			set_down('0');
   404f4:	01000c04 	movi	r4,48
   404f8:	00402900 	call	40290 <set_down>
			set_left('0');
   404fc:	01000c04 	movi	r4,48
   40500:	00402c00 	call	402c0 <set_left>
			set_right('1');
   40504:	01000c44 	movi	r4,49
   40508:	00402f00 	call	402f0 <set_right>
			set_left('0');
			set_right('0');
		}
		break;
	case 14 :
		if (pause == 1 || pause == 3) {
   4050c:	00001106 	br	40554 <handle_buttons_interrupt+0x234>
			set_down('0');
			set_left('0');
			set_right('1');
		}
		else {
			set_up('0');
   40510:	01000c04 	movi	r4,48
   40514:	00402600 	call	40260 <set_up>
			set_down('0');
   40518:	01000c04 	movi	r4,48
   4051c:	00402900 	call	40290 <set_down>
			set_left('0');
   40520:	01000c04 	movi	r4,48
   40524:	00402c00 	call	402c0 <set_left>
			set_right('0');
   40528:	01000c04 	movi	r4,48
   4052c:	00402f00 	call	402f0 <set_right>
		}
		break;
   40530:	00000806 	br	40554 <handle_buttons_interrupt+0x234>
	default :
		set_up('0');
   40534:	01000c04 	movi	r4,48
   40538:	00402600 	call	40260 <set_up>
		set_down('0');
   4053c:	01000c04 	movi	r4,48
   40540:	00402900 	call	40290 <set_down>
		set_left('0');
   40544:	01000c04 	movi	r4,48
   40548:	00402c00 	call	402c0 <set_left>
		set_right('0');
   4054c:	01000c04 	movi	r4,48
   40550:	00402f00 	call	402f0 <set_right>
			set_right('0');
			//set_led('0');
		}
		break;*/

	IOWR(BUTTONS_BASE,3,15);
   40554:	00c00234 	movhi	r3,8
   40558:	18c41b04 	addi	r3,r3,4204
   4055c:	008003c4 	movi	r2,15
   40560:	18800035 	stwio	r2,0(r3)
}
   40564:	e037883a 	mov	sp,fp
   40568:	dfc00117 	ldw	ra,4(sp)
   4056c:	df000017 	ldw	fp,0(sp)
   40570:	dec00204 	addi	sp,sp,8
   40574:	f800283a 	ret

00040578 <handle_switch_interrupt>:

static void handle_switch_interrupt(void* context, alt_u32 id){
   40578:	defffb04 	addi	sp,sp,-20
   4057c:	dfc00415 	stw	ra,16(sp)
   40580:	df000315 	stw	fp,12(sp)
   40584:	df000304 	addi	fp,sp,12
   40588:	e13ffd15 	stw	r4,-12(fp)
   4058c:	e17ffe15 	stw	r5,-8(fp)

	pause = IORD(SWITCH_BASE, 0);
   40590:	00800234 	movhi	r2,8
   40594:	10841c04 	addi	r2,r2,4208
   40598:	10800037 	ldwio	r2,0(r2)
   4059c:	d0a59805 	stb	r2,-27040(gp)
	//printf("switch :%x\n",pause);
	switch(pause) {
   405a0:	d0a59803 	ldbu	r2,-27040(gp)
   405a4:	10803fcc 	andi	r2,r2,255
   405a8:	e0bfff15 	stw	r2,-4(fp)
   405ac:	e0ffff17 	ldw	r3,-4(fp)
   405b0:	18800060 	cmpeqi	r2,r3,1
   405b4:	1000131e 	bne	r2,zero,40604 <handle_switch_interrupt+0x8c>
   405b8:	e0ffff17 	ldw	r3,-4(fp)
   405bc:	18800088 	cmpgei	r2,r3,2
   405c0:	1000041e 	bne	r2,zero,405d4 <handle_switch_interrupt+0x5c>
   405c4:	e0ffff17 	ldw	r3,-4(fp)
   405c8:	1805003a 	cmpeq	r2,r3,zero
   405cc:	1000081e 	bne	r2,zero,405f0 <handle_switch_interrupt+0x78>
   405d0:	00001a06 	br	4063c <handle_switch_interrupt+0xc4>
   405d4:	e0ffff17 	ldw	r3,-4(fp)
   405d8:	188000a0 	cmpeqi	r2,r3,2
   405dc:	10000e1e 	bne	r2,zero,40618 <handle_switch_interrupt+0xa0>
   405e0:	e0ffff17 	ldw	r3,-4(fp)
   405e4:	188000e0 	cmpeqi	r2,r3,3
   405e8:	1000101e 	bne	r2,zero,4062c <handle_switch_interrupt+0xb4>
   405ec:	00001306 	br	4063c <handle_switch_interrupt+0xc4>
		case 0 :
			set_led('0');
   405f0:	01000c04 	movi	r4,48
   405f4:	00402000 	call	40200 <set_led>
			set_action('0');
   405f8:	01000c04 	movi	r4,48
   405fc:	00402300 	call	40230 <set_action>
			break;
   40600:	00000e06 	br	4063c <handle_switch_interrupt+0xc4>
		case 1 :
			set_led('1');
   40604:	01000c44 	movi	r4,49
   40608:	00402000 	call	40200 <set_led>
			set_action('0');
   4060c:	01000c04 	movi	r4,48
   40610:	00402300 	call	40230 <set_action>
			break;
   40614:	00000906 	br	4063c <handle_switch_interrupt+0xc4>
		case 2 :
			set_led('0');
   40618:	01000c04 	movi	r4,48
   4061c:	00402000 	call	40200 <set_led>
			set_action('0');
   40620:	01000c04 	movi	r4,48
   40624:	00402300 	call	40230 <set_action>
			break;
   40628:	00000406 	br	4063c <handle_switch_interrupt+0xc4>
		case 3 :
			set_led('1');
   4062c:	01000c44 	movi	r4,49
   40630:	00402000 	call	40200 <set_led>
			set_action('1');
   40634:	01000c44 	movi	r4,49
   40638:	00402300 	call	40230 <set_action>
		default :
			//set_led('0');
			break;
	}
	//IOWR(SWITCH_BASE,3,0);
}
   4063c:	e037883a 	mov	sp,fp
   40640:	dfc00117 	ldw	ra,4(sp)
   40644:	df000017 	ldw	fp,0(sp)
   40648:	dec00204 	addi	sp,sp,8
   4064c:	f800283a 	ret

00040650 <main>:

int main()
{
   40650:	defffe04 	addi	sp,sp,-8
   40654:	dfc00115 	stw	ra,4(sp)
   40658:	df000015 	stw	fp,0(sp)
   4065c:	d839883a 	mov	fp,sp
	// init switch
	IOWR(SWITCH_BASE,3,0);
   40660:	00800234 	movhi	r2,8
   40664:	10841f04 	addi	r2,r2,4220
   40668:	10000035 	stwio	zero,0(r2)
	//Enable interrupt
	IOWR(SWITCH_BASE,2,3);
   4066c:	00c00234 	movhi	r3,8
   40670:	18c41e04 	addi	r3,r3,4216
   40674:	008000c4 	movi	r2,3
   40678:	18800035 	stwio	r2,0(r3)
	alt_irq_register(SWITCH_IRQ,NULL,handle_switch_interrupt);
   4067c:	01000044 	movi	r4,1
   40680:	000b883a 	mov	r5,zero
   40684:	01800134 	movhi	r6,4
   40688:	31815e04 	addi	r6,r6,1400
   4068c:	00406c80 	call	406c8 <alt_irq_register>

	//unsigned char action = 0;
	// init bouttons
	// Reset the edge capture register
	IOWR(BUTTONS_BASE,3,15);
   40690:	00c00234 	movhi	r3,8
   40694:	18c41b04 	addi	r3,r3,4204
   40698:	008003c4 	movi	r2,15
   4069c:	18800035 	stwio	r2,0(r3)

	//Enable interrupt
	IOWR(BUTTONS_BASE,2,15);
   406a0:	00c00234 	movhi	r3,8
   406a4:	18c41a04 	addi	r3,r3,4200
   406a8:	008003c4 	movi	r2,15
   406ac:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,NULL,handle_buttons_interrupt);
   406b0:	0009883a 	mov	r4,zero
   406b4:	000b883a 	mov	r5,zero
   406b8:	01800134 	movhi	r6,4
   406bc:	3180c804 	addi	r6,r6,800
   406c0:	00406c80 	call	406c8 <alt_irq_register>


		//buttons = IORD(BUTTONS_BASE,3);
		//IOWR(BUTTONS_BASE,3,15);

	}
   406c4:	003fff06 	br	406c4 <main+0x74>

000406c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   406c8:	deffef04 	addi	sp,sp,-68
   406cc:	df001015 	stw	fp,64(sp)
   406d0:	df001004 	addi	fp,sp,64
   406d4:	e13ffc15 	stw	r4,-16(fp)
   406d8:	e17ffd15 	stw	r5,-12(fp)
   406dc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   406e0:	00bffa84 	movi	r2,-22
   406e4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   406e8:	e0bffc17 	ldw	r2,-16(fp)
   406ec:	10800828 	cmpgeui	r2,r2,32
   406f0:	1000601e 	bne	r2,zero,40874 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   406f4:	0005303a 	rdctl	r2,status
   406f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   406fc:	e0fff917 	ldw	r3,-28(fp)
   40700:	00bfff84 	movi	r2,-2
   40704:	1884703a 	and	r2,r3,r2
   40708:	1001703a 	wrctl	status,r2
  
  return context;
   4070c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   40710:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   40714:	e0bffc17 	ldw	r2,-16(fp)
   40718:	00c00134 	movhi	r3,4
   4071c:	18d60d04 	addi	r3,r3,22580
   40720:	100490fa 	slli	r2,r2,3
   40724:	10c7883a 	add	r3,r2,r3
   40728:	e0bffe17 	ldw	r2,-8(fp)
   4072c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   40730:	e0bffc17 	ldw	r2,-16(fp)
   40734:	00c00134 	movhi	r3,4
   40738:	18d60d04 	addi	r3,r3,22580
   4073c:	100490fa 	slli	r2,r2,3
   40740:	10c5883a 	add	r2,r2,r3
   40744:	10c00104 	addi	r3,r2,4
   40748:	e0bffd17 	ldw	r2,-12(fp)
   4074c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   40750:	e0bffe17 	ldw	r2,-8(fp)
   40754:	1005003a 	cmpeq	r2,r2,zero
   40758:	1000201e 	bne	r2,zero,407dc <alt_irq_register+0x114>
   4075c:	e0bffc17 	ldw	r2,-16(fp)
   40760:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40764:	0005303a 	rdctl	r2,status
   40768:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4076c:	e0fff617 	ldw	r3,-40(fp)
   40770:	00bfff84 	movi	r2,-2
   40774:	1884703a 	and	r2,r3,r2
   40778:	1001703a 	wrctl	status,r2
  
  return context;
   4077c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   40780:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   40784:	e0fff717 	ldw	r3,-36(fp)
   40788:	00800044 	movi	r2,1
   4078c:	10c4983a 	sll	r2,r2,r3
   40790:	1007883a 	mov	r3,r2
   40794:	00800134 	movhi	r2,4
   40798:	10960604 	addi	r2,r2,22552
   4079c:	10800017 	ldw	r2,0(r2)
   407a0:	1886b03a 	or	r3,r3,r2
   407a4:	00800134 	movhi	r2,4
   407a8:	10960604 	addi	r2,r2,22552
   407ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   407b0:	00800134 	movhi	r2,4
   407b4:	10960604 	addi	r2,r2,22552
   407b8:	10800017 	ldw	r2,0(r2)
   407bc:	100170fa 	wrctl	ienable,r2
   407c0:	e0bff817 	ldw	r2,-32(fp)
   407c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   407c8:	e0bff517 	ldw	r2,-44(fp)
   407cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   407d0:	0005883a 	mov	r2,zero
   407d4:	e0bfff15 	stw	r2,-4(fp)
   407d8:	00002006 	br	4085c <alt_irq_register+0x194>
   407dc:	e0bffc17 	ldw	r2,-16(fp)
   407e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   407e4:	0005303a 	rdctl	r2,status
   407e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   407ec:	e0fff217 	ldw	r3,-56(fp)
   407f0:	00bfff84 	movi	r2,-2
   407f4:	1884703a 	and	r2,r3,r2
   407f8:	1001703a 	wrctl	status,r2
  
  return context;
   407fc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   40800:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   40804:	e0fff317 	ldw	r3,-52(fp)
   40808:	00800044 	movi	r2,1
   4080c:	10c4983a 	sll	r2,r2,r3
   40810:	0084303a 	nor	r2,zero,r2
   40814:	1007883a 	mov	r3,r2
   40818:	00800134 	movhi	r2,4
   4081c:	10960604 	addi	r2,r2,22552
   40820:	10800017 	ldw	r2,0(r2)
   40824:	1886703a 	and	r3,r3,r2
   40828:	00800134 	movhi	r2,4
   4082c:	10960604 	addi	r2,r2,22552
   40830:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   40834:	00800134 	movhi	r2,4
   40838:	10960604 	addi	r2,r2,22552
   4083c:	10800017 	ldw	r2,0(r2)
   40840:	100170fa 	wrctl	ienable,r2
   40844:	e0bff417 	ldw	r2,-48(fp)
   40848:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4084c:	e0bff117 	ldw	r2,-60(fp)
   40850:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   40854:	0005883a 	mov	r2,zero
   40858:	e0bfff15 	stw	r2,-4(fp)
   4085c:	e0bfff17 	ldw	r2,-4(fp)
   40860:	e0bffb15 	stw	r2,-20(fp)
   40864:	e0bffa17 	ldw	r2,-24(fp)
   40868:	e0bff015 	stw	r2,-64(fp)
   4086c:	e0bff017 	ldw	r2,-64(fp)
   40870:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   40874:	e0bffb17 	ldw	r2,-20(fp)
}
   40878:	e037883a 	mov	sp,fp
   4087c:	df000017 	ldw	fp,0(sp)
   40880:	dec00104 	addi	sp,sp,4
   40884:	f800283a 	ret

00040888 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   40888:	defffe04 	addi	sp,sp,-8
   4088c:	dfc00115 	stw	ra,4(sp)
   40890:	df000015 	stw	fp,0(sp)
   40894:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   40898:	01000134 	movhi	r4,4
   4089c:	21107804 	addi	r4,r4,16864
   408a0:	01400134 	movhi	r5,4
   408a4:	294aeb04 	addi	r5,r5,11180
   408a8:	01800134 	movhi	r6,4
   408ac:	31907804 	addi	r6,r6,16864
   408b0:	00409080 	call	40908 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   408b4:	01000134 	movhi	r4,4
   408b8:	21000804 	addi	r4,r4,32
   408bc:	01400134 	movhi	r5,4
   408c0:	29400804 	addi	r5,r5,32
   408c4:	01800134 	movhi	r6,4
   408c8:	31806d04 	addi	r6,r6,436
   408cc:	00409080 	call	40908 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   408d0:	01000134 	movhi	r4,4
   408d4:	210add04 	addi	r4,r4,11124
   408d8:	01400134 	movhi	r5,4
   408dc:	294add04 	addi	r5,r5,11124
   408e0:	01800134 	movhi	r6,4
   408e4:	318aeb04 	addi	r6,r6,11180
   408e8:	00409080 	call	40908 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   408ec:	00417ec0 	call	417ec <alt_dcache_flush_all>
  alt_icache_flush_all();
   408f0:	0041a380 	call	41a38 <alt_icache_flush_all>
}
   408f4:	e037883a 	mov	sp,fp
   408f8:	dfc00117 	ldw	ra,4(sp)
   408fc:	df000017 	ldw	fp,0(sp)
   40900:	dec00204 	addi	sp,sp,8
   40904:	f800283a 	ret

00040908 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   40908:	defffc04 	addi	sp,sp,-16
   4090c:	df000315 	stw	fp,12(sp)
   40910:	df000304 	addi	fp,sp,12
   40914:	e13ffd15 	stw	r4,-12(fp)
   40918:	e17ffe15 	stw	r5,-8(fp)
   4091c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   40920:	e0fffe17 	ldw	r3,-8(fp)
   40924:	e0bffd17 	ldw	r2,-12(fp)
   40928:	18800e26 	beq	r3,r2,40964 <alt_load_section+0x5c>
  {
    while( to != end )
   4092c:	00000a06 	br	40958 <alt_load_section+0x50>
    {
      *to++ = *from++;
   40930:	e0bffd17 	ldw	r2,-12(fp)
   40934:	10c00017 	ldw	r3,0(r2)
   40938:	e0bffe17 	ldw	r2,-8(fp)
   4093c:	10c00015 	stw	r3,0(r2)
   40940:	e0bffe17 	ldw	r2,-8(fp)
   40944:	10800104 	addi	r2,r2,4
   40948:	e0bffe15 	stw	r2,-8(fp)
   4094c:	e0bffd17 	ldw	r2,-12(fp)
   40950:	10800104 	addi	r2,r2,4
   40954:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   40958:	e0fffe17 	ldw	r3,-8(fp)
   4095c:	e0bfff17 	ldw	r2,-4(fp)
   40960:	18bff31e 	bne	r3,r2,40930 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   40964:	e037883a 	mov	sp,fp
   40968:	df000017 	ldw	fp,0(sp)
   4096c:	dec00104 	addi	sp,sp,4
   40970:	f800283a 	ret

00040974 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   40974:	defffd04 	addi	sp,sp,-12
   40978:	dfc00215 	stw	ra,8(sp)
   4097c:	df000115 	stw	fp,4(sp)
   40980:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   40984:	0009883a 	mov	r4,zero
   40988:	00409e00 	call	409e0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4098c:	0040a140 	call	40a14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   40990:	01000134 	movhi	r4,4
   40994:	210add04 	addi	r4,r4,11124
   40998:	01400134 	movhi	r5,4
   4099c:	294add04 	addi	r5,r5,11124
   409a0:	01800134 	movhi	r6,4
   409a4:	318add04 	addi	r6,r6,11124
   409a8:	0041df80 	call	41df8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   409ac:	00419700 	call	41970 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   409b0:	01000134 	movhi	r4,4
   409b4:	21067504 	addi	r4,r4,6612
   409b8:	00426540 	call	42654 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   409bc:	d1259a17 	ldw	r4,-27032(gp)
   409c0:	d1659b17 	ldw	r5,-27028(gp)
   409c4:	d1a59c17 	ldw	r6,-27024(gp)
   409c8:	00406500 	call	40650 <main>
   409cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   409d0:	01000044 	movi	r4,1
   409d4:	00416900 	call	41690 <close>
  exit (result);
   409d8:	e13fff17 	ldw	r4,-4(fp)
   409dc:	00426680 	call	42668 <exit>

000409e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   409e0:	defffd04 	addi	sp,sp,-12
   409e4:	dfc00215 	stw	ra,8(sp)
   409e8:	df000115 	stw	fp,4(sp)
   409ec:	df000104 	addi	fp,sp,4
   409f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   409f4:	00423380 	call	42338 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   409f8:	00800044 	movi	r2,1
   409fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   40a00:	e037883a 	mov	sp,fp
   40a04:	dfc00117 	ldw	ra,4(sp)
   40a08:	df000017 	ldw	fp,0(sp)
   40a0c:	dec00204 	addi	sp,sp,8
   40a10:	f800283a 	ret

00040a14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   40a14:	defffe04 	addi	sp,sp,-8
   40a18:	dfc00115 	stw	ra,4(sp)
   40a1c:	df000015 	stw	fp,0(sp)
   40a20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   40a24:	01000134 	movhi	r4,4
   40a28:	210af504 	addi	r4,r4,11220
   40a2c:	000b883a 	mov	r5,zero
   40a30:	01800084 	movi	r6,2
   40a34:	0040bd80 	call	40bd8 <altera_avalon_jtag_uart_init>
   40a38:	01000134 	movhi	r4,4
   40a3c:	210aeb04 	addi	r4,r4,11180
   40a40:	0040a580 	call	40a58 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   40a44:	e037883a 	mov	sp,fp
   40a48:	dfc00117 	ldw	ra,4(sp)
   40a4c:	df000017 	ldw	fp,0(sp)
   40a50:	dec00204 	addi	sp,sp,8
   40a54:	f800283a 	ret

00040a58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   40a58:	defffd04 	addi	sp,sp,-12
   40a5c:	dfc00215 	stw	ra,8(sp)
   40a60:	df000115 	stw	fp,4(sp)
   40a64:	df000104 	addi	fp,sp,4
   40a68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   40a6c:	e13fff17 	ldw	r4,-4(fp)
   40a70:	01400134 	movhi	r5,4
   40a74:	29507004 	addi	r5,r5,16832
   40a78:	004185c0 	call	4185c <alt_dev_llist_insert>
}
   40a7c:	e037883a 	mov	sp,fp
   40a80:	dfc00117 	ldw	ra,4(sp)
   40a84:	df000017 	ldw	fp,0(sp)
   40a88:	dec00204 	addi	sp,sp,8
   40a8c:	f800283a 	ret

00040a90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   40a90:	defffa04 	addi	sp,sp,-24
   40a94:	dfc00515 	stw	ra,20(sp)
   40a98:	df000415 	stw	fp,16(sp)
   40a9c:	df000404 	addi	fp,sp,16
   40aa0:	e13ffd15 	stw	r4,-12(fp)
   40aa4:	e17ffe15 	stw	r5,-8(fp)
   40aa8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40aac:	e0bffd17 	ldw	r2,-12(fp)
   40ab0:	10800017 	ldw	r2,0(r2)
   40ab4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   40ab8:	e0bffc17 	ldw	r2,-16(fp)
   40abc:	11000a04 	addi	r4,r2,40
   40ac0:	e0bffd17 	ldw	r2,-12(fp)
   40ac4:	11c00217 	ldw	r7,8(r2)
   40ac8:	e17ffe17 	ldw	r5,-8(fp)
   40acc:	e1bfff17 	ldw	r6,-4(fp)
   40ad0:	00410d80 	call	410d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   40ad4:	e037883a 	mov	sp,fp
   40ad8:	dfc00117 	ldw	ra,4(sp)
   40adc:	df000017 	ldw	fp,0(sp)
   40ae0:	dec00204 	addi	sp,sp,8
   40ae4:	f800283a 	ret

00040ae8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   40ae8:	defffa04 	addi	sp,sp,-24
   40aec:	dfc00515 	stw	ra,20(sp)
   40af0:	df000415 	stw	fp,16(sp)
   40af4:	df000404 	addi	fp,sp,16
   40af8:	e13ffd15 	stw	r4,-12(fp)
   40afc:	e17ffe15 	stw	r5,-8(fp)
   40b00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40b04:	e0bffd17 	ldw	r2,-12(fp)
   40b08:	10800017 	ldw	r2,0(r2)
   40b0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   40b10:	e0bffc17 	ldw	r2,-16(fp)
   40b14:	11000a04 	addi	r4,r2,40
   40b18:	e0bffd17 	ldw	r2,-12(fp)
   40b1c:	11c00217 	ldw	r7,8(r2)
   40b20:	e17ffe17 	ldw	r5,-8(fp)
   40b24:	e1bfff17 	ldw	r6,-4(fp)
   40b28:	00412fc0 	call	412fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   40b2c:	e037883a 	mov	sp,fp
   40b30:	dfc00117 	ldw	ra,4(sp)
   40b34:	df000017 	ldw	fp,0(sp)
   40b38:	dec00204 	addi	sp,sp,8
   40b3c:	f800283a 	ret

00040b40 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   40b40:	defffc04 	addi	sp,sp,-16
   40b44:	dfc00315 	stw	ra,12(sp)
   40b48:	df000215 	stw	fp,8(sp)
   40b4c:	df000204 	addi	fp,sp,8
   40b50:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40b54:	e0bfff17 	ldw	r2,-4(fp)
   40b58:	10800017 	ldw	r2,0(r2)
   40b5c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   40b60:	e0bffe17 	ldw	r2,-8(fp)
   40b64:	11000a04 	addi	r4,r2,40
   40b68:	e0bfff17 	ldw	r2,-4(fp)
   40b6c:	11400217 	ldw	r5,8(r2)
   40b70:	0040f700 	call	40f70 <altera_avalon_jtag_uart_close>
}
   40b74:	e037883a 	mov	sp,fp
   40b78:	dfc00117 	ldw	ra,4(sp)
   40b7c:	df000017 	ldw	fp,0(sp)
   40b80:	dec00204 	addi	sp,sp,8
   40b84:	f800283a 	ret

00040b88 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   40b88:	defffa04 	addi	sp,sp,-24
   40b8c:	dfc00515 	stw	ra,20(sp)
   40b90:	df000415 	stw	fp,16(sp)
   40b94:	df000404 	addi	fp,sp,16
   40b98:	e13ffd15 	stw	r4,-12(fp)
   40b9c:	e17ffe15 	stw	r5,-8(fp)
   40ba0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   40ba4:	e0bffd17 	ldw	r2,-12(fp)
   40ba8:	10800017 	ldw	r2,0(r2)
   40bac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   40bb0:	e0bffc17 	ldw	r2,-16(fp)
   40bb4:	11000a04 	addi	r4,r2,40
   40bb8:	e17ffe17 	ldw	r5,-8(fp)
   40bbc:	e1bfff17 	ldw	r6,-4(fp)
   40bc0:	0040fe40 	call	40fe4 <altera_avalon_jtag_uart_ioctl>
}
   40bc4:	e037883a 	mov	sp,fp
   40bc8:	dfc00117 	ldw	ra,4(sp)
   40bcc:	df000017 	ldw	fp,0(sp)
   40bd0:	dec00204 	addi	sp,sp,8
   40bd4:	f800283a 	ret

00040bd8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   40bd8:	defffa04 	addi	sp,sp,-24
   40bdc:	dfc00515 	stw	ra,20(sp)
   40be0:	df000415 	stw	fp,16(sp)
   40be4:	df000404 	addi	fp,sp,16
   40be8:	e13ffd15 	stw	r4,-12(fp)
   40bec:	e17ffe15 	stw	r5,-8(fp)
   40bf0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40bf4:	e0fffd17 	ldw	r3,-12(fp)
   40bf8:	00800044 	movi	r2,1
   40bfc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   40c00:	e0bffd17 	ldw	r2,-12(fp)
   40c04:	10800017 	ldw	r2,0(r2)
   40c08:	11000104 	addi	r4,r2,4
   40c0c:	e0bffd17 	ldw	r2,-12(fp)
   40c10:	10800817 	ldw	r2,32(r2)
   40c14:	1007883a 	mov	r3,r2
   40c18:	2005883a 	mov	r2,r4
   40c1c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   40c20:	e13ffe17 	ldw	r4,-8(fp)
   40c24:	e17fff17 	ldw	r5,-4(fp)
   40c28:	d8000015 	stw	zero,0(sp)
   40c2c:	01800134 	movhi	r6,4
   40c30:	31832604 	addi	r6,r6,3224
   40c34:	e1fffd17 	ldw	r7,-12(fp)
   40c38:	0041a680 	call	41a68 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   40c3c:	e0bffd17 	ldw	r2,-12(fp)
   40c40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   40c44:	e0bffd17 	ldw	r2,-12(fp)
   40c48:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   40c4c:	00800134 	movhi	r2,4
   40c50:	10960a04 	addi	r2,r2,22568
   40c54:	10800017 	ldw	r2,0(r2)
   40c58:	100b883a 	mov	r5,r2
   40c5c:	01800134 	movhi	r6,4
   40c60:	3183b004 	addi	r6,r6,3776
   40c64:	e1fffd17 	ldw	r7,-12(fp)
   40c68:	004153c0 	call	4153c <alt_alarm_start>
   40c6c:	1004403a 	cmpge	r2,r2,zero
   40c70:	1000041e 	bne	r2,zero,40c84 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   40c74:	e0fffd17 	ldw	r3,-12(fp)
   40c78:	00a00034 	movhi	r2,32768
   40c7c:	10bfffc4 	addi	r2,r2,-1
   40c80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   40c84:	e037883a 	mov	sp,fp
   40c88:	dfc00117 	ldw	ra,4(sp)
   40c8c:	df000017 	ldw	fp,0(sp)
   40c90:	dec00204 	addi	sp,sp,8
   40c94:	f800283a 	ret

00040c98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   40c98:	defff804 	addi	sp,sp,-32
   40c9c:	df000715 	stw	fp,28(sp)
   40ca0:	df000704 	addi	fp,sp,28
   40ca4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   40ca8:	e0bfff17 	ldw	r2,-4(fp)
   40cac:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   40cb0:	e0bffe17 	ldw	r2,-8(fp)
   40cb4:	10800017 	ldw	r2,0(r2)
   40cb8:	e0bffd15 	stw	r2,-12(fp)
   40cbc:	00000006 	br	40cc0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40cc0:	e0bffd17 	ldw	r2,-12(fp)
   40cc4:	10800104 	addi	r2,r2,4
   40cc8:	10800037 	ldwio	r2,0(r2)
   40ccc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   40cd0:	e0bffc17 	ldw	r2,-16(fp)
   40cd4:	1080c00c 	andi	r2,r2,768
   40cd8:	1005003a 	cmpeq	r2,r2,zero
   40cdc:	1000741e 	bne	r2,zero,40eb0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   40ce0:	e0bffc17 	ldw	r2,-16(fp)
   40ce4:	1080400c 	andi	r2,r2,256
   40ce8:	1005003a 	cmpeq	r2,r2,zero
   40cec:	1000351e 	bne	r2,zero,40dc4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   40cf0:	00800074 	movhi	r2,1
   40cf4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40cf8:	e0bffe17 	ldw	r2,-8(fp)
   40cfc:	10800a17 	ldw	r2,40(r2)
   40d00:	10800044 	addi	r2,r2,1
   40d04:	1081ffcc 	andi	r2,r2,2047
   40d08:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   40d0c:	e0bffe17 	ldw	r2,-8(fp)
   40d10:	10c00b17 	ldw	r3,44(r2)
   40d14:	e0bffa17 	ldw	r2,-24(fp)
   40d18:	18801626 	beq	r3,r2,40d74 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   40d1c:	e0bffd17 	ldw	r2,-12(fp)
   40d20:	10800037 	ldwio	r2,0(r2)
   40d24:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   40d28:	e0bffb17 	ldw	r2,-20(fp)
   40d2c:	10a0000c 	andi	r2,r2,32768
   40d30:	1005003a 	cmpeq	r2,r2,zero
   40d34:	10000f1e 	bne	r2,zero,40d74 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   40d38:	e0bffe17 	ldw	r2,-8(fp)
   40d3c:	10c00a17 	ldw	r3,40(r2)
   40d40:	e0bffb17 	ldw	r2,-20(fp)
   40d44:	1009883a 	mov	r4,r2
   40d48:	e0bffe17 	ldw	r2,-8(fp)
   40d4c:	1885883a 	add	r2,r3,r2
   40d50:	10800e04 	addi	r2,r2,56
   40d54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40d58:	e0bffe17 	ldw	r2,-8(fp)
   40d5c:	10800a17 	ldw	r2,40(r2)
   40d60:	10800044 	addi	r2,r2,1
   40d64:	10c1ffcc 	andi	r3,r2,2047
   40d68:	e0bffe17 	ldw	r2,-8(fp)
   40d6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   40d70:	003fe106 	br	40cf8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   40d74:	e0bffb17 	ldw	r2,-20(fp)
   40d78:	10bfffec 	andhi	r2,r2,65535
   40d7c:	1005003a 	cmpeq	r2,r2,zero
   40d80:	1000101e 	bne	r2,zero,40dc4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40d84:	e0bffe17 	ldw	r2,-8(fp)
   40d88:	10c00817 	ldw	r3,32(r2)
   40d8c:	00bfff84 	movi	r2,-2
   40d90:	1886703a 	and	r3,r3,r2
   40d94:	e0bffe17 	ldw	r2,-8(fp)
   40d98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   40d9c:	e0bffd17 	ldw	r2,-12(fp)
   40da0:	11000104 	addi	r4,r2,4
   40da4:	e0bffe17 	ldw	r2,-8(fp)
   40da8:	10800817 	ldw	r2,32(r2)
   40dac:	1007883a 	mov	r3,r2
   40db0:	2005883a 	mov	r2,r4
   40db4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40db8:	e0bffd17 	ldw	r2,-12(fp)
   40dbc:	10800104 	addi	r2,r2,4
   40dc0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   40dc4:	e0bffc17 	ldw	r2,-16(fp)
   40dc8:	1080800c 	andi	r2,r2,512
   40dcc:	1005003a 	cmpeq	r2,r2,zero
   40dd0:	103fbb1e 	bne	r2,zero,40cc0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   40dd4:	e0bffc17 	ldw	r2,-16(fp)
   40dd8:	10bfffec 	andhi	r2,r2,65535
   40ddc:	1004d43a 	srli	r2,r2,16
   40de0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   40de4:	00001506 	br	40e3c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   40de8:	e13ffd17 	ldw	r4,-12(fp)
   40dec:	e0bffe17 	ldw	r2,-8(fp)
   40df0:	10c00d17 	ldw	r3,52(r2)
   40df4:	e0bffe17 	ldw	r2,-8(fp)
   40df8:	1885883a 	add	r2,r3,r2
   40dfc:	10820e04 	addi	r2,r2,2104
   40e00:	10800003 	ldbu	r2,0(r2)
   40e04:	10c03fcc 	andi	r3,r2,255
   40e08:	18c0201c 	xori	r3,r3,128
   40e0c:	18ffe004 	addi	r3,r3,-128
   40e10:	2005883a 	mov	r2,r4
   40e14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40e18:	e0bffe17 	ldw	r2,-8(fp)
   40e1c:	10800d17 	ldw	r2,52(r2)
   40e20:	10800044 	addi	r2,r2,1
   40e24:	10c1ffcc 	andi	r3,r2,2047
   40e28:	e0bffe17 	ldw	r2,-8(fp)
   40e2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   40e30:	e0bff917 	ldw	r2,-28(fp)
   40e34:	10bfffc4 	addi	r2,r2,-1
   40e38:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   40e3c:	e0bff917 	ldw	r2,-28(fp)
   40e40:	1005003a 	cmpeq	r2,r2,zero
   40e44:	1000051e 	bne	r2,zero,40e5c <altera_avalon_jtag_uart_irq+0x1c4>
   40e48:	e0bffe17 	ldw	r2,-8(fp)
   40e4c:	10c00d17 	ldw	r3,52(r2)
   40e50:	e0bffe17 	ldw	r2,-8(fp)
   40e54:	10800c17 	ldw	r2,48(r2)
   40e58:	18bfe31e 	bne	r3,r2,40de8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   40e5c:	e0bff917 	ldw	r2,-28(fp)
   40e60:	1005003a 	cmpeq	r2,r2,zero
   40e64:	103f961e 	bne	r2,zero,40cc0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40e68:	e0bffe17 	ldw	r2,-8(fp)
   40e6c:	10c00817 	ldw	r3,32(r2)
   40e70:	00bfff44 	movi	r2,-3
   40e74:	1886703a 	and	r3,r3,r2
   40e78:	e0bffe17 	ldw	r2,-8(fp)
   40e7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40e80:	e0bffe17 	ldw	r2,-8(fp)
   40e84:	10800017 	ldw	r2,0(r2)
   40e88:	11000104 	addi	r4,r2,4
   40e8c:	e0bffe17 	ldw	r2,-8(fp)
   40e90:	10800817 	ldw	r2,32(r2)
   40e94:	1007883a 	mov	r3,r2
   40e98:	2005883a 	mov	r2,r4
   40e9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40ea0:	e0bffd17 	ldw	r2,-12(fp)
   40ea4:	10800104 	addi	r2,r2,4
   40ea8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   40eac:	003f8406 	br	40cc0 <altera_avalon_jtag_uart_irq+0x28>
}
   40eb0:	e037883a 	mov	sp,fp
   40eb4:	df000017 	ldw	fp,0(sp)
   40eb8:	dec00104 	addi	sp,sp,4
   40ebc:	f800283a 	ret

00040ec0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   40ec0:	defffc04 	addi	sp,sp,-16
   40ec4:	df000315 	stw	fp,12(sp)
   40ec8:	df000304 	addi	fp,sp,12
   40ecc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   40ed0:	e0bfff17 	ldw	r2,-4(fp)
   40ed4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   40ed8:	e0bffe17 	ldw	r2,-8(fp)
   40edc:	10800017 	ldw	r2,0(r2)
   40ee0:	10800104 	addi	r2,r2,4
   40ee4:	10800037 	ldwio	r2,0(r2)
   40ee8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   40eec:	e0bffd17 	ldw	r2,-12(fp)
   40ef0:	1081000c 	andi	r2,r2,1024
   40ef4:	1005003a 	cmpeq	r2,r2,zero
   40ef8:	10000c1e 	bne	r2,zero,40f2c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   40efc:	e0bffe17 	ldw	r2,-8(fp)
   40f00:	10800017 	ldw	r2,0(r2)
   40f04:	11000104 	addi	r4,r2,4
   40f08:	e0bffe17 	ldw	r2,-8(fp)
   40f0c:	10800817 	ldw	r2,32(r2)
   40f10:	10810014 	ori	r2,r2,1024
   40f14:	1007883a 	mov	r3,r2
   40f18:	2005883a 	mov	r2,r4
   40f1c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   40f20:	e0bffe17 	ldw	r2,-8(fp)
   40f24:	10000915 	stw	zero,36(r2)
   40f28:	00000a06 	br	40f54 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   40f2c:	e0bffe17 	ldw	r2,-8(fp)
   40f30:	10c00917 	ldw	r3,36(r2)
   40f34:	00a00034 	movhi	r2,32768
   40f38:	10bfff04 	addi	r2,r2,-4
   40f3c:	10c00536 	bltu	r2,r3,40f54 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   40f40:	e0bffe17 	ldw	r2,-8(fp)
   40f44:	10800917 	ldw	r2,36(r2)
   40f48:	10c00044 	addi	r3,r2,1
   40f4c:	e0bffe17 	ldw	r2,-8(fp)
   40f50:	10c00915 	stw	r3,36(r2)
   40f54:	00800134 	movhi	r2,4
   40f58:	10960a04 	addi	r2,r2,22568
   40f5c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   40f60:	e037883a 	mov	sp,fp
   40f64:	df000017 	ldw	fp,0(sp)
   40f68:	dec00104 	addi	sp,sp,4
   40f6c:	f800283a 	ret

00040f70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   40f70:	defffc04 	addi	sp,sp,-16
   40f74:	df000315 	stw	fp,12(sp)
   40f78:	df000304 	addi	fp,sp,12
   40f7c:	e13ffd15 	stw	r4,-12(fp)
   40f80:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   40f84:	00000706 	br	40fa4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   40f88:	e0bffe17 	ldw	r2,-8(fp)
   40f8c:	1090000c 	andi	r2,r2,16384
   40f90:	1005003a 	cmpeq	r2,r2,zero
   40f94:	1000031e 	bne	r2,zero,40fa4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   40f98:	00bffd44 	movi	r2,-11
   40f9c:	e0bfff15 	stw	r2,-4(fp)
   40fa0:	00000b06 	br	40fd0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   40fa4:	e0bffd17 	ldw	r2,-12(fp)
   40fa8:	10c00d17 	ldw	r3,52(r2)
   40fac:	e0bffd17 	ldw	r2,-12(fp)
   40fb0:	10800c17 	ldw	r2,48(r2)
   40fb4:	18800526 	beq	r3,r2,40fcc <altera_avalon_jtag_uart_close+0x5c>
   40fb8:	e0bffd17 	ldw	r2,-12(fp)
   40fbc:	10c00917 	ldw	r3,36(r2)
   40fc0:	e0bffd17 	ldw	r2,-12(fp)
   40fc4:	10800117 	ldw	r2,4(r2)
   40fc8:	18bfef36 	bltu	r3,r2,40f88 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   40fcc:	e03fff15 	stw	zero,-4(fp)
   40fd0:	e0bfff17 	ldw	r2,-4(fp)
}
   40fd4:	e037883a 	mov	sp,fp
   40fd8:	df000017 	ldw	fp,0(sp)
   40fdc:	dec00104 	addi	sp,sp,4
   40fe0:	f800283a 	ret

00040fe4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   40fe4:	defff804 	addi	sp,sp,-32
   40fe8:	df000715 	stw	fp,28(sp)
   40fec:	df000704 	addi	fp,sp,28
   40ff0:	e13ffb15 	stw	r4,-20(fp)
   40ff4:	e17ffc15 	stw	r5,-16(fp)
   40ff8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   40ffc:	00bff9c4 	movi	r2,-25
   41000:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   41004:	e0bffc17 	ldw	r2,-16(fp)
   41008:	e0bfff15 	stw	r2,-4(fp)
   4100c:	e0ffff17 	ldw	r3,-4(fp)
   41010:	189a8060 	cmpeqi	r2,r3,27137
   41014:	1000041e 	bne	r2,zero,41028 <altera_avalon_jtag_uart_ioctl+0x44>
   41018:	e0ffff17 	ldw	r3,-4(fp)
   4101c:	189a80a0 	cmpeqi	r2,r3,27138
   41020:	10001b1e 	bne	r2,zero,41090 <altera_avalon_jtag_uart_ioctl+0xac>
   41024:	00002706 	br	410c4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   41028:	e0bffb17 	ldw	r2,-20(fp)
   4102c:	10c00117 	ldw	r3,4(r2)
   41030:	00a00034 	movhi	r2,32768
   41034:	10bfffc4 	addi	r2,r2,-1
   41038:	18802226 	beq	r3,r2,410c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4103c:	e0bffd17 	ldw	r2,-12(fp)
   41040:	10800017 	ldw	r2,0(r2)
   41044:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   41048:	e0bff917 	ldw	r2,-28(fp)
   4104c:	10800090 	cmplti	r2,r2,2
   41050:	1000071e 	bne	r2,zero,41070 <altera_avalon_jtag_uart_ioctl+0x8c>
   41054:	e0fff917 	ldw	r3,-28(fp)
   41058:	00a00034 	movhi	r2,32768
   4105c:	10bfffc4 	addi	r2,r2,-1
   41060:	18800326 	beq	r3,r2,41070 <altera_avalon_jtag_uart_ioctl+0x8c>
   41064:	e0bff917 	ldw	r2,-28(fp)
   41068:	e0bffe15 	stw	r2,-8(fp)
   4106c:	00000306 	br	4107c <altera_avalon_jtag_uart_ioctl+0x98>
   41070:	00e00034 	movhi	r3,32768
   41074:	18ffff84 	addi	r3,r3,-2
   41078:	e0fffe15 	stw	r3,-8(fp)
   4107c:	e0bffb17 	ldw	r2,-20(fp)
   41080:	e0fffe17 	ldw	r3,-8(fp)
   41084:	10c00115 	stw	r3,4(r2)
      rc = 0;
   41088:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4108c:	00000d06 	br	410c4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   41090:	e0bffb17 	ldw	r2,-20(fp)
   41094:	10c00117 	ldw	r3,4(r2)
   41098:	00a00034 	movhi	r2,32768
   4109c:	10bfffc4 	addi	r2,r2,-1
   410a0:	18800826 	beq	r3,r2,410c4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   410a4:	e13ffd17 	ldw	r4,-12(fp)
   410a8:	e0bffb17 	ldw	r2,-20(fp)
   410ac:	10c00917 	ldw	r3,36(r2)
   410b0:	e0bffb17 	ldw	r2,-20(fp)
   410b4:	10800117 	ldw	r2,4(r2)
   410b8:	1885803a 	cmpltu	r2,r3,r2
   410bc:	20800015 	stw	r2,0(r4)
      rc = 0;
   410c0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   410c4:	e0bffa17 	ldw	r2,-24(fp)
}
   410c8:	e037883a 	mov	sp,fp
   410cc:	df000017 	ldw	fp,0(sp)
   410d0:	dec00104 	addi	sp,sp,4
   410d4:	f800283a 	ret

000410d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   410d8:	defff204 	addi	sp,sp,-56
   410dc:	dfc00d15 	stw	ra,52(sp)
   410e0:	df000c15 	stw	fp,48(sp)
   410e4:	df000c04 	addi	fp,sp,48
   410e8:	e13ffb15 	stw	r4,-20(fp)
   410ec:	e17ffc15 	stw	r5,-16(fp)
   410f0:	e1bffd15 	stw	r6,-12(fp)
   410f4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   410f8:	e0bffc17 	ldw	r2,-16(fp)
   410fc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   41100:	00004806 	br	41224 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   41104:	e0bffb17 	ldw	r2,-20(fp)
   41108:	10800a17 	ldw	r2,40(r2)
   4110c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   41110:	e0bffb17 	ldw	r2,-20(fp)
   41114:	10800b17 	ldw	r2,44(r2)
   41118:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4111c:	e0fff717 	ldw	r3,-36(fp)
   41120:	e0bff617 	ldw	r2,-40(fp)
   41124:	18800536 	bltu	r3,r2,4113c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   41128:	e0bff717 	ldw	r2,-36(fp)
   4112c:	e0fff617 	ldw	r3,-40(fp)
   41130:	10c5c83a 	sub	r2,r2,r3
   41134:	e0bff815 	stw	r2,-32(fp)
   41138:	00000406 	br	4114c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4113c:	00820004 	movi	r2,2048
   41140:	e0fff617 	ldw	r3,-40(fp)
   41144:	10c5c83a 	sub	r2,r2,r3
   41148:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4114c:	e0bff817 	ldw	r2,-32(fp)
   41150:	1005003a 	cmpeq	r2,r2,zero
   41154:	10001f1e 	bne	r2,zero,411d4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   41158:	e0fffd17 	ldw	r3,-12(fp)
   4115c:	e0bff817 	ldw	r2,-32(fp)
   41160:	1880022e 	bgeu	r3,r2,4116c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   41164:	e0bffd17 	ldw	r2,-12(fp)
   41168:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4116c:	e0bffb17 	ldw	r2,-20(fp)
   41170:	10c00e04 	addi	r3,r2,56
   41174:	e0bff617 	ldw	r2,-40(fp)
   41178:	1887883a 	add	r3,r3,r2
   4117c:	e0bffa17 	ldw	r2,-24(fp)
   41180:	1009883a 	mov	r4,r2
   41184:	180b883a 	mov	r5,r3
   41188:	e1bff817 	ldw	r6,-32(fp)
   4118c:	00427140 	call	42714 <memcpy>
      ptr   += n;
   41190:	e0fff817 	ldw	r3,-32(fp)
   41194:	e0bffa17 	ldw	r2,-24(fp)
   41198:	10c5883a 	add	r2,r2,r3
   4119c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   411a0:	e0fffd17 	ldw	r3,-12(fp)
   411a4:	e0bff817 	ldw	r2,-32(fp)
   411a8:	1885c83a 	sub	r2,r3,r2
   411ac:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   411b0:	e0fff617 	ldw	r3,-40(fp)
   411b4:	e0bff817 	ldw	r2,-32(fp)
   411b8:	1885883a 	add	r2,r3,r2
   411bc:	10c1ffcc 	andi	r3,r2,2047
   411c0:	e0bffb17 	ldw	r2,-20(fp)
   411c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   411c8:	e0bffd17 	ldw	r2,-12(fp)
   411cc:	10800048 	cmpgei	r2,r2,1
   411d0:	103fcc1e 	bne	r2,zero,41104 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   411d4:	e0fffa17 	ldw	r3,-24(fp)
   411d8:	e0bffc17 	ldw	r2,-16(fp)
   411dc:	1880141e 	bne	r3,r2,41230 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   411e0:	e0bffe17 	ldw	r2,-8(fp)
   411e4:	1090000c 	andi	r2,r2,16384
   411e8:	1004c03a 	cmpne	r2,r2,zero
   411ec:	1000101e 	bne	r2,zero,41230 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   411f0:	e0bffb17 	ldw	r2,-20(fp)
   411f4:	10c00a17 	ldw	r3,40(r2)
   411f8:	e0bff717 	ldw	r2,-36(fp)
   411fc:	1880051e 	bne	r3,r2,41214 <altera_avalon_jtag_uart_read+0x13c>
   41200:	e0bffb17 	ldw	r2,-20(fp)
   41204:	10c00917 	ldw	r3,36(r2)
   41208:	e0bffb17 	ldw	r2,-20(fp)
   4120c:	10800117 	ldw	r2,4(r2)
   41210:	18bff736 	bltu	r3,r2,411f0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   41214:	e0bffb17 	ldw	r2,-20(fp)
   41218:	10c00a17 	ldw	r3,40(r2)
   4121c:	e0bff717 	ldw	r2,-36(fp)
   41220:	18800326 	beq	r3,r2,41230 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   41224:	e0bffd17 	ldw	r2,-12(fp)
   41228:	10800048 	cmpgei	r2,r2,1
   4122c:	103fb51e 	bne	r2,zero,41104 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   41230:	e0fffa17 	ldw	r3,-24(fp)
   41234:	e0bffc17 	ldw	r2,-16(fp)
   41238:	18801926 	beq	r3,r2,412a0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4123c:	0005303a 	rdctl	r2,status
   41240:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41244:	e0fff517 	ldw	r3,-44(fp)
   41248:	00bfff84 	movi	r2,-2
   4124c:	1884703a 	and	r2,r3,r2
   41250:	1001703a 	wrctl	status,r2
  
  return context;
   41254:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   41258:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4125c:	e0bffb17 	ldw	r2,-20(fp)
   41260:	10800817 	ldw	r2,32(r2)
   41264:	10c00054 	ori	r3,r2,1
   41268:	e0bffb17 	ldw	r2,-20(fp)
   4126c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   41270:	e0bffb17 	ldw	r2,-20(fp)
   41274:	10800017 	ldw	r2,0(r2)
   41278:	11000104 	addi	r4,r2,4
   4127c:	e0bffb17 	ldw	r2,-20(fp)
   41280:	10800817 	ldw	r2,32(r2)
   41284:	1007883a 	mov	r3,r2
   41288:	2005883a 	mov	r2,r4
   4128c:	10c00035 	stwio	r3,0(r2)
   41290:	e0bff917 	ldw	r2,-28(fp)
   41294:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41298:	e0bff417 	ldw	r2,-48(fp)
   4129c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   412a0:	e0fffa17 	ldw	r3,-24(fp)
   412a4:	e0bffc17 	ldw	r2,-16(fp)
   412a8:	18800526 	beq	r3,r2,412c0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   412ac:	e0fffa17 	ldw	r3,-24(fp)
   412b0:	e0bffc17 	ldw	r2,-16(fp)
   412b4:	1887c83a 	sub	r3,r3,r2
   412b8:	e0ffff15 	stw	r3,-4(fp)
   412bc:	00000906 	br	412e4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   412c0:	e0bffe17 	ldw	r2,-8(fp)
   412c4:	1090000c 	andi	r2,r2,16384
   412c8:	1005003a 	cmpeq	r2,r2,zero
   412cc:	1000031e 	bne	r2,zero,412dc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   412d0:	00bffd44 	movi	r2,-11
   412d4:	e0bfff15 	stw	r2,-4(fp)
   412d8:	00000206 	br	412e4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   412dc:	00bffec4 	movi	r2,-5
   412e0:	e0bfff15 	stw	r2,-4(fp)
   412e4:	e0bfff17 	ldw	r2,-4(fp)
}
   412e8:	e037883a 	mov	sp,fp
   412ec:	dfc00117 	ldw	ra,4(sp)
   412f0:	df000017 	ldw	fp,0(sp)
   412f4:	dec00204 	addi	sp,sp,8
   412f8:	f800283a 	ret

000412fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   412fc:	defff204 	addi	sp,sp,-56
   41300:	dfc00d15 	stw	ra,52(sp)
   41304:	df000c15 	stw	fp,48(sp)
   41308:	df000c04 	addi	fp,sp,48
   4130c:	e13ffb15 	stw	r4,-20(fp)
   41310:	e17ffc15 	stw	r5,-16(fp)
   41314:	e1bffd15 	stw	r6,-12(fp)
   41318:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4131c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   41320:	e0bffc17 	ldw	r2,-16(fp)
   41324:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   41328:	00003a06 	br	41414 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4132c:	e0bffb17 	ldw	r2,-20(fp)
   41330:	10800c17 	ldw	r2,48(r2)
   41334:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   41338:	e0bffb17 	ldw	r2,-20(fp)
   4133c:	10800d17 	ldw	r2,52(r2)
   41340:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   41344:	e0fffa17 	ldw	r3,-24(fp)
   41348:	e0bff917 	ldw	r2,-28(fp)
   4134c:	1880062e 	bgeu	r3,r2,41368 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   41350:	e0fff917 	ldw	r3,-28(fp)
   41354:	e0bffa17 	ldw	r2,-24(fp)
   41358:	1885c83a 	sub	r2,r3,r2
   4135c:	10bfffc4 	addi	r2,r2,-1
   41360:	e0bff815 	stw	r2,-32(fp)
   41364:	00000c06 	br	41398 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   41368:	e0bff917 	ldw	r2,-28(fp)
   4136c:	1005003a 	cmpeq	r2,r2,zero
   41370:	1000051e 	bne	r2,zero,41388 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   41374:	00820004 	movi	r2,2048
   41378:	e0fffa17 	ldw	r3,-24(fp)
   4137c:	10c5c83a 	sub	r2,r2,r3
   41380:	e0bff815 	stw	r2,-32(fp)
   41384:	00000406 	br	41398 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   41388:	0081ffc4 	movi	r2,2047
   4138c:	e0fffa17 	ldw	r3,-24(fp)
   41390:	10c5c83a 	sub	r2,r2,r3
   41394:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   41398:	e0bff817 	ldw	r2,-32(fp)
   4139c:	1005003a 	cmpeq	r2,r2,zero
   413a0:	10001f1e 	bne	r2,zero,41420 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   413a4:	e0fffd17 	ldw	r3,-12(fp)
   413a8:	e0bff817 	ldw	r2,-32(fp)
   413ac:	1880022e 	bgeu	r3,r2,413b8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   413b0:	e0bffd17 	ldw	r2,-12(fp)
   413b4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   413b8:	e0bffb17 	ldw	r2,-20(fp)
   413bc:	10c20e04 	addi	r3,r2,2104
   413c0:	e0bffa17 	ldw	r2,-24(fp)
   413c4:	1885883a 	add	r2,r3,r2
   413c8:	e0fffc17 	ldw	r3,-16(fp)
   413cc:	1009883a 	mov	r4,r2
   413d0:	180b883a 	mov	r5,r3
   413d4:	e1bff817 	ldw	r6,-32(fp)
   413d8:	00427140 	call	42714 <memcpy>
      ptr   += n;
   413dc:	e0fff817 	ldw	r3,-32(fp)
   413e0:	e0bffc17 	ldw	r2,-16(fp)
   413e4:	10c5883a 	add	r2,r2,r3
   413e8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   413ec:	e0fffd17 	ldw	r3,-12(fp)
   413f0:	e0bff817 	ldw	r2,-32(fp)
   413f4:	1885c83a 	sub	r2,r3,r2
   413f8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   413fc:	e0fffa17 	ldw	r3,-24(fp)
   41400:	e0bff817 	ldw	r2,-32(fp)
   41404:	1885883a 	add	r2,r3,r2
   41408:	10c1ffcc 	andi	r3,r2,2047
   4140c:	e0bffb17 	ldw	r2,-20(fp)
   41410:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   41414:	e0bffd17 	ldw	r2,-12(fp)
   41418:	10800048 	cmpgei	r2,r2,1
   4141c:	103fc31e 	bne	r2,zero,4132c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41420:	0005303a 	rdctl	r2,status
   41424:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41428:	e0fff517 	ldw	r3,-44(fp)
   4142c:	00bfff84 	movi	r2,-2
   41430:	1884703a 	and	r2,r3,r2
   41434:	1001703a 	wrctl	status,r2
  
  return context;
   41438:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4143c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   41440:	e0bffb17 	ldw	r2,-20(fp)
   41444:	10800817 	ldw	r2,32(r2)
   41448:	10c00094 	ori	r3,r2,2
   4144c:	e0bffb17 	ldw	r2,-20(fp)
   41450:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   41454:	e0bffb17 	ldw	r2,-20(fp)
   41458:	10800017 	ldw	r2,0(r2)
   4145c:	11000104 	addi	r4,r2,4
   41460:	e0bffb17 	ldw	r2,-20(fp)
   41464:	10800817 	ldw	r2,32(r2)
   41468:	1007883a 	mov	r3,r2
   4146c:	2005883a 	mov	r2,r4
   41470:	10c00035 	stwio	r3,0(r2)
   41474:	e0bff717 	ldw	r2,-36(fp)
   41478:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4147c:	e0bff417 	ldw	r2,-48(fp)
   41480:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   41484:	e0bffd17 	ldw	r2,-12(fp)
   41488:	10800050 	cmplti	r2,r2,1
   4148c:	1000111e 	bne	r2,zero,414d4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   41490:	e0bffe17 	ldw	r2,-8(fp)
   41494:	1090000c 	andi	r2,r2,16384
   41498:	1004c03a 	cmpne	r2,r2,zero
   4149c:	1000101e 	bne	r2,zero,414e0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   414a0:	e0bffb17 	ldw	r2,-20(fp)
   414a4:	10c00d17 	ldw	r3,52(r2)
   414a8:	e0bff917 	ldw	r2,-28(fp)
   414ac:	1880051e 	bne	r3,r2,414c4 <altera_avalon_jtag_uart_write+0x1c8>
   414b0:	e0bffb17 	ldw	r2,-20(fp)
   414b4:	10c00917 	ldw	r3,36(r2)
   414b8:	e0bffb17 	ldw	r2,-20(fp)
   414bc:	10800117 	ldw	r2,4(r2)
   414c0:	18bff736 	bltu	r3,r2,414a0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   414c4:	e0bffb17 	ldw	r2,-20(fp)
   414c8:	10c00d17 	ldw	r3,52(r2)
   414cc:	e0bff917 	ldw	r2,-28(fp)
   414d0:	18800326 	beq	r3,r2,414e0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   414d4:	e0bffd17 	ldw	r2,-12(fp)
   414d8:	10800048 	cmpgei	r2,r2,1
   414dc:	103fcd1e 	bne	r2,zero,41414 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   414e0:	e0fffc17 	ldw	r3,-16(fp)
   414e4:	e0bff617 	ldw	r2,-40(fp)
   414e8:	18800526 	beq	r3,r2,41500 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   414ec:	e0fffc17 	ldw	r3,-16(fp)
   414f0:	e0bff617 	ldw	r2,-40(fp)
   414f4:	1887c83a 	sub	r3,r3,r2
   414f8:	e0ffff15 	stw	r3,-4(fp)
   414fc:	00000906 	br	41524 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   41500:	e0bffe17 	ldw	r2,-8(fp)
   41504:	1090000c 	andi	r2,r2,16384
   41508:	1005003a 	cmpeq	r2,r2,zero
   4150c:	1000031e 	bne	r2,zero,4151c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   41510:	00bffd44 	movi	r2,-11
   41514:	e0bfff15 	stw	r2,-4(fp)
   41518:	00000206 	br	41524 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4151c:	00bffec4 	movi	r2,-5
   41520:	e0bfff15 	stw	r2,-4(fp)
   41524:	e0bfff17 	ldw	r2,-4(fp)
}
   41528:	e037883a 	mov	sp,fp
   4152c:	dfc00117 	ldw	ra,4(sp)
   41530:	df000017 	ldw	fp,0(sp)
   41534:	dec00204 	addi	sp,sp,8
   41538:	f800283a 	ret

0004153c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4153c:	defff404 	addi	sp,sp,-48
   41540:	df000b15 	stw	fp,44(sp)
   41544:	df000b04 	addi	fp,sp,44
   41548:	e13ffb15 	stw	r4,-20(fp)
   4154c:	e17ffc15 	stw	r5,-16(fp)
   41550:	e1bffd15 	stw	r6,-12(fp)
   41554:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   41558:	e03ff915 	stw	zero,-28(fp)
   4155c:	00800134 	movhi	r2,4
   41560:	10960a04 	addi	r2,r2,22568
   41564:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   41568:	1005003a 	cmpeq	r2,r2,zero
   4156c:	1000411e 	bne	r2,zero,41674 <alt_alarm_start+0x138>
  {
    if (alarm)
   41570:	e0bffb17 	ldw	r2,-20(fp)
   41574:	1005003a 	cmpeq	r2,r2,zero
   41578:	10003b1e 	bne	r2,zero,41668 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4157c:	e0fffb17 	ldw	r3,-20(fp)
   41580:	e0bffd17 	ldw	r2,-12(fp)
   41584:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   41588:	e0fffb17 	ldw	r3,-20(fp)
   4158c:	e0bffe17 	ldw	r2,-8(fp)
   41590:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41594:	0005303a 	rdctl	r2,status
   41598:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4159c:	e0fff817 	ldw	r3,-32(fp)
   415a0:	00bfff84 	movi	r2,-2
   415a4:	1884703a 	and	r2,r3,r2
   415a8:	1001703a 	wrctl	status,r2
  
  return context;
   415ac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   415b0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   415b4:	00800134 	movhi	r2,4
   415b8:	10960b04 	addi	r2,r2,22572
   415bc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   415c0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   415c4:	e0fffc17 	ldw	r3,-16(fp)
   415c8:	e0bff917 	ldw	r2,-28(fp)
   415cc:	1885883a 	add	r2,r3,r2
   415d0:	10c00044 	addi	r3,r2,1
   415d4:	e0bffb17 	ldw	r2,-20(fp)
   415d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   415dc:	e0bffb17 	ldw	r2,-20(fp)
   415e0:	10c00217 	ldw	r3,8(r2)
   415e4:	e0bff917 	ldw	r2,-28(fp)
   415e8:	1880042e 	bgeu	r3,r2,415fc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   415ec:	e0fffb17 	ldw	r3,-20(fp)
   415f0:	00800044 	movi	r2,1
   415f4:	18800405 	stb	r2,16(r3)
   415f8:	00000206 	br	41604 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   415fc:	e0bffb17 	ldw	r2,-20(fp)
   41600:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   41604:	e0fffb17 	ldw	r3,-20(fp)
   41608:	00800134 	movhi	r2,4
   4160c:	10907404 	addi	r2,r2,16848
   41610:	e0bff615 	stw	r2,-40(fp)
   41614:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41618:	e0fff717 	ldw	r3,-36(fp)
   4161c:	e0bff617 	ldw	r2,-40(fp)
   41620:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   41624:	e0bff617 	ldw	r2,-40(fp)
   41628:	10c00017 	ldw	r3,0(r2)
   4162c:	e0bff717 	ldw	r2,-36(fp)
   41630:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41634:	e0bff617 	ldw	r2,-40(fp)
   41638:	10c00017 	ldw	r3,0(r2)
   4163c:	e0bff717 	ldw	r2,-36(fp)
   41640:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   41644:	e0fff617 	ldw	r3,-40(fp)
   41648:	e0bff717 	ldw	r2,-36(fp)
   4164c:	18800015 	stw	r2,0(r3)
   41650:	e0bffa17 	ldw	r2,-24(fp)
   41654:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41658:	e0bff517 	ldw	r2,-44(fp)
   4165c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   41660:	e03fff15 	stw	zero,-4(fp)
   41664:	00000506 	br	4167c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   41668:	00bffa84 	movi	r2,-22
   4166c:	e0bfff15 	stw	r2,-4(fp)
   41670:	00000206 	br	4167c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   41674:	00bfde84 	movi	r2,-134
   41678:	e0bfff15 	stw	r2,-4(fp)
   4167c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   41680:	e037883a 	mov	sp,fp
   41684:	df000017 	ldw	fp,0(sp)
   41688:	dec00104 	addi	sp,sp,4
   4168c:	f800283a 	ret

00041690 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   41690:	defff804 	addi	sp,sp,-32
   41694:	dfc00715 	stw	ra,28(sp)
   41698:	df000615 	stw	fp,24(sp)
   4169c:	df000604 	addi	fp,sp,24
   416a0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   416a4:	e0bffc17 	ldw	r2,-16(fp)
   416a8:	1004803a 	cmplt	r2,r2,zero
   416ac:	1000081e 	bne	r2,zero,416d0 <close+0x40>
   416b0:	e0bffc17 	ldw	r2,-16(fp)
   416b4:	10800324 	muli	r2,r2,12
   416b8:	1007883a 	mov	r3,r2
   416bc:	00800134 	movhi	r2,4
   416c0:	108f0d04 	addi	r2,r2,15412
   416c4:	1887883a 	add	r3,r3,r2
   416c8:	e0ffff15 	stw	r3,-4(fp)
   416cc:	00000106 	br	416d4 <close+0x44>
   416d0:	e03fff15 	stw	zero,-4(fp)
   416d4:	e0bfff17 	ldw	r2,-4(fp)
   416d8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   416dc:	e0bffb17 	ldw	r2,-20(fp)
   416e0:	1005003a 	cmpeq	r2,r2,zero
   416e4:	10001d1e 	bne	r2,zero,4175c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   416e8:	e0bffb17 	ldw	r2,-20(fp)
   416ec:	10800017 	ldw	r2,0(r2)
   416f0:	10800417 	ldw	r2,16(r2)
   416f4:	1005003a 	cmpeq	r2,r2,zero
   416f8:	1000071e 	bne	r2,zero,41718 <close+0x88>
   416fc:	e0bffb17 	ldw	r2,-20(fp)
   41700:	10800017 	ldw	r2,0(r2)
   41704:	10800417 	ldw	r2,16(r2)
   41708:	e13ffb17 	ldw	r4,-20(fp)
   4170c:	103ee83a 	callr	r2
   41710:	e0bffe15 	stw	r2,-8(fp)
   41714:	00000106 	br	4171c <close+0x8c>
   41718:	e03ffe15 	stw	zero,-8(fp)
   4171c:	e0bffe17 	ldw	r2,-8(fp)
   41720:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   41724:	e13ffc17 	ldw	r4,-16(fp)
   41728:	00421340 	call	42134 <alt_release_fd>
    if (rval < 0)
   4172c:	e0bffa17 	ldw	r2,-24(fp)
   41730:	1004403a 	cmpge	r2,r2,zero
   41734:	1000071e 	bne	r2,zero,41754 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   41738:	004178c0 	call	4178c <alt_get_errno>
   4173c:	e0fffa17 	ldw	r3,-24(fp)
   41740:	00c7c83a 	sub	r3,zero,r3
   41744:	10c00015 	stw	r3,0(r2)
      return -1;
   41748:	00bfffc4 	movi	r2,-1
   4174c:	e0bffd15 	stw	r2,-12(fp)
   41750:	00000806 	br	41774 <close+0xe4>
    }
    return 0;
   41754:	e03ffd15 	stw	zero,-12(fp)
   41758:	00000606 	br	41774 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4175c:	004178c0 	call	4178c <alt_get_errno>
   41760:	1007883a 	mov	r3,r2
   41764:	00801444 	movi	r2,81
   41768:	18800015 	stw	r2,0(r3)
    return -1;
   4176c:	00bfffc4 	movi	r2,-1
   41770:	e0bffd15 	stw	r2,-12(fp)
   41774:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   41778:	e037883a 	mov	sp,fp
   4177c:	dfc00117 	ldw	ra,4(sp)
   41780:	df000017 	ldw	fp,0(sp)
   41784:	dec00204 	addi	sp,sp,8
   41788:	f800283a 	ret

0004178c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4178c:	defffd04 	addi	sp,sp,-12
   41790:	dfc00215 	stw	ra,8(sp)
   41794:	df000115 	stw	fp,4(sp)
   41798:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4179c:	00800134 	movhi	r2,4
   417a0:	10907304 	addi	r2,r2,16844
   417a4:	10800017 	ldw	r2,0(r2)
   417a8:	1005003a 	cmpeq	r2,r2,zero
   417ac:	1000061e 	bne	r2,zero,417c8 <alt_get_errno+0x3c>
   417b0:	00800134 	movhi	r2,4
   417b4:	10907304 	addi	r2,r2,16844
   417b8:	10800017 	ldw	r2,0(r2)
   417bc:	103ee83a 	callr	r2
   417c0:	e0bfff15 	stw	r2,-4(fp)
   417c4:	00000306 	br	417d4 <alt_get_errno+0x48>
   417c8:	00800134 	movhi	r2,4
   417cc:	10960c04 	addi	r2,r2,22576
   417d0:	e0bfff15 	stw	r2,-4(fp)
   417d4:	e0bfff17 	ldw	r2,-4(fp)
}
   417d8:	e037883a 	mov	sp,fp
   417dc:	dfc00117 	ldw	ra,4(sp)
   417e0:	df000017 	ldw	fp,0(sp)
   417e4:	dec00204 	addi	sp,sp,8
   417e8:	f800283a 	ret

000417ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   417ec:	defffe04 	addi	sp,sp,-8
   417f0:	df000115 	stw	fp,4(sp)
   417f4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   417f8:	e03fff15 	stw	zero,-4(fp)
   417fc:	00000506 	br	41814 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   41800:	e0bfff17 	ldw	r2,-4(fp)
   41804:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   41808:	e0bfff17 	ldw	r2,-4(fp)
   4180c:	10800804 	addi	r2,r2,32
   41810:	e0bfff15 	stw	r2,-4(fp)
   41814:	e0bfff17 	ldw	r2,-4(fp)
   41818:	10820030 	cmpltui	r2,r2,2048
   4181c:	103ff81e 	bne	r2,zero,41800 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   41820:	e037883a 	mov	sp,fp
   41824:	df000017 	ldw	fp,0(sp)
   41828:	dec00104 	addi	sp,sp,4
   4182c:	f800283a 	ret

00041830 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   41830:	defffc04 	addi	sp,sp,-16
   41834:	df000315 	stw	fp,12(sp)
   41838:	df000304 	addi	fp,sp,12
   4183c:	e13ffd15 	stw	r4,-12(fp)
   41840:	e17ffe15 	stw	r5,-8(fp)
   41844:	e1bfff15 	stw	r6,-4(fp)
  return len;
   41848:	e0bfff17 	ldw	r2,-4(fp)
}
   4184c:	e037883a 	mov	sp,fp
   41850:	df000017 	ldw	fp,0(sp)
   41854:	dec00104 	addi	sp,sp,4
   41858:	f800283a 	ret

0004185c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4185c:	defff904 	addi	sp,sp,-28
   41860:	dfc00615 	stw	ra,24(sp)
   41864:	df000515 	stw	fp,20(sp)
   41868:	df000504 	addi	fp,sp,20
   4186c:	e13ffd15 	stw	r4,-12(fp)
   41870:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   41874:	e0bffd17 	ldw	r2,-12(fp)
   41878:	1005003a 	cmpeq	r2,r2,zero
   4187c:	1000041e 	bne	r2,zero,41890 <alt_dev_llist_insert+0x34>
   41880:	e0bffd17 	ldw	r2,-12(fp)
   41884:	10800217 	ldw	r2,8(r2)
   41888:	1004c03a 	cmpne	r2,r2,zero
   4188c:	1000071e 	bne	r2,zero,418ac <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   41890:	00419100 	call	41910 <alt_get_errno>
   41894:	1007883a 	mov	r3,r2
   41898:	00800584 	movi	r2,22
   4189c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   418a0:	00bffa84 	movi	r2,-22
   418a4:	e0bfff15 	stw	r2,-4(fp)
   418a8:	00001306 	br	418f8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   418ac:	e0fffd17 	ldw	r3,-12(fp)
   418b0:	e0bffe17 	ldw	r2,-8(fp)
   418b4:	e0bffb15 	stw	r2,-20(fp)
   418b8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   418bc:	e0fffc17 	ldw	r3,-16(fp)
   418c0:	e0bffb17 	ldw	r2,-20(fp)
   418c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   418c8:	e0bffb17 	ldw	r2,-20(fp)
   418cc:	10c00017 	ldw	r3,0(r2)
   418d0:	e0bffc17 	ldw	r2,-16(fp)
   418d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   418d8:	e0bffb17 	ldw	r2,-20(fp)
   418dc:	10c00017 	ldw	r3,0(r2)
   418e0:	e0bffc17 	ldw	r2,-16(fp)
   418e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   418e8:	e0fffb17 	ldw	r3,-20(fp)
   418ec:	e0bffc17 	ldw	r2,-16(fp)
   418f0:	18800015 	stw	r2,0(r3)

  return 0;  
   418f4:	e03fff15 	stw	zero,-4(fp)
   418f8:	e0bfff17 	ldw	r2,-4(fp)
}
   418fc:	e037883a 	mov	sp,fp
   41900:	dfc00117 	ldw	ra,4(sp)
   41904:	df000017 	ldw	fp,0(sp)
   41908:	dec00204 	addi	sp,sp,8
   4190c:	f800283a 	ret

00041910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41910:	defffd04 	addi	sp,sp,-12
   41914:	dfc00215 	stw	ra,8(sp)
   41918:	df000115 	stw	fp,4(sp)
   4191c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   41920:	00800134 	movhi	r2,4
   41924:	10907304 	addi	r2,r2,16844
   41928:	10800017 	ldw	r2,0(r2)
   4192c:	1005003a 	cmpeq	r2,r2,zero
   41930:	1000061e 	bne	r2,zero,4194c <alt_get_errno+0x3c>
   41934:	00800134 	movhi	r2,4
   41938:	10907304 	addi	r2,r2,16844
   4193c:	10800017 	ldw	r2,0(r2)
   41940:	103ee83a 	callr	r2
   41944:	e0bfff15 	stw	r2,-4(fp)
   41948:	00000306 	br	41958 <alt_get_errno+0x48>
   4194c:	00800134 	movhi	r2,4
   41950:	10960c04 	addi	r2,r2,22576
   41954:	e0bfff15 	stw	r2,-4(fp)
   41958:	e0bfff17 	ldw	r2,-4(fp)
}
   4195c:	e037883a 	mov	sp,fp
   41960:	dfc00117 	ldw	ra,4(sp)
   41964:	df000017 	ldw	fp,0(sp)
   41968:	dec00204 	addi	sp,sp,8
   4196c:	f800283a 	ret

00041970 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   41970:	defffd04 	addi	sp,sp,-12
   41974:	dfc00215 	stw	ra,8(sp)
   41978:	df000115 	stw	fp,4(sp)
   4197c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   41980:	00bfff04 	movi	r2,-4
   41984:	00c00134 	movhi	r3,4
   41988:	18cadd04 	addi	r3,r3,11124
   4198c:	1885883a 	add	r2,r3,r2
   41990:	e0bfff15 	stw	r2,-4(fp)
   41994:	00000606 	br	419b0 <_do_ctors+0x40>
        (*ctor) (); 
   41998:	e0bfff17 	ldw	r2,-4(fp)
   4199c:	10800017 	ldw	r2,0(r2)
   419a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   419a4:	e0bfff17 	ldw	r2,-4(fp)
   419a8:	10bfff04 	addi	r2,r2,-4
   419ac:	e0bfff15 	stw	r2,-4(fp)
   419b0:	e0ffff17 	ldw	r3,-4(fp)
   419b4:	00800134 	movhi	r2,4
   419b8:	108adc04 	addi	r2,r2,11120
   419bc:	18bff62e 	bgeu	r3,r2,41998 <_do_ctors+0x28>
        (*ctor) (); 
}
   419c0:	e037883a 	mov	sp,fp
   419c4:	dfc00117 	ldw	ra,4(sp)
   419c8:	df000017 	ldw	fp,0(sp)
   419cc:	dec00204 	addi	sp,sp,8
   419d0:	f800283a 	ret

000419d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   419d4:	defffd04 	addi	sp,sp,-12
   419d8:	dfc00215 	stw	ra,8(sp)
   419dc:	df000115 	stw	fp,4(sp)
   419e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   419e4:	00bfff04 	movi	r2,-4
   419e8:	00c00134 	movhi	r3,4
   419ec:	18cadd04 	addi	r3,r3,11124
   419f0:	1885883a 	add	r2,r3,r2
   419f4:	e0bfff15 	stw	r2,-4(fp)
   419f8:	00000606 	br	41a14 <_do_dtors+0x40>
        (*dtor) (); 
   419fc:	e0bfff17 	ldw	r2,-4(fp)
   41a00:	10800017 	ldw	r2,0(r2)
   41a04:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41a08:	e0bfff17 	ldw	r2,-4(fp)
   41a0c:	10bfff04 	addi	r2,r2,-4
   41a10:	e0bfff15 	stw	r2,-4(fp)
   41a14:	e0ffff17 	ldw	r3,-4(fp)
   41a18:	00800134 	movhi	r2,4
   41a1c:	108add04 	addi	r2,r2,11124
   41a20:	18bff62e 	bgeu	r3,r2,419fc <_do_dtors+0x28>
        (*dtor) (); 
}
   41a24:	e037883a 	mov	sp,fp
   41a28:	dfc00117 	ldw	ra,4(sp)
   41a2c:	df000017 	ldw	fp,0(sp)
   41a30:	dec00204 	addi	sp,sp,8
   41a34:	f800283a 	ret

00041a38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   41a38:	defffe04 	addi	sp,sp,-8
   41a3c:	dfc00115 	stw	ra,4(sp)
   41a40:	df000015 	stw	fp,0(sp)
   41a44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   41a48:	0009883a 	mov	r4,zero
   41a4c:	01440004 	movi	r5,4096
   41a50:	00425c40 	call	425c4 <alt_icache_flush>
#endif
}
   41a54:	e037883a 	mov	sp,fp
   41a58:	dfc00117 	ldw	ra,4(sp)
   41a5c:	df000017 	ldw	fp,0(sp)
   41a60:	dec00204 	addi	sp,sp,8
   41a64:	f800283a 	ret

00041a68 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41a68:	defff904 	addi	sp,sp,-28
   41a6c:	dfc00615 	stw	ra,24(sp)
   41a70:	df000515 	stw	fp,20(sp)
   41a74:	df000504 	addi	fp,sp,20
   41a78:	e13ffc15 	stw	r4,-16(fp)
   41a7c:	e17ffd15 	stw	r5,-12(fp)
   41a80:	e1bffe15 	stw	r6,-8(fp)
   41a84:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   41a88:	e0800217 	ldw	r2,8(fp)
   41a8c:	d8800015 	stw	r2,0(sp)
   41a90:	e13ffc17 	ldw	r4,-16(fp)
   41a94:	e17ffd17 	ldw	r5,-12(fp)
   41a98:	e1bffe17 	ldw	r6,-8(fp)
   41a9c:	e1ffff17 	ldw	r7,-4(fp)
   41aa0:	0041c3c0 	call	41c3c <alt_iic_isr_register>
}  
   41aa4:	e037883a 	mov	sp,fp
   41aa8:	dfc00117 	ldw	ra,4(sp)
   41aac:	df000017 	ldw	fp,0(sp)
   41ab0:	dec00204 	addi	sp,sp,8
   41ab4:	f800283a 	ret

00041ab8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   41ab8:	defff904 	addi	sp,sp,-28
   41abc:	df000615 	stw	fp,24(sp)
   41ac0:	df000604 	addi	fp,sp,24
   41ac4:	e13ffe15 	stw	r4,-8(fp)
   41ac8:	e17fff15 	stw	r5,-4(fp)
   41acc:	e0bfff17 	ldw	r2,-4(fp)
   41ad0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41ad4:	0005303a 	rdctl	r2,status
   41ad8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41adc:	e0fffb17 	ldw	r3,-20(fp)
   41ae0:	00bfff84 	movi	r2,-2
   41ae4:	1884703a 	and	r2,r3,r2
   41ae8:	1001703a 	wrctl	status,r2
  
  return context;
   41aec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41af0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   41af4:	e0fffc17 	ldw	r3,-16(fp)
   41af8:	00800044 	movi	r2,1
   41afc:	10c4983a 	sll	r2,r2,r3
   41b00:	1007883a 	mov	r3,r2
   41b04:	00800134 	movhi	r2,4
   41b08:	10960604 	addi	r2,r2,22552
   41b0c:	10800017 	ldw	r2,0(r2)
   41b10:	1886b03a 	or	r3,r3,r2
   41b14:	00800134 	movhi	r2,4
   41b18:	10960604 	addi	r2,r2,22552
   41b1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41b20:	00800134 	movhi	r2,4
   41b24:	10960604 	addi	r2,r2,22552
   41b28:	10800017 	ldw	r2,0(r2)
   41b2c:	100170fa 	wrctl	ienable,r2
   41b30:	e0bffd17 	ldw	r2,-12(fp)
   41b34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41b38:	e0bffa17 	ldw	r2,-24(fp)
   41b3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   41b40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   41b44:	e037883a 	mov	sp,fp
   41b48:	df000017 	ldw	fp,0(sp)
   41b4c:	dec00104 	addi	sp,sp,4
   41b50:	f800283a 	ret

00041b54 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   41b54:	defff904 	addi	sp,sp,-28
   41b58:	df000615 	stw	fp,24(sp)
   41b5c:	df000604 	addi	fp,sp,24
   41b60:	e13ffe15 	stw	r4,-8(fp)
   41b64:	e17fff15 	stw	r5,-4(fp)
   41b68:	e0bfff17 	ldw	r2,-4(fp)
   41b6c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41b70:	0005303a 	rdctl	r2,status
   41b74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41b78:	e0fffb17 	ldw	r3,-20(fp)
   41b7c:	00bfff84 	movi	r2,-2
   41b80:	1884703a 	and	r2,r3,r2
   41b84:	1001703a 	wrctl	status,r2
  
  return context;
   41b88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41b8c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   41b90:	e0fffc17 	ldw	r3,-16(fp)
   41b94:	00800044 	movi	r2,1
   41b98:	10c4983a 	sll	r2,r2,r3
   41b9c:	0084303a 	nor	r2,zero,r2
   41ba0:	1007883a 	mov	r3,r2
   41ba4:	00800134 	movhi	r2,4
   41ba8:	10960604 	addi	r2,r2,22552
   41bac:	10800017 	ldw	r2,0(r2)
   41bb0:	1886703a 	and	r3,r3,r2
   41bb4:	00800134 	movhi	r2,4
   41bb8:	10960604 	addi	r2,r2,22552
   41bbc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41bc0:	00800134 	movhi	r2,4
   41bc4:	10960604 	addi	r2,r2,22552
   41bc8:	10800017 	ldw	r2,0(r2)
   41bcc:	100170fa 	wrctl	ienable,r2
   41bd0:	e0bffd17 	ldw	r2,-12(fp)
   41bd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41bd8:	e0bffa17 	ldw	r2,-24(fp)
   41bdc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   41be0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   41be4:	e037883a 	mov	sp,fp
   41be8:	df000017 	ldw	fp,0(sp)
   41bec:	dec00104 	addi	sp,sp,4
   41bf0:	f800283a 	ret

00041bf4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   41bf4:	defffc04 	addi	sp,sp,-16
   41bf8:	df000315 	stw	fp,12(sp)
   41bfc:	df000304 	addi	fp,sp,12
   41c00:	e13ffe15 	stw	r4,-8(fp)
   41c04:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   41c08:	000530fa 	rdctl	r2,ienable
   41c0c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   41c10:	e0ffff17 	ldw	r3,-4(fp)
   41c14:	00800044 	movi	r2,1
   41c18:	10c4983a 	sll	r2,r2,r3
   41c1c:	1007883a 	mov	r3,r2
   41c20:	e0bffd17 	ldw	r2,-12(fp)
   41c24:	1884703a 	and	r2,r3,r2
   41c28:	1004c03a 	cmpne	r2,r2,zero
}
   41c2c:	e037883a 	mov	sp,fp
   41c30:	df000017 	ldw	fp,0(sp)
   41c34:	dec00104 	addi	sp,sp,4
   41c38:	f800283a 	ret

00041c3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41c3c:	defff404 	addi	sp,sp,-48
   41c40:	dfc00b15 	stw	ra,44(sp)
   41c44:	df000a15 	stw	fp,40(sp)
   41c48:	df000a04 	addi	fp,sp,40
   41c4c:	e13ffb15 	stw	r4,-20(fp)
   41c50:	e17ffc15 	stw	r5,-16(fp)
   41c54:	e1bffd15 	stw	r6,-12(fp)
   41c58:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   41c5c:	00bffa84 	movi	r2,-22
   41c60:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   41c64:	e0bffc17 	ldw	r2,-16(fp)
   41c68:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   41c6c:	e0bff917 	ldw	r2,-28(fp)
   41c70:	10800808 	cmpgei	r2,r2,32
   41c74:	1000291e 	bne	r2,zero,41d1c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c78:	0005303a 	rdctl	r2,status
   41c7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c80:	e0fff717 	ldw	r3,-36(fp)
   41c84:	00bfff84 	movi	r2,-2
   41c88:	1884703a 	and	r2,r3,r2
   41c8c:	1001703a 	wrctl	status,r2
  
  return context;
   41c90:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   41c94:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   41c98:	e0bff917 	ldw	r2,-28(fp)
   41c9c:	00c00134 	movhi	r3,4
   41ca0:	18d60d04 	addi	r3,r3,22580
   41ca4:	100490fa 	slli	r2,r2,3
   41ca8:	10c7883a 	add	r3,r2,r3
   41cac:	e0bffd17 	ldw	r2,-12(fp)
   41cb0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   41cb4:	e0bff917 	ldw	r2,-28(fp)
   41cb8:	00c00134 	movhi	r3,4
   41cbc:	18d60d04 	addi	r3,r3,22580
   41cc0:	100490fa 	slli	r2,r2,3
   41cc4:	10c5883a 	add	r2,r2,r3
   41cc8:	10c00104 	addi	r3,r2,4
   41ccc:	e0bffe17 	ldw	r2,-8(fp)
   41cd0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   41cd4:	e0bffd17 	ldw	r2,-12(fp)
   41cd8:	1005003a 	cmpeq	r2,r2,zero
   41cdc:	1000051e 	bne	r2,zero,41cf4 <alt_iic_isr_register+0xb8>
   41ce0:	e17ff917 	ldw	r5,-28(fp)
   41ce4:	e13ffb17 	ldw	r4,-20(fp)
   41ce8:	0041ab80 	call	41ab8 <alt_ic_irq_enable>
   41cec:	e0bfff15 	stw	r2,-4(fp)
   41cf0:	00000406 	br	41d04 <alt_iic_isr_register+0xc8>
   41cf4:	e17ff917 	ldw	r5,-28(fp)
   41cf8:	e13ffb17 	ldw	r4,-20(fp)
   41cfc:	0041b540 	call	41b54 <alt_ic_irq_disable>
   41d00:	e0bfff15 	stw	r2,-4(fp)
   41d04:	e0bfff17 	ldw	r2,-4(fp)
   41d08:	e0bffa15 	stw	r2,-24(fp)
   41d0c:	e0bff817 	ldw	r2,-32(fp)
   41d10:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41d14:	e0bff617 	ldw	r2,-40(fp)
   41d18:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   41d1c:	e0bffa17 	ldw	r2,-24(fp)
}
   41d20:	e037883a 	mov	sp,fp
   41d24:	dfc00117 	ldw	ra,4(sp)
   41d28:	df000017 	ldw	fp,0(sp)
   41d2c:	dec00204 	addi	sp,sp,8
   41d30:	f800283a 	ret

00041d34 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   41d34:	defff904 	addi	sp,sp,-28
   41d38:	dfc00615 	stw	ra,24(sp)
   41d3c:	df000515 	stw	fp,20(sp)
   41d40:	df000504 	addi	fp,sp,20
   41d44:	e13ffc15 	stw	r4,-16(fp)
   41d48:	e17ffd15 	stw	r5,-12(fp)
   41d4c:	e1bffe15 	stw	r6,-8(fp)
   41d50:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   41d54:	e13ffd17 	ldw	r4,-12(fp)
   41d58:	e17ffe17 	ldw	r5,-8(fp)
   41d5c:	e1bfff17 	ldw	r6,-4(fp)
   41d60:	0041f4c0 	call	41f4c <open>
   41d64:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   41d68:	e0bffb17 	ldw	r2,-20(fp)
   41d6c:	1004803a 	cmplt	r2,r2,zero
   41d70:	10001c1e 	bne	r2,zero,41de4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   41d74:	e0bffb17 	ldw	r2,-20(fp)
   41d78:	00c00134 	movhi	r3,4
   41d7c:	18cf0d04 	addi	r3,r3,15412
   41d80:	10800324 	muli	r2,r2,12
   41d84:	10c5883a 	add	r2,r2,r3
   41d88:	10c00017 	ldw	r3,0(r2)
   41d8c:	e0bffc17 	ldw	r2,-16(fp)
   41d90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   41d94:	e0bffb17 	ldw	r2,-20(fp)
   41d98:	00c00134 	movhi	r3,4
   41d9c:	18cf0d04 	addi	r3,r3,15412
   41da0:	10800324 	muli	r2,r2,12
   41da4:	10c5883a 	add	r2,r2,r3
   41da8:	10800104 	addi	r2,r2,4
   41dac:	10c00017 	ldw	r3,0(r2)
   41db0:	e0bffc17 	ldw	r2,-16(fp)
   41db4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   41db8:	e0bffb17 	ldw	r2,-20(fp)
   41dbc:	00c00134 	movhi	r3,4
   41dc0:	18cf0d04 	addi	r3,r3,15412
   41dc4:	10800324 	muli	r2,r2,12
   41dc8:	10c5883a 	add	r2,r2,r3
   41dcc:	10800204 	addi	r2,r2,8
   41dd0:	10c00017 	ldw	r3,0(r2)
   41dd4:	e0bffc17 	ldw	r2,-16(fp)
   41dd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   41ddc:	e13ffb17 	ldw	r4,-20(fp)
   41de0:	00421340 	call	42134 <alt_release_fd>
  }
} 
   41de4:	e037883a 	mov	sp,fp
   41de8:	dfc00117 	ldw	ra,4(sp)
   41dec:	df000017 	ldw	fp,0(sp)
   41df0:	dec00204 	addi	sp,sp,8
   41df4:	f800283a 	ret

00041df8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   41df8:	defffb04 	addi	sp,sp,-20
   41dfc:	dfc00415 	stw	ra,16(sp)
   41e00:	df000315 	stw	fp,12(sp)
   41e04:	df000304 	addi	fp,sp,12
   41e08:	e13ffd15 	stw	r4,-12(fp)
   41e0c:	e17ffe15 	stw	r5,-8(fp)
   41e10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   41e14:	01000134 	movhi	r4,4
   41e18:	210f1004 	addi	r4,r4,15424
   41e1c:	e17ffd17 	ldw	r5,-12(fp)
   41e20:	01800044 	movi	r6,1
   41e24:	01c07fc4 	movi	r7,511
   41e28:	0041d340 	call	41d34 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   41e2c:	01000134 	movhi	r4,4
   41e30:	210f0d04 	addi	r4,r4,15412
   41e34:	e17ffe17 	ldw	r5,-8(fp)
   41e38:	000d883a 	mov	r6,zero
   41e3c:	01c07fc4 	movi	r7,511
   41e40:	0041d340 	call	41d34 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   41e44:	01000134 	movhi	r4,4
   41e48:	210f1304 	addi	r4,r4,15436
   41e4c:	e17fff17 	ldw	r5,-4(fp)
   41e50:	01800044 	movi	r6,1
   41e54:	01c07fc4 	movi	r7,511
   41e58:	0041d340 	call	41d34 <alt_open_fd>
}  
   41e5c:	e037883a 	mov	sp,fp
   41e60:	dfc00117 	ldw	ra,4(sp)
   41e64:	df000017 	ldw	fp,0(sp)
   41e68:	dec00204 	addi	sp,sp,8
   41e6c:	f800283a 	ret

00041e70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   41e70:	defffc04 	addi	sp,sp,-16
   41e74:	df000315 	stw	fp,12(sp)
   41e78:	df000304 	addi	fp,sp,12
   41e7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   41e80:	e0bffe17 	ldw	r2,-8(fp)
   41e84:	10800217 	ldw	r2,8(r2)
   41e88:	10d00034 	orhi	r3,r2,16384
   41e8c:	e0bffe17 	ldw	r2,-8(fp)
   41e90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   41e94:	e03ffd15 	stw	zero,-12(fp)
   41e98:	00002006 	br	41f1c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   41e9c:	e0bffd17 	ldw	r2,-12(fp)
   41ea0:	00c00134 	movhi	r3,4
   41ea4:	18cf0d04 	addi	r3,r3,15412
   41ea8:	10800324 	muli	r2,r2,12
   41eac:	10c5883a 	add	r2,r2,r3
   41eb0:	10c00017 	ldw	r3,0(r2)
   41eb4:	e0bffe17 	ldw	r2,-8(fp)
   41eb8:	10800017 	ldw	r2,0(r2)
   41ebc:	1880141e 	bne	r3,r2,41f10 <alt_file_locked+0xa0>
   41ec0:	e0bffd17 	ldw	r2,-12(fp)
   41ec4:	00c00134 	movhi	r3,4
   41ec8:	18cf0d04 	addi	r3,r3,15412
   41ecc:	10800324 	muli	r2,r2,12
   41ed0:	10c5883a 	add	r2,r2,r3
   41ed4:	10800204 	addi	r2,r2,8
   41ed8:	10800017 	ldw	r2,0(r2)
   41edc:	1004403a 	cmpge	r2,r2,zero
   41ee0:	10000b1e 	bne	r2,zero,41f10 <alt_file_locked+0xa0>
   41ee4:	e0bffd17 	ldw	r2,-12(fp)
   41ee8:	10800324 	muli	r2,r2,12
   41eec:	1007883a 	mov	r3,r2
   41ef0:	00800134 	movhi	r2,4
   41ef4:	108f0d04 	addi	r2,r2,15412
   41ef8:	1887883a 	add	r3,r3,r2
   41efc:	e0bffe17 	ldw	r2,-8(fp)
   41f00:	18800326 	beq	r3,r2,41f10 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   41f04:	00bffcc4 	movi	r2,-13
   41f08:	e0bfff15 	stw	r2,-4(fp)
   41f0c:	00000a06 	br	41f38 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   41f10:	e0bffd17 	ldw	r2,-12(fp)
   41f14:	10800044 	addi	r2,r2,1
   41f18:	e0bffd15 	stw	r2,-12(fp)
   41f1c:	00800134 	movhi	r2,4
   41f20:	10907204 	addi	r2,r2,16840
   41f24:	10800017 	ldw	r2,0(r2)
   41f28:	1007883a 	mov	r3,r2
   41f2c:	e0bffd17 	ldw	r2,-12(fp)
   41f30:	18bfda2e 	bgeu	r3,r2,41e9c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   41f34:	e03fff15 	stw	zero,-4(fp)
   41f38:	e0bfff17 	ldw	r2,-4(fp)
}
   41f3c:	e037883a 	mov	sp,fp
   41f40:	df000017 	ldw	fp,0(sp)
   41f44:	dec00104 	addi	sp,sp,4
   41f48:	f800283a 	ret

00041f4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   41f4c:	defff404 	addi	sp,sp,-48
   41f50:	dfc00b15 	stw	ra,44(sp)
   41f54:	df000a15 	stw	fp,40(sp)
   41f58:	df000a04 	addi	fp,sp,40
   41f5c:	e13ffb15 	stw	r4,-20(fp)
   41f60:	e17ffc15 	stw	r5,-16(fp)
   41f64:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   41f68:	00bfffc4 	movi	r2,-1
   41f6c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   41f70:	00bffb44 	movi	r2,-19
   41f74:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   41f78:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   41f7c:	e13ffb17 	ldw	r4,-20(fp)
   41f80:	01400134 	movhi	r5,4
   41f84:	29507004 	addi	r5,r5,16832
   41f88:	00423580 	call	42358 <alt_find_dev>
   41f8c:	e0bffa15 	stw	r2,-24(fp)
   41f90:	e0bffa17 	ldw	r2,-24(fp)
   41f94:	1004c03a 	cmpne	r2,r2,zero
   41f98:	1000051e 	bne	r2,zero,41fb0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   41f9c:	e13ffb17 	ldw	r4,-20(fp)
   41fa0:	00423ec0 	call	423ec <alt_find_file>
   41fa4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   41fa8:	00800044 	movi	r2,1
   41fac:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   41fb0:	e0bffa17 	ldw	r2,-24(fp)
   41fb4:	1005003a 	cmpeq	r2,r2,zero
   41fb8:	1000301e 	bne	r2,zero,4207c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   41fbc:	e13ffa17 	ldw	r4,-24(fp)
   41fc0:	004250c0 	call	4250c <alt_get_fd>
   41fc4:	e0bff815 	stw	r2,-32(fp)
   41fc8:	e0bff817 	ldw	r2,-32(fp)
   41fcc:	1004403a 	cmpge	r2,r2,zero
   41fd0:	1000031e 	bne	r2,zero,41fe0 <open+0x94>
    {
      status = index;
   41fd4:	e0bff817 	ldw	r2,-32(fp)
   41fd8:	e0bff715 	stw	r2,-36(fp)
   41fdc:	00002906 	br	42084 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   41fe0:	e0bff817 	ldw	r2,-32(fp)
   41fe4:	10800324 	muli	r2,r2,12
   41fe8:	1007883a 	mov	r3,r2
   41fec:	00800134 	movhi	r2,4
   41ff0:	108f0d04 	addi	r2,r2,15412
   41ff4:	1885883a 	add	r2,r3,r2
   41ff8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   41ffc:	e0fffc17 	ldw	r3,-16(fp)
   42000:	00900034 	movhi	r2,16384
   42004:	10bfffc4 	addi	r2,r2,-1
   42008:	1886703a 	and	r3,r3,r2
   4200c:	e0bff917 	ldw	r2,-28(fp)
   42010:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   42014:	e0bff617 	ldw	r2,-40(fp)
   42018:	1004c03a 	cmpne	r2,r2,zero
   4201c:	1000061e 	bne	r2,zero,42038 <open+0xec>
   42020:	e13ff917 	ldw	r4,-28(fp)
   42024:	0041e700 	call	41e70 <alt_file_locked>
   42028:	e0bff715 	stw	r2,-36(fp)
   4202c:	e0bff717 	ldw	r2,-36(fp)
   42030:	1004803a 	cmplt	r2,r2,zero
   42034:	1000131e 	bne	r2,zero,42084 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   42038:	e0bffa17 	ldw	r2,-24(fp)
   4203c:	10800317 	ldw	r2,12(r2)
   42040:	1005003a 	cmpeq	r2,r2,zero
   42044:	1000091e 	bne	r2,zero,4206c <open+0x120>
   42048:	e0bffa17 	ldw	r2,-24(fp)
   4204c:	10800317 	ldw	r2,12(r2)
   42050:	e13ff917 	ldw	r4,-28(fp)
   42054:	e17ffb17 	ldw	r5,-20(fp)
   42058:	e1bffc17 	ldw	r6,-16(fp)
   4205c:	e1fffd17 	ldw	r7,-12(fp)
   42060:	103ee83a 	callr	r2
   42064:	e0bfff15 	stw	r2,-4(fp)
   42068:	00000106 	br	42070 <open+0x124>
   4206c:	e03fff15 	stw	zero,-4(fp)
   42070:	e0bfff17 	ldw	r2,-4(fp)
   42074:	e0bff715 	stw	r2,-36(fp)
   42078:	00000206 	br	42084 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4207c:	00bffb44 	movi	r2,-19
   42080:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   42084:	e0bff717 	ldw	r2,-36(fp)
   42088:	1004403a 	cmpge	r2,r2,zero
   4208c:	1000091e 	bne	r2,zero,420b4 <open+0x168>
  {
    alt_release_fd (index);  
   42090:	e13ff817 	ldw	r4,-32(fp)
   42094:	00421340 	call	42134 <alt_release_fd>
    ALT_ERRNO = -status;
   42098:	00420d40 	call	420d4 <alt_get_errno>
   4209c:	e0fff717 	ldw	r3,-36(fp)
   420a0:	00c7c83a 	sub	r3,zero,r3
   420a4:	10c00015 	stw	r3,0(r2)
    return -1;
   420a8:	00bfffc4 	movi	r2,-1
   420ac:	e0bffe15 	stw	r2,-8(fp)
   420b0:	00000206 	br	420bc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   420b4:	e0bff817 	ldw	r2,-32(fp)
   420b8:	e0bffe15 	stw	r2,-8(fp)
   420bc:	e0bffe17 	ldw	r2,-8(fp)
}
   420c0:	e037883a 	mov	sp,fp
   420c4:	dfc00117 	ldw	ra,4(sp)
   420c8:	df000017 	ldw	fp,0(sp)
   420cc:	dec00204 	addi	sp,sp,8
   420d0:	f800283a 	ret

000420d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   420d4:	defffd04 	addi	sp,sp,-12
   420d8:	dfc00215 	stw	ra,8(sp)
   420dc:	df000115 	stw	fp,4(sp)
   420e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   420e4:	00800134 	movhi	r2,4
   420e8:	10907304 	addi	r2,r2,16844
   420ec:	10800017 	ldw	r2,0(r2)
   420f0:	1005003a 	cmpeq	r2,r2,zero
   420f4:	1000061e 	bne	r2,zero,42110 <alt_get_errno+0x3c>
   420f8:	00800134 	movhi	r2,4
   420fc:	10907304 	addi	r2,r2,16844
   42100:	10800017 	ldw	r2,0(r2)
   42104:	103ee83a 	callr	r2
   42108:	e0bfff15 	stw	r2,-4(fp)
   4210c:	00000306 	br	4211c <alt_get_errno+0x48>
   42110:	00800134 	movhi	r2,4
   42114:	10960c04 	addi	r2,r2,22576
   42118:	e0bfff15 	stw	r2,-4(fp)
   4211c:	e0bfff17 	ldw	r2,-4(fp)
}
   42120:	e037883a 	mov	sp,fp
   42124:	dfc00117 	ldw	ra,4(sp)
   42128:	df000017 	ldw	fp,0(sp)
   4212c:	dec00204 	addi	sp,sp,8
   42130:	f800283a 	ret

00042134 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   42134:	defffe04 	addi	sp,sp,-8
   42138:	df000115 	stw	fp,4(sp)
   4213c:	df000104 	addi	fp,sp,4
   42140:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   42144:	e0bfff17 	ldw	r2,-4(fp)
   42148:	108000d0 	cmplti	r2,r2,3
   4214c:	10000d1e 	bne	r2,zero,42184 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   42150:	e0bfff17 	ldw	r2,-4(fp)
   42154:	00c00134 	movhi	r3,4
   42158:	18cf0d04 	addi	r3,r3,15412
   4215c:	10800324 	muli	r2,r2,12
   42160:	10c5883a 	add	r2,r2,r3
   42164:	10800204 	addi	r2,r2,8
   42168:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4216c:	e0bfff17 	ldw	r2,-4(fp)
   42170:	00c00134 	movhi	r3,4
   42174:	18cf0d04 	addi	r3,r3,15412
   42178:	10800324 	muli	r2,r2,12
   4217c:	10c5883a 	add	r2,r2,r3
   42180:	10000015 	stw	zero,0(r2)
  }
}
   42184:	e037883a 	mov	sp,fp
   42188:	df000017 	ldw	fp,0(sp)
   4218c:	dec00104 	addi	sp,sp,4
   42190:	f800283a 	ret

00042194 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   42194:	defffa04 	addi	sp,sp,-24
   42198:	df000515 	stw	fp,20(sp)
   4219c:	df000504 	addi	fp,sp,20
   421a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   421a4:	0005303a 	rdctl	r2,status
   421a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   421ac:	e0fffd17 	ldw	r3,-12(fp)
   421b0:	00bfff84 	movi	r2,-2
   421b4:	1884703a 	and	r2,r3,r2
   421b8:	1001703a 	wrctl	status,r2
  
  return context;
   421bc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   421c0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   421c4:	e0bfff17 	ldw	r2,-4(fp)
   421c8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   421cc:	e0bffc17 	ldw	r2,-16(fp)
   421d0:	10c00017 	ldw	r3,0(r2)
   421d4:	e0bffc17 	ldw	r2,-16(fp)
   421d8:	10800117 	ldw	r2,4(r2)
   421dc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   421e0:	e0bffc17 	ldw	r2,-16(fp)
   421e4:	10c00117 	ldw	r3,4(r2)
   421e8:	e0bffc17 	ldw	r2,-16(fp)
   421ec:	10800017 	ldw	r2,0(r2)
   421f0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   421f4:	e0fffc17 	ldw	r3,-16(fp)
   421f8:	e0bffc17 	ldw	r2,-16(fp)
   421fc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   42200:	e0fffc17 	ldw	r3,-16(fp)
   42204:	e0bffc17 	ldw	r2,-16(fp)
   42208:	18800015 	stw	r2,0(r3)
   4220c:	e0bffe17 	ldw	r2,-8(fp)
   42210:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42214:	e0bffb17 	ldw	r2,-20(fp)
   42218:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4221c:	e037883a 	mov	sp,fp
   42220:	df000017 	ldw	fp,0(sp)
   42224:	dec00104 	addi	sp,sp,4
   42228:	f800283a 	ret

0004222c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4222c:	defffb04 	addi	sp,sp,-20
   42230:	dfc00415 	stw	ra,16(sp)
   42234:	df000315 	stw	fp,12(sp)
   42238:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4223c:	d0a00717 	ldw	r2,-32740(gp)
   42240:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   42244:	d0a59e17 	ldw	r2,-27016(gp)
   42248:	10800044 	addi	r2,r2,1
   4224c:	d0a59e15 	stw	r2,-27016(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42250:	00003106 	br	42318 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   42254:	e0bffe17 	ldw	r2,-8(fp)
   42258:	10800017 	ldw	r2,0(r2)
   4225c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   42260:	e0bffe17 	ldw	r2,-8(fp)
   42264:	10800403 	ldbu	r2,16(r2)
   42268:	10803fcc 	andi	r2,r2,255
   4226c:	1005003a 	cmpeq	r2,r2,zero
   42270:	1000051e 	bne	r2,zero,42288 <alt_tick+0x5c>
   42274:	d0a59e17 	ldw	r2,-27016(gp)
   42278:	1004c03a 	cmpne	r2,r2,zero
   4227c:	1000021e 	bne	r2,zero,42288 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   42280:	e0bffe17 	ldw	r2,-8(fp)
   42284:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   42288:	e0bffe17 	ldw	r2,-8(fp)
   4228c:	10c00217 	ldw	r3,8(r2)
   42290:	d0a59e17 	ldw	r2,-27016(gp)
   42294:	10c01e36 	bltu	r2,r3,42310 <alt_tick+0xe4>
   42298:	e0bffe17 	ldw	r2,-8(fp)
   4229c:	10800403 	ldbu	r2,16(r2)
   422a0:	10803fcc 	andi	r2,r2,255
   422a4:	1004c03a 	cmpne	r2,r2,zero
   422a8:	1000191e 	bne	r2,zero,42310 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   422ac:	e0bffe17 	ldw	r2,-8(fp)
   422b0:	10c00317 	ldw	r3,12(r2)
   422b4:	e0bffe17 	ldw	r2,-8(fp)
   422b8:	11000517 	ldw	r4,20(r2)
   422bc:	183ee83a 	callr	r3
   422c0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   422c4:	e0bffd17 	ldw	r2,-12(fp)
   422c8:	1004c03a 	cmpne	r2,r2,zero
   422cc:	1000031e 	bne	r2,zero,422dc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   422d0:	e13ffe17 	ldw	r4,-8(fp)
   422d4:	00421940 	call	42194 <alt_alarm_stop>
   422d8:	00000d06 	br	42310 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   422dc:	e0bffe17 	ldw	r2,-8(fp)
   422e0:	10c00217 	ldw	r3,8(r2)
   422e4:	e0bffd17 	ldw	r2,-12(fp)
   422e8:	1887883a 	add	r3,r3,r2
   422ec:	e0bffe17 	ldw	r2,-8(fp)
   422f0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   422f4:	e0bffe17 	ldw	r2,-8(fp)
   422f8:	10c00217 	ldw	r3,8(r2)
   422fc:	d0a59e17 	ldw	r2,-27016(gp)
   42300:	1880032e 	bgeu	r3,r2,42310 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   42304:	e0fffe17 	ldw	r3,-8(fp)
   42308:	00800044 	movi	r2,1
   4230c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   42310:	e0bfff17 	ldw	r2,-4(fp)
   42314:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42318:	d0e00704 	addi	r3,gp,-32740
   4231c:	e0bffe17 	ldw	r2,-8(fp)
   42320:	10ffcc1e 	bne	r2,r3,42254 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   42324:	e037883a 	mov	sp,fp
   42328:	dfc00117 	ldw	ra,4(sp)
   4232c:	df000017 	ldw	fp,0(sp)
   42330:	dec00204 	addi	sp,sp,8
   42334:	f800283a 	ret

00042338 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   42338:	deffff04 	addi	sp,sp,-4
   4233c:	df000015 	stw	fp,0(sp)
   42340:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   42344:	000170fa 	wrctl	ienable,zero
}
   42348:	e037883a 	mov	sp,fp
   4234c:	df000017 	ldw	fp,0(sp)
   42350:	dec00104 	addi	sp,sp,4
   42354:	f800283a 	ret

00042358 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   42358:	defff904 	addi	sp,sp,-28
   4235c:	dfc00615 	stw	ra,24(sp)
   42360:	df000515 	stw	fp,20(sp)
   42364:	df000504 	addi	fp,sp,20
   42368:	e13ffd15 	stw	r4,-12(fp)
   4236c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   42370:	e0bffe17 	ldw	r2,-8(fp)
   42374:	10800017 	ldw	r2,0(r2)
   42378:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4237c:	e13ffd17 	ldw	r4,-12(fp)
   42380:	00427b40 	call	427b4 <strlen>
   42384:	10800044 	addi	r2,r2,1
   42388:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4238c:	00000d06 	br	423c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   42390:	e0bffc17 	ldw	r2,-16(fp)
   42394:	11000217 	ldw	r4,8(r2)
   42398:	e1bffb17 	ldw	r6,-20(fp)
   4239c:	e17ffd17 	ldw	r5,-12(fp)
   423a0:	00426a00 	call	426a0 <memcmp>
   423a4:	1004c03a 	cmpne	r2,r2,zero
   423a8:	1000031e 	bne	r2,zero,423b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   423ac:	e0bffc17 	ldw	r2,-16(fp)
   423b0:	e0bfff15 	stw	r2,-4(fp)
   423b4:	00000706 	br	423d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   423b8:	e0bffc17 	ldw	r2,-16(fp)
   423bc:	10800017 	ldw	r2,0(r2)
   423c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   423c4:	e0fffe17 	ldw	r3,-8(fp)
   423c8:	e0bffc17 	ldw	r2,-16(fp)
   423cc:	10fff01e 	bne	r2,r3,42390 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   423d0:	e03fff15 	stw	zero,-4(fp)
   423d4:	e0bfff17 	ldw	r2,-4(fp)
}
   423d8:	e037883a 	mov	sp,fp
   423dc:	dfc00117 	ldw	ra,4(sp)
   423e0:	df000017 	ldw	fp,0(sp)
   423e4:	dec00204 	addi	sp,sp,8
   423e8:	f800283a 	ret

000423ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   423ec:	defffa04 	addi	sp,sp,-24
   423f0:	dfc00515 	stw	ra,20(sp)
   423f4:	df000415 	stw	fp,16(sp)
   423f8:	df000404 	addi	fp,sp,16
   423fc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   42400:	00800134 	movhi	r2,4
   42404:	10906e04 	addi	r2,r2,16824
   42408:	10800017 	ldw	r2,0(r2)
   4240c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42410:	00003306 	br	424e0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   42414:	e0bffd17 	ldw	r2,-12(fp)
   42418:	11000217 	ldw	r4,8(r2)
   4241c:	00427b40 	call	427b4 <strlen>
   42420:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   42424:	e0bffd17 	ldw	r2,-12(fp)
   42428:	10c00217 	ldw	r3,8(r2)
   4242c:	e0bffc17 	ldw	r2,-16(fp)
   42430:	1885883a 	add	r2,r3,r2
   42434:	10bfffc4 	addi	r2,r2,-1
   42438:	10800003 	ldbu	r2,0(r2)
   4243c:	10803fcc 	andi	r2,r2,255
   42440:	1080201c 	xori	r2,r2,128
   42444:	10bfe004 	addi	r2,r2,-128
   42448:	10800bd8 	cmpnei	r2,r2,47
   4244c:	1000031e 	bne	r2,zero,4245c <alt_find_file+0x70>
    {
      len -= 1;
   42450:	e0bffc17 	ldw	r2,-16(fp)
   42454:	10bfffc4 	addi	r2,r2,-1
   42458:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4245c:	e0bffc17 	ldw	r2,-16(fp)
   42460:	1007883a 	mov	r3,r2
   42464:	e0bffe17 	ldw	r2,-8(fp)
   42468:	1885883a 	add	r2,r3,r2
   4246c:	10800003 	ldbu	r2,0(r2)
   42470:	10803fcc 	andi	r2,r2,255
   42474:	1080201c 	xori	r2,r2,128
   42478:	10bfe004 	addi	r2,r2,-128
   4247c:	10800be0 	cmpeqi	r2,r2,47
   42480:	10000a1e 	bne	r2,zero,424ac <alt_find_file+0xc0>
   42484:	e0bffc17 	ldw	r2,-16(fp)
   42488:	1007883a 	mov	r3,r2
   4248c:	e0bffe17 	ldw	r2,-8(fp)
   42490:	1885883a 	add	r2,r3,r2
   42494:	10800003 	ldbu	r2,0(r2)
   42498:	10803fcc 	andi	r2,r2,255
   4249c:	1080201c 	xori	r2,r2,128
   424a0:	10bfe004 	addi	r2,r2,-128
   424a4:	1004c03a 	cmpne	r2,r2,zero
   424a8:	10000a1e 	bne	r2,zero,424d4 <alt_find_file+0xe8>
   424ac:	e0bffd17 	ldw	r2,-12(fp)
   424b0:	11000217 	ldw	r4,8(r2)
   424b4:	e1bffc17 	ldw	r6,-16(fp)
   424b8:	e17ffe17 	ldw	r5,-8(fp)
   424bc:	00426a00 	call	426a0 <memcmp>
   424c0:	1004c03a 	cmpne	r2,r2,zero
   424c4:	1000031e 	bne	r2,zero,424d4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   424c8:	e0bffd17 	ldw	r2,-12(fp)
   424cc:	e0bfff15 	stw	r2,-4(fp)
   424d0:	00000806 	br	424f4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   424d4:	e0bffd17 	ldw	r2,-12(fp)
   424d8:	10800017 	ldw	r2,0(r2)
   424dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   424e0:	00c00134 	movhi	r3,4
   424e4:	18d06e04 	addi	r3,r3,16824
   424e8:	e0bffd17 	ldw	r2,-12(fp)
   424ec:	10ffc91e 	bne	r2,r3,42414 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   424f0:	e03fff15 	stw	zero,-4(fp)
   424f4:	e0bfff17 	ldw	r2,-4(fp)
}
   424f8:	e037883a 	mov	sp,fp
   424fc:	dfc00117 	ldw	ra,4(sp)
   42500:	df000017 	ldw	fp,0(sp)
   42504:	dec00204 	addi	sp,sp,8
   42508:	f800283a 	ret

0004250c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4250c:	defffc04 	addi	sp,sp,-16
   42510:	df000315 	stw	fp,12(sp)
   42514:	df000304 	addi	fp,sp,12
   42518:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4251c:	00bffa04 	movi	r2,-24
   42520:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42524:	e03ffe15 	stw	zero,-8(fp)
   42528:	00001e06 	br	425a4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4252c:	e0bffe17 	ldw	r2,-8(fp)
   42530:	00c00134 	movhi	r3,4
   42534:	18cf0d04 	addi	r3,r3,15412
   42538:	10800324 	muli	r2,r2,12
   4253c:	10c5883a 	add	r2,r2,r3
   42540:	10800017 	ldw	r2,0(r2)
   42544:	1004c03a 	cmpne	r2,r2,zero
   42548:	1000131e 	bne	r2,zero,42598 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4254c:	e0bffe17 	ldw	r2,-8(fp)
   42550:	00c00134 	movhi	r3,4
   42554:	18cf0d04 	addi	r3,r3,15412
   42558:	10800324 	muli	r2,r2,12
   4255c:	10c7883a 	add	r3,r2,r3
   42560:	e0bfff17 	ldw	r2,-4(fp)
   42564:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   42568:	00800134 	movhi	r2,4
   4256c:	10907204 	addi	r2,r2,16840
   42570:	10c00017 	ldw	r3,0(r2)
   42574:	e0bffe17 	ldw	r2,-8(fp)
   42578:	1880040e 	bge	r3,r2,4258c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4257c:	00c00134 	movhi	r3,4
   42580:	18d07204 	addi	r3,r3,16840
   42584:	e0bffe17 	ldw	r2,-8(fp)
   42588:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4258c:	e0bffe17 	ldw	r2,-8(fp)
   42590:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   42594:	00000606 	br	425b0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42598:	e0bffe17 	ldw	r2,-8(fp)
   4259c:	10800044 	addi	r2,r2,1
   425a0:	e0bffe15 	stw	r2,-8(fp)
   425a4:	e0bffe17 	ldw	r2,-8(fp)
   425a8:	10800810 	cmplti	r2,r2,32
   425ac:	103fdf1e 	bne	r2,zero,4252c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   425b0:	e0bffd17 	ldw	r2,-12(fp)
}
   425b4:	e037883a 	mov	sp,fp
   425b8:	df000017 	ldw	fp,0(sp)
   425bc:	dec00104 	addi	sp,sp,4
   425c0:	f800283a 	ret

000425c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   425c4:	defffb04 	addi	sp,sp,-20
   425c8:	df000415 	stw	fp,16(sp)
   425cc:	df000404 	addi	fp,sp,16
   425d0:	e13ffe15 	stw	r4,-8(fp)
   425d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   425d8:	e0bfff17 	ldw	r2,-4(fp)
   425dc:	10840070 	cmpltui	r2,r2,4097
   425e0:	1000021e 	bne	r2,zero,425ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   425e4:	00840004 	movi	r2,4096
   425e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   425ec:	e0fffe17 	ldw	r3,-8(fp)
   425f0:	e0bfff17 	ldw	r2,-4(fp)
   425f4:	1885883a 	add	r2,r3,r2
   425f8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   425fc:	e0bffe17 	ldw	r2,-8(fp)
   42600:	e0bffd15 	stw	r2,-12(fp)
   42604:	00000506 	br	4261c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   42608:	e0bffd17 	ldw	r2,-12(fp)
   4260c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   42610:	e0bffd17 	ldw	r2,-12(fp)
   42614:	10800804 	addi	r2,r2,32
   42618:	e0bffd15 	stw	r2,-12(fp)
   4261c:	e0fffd17 	ldw	r3,-12(fp)
   42620:	e0bffc17 	ldw	r2,-16(fp)
   42624:	18bff836 	bltu	r3,r2,42608 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   42628:	e0bffe17 	ldw	r2,-8(fp)
   4262c:	108007cc 	andi	r2,r2,31
   42630:	1005003a 	cmpeq	r2,r2,zero
   42634:	1000021e 	bne	r2,zero,42640 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   42638:	e0bffd17 	ldw	r2,-12(fp)
   4263c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   42640:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   42644:	e037883a 	mov	sp,fp
   42648:	df000017 	ldw	fp,0(sp)
   4264c:	dec00104 	addi	sp,sp,4
   42650:	f800283a 	ret

00042654 <atexit>:
   42654:	200b883a 	mov	r5,r4
   42658:	000d883a 	mov	r6,zero
   4265c:	0009883a 	mov	r4,zero
   42660:	000f883a 	mov	r7,zero
   42664:	00428281 	jmpi	42828 <__register_exitproc>

00042668 <exit>:
   42668:	defffe04 	addi	sp,sp,-8
   4266c:	000b883a 	mov	r5,zero
   42670:	dc000015 	stw	r16,0(sp)
   42674:	dfc00115 	stw	ra,4(sp)
   42678:	2021883a 	mov	r16,r4
   4267c:	00429600 	call	42960 <__call_exitprocs>
   42680:	00800134 	movhi	r2,4
   42684:	10907704 	addi	r2,r2,16860
   42688:	11000017 	ldw	r4,0(r2)
   4268c:	20800f17 	ldw	r2,60(r4)
   42690:	10000126 	beq	r2,zero,42698 <exit+0x30>
   42694:	103ee83a 	callr	r2
   42698:	8009883a 	mov	r4,r16
   4269c:	0042b500 	call	42b50 <_exit>

000426a0 <memcmp>:
   426a0:	00c000c4 	movi	r3,3
   426a4:	1980032e 	bgeu	r3,r6,426b4 <memcmp+0x14>
   426a8:	2144b03a 	or	r2,r4,r5
   426ac:	10c4703a 	and	r2,r2,r3
   426b0:	10000f26 	beq	r2,zero,426f0 <memcmp+0x50>
   426b4:	31ffffc4 	addi	r7,r6,-1
   426b8:	3000061e 	bne	r6,zero,426d4 <memcmp+0x34>
   426bc:	00000a06 	br	426e8 <memcmp+0x48>
   426c0:	39ffffc4 	addi	r7,r7,-1
   426c4:	00bfffc4 	movi	r2,-1
   426c8:	21000044 	addi	r4,r4,1
   426cc:	29400044 	addi	r5,r5,1
   426d0:	38800526 	beq	r7,r2,426e8 <memcmp+0x48>
   426d4:	20c00003 	ldbu	r3,0(r4)
   426d8:	28800003 	ldbu	r2,0(r5)
   426dc:	18bff826 	beq	r3,r2,426c0 <memcmp+0x20>
   426e0:	1885c83a 	sub	r2,r3,r2
   426e4:	f800283a 	ret
   426e8:	0005883a 	mov	r2,zero
   426ec:	f800283a 	ret
   426f0:	180f883a 	mov	r7,r3
   426f4:	20c00017 	ldw	r3,0(r4)
   426f8:	28800017 	ldw	r2,0(r5)
   426fc:	18bfed1e 	bne	r3,r2,426b4 <memcmp+0x14>
   42700:	31bfff04 	addi	r6,r6,-4
   42704:	21000104 	addi	r4,r4,4
   42708:	29400104 	addi	r5,r5,4
   4270c:	39bff936 	bltu	r7,r6,426f4 <memcmp+0x54>
   42710:	003fe806 	br	426b4 <memcmp+0x14>

00042714 <memcpy>:
   42714:	01c003c4 	movi	r7,15
   42718:	2007883a 	mov	r3,r4
   4271c:	3980032e 	bgeu	r7,r6,4272c <memcpy+0x18>
   42720:	2904b03a 	or	r2,r5,r4
   42724:	108000cc 	andi	r2,r2,3
   42728:	10000926 	beq	r2,zero,42750 <memcpy+0x3c>
   4272c:	30000626 	beq	r6,zero,42748 <memcpy+0x34>
   42730:	30cd883a 	add	r6,r6,r3
   42734:	28800003 	ldbu	r2,0(r5)
   42738:	29400044 	addi	r5,r5,1
   4273c:	18800005 	stb	r2,0(r3)
   42740:	18c00044 	addi	r3,r3,1
   42744:	30fffb1e 	bne	r6,r3,42734 <memcpy+0x20>
   42748:	2005883a 	mov	r2,r4
   4274c:	f800283a 	ret
   42750:	3811883a 	mov	r8,r7
   42754:	200f883a 	mov	r7,r4
   42758:	28c00017 	ldw	r3,0(r5)
   4275c:	31bffc04 	addi	r6,r6,-16
   42760:	38c00015 	stw	r3,0(r7)
   42764:	28800117 	ldw	r2,4(r5)
   42768:	38800115 	stw	r2,4(r7)
   4276c:	28c00217 	ldw	r3,8(r5)
   42770:	38c00215 	stw	r3,8(r7)
   42774:	28800317 	ldw	r2,12(r5)
   42778:	29400404 	addi	r5,r5,16
   4277c:	38800315 	stw	r2,12(r7)
   42780:	39c00404 	addi	r7,r7,16
   42784:	41bff436 	bltu	r8,r6,42758 <memcpy+0x44>
   42788:	008000c4 	movi	r2,3
   4278c:	1180072e 	bgeu	r2,r6,427ac <memcpy+0x98>
   42790:	1007883a 	mov	r3,r2
   42794:	28800017 	ldw	r2,0(r5)
   42798:	31bfff04 	addi	r6,r6,-4
   4279c:	29400104 	addi	r5,r5,4
   427a0:	38800015 	stw	r2,0(r7)
   427a4:	39c00104 	addi	r7,r7,4
   427a8:	19bffa36 	bltu	r3,r6,42794 <memcpy+0x80>
   427ac:	3807883a 	mov	r3,r7
   427b0:	003fde06 	br	4272c <memcpy+0x18>

000427b4 <strlen>:
   427b4:	208000cc 	andi	r2,r4,3
   427b8:	2011883a 	mov	r8,r4
   427bc:	1000161e 	bne	r2,zero,42818 <strlen+0x64>
   427c0:	20c00017 	ldw	r3,0(r4)
   427c4:	017fbff4 	movhi	r5,65279
   427c8:	297fbfc4 	addi	r5,r5,-257
   427cc:	01e02074 	movhi	r7,32897
   427d0:	39e02004 	addi	r7,r7,-32640
   427d4:	1945883a 	add	r2,r3,r5
   427d8:	11c4703a 	and	r2,r2,r7
   427dc:	00c6303a 	nor	r3,zero,r3
   427e0:	1886703a 	and	r3,r3,r2
   427e4:	18000c1e 	bne	r3,zero,42818 <strlen+0x64>
   427e8:	280d883a 	mov	r6,r5
   427ec:	380b883a 	mov	r5,r7
   427f0:	21000104 	addi	r4,r4,4
   427f4:	20800017 	ldw	r2,0(r4)
   427f8:	1187883a 	add	r3,r2,r6
   427fc:	1946703a 	and	r3,r3,r5
   42800:	0084303a 	nor	r2,zero,r2
   42804:	10c4703a 	and	r2,r2,r3
   42808:	103ff926 	beq	r2,zero,427f0 <strlen+0x3c>
   4280c:	20800007 	ldb	r2,0(r4)
   42810:	10000326 	beq	r2,zero,42820 <strlen+0x6c>
   42814:	21000044 	addi	r4,r4,1
   42818:	20800007 	ldb	r2,0(r4)
   4281c:	103ffd1e 	bne	r2,zero,42814 <strlen+0x60>
   42820:	2205c83a 	sub	r2,r4,r8
   42824:	f800283a 	ret

00042828 <__register_exitproc>:
   42828:	defffa04 	addi	sp,sp,-24
   4282c:	00800134 	movhi	r2,4
   42830:	10907704 	addi	r2,r2,16860
   42834:	dc000015 	stw	r16,0(sp)
   42838:	14000017 	ldw	r16,0(r2)
   4283c:	dd000415 	stw	r20,16(sp)
   42840:	2829883a 	mov	r20,r5
   42844:	81405217 	ldw	r5,328(r16)
   42848:	dcc00315 	stw	r19,12(sp)
   4284c:	dc800215 	stw	r18,8(sp)
   42850:	dc400115 	stw	r17,4(sp)
   42854:	dfc00515 	stw	ra,20(sp)
   42858:	2023883a 	mov	r17,r4
   4285c:	3027883a 	mov	r19,r6
   42860:	3825883a 	mov	r18,r7
   42864:	28002526 	beq	r5,zero,428fc <__register_exitproc+0xd4>
   42868:	29000117 	ldw	r4,4(r5)
   4286c:	008007c4 	movi	r2,31
   42870:	11002716 	blt	r2,r4,42910 <__register_exitproc+0xe8>
   42874:	8800101e 	bne	r17,zero,428b8 <__register_exitproc+0x90>
   42878:	2105883a 	add	r2,r4,r4
   4287c:	1085883a 	add	r2,r2,r2
   42880:	20c00044 	addi	r3,r4,1
   42884:	1145883a 	add	r2,r2,r5
   42888:	0009883a 	mov	r4,zero
   4288c:	15000215 	stw	r20,8(r2)
   42890:	28c00115 	stw	r3,4(r5)
   42894:	2005883a 	mov	r2,r4
   42898:	dfc00517 	ldw	ra,20(sp)
   4289c:	dd000417 	ldw	r20,16(sp)
   428a0:	dcc00317 	ldw	r19,12(sp)
   428a4:	dc800217 	ldw	r18,8(sp)
   428a8:	dc400117 	ldw	r17,4(sp)
   428ac:	dc000017 	ldw	r16,0(sp)
   428b0:	dec00604 	addi	sp,sp,24
   428b4:	f800283a 	ret
   428b8:	29802204 	addi	r6,r5,136
   428bc:	00800044 	movi	r2,1
   428c0:	110e983a 	sll	r7,r2,r4
   428c4:	30c04017 	ldw	r3,256(r6)
   428c8:	2105883a 	add	r2,r4,r4
   428cc:	1085883a 	add	r2,r2,r2
   428d0:	1185883a 	add	r2,r2,r6
   428d4:	19c6b03a 	or	r3,r3,r7
   428d8:	14802015 	stw	r18,128(r2)
   428dc:	14c00015 	stw	r19,0(r2)
   428e0:	00800084 	movi	r2,2
   428e4:	30c04015 	stw	r3,256(r6)
   428e8:	88bfe31e 	bne	r17,r2,42878 <__register_exitproc+0x50>
   428ec:	30804117 	ldw	r2,260(r6)
   428f0:	11c4b03a 	or	r2,r2,r7
   428f4:	30804115 	stw	r2,260(r6)
   428f8:	003fdf06 	br	42878 <__register_exitproc+0x50>
   428fc:	00800134 	movhi	r2,4
   42900:	10964d04 	addi	r2,r2,22836
   42904:	100b883a 	mov	r5,r2
   42908:	80805215 	stw	r2,328(r16)
   4290c:	003fd606 	br	42868 <__register_exitproc+0x40>
   42910:	00800034 	movhi	r2,0
   42914:	10800004 	addi	r2,r2,0
   42918:	1000021e 	bne	r2,zero,42924 <__register_exitproc+0xfc>
   4291c:	013fffc4 	movi	r4,-1
   42920:	003fdc06 	br	42894 <__register_exitproc+0x6c>
   42924:	01006404 	movi	r4,400
   42928:	103ee83a 	callr	r2
   4292c:	1007883a 	mov	r3,r2
   42930:	103ffa26 	beq	r2,zero,4291c <__register_exitproc+0xf4>
   42934:	80805217 	ldw	r2,328(r16)
   42938:	180b883a 	mov	r5,r3
   4293c:	18000115 	stw	zero,4(r3)
   42940:	18800015 	stw	r2,0(r3)
   42944:	80c05215 	stw	r3,328(r16)
   42948:	18006215 	stw	zero,392(r3)
   4294c:	18006315 	stw	zero,396(r3)
   42950:	0009883a 	mov	r4,zero
   42954:	883fc826 	beq	r17,zero,42878 <__register_exitproc+0x50>
   42958:	003fd706 	br	428b8 <__register_exitproc+0x90>

0004295c <register_fini>:
   4295c:	f800283a 	ret

00042960 <__call_exitprocs>:
   42960:	00800134 	movhi	r2,4
   42964:	10907704 	addi	r2,r2,16860
   42968:	10800017 	ldw	r2,0(r2)
   4296c:	defff304 	addi	sp,sp,-52
   42970:	df000b15 	stw	fp,44(sp)
   42974:	d8800115 	stw	r2,4(sp)
   42978:	00800034 	movhi	r2,0
   4297c:	10800004 	addi	r2,r2,0
   42980:	1005003a 	cmpeq	r2,r2,zero
   42984:	d8800215 	stw	r2,8(sp)
   42988:	d8800117 	ldw	r2,4(sp)
   4298c:	dd400815 	stw	r21,32(sp)
   42990:	dd000715 	stw	r20,28(sp)
   42994:	10805204 	addi	r2,r2,328
   42998:	dfc00c15 	stw	ra,48(sp)
   4299c:	ddc00a15 	stw	r23,40(sp)
   429a0:	dd800915 	stw	r22,36(sp)
   429a4:	dcc00615 	stw	r19,24(sp)
   429a8:	dc800515 	stw	r18,20(sp)
   429ac:	dc400415 	stw	r17,16(sp)
   429b0:	dc000315 	stw	r16,12(sp)
   429b4:	282b883a 	mov	r21,r5
   429b8:	2039883a 	mov	fp,r4
   429bc:	d8800015 	stw	r2,0(sp)
   429c0:	2829003a 	cmpeq	r20,r5,zero
   429c4:	d8800117 	ldw	r2,4(sp)
   429c8:	14405217 	ldw	r17,328(r2)
   429cc:	88001026 	beq	r17,zero,42a10 <__call_exitprocs+0xb0>
   429d0:	ddc00017 	ldw	r23,0(sp)
   429d4:	88800117 	ldw	r2,4(r17)
   429d8:	8c802204 	addi	r18,r17,136
   429dc:	143fffc4 	addi	r16,r2,-1
   429e0:	80000916 	blt	r16,zero,42a08 <__call_exitprocs+0xa8>
   429e4:	05bfffc4 	movi	r22,-1
   429e8:	a000151e 	bne	r20,zero,42a40 <__call_exitprocs+0xe0>
   429ec:	8409883a 	add	r4,r16,r16
   429f0:	2105883a 	add	r2,r4,r4
   429f4:	1485883a 	add	r2,r2,r18
   429f8:	10c02017 	ldw	r3,128(r2)
   429fc:	a8c01126 	beq	r21,r3,42a44 <__call_exitprocs+0xe4>
   42a00:	843fffc4 	addi	r16,r16,-1
   42a04:	85bff81e 	bne	r16,r22,429e8 <__call_exitprocs+0x88>
   42a08:	d8800217 	ldw	r2,8(sp)
   42a0c:	10003126 	beq	r2,zero,42ad4 <__call_exitprocs+0x174>
   42a10:	dfc00c17 	ldw	ra,48(sp)
   42a14:	df000b17 	ldw	fp,44(sp)
   42a18:	ddc00a17 	ldw	r23,40(sp)
   42a1c:	dd800917 	ldw	r22,36(sp)
   42a20:	dd400817 	ldw	r21,32(sp)
   42a24:	dd000717 	ldw	r20,28(sp)
   42a28:	dcc00617 	ldw	r19,24(sp)
   42a2c:	dc800517 	ldw	r18,20(sp)
   42a30:	dc400417 	ldw	r17,16(sp)
   42a34:	dc000317 	ldw	r16,12(sp)
   42a38:	dec00d04 	addi	sp,sp,52
   42a3c:	f800283a 	ret
   42a40:	8409883a 	add	r4,r16,r16
   42a44:	88c00117 	ldw	r3,4(r17)
   42a48:	2105883a 	add	r2,r4,r4
   42a4c:	1445883a 	add	r2,r2,r17
   42a50:	18ffffc4 	addi	r3,r3,-1
   42a54:	11800217 	ldw	r6,8(r2)
   42a58:	1c001526 	beq	r3,r16,42ab0 <__call_exitprocs+0x150>
   42a5c:	10000215 	stw	zero,8(r2)
   42a60:	303fe726 	beq	r6,zero,42a00 <__call_exitprocs+0xa0>
   42a64:	00c00044 	movi	r3,1
   42a68:	1c06983a 	sll	r3,r3,r16
   42a6c:	90804017 	ldw	r2,256(r18)
   42a70:	8cc00117 	ldw	r19,4(r17)
   42a74:	1884703a 	and	r2,r3,r2
   42a78:	10001426 	beq	r2,zero,42acc <__call_exitprocs+0x16c>
   42a7c:	90804117 	ldw	r2,260(r18)
   42a80:	1884703a 	and	r2,r3,r2
   42a84:	10000c1e 	bne	r2,zero,42ab8 <__call_exitprocs+0x158>
   42a88:	2105883a 	add	r2,r4,r4
   42a8c:	1485883a 	add	r2,r2,r18
   42a90:	11400017 	ldw	r5,0(r2)
   42a94:	e009883a 	mov	r4,fp
   42a98:	303ee83a 	callr	r6
   42a9c:	88800117 	ldw	r2,4(r17)
   42aa0:	98bfc81e 	bne	r19,r2,429c4 <__call_exitprocs+0x64>
   42aa4:	b8800017 	ldw	r2,0(r23)
   42aa8:	147fd526 	beq	r2,r17,42a00 <__call_exitprocs+0xa0>
   42aac:	003fc506 	br	429c4 <__call_exitprocs+0x64>
   42ab0:	8c000115 	stw	r16,4(r17)
   42ab4:	003fea06 	br	42a60 <__call_exitprocs+0x100>
   42ab8:	2105883a 	add	r2,r4,r4
   42abc:	1485883a 	add	r2,r2,r18
   42ac0:	11000017 	ldw	r4,0(r2)
   42ac4:	303ee83a 	callr	r6
   42ac8:	003ff406 	br	42a9c <__call_exitprocs+0x13c>
   42acc:	303ee83a 	callr	r6
   42ad0:	003ff206 	br	42a9c <__call_exitprocs+0x13c>
   42ad4:	88800117 	ldw	r2,4(r17)
   42ad8:	1000081e 	bne	r2,zero,42afc <__call_exitprocs+0x19c>
   42adc:	89000017 	ldw	r4,0(r17)
   42ae0:	20000726 	beq	r4,zero,42b00 <__call_exitprocs+0x1a0>
   42ae4:	b9000015 	stw	r4,0(r23)
   42ae8:	8809883a 	mov	r4,r17
   42aec:	00000000 	call	0 <__reset-0x40000>
   42af0:	bc400017 	ldw	r17,0(r23)
   42af4:	883fb71e 	bne	r17,zero,429d4 <__call_exitprocs+0x74>
   42af8:	003fc506 	br	42a10 <__call_exitprocs+0xb0>
   42afc:	89000017 	ldw	r4,0(r17)
   42b00:	882f883a 	mov	r23,r17
   42b04:	2023883a 	mov	r17,r4
   42b08:	883fb21e 	bne	r17,zero,429d4 <__call_exitprocs+0x74>
   42b0c:	003fc006 	br	42a10 <__call_exitprocs+0xb0>

00042b10 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   42b10:	defffd04 	addi	sp,sp,-12
   42b14:	df000215 	stw	fp,8(sp)
   42b18:	df000204 	addi	fp,sp,8
   42b1c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   42b20:	e0bfff17 	ldw	r2,-4(fp)
   42b24:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   42b28:	e0bffe17 	ldw	r2,-8(fp)
   42b2c:	1005003a 	cmpeq	r2,r2,zero
   42b30:	1000021e 	bne	r2,zero,42b3c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   42b34:	002af070 	cmpltui	zero,zero,43969
   42b38:	00000106 	br	42b40 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   42b3c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   42b40:	e037883a 	mov	sp,fp
   42b44:	df000017 	ldw	fp,0(sp)
   42b48:	dec00104 	addi	sp,sp,4
   42b4c:	f800283a 	ret

00042b50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   42b50:	defffd04 	addi	sp,sp,-12
   42b54:	dfc00215 	stw	ra,8(sp)
   42b58:	df000115 	stw	fp,4(sp)
   42b5c:	df000104 	addi	fp,sp,4
   42b60:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   42b64:	e13fff17 	ldw	r4,-4(fp)
   42b68:	0042b100 	call	42b10 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   42b6c:	003fff06 	br	42b6c <_exit+0x1c>
   42b70:	0004295c 	xori	zero,zero,4261
