
chip2.elf:     file format elf32-littlenios2
chip2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000052b0 memsz 0x000052b0 flags r-x
    LOAD off    0x000062d0 vaddr 0x000452d0 paddr 0x00046d18 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008760 vaddr 0x00048760 paddr 0x00048760 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000050e0  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00045294  00045294  00006294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  000452d0  00046d18  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00048760  00048760  00008760  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007d18  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000838  00000000  00000000  00007d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000cd1  00000000  00000000  00008578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017e19  00000000  00000000  00009249  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004ab9  00000000  00000000  00021062  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8eb  00000000  00000000  00025b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f84  00000000  00000000  00031408  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000155b  00000000  00000000  0003238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003cca  00000000  00000000  000338e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000375b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  000375e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00039c76  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00039c79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039c85  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00039c86  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00039c87  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00039c8b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00039c8f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00039c93  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00039c97  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00039c9b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  00039c9f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  00039ca3  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005929e  00000000  00000000  00039cc0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
00045294 l    d  .rodata	00000000 .rodata
000452d0 l    d  .rwdata	00000000 .rwdata
00048760 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00040320 l     F .text	00000148 handle_buttons_interrupt
00040468 l     F .text	00000074 handle_switch_interrupt
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000452d0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00041e80 l     F .text	00000058 std
00041f8c l     F .text	00000008 __fp_lock
00041f94 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00042f54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00042fb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000430b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00043394 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043474 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000435d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000437e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00046d0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00043a7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00045c80 l     O .rwdata	00001060 jtag_uart_0
00043b54 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043d94 l     F .text	00000228 altera_avalon_jtag_uart_irq
00043fbc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044884 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004507c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00045230 l     F .text	00000040 alt_sim_halt
00042cf8 g     F .text	00000070 _isatty_r
00043630 g     F .text	00000050 alt_main
00040548 g     F .text	000000a0 _puts_r
000487b0 g     O .bss	00000100 alt_irq
00042d68 g     F .text	00000078 _lseek_r
00046d18 g       *ABS*	00000000 __flash_rwdata_start
00048a40 g       *ABS*	00000000 __alt_heap_start
00042934 g     F .text	00000068 __sseek
00041ee8 g     F .text	000000a4 __sinit
00041fe8 g     F .text	00000068 __sfmoreglue
000436a0 g     F .text	00000020 __malloc_unlock
000413d0 g     F .text	000000e0 memmove
00041fd8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042c84 g     F .text	00000074 _fstat_r
0004876c g     O .bss	00000004 errno
00048778 g     O .bss	00000004 alt_argv
0004ece0 g       *ABS*	00000000 _gp
00045b00 g     O .rwdata	00000180 alt_fd_list
00041330 g     F .text	000000a0 memcpy
00041fcc g     F .text	0000000c _cleanup_r
00045294 g       *ABS*	00000000 __DTOR_END__
000405e8 g     F .text	00000014 puts
000441d4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000432d4 g     F .text	000000c0 isatty
00044e6c g     F .text	00000090 alt_icache_flush
00048760 g     O .bss	00000004 __malloc_top_pad
00040670 g     F .text	0000049c __sfvwrite_r
00041aa4 g     F .text	00000070 _sbrk_r
00042de0 g     F .text	00000078 _read_r
00046d00 g     O .rwdata	00000004 alt_max_fd
000402c0 g     F .text	00000030 set_left
00042b60 g     F .text	00000110 _fclose_r
00041e4c g     F .text	00000034 fflush
00048764 g     O .bss	00000004 __malloc_max_sbrked_mem
00043114 g     F .text	000001c0 alt_irq_register
000434e0 g     F .text	000000f0 lseek
00046ce4 g     O .rwdata	00000004 _global_impure_ptr
00040200 g     F .text	00000030 set_led
000414b0 g     F .text	000005f4 _realloc_r
00048a40 g       *ABS*	00000000 __bss_end
00044bb0 g     F .text	000000f8 alt_iic_isr_register
00044d40 g     F .text	0000010c alt_tick
00041fb4 g     F .text	00000018 __fp_lock_all
00044b68 g     F .text	00000048 alt_ic_irq_enabled
00044ca8 g     F .text	00000098 alt_alarm_stop
00048770 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
00045ad8 g     O .rwdata	00000028 alt_dev_null
0004478c g     F .text	00000044 alt_dcache_flush_all
00046d18 g       *ABS*	00000000 __ram_rwdata_end
00046cf8 g     O .rwdata	00000008 alt_dev_list
0004395c g     F .text	00000120 write
000452d0 g       *ABS*	00000000 __ram_rodata_end
00042fe0 g     F .text	000000d4 fstat
00048a40 g       *ABS*	00000000 end
00043cd4 g     F .text	000000c0 altera_avalon_jtag_uart_init
00045290 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
000443f8 g     F .text	00000240 altera_avalon_jtag_uart_write
00041ed8 g     F .text	00000004 __sfp_lock_acquire
0004124c g     F .text	000000e4 memchr
0004226c g     F .text	00000314 _free_r
00045080 g     F .text	000001b0 __call_exitprocs
00046cec g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000004c _start
00048780 g     O .bss	00000004 _alt_tick_rate
00048784 g     O .bss	00000004 _alt_nticks
000436c0 g     F .text	00000120 read
00043b10 g     F .text	00000044 alt_sys_init
00044f48 g     F .text	00000134 __register_exitproc
0004406c g     F .text	00000074 altera_avalon_jtag_uart_close
000452d0 g       *ABS*	00000000 __ram_rwdata_start
00045294 g       *ABS*	00000000 __ram_rodata_start
00048788 g     O .bss	00000028 __malloc_current_mallinfo
00043b8c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00042af0 g     F .text	00000070 _close_r
00043c3c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00048a40 g       *ABS*	00000000 __alt_stack_base
00043c84 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00041b14 g     F .text	0000013c __swsetup_r
00042050 g     F .text	000000f0 __sfp
000456d0 g     O .rwdata	00000408 __malloc_av_
00041ee4 g     F .text	00000004 __sinit_lock_release
00042a18 g     F .text	00000060 __sread
00040290 g     F .text	00000030 set_down
000447d0 g     F .text	000000b4 alt_dev_llist_insert
00043680 g     F .text	00000020 __malloc_lock
000438a0 g     F .text	000000bc sbrk
00041c50 g     F .text	000001fc _fflush_r
00048760 g       *ABS*	00000000 __bss_start
00042894 g     F .text	00000098 memset
000404dc g     F .text	0000006c main
0004877c g     O .bss	00000004 alt_envp
00048768 g     O .bss	00000004 __malloc_max_total_mem
00043be4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0004292c g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
00042c70 g     F .text	00000014 fclose
000488b0 g     O .bss	00000190 _atexit0
00040b0c g     F .text	00000740 _malloc_r
00046d04 g     O .rwdata	00000004 alt_errno
00042648 g     F .text	000000b8 _fwalk
00042140 g     F .text	0000012c _malloc_trim_r
00045294 g       *ABS*	00000000 __CTOR_END__
00045294 g       *ABS*	00000000 __flash_rodata_start
00045294 g       *ABS*	00000000 __DTOR_LIST__
00043adc g     F .text	00000034 alt_irq_init
00043840 g     F .text	00000060 alt_release_fd
00040230 g     F .text	00000030 set_action
000402f0 g     F .text	00000030 set_right
00044efc g     F .text	00000014 atexit
00042a78 g     F .text	00000078 _write_r
00046ce0 g     O .rwdata	00000004 _impure_ptr
00048774 g     O .bss	00000004 alt_argc
00040260 g     F .text	00000030 set_up
00044948 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00041f9c g     F .text	00000018 __fp_unlock_all
00046cf0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000449dc g     F .text	00000050 alt_ic_isr_register
00046d18 g       *ABS*	00000000 _edata
00048a40 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
000440e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00044ac8 g     F .text	000000a0 alt_ic_irq_disable
0004299c g     F .text	0000007c __swrite
00046ce8 g     O .rwdata	00000004 __malloc_trim_threshold
00044e4c g     F .text	00000020 altera_nios2_qsys_irq_init
00044f10 g     F .text	00000038 exit
00042580 g     F .text	000000c8 _fwalk_reent
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00041edc g     F .text	00000004 __sfp_lock_release
00045270 g     F .text	00000020 _exit
00044638 g     F .text	00000154 alt_alarm_start
00042700 g     F .text	00000194 __smakebuf_r
000405fc g     F .text	00000074 strlen
000449ac g     F .text	00000030 alt_icache_flush_all
00046d08 g     O .rwdata	00000004 alt_priority_mask
00044a2c g     F .text	0000009c alt_ic_irq_enable
00046d10 g     O .rwdata	00000008 alt_alarm_list
000448e4 g     F .text	00000064 _do_ctors
00042e58 g     F .text	000000fc close
000433f4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00041ee0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00174 	movhi	r3,5
   40134:	18e1ec04 	addi	r3,r3,-30800
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00174 	movhi	r3,5
   4014c:	18e1ec04 	addi	r3,r3,-30800
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401d0:	d6bb3814 	ori	gp,gp,60640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401d8:	10a1d814 	ori	r2,r2,34656

    movhi r3, %hi(__bss_end)
   401dc:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401e0:	18e29014 	ori	r3,r3,35392

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	00433f40 	call	433f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	00436300 	call	43630 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <set_led>:
#include "io.h"
#include "system.h"
#include <stdio.h>
#include "sys/alt_irq.h"

void set_led(unsigned char pattern) {
   40200:	defffe04 	addi	sp,sp,-8
   40204:	df000115 	stw	fp,4(sp)
   40208:	df000104 	addi	fp,sp,4
   4020c:	e13fff05 	stb	r4,-4(fp)
	IOWR(PAUSE_BASE, 0, pattern);
   40210:	e0ffff03 	ldbu	r3,-4(fp)
   40214:	00800234 	movhi	r2,8
   40218:	10841404 	addi	r2,r2,4176
   4021c:	10c00035 	stwio	r3,0(r2)
}
   40220:	e037883a 	mov	sp,fp
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00104 	addi	sp,sp,4
   4022c:	f800283a 	ret

00040230 <set_action>:

void set_action(unsigned char pattern) {
   40230:	defffe04 	addi	sp,sp,-8
   40234:	df000115 	stw	fp,4(sp)
   40238:	df000104 	addi	fp,sp,4
   4023c:	e13fff05 	stb	r4,-4(fp)
	IOWR(ACTION_BASE, 0, pattern);
   40240:	e0ffff03 	ldbu	r3,-4(fp)
   40244:	00800234 	movhi	r2,8
   40248:	10841004 	addi	r2,r2,4160
   4024c:	10c00035 	stwio	r3,0(r2)
}
   40250:	e037883a 	mov	sp,fp
   40254:	df000017 	ldw	fp,0(sp)
   40258:	dec00104 	addi	sp,sp,4
   4025c:	f800283a 	ret

00040260 <set_up>:

void set_up(unsigned char pattern) {
   40260:	defffe04 	addi	sp,sp,-8
   40264:	df000115 	stw	fp,4(sp)
   40268:	df000104 	addi	fp,sp,4
   4026c:	e13fff05 	stb	r4,-4(fp)
	IOWR(UP_BASE, 0, pattern);
   40270:	e0ffff03 	ldbu	r3,-4(fp)
   40274:	00800234 	movhi	r2,8
   40278:	10840c04 	addi	r2,r2,4144
   4027c:	10c00035 	stwio	r3,0(r2)
}
   40280:	e037883a 	mov	sp,fp
   40284:	df000017 	ldw	fp,0(sp)
   40288:	dec00104 	addi	sp,sp,4
   4028c:	f800283a 	ret

00040290 <set_down>:

void set_down(unsigned char pattern) {
   40290:	defffe04 	addi	sp,sp,-8
   40294:	df000115 	stw	fp,4(sp)
   40298:	df000104 	addi	fp,sp,4
   4029c:	e13fff05 	stb	r4,-4(fp)
	IOWR(DOWN_BASE, 0, pattern);
   402a0:	e0ffff03 	ldbu	r3,-4(fp)
   402a4:	00800234 	movhi	r2,8
   402a8:	10840804 	addi	r2,r2,4128
   402ac:	10c00035 	stwio	r3,0(r2)
}
   402b0:	e037883a 	mov	sp,fp
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00104 	addi	sp,sp,4
   402bc:	f800283a 	ret

000402c0 <set_left>:

void set_left(unsigned char pattern) {
   402c0:	defffe04 	addi	sp,sp,-8
   402c4:	df000115 	stw	fp,4(sp)
   402c8:	df000104 	addi	fp,sp,4
   402cc:	e13fff05 	stb	r4,-4(fp)
	IOWR(LEFT_BASE, 0, pattern);
   402d0:	e0ffff03 	ldbu	r3,-4(fp)
   402d4:	00800234 	movhi	r2,8
   402d8:	10840404 	addi	r2,r2,4112
   402dc:	10c00035 	stwio	r3,0(r2)
}
   402e0:	e037883a 	mov	sp,fp
   402e4:	df000017 	ldw	fp,0(sp)
   402e8:	dec00104 	addi	sp,sp,4
   402ec:	f800283a 	ret

000402f0 <set_right>:

void set_right(unsigned char pattern) {
   402f0:	defffe04 	addi	sp,sp,-8
   402f4:	df000115 	stw	fp,4(sp)
   402f8:	df000104 	addi	fp,sp,4
   402fc:	e13fff05 	stb	r4,-4(fp)
	IOWR(RIGHT_BASE, 0, pattern);
   40300:	e0ffff03 	ldbu	r3,-4(fp)
   40304:	00800234 	movhi	r2,8
   40308:	10840004 	addi	r2,r2,4096
   4030c:	10c00035 	stwio	r3,0(r2)
}
   40310:	e037883a 	mov	sp,fp
   40314:	df000017 	ldw	fp,0(sp)
   40318:	dec00104 	addi	sp,sp,4
   4031c:	f800283a 	ret

00040320 <handle_buttons_interrupt>:

static void handle_buttons_interrupt(void* context, alt_u32 id){
   40320:	defffa04 	addi	sp,sp,-24
   40324:	dfc00515 	stw	ra,20(sp)
   40328:	df000415 	stw	fp,16(sp)
   4032c:	df000404 	addi	fp,sp,16
   40330:	e13ffd15 	stw	r4,-12(fp)
   40334:	e17ffe15 	stw	r5,-8(fp)
	int code;
	code = IORD(BUTTONS_BASE,0);
   40338:	00800234 	movhi	r2,8
   4033c:	10841804 	addi	r2,r2,4192
   40340:	10800037 	ldwio	r2,0(r2)
   40344:	e0bffc15 	stw	r2,-16(fp)
	//printf("%x\n",code);
	switch(code) {
   40348:	e0bffc17 	ldw	r2,-16(fp)
   4034c:	e0bfff15 	stw	r2,-4(fp)
   40350:	e0ffff17 	ldw	r3,-4(fp)
   40354:	188002e0 	cmpeqi	r2,r3,11
   40358:	1000171e 	bne	r2,zero,403b8 <handle_buttons_interrupt+0x98>
   4035c:	e0ffff17 	ldw	r3,-4(fp)
   40360:	18800308 	cmpgei	r2,r3,12
   40364:	1000041e 	bne	r2,zero,40378 <handle_buttons_interrupt+0x58>
   40368:	e0ffff17 	ldw	r3,-4(fp)
   4036c:	188001e0 	cmpeqi	r2,r3,7
   40370:	1000081e 	bne	r2,zero,40394 <handle_buttons_interrupt+0x74>
   40374:	00002b06 	br	40424 <handle_buttons_interrupt+0x104>
   40378:	e0ffff17 	ldw	r3,-4(fp)
   4037c:	18800360 	cmpeqi	r2,r3,13
   40380:	1000161e 	bne	r2,zero,403dc <handle_buttons_interrupt+0xbc>
   40384:	e0ffff17 	ldw	r3,-4(fp)
   40388:	188003a0 	cmpeqi	r2,r3,14
   4038c:	10001c1e 	bne	r2,zero,40400 <handle_buttons_interrupt+0xe0>
   40390:	00002406 	br	40424 <handle_buttons_interrupt+0x104>
	case 7 :
		set_up('1');
   40394:	01000c44 	movi	r4,49
   40398:	00402600 	call	40260 <set_up>
		set_down('0');
   4039c:	01000c04 	movi	r4,48
   403a0:	00402900 	call	40290 <set_down>
		set_left('0');
   403a4:	01000c04 	movi	r4,48
   403a8:	00402c00 	call	402c0 <set_left>
		set_right('0');
   403ac:	01000c04 	movi	r4,48
   403b0:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   403b4:	00002306 	br	40444 <handle_buttons_interrupt+0x124>
	case 11 :
		set_up('0');
   403b8:	01000c04 	movi	r4,48
   403bc:	00402600 	call	40260 <set_up>
		set_down('1');
   403c0:	01000c44 	movi	r4,49
   403c4:	00402900 	call	40290 <set_down>
		set_left('0');
   403c8:	01000c04 	movi	r4,48
   403cc:	00402c00 	call	402c0 <set_left>
		set_right('0');
   403d0:	01000c04 	movi	r4,48
   403d4:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   403d8:	00001a06 	br	40444 <handle_buttons_interrupt+0x124>
	case 13 :
		set_up('0');
   403dc:	01000c04 	movi	r4,48
   403e0:	00402600 	call	40260 <set_up>
		set_down('0');
   403e4:	01000c04 	movi	r4,48
   403e8:	00402900 	call	40290 <set_down>
		set_left('1');
   403ec:	01000c44 	movi	r4,49
   403f0:	00402c00 	call	402c0 <set_left>
		set_right('0');
   403f4:	01000c04 	movi	r4,48
   403f8:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   403fc:	00001106 	br	40444 <handle_buttons_interrupt+0x124>
	case 14 :
		set_up('0');
   40400:	01000c04 	movi	r4,48
   40404:	00402600 	call	40260 <set_up>
		set_down('0');
   40408:	01000c04 	movi	r4,48
   4040c:	00402900 	call	40290 <set_down>
		set_left('0');
   40410:	01000c04 	movi	r4,48
   40414:	00402c00 	call	402c0 <set_left>
		set_right('1');
   40418:	01000c44 	movi	r4,49
   4041c:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   40420:	00000806 	br	40444 <handle_buttons_interrupt+0x124>
	default :
		set_up('0');
   40424:	01000c04 	movi	r4,48
   40428:	00402600 	call	40260 <set_up>
		set_down('0');
   4042c:	01000c04 	movi	r4,48
   40430:	00402900 	call	40290 <set_down>
		set_left('0');
   40434:	01000c04 	movi	r4,48
   40438:	00402c00 	call	402c0 <set_left>
		set_right('0');
   4043c:	01000c04 	movi	r4,48
   40440:	00402f00 	call	402f0 <set_right>
		//set_led('1');
		break;
	}
	IOWR(BUTTONS_BASE,3,15);
   40444:	00c00234 	movhi	r3,8
   40448:	18c41b04 	addi	r3,r3,4204
   4044c:	008003c4 	movi	r2,15
   40450:	18800035 	stwio	r2,0(r3)
}
   40454:	e037883a 	mov	sp,fp
   40458:	dfc00117 	ldw	ra,4(sp)
   4045c:	df000017 	ldw	fp,0(sp)
   40460:	dec00204 	addi	sp,sp,8
   40464:	f800283a 	ret

00040468 <handle_switch_interrupt>:

static void handle_switch_interrupt(void* context, alt_u32 id){
   40468:	defffa04 	addi	sp,sp,-24
   4046c:	dfc00515 	stw	ra,20(sp)
   40470:	df000415 	stw	fp,16(sp)
   40474:	df000404 	addi	fp,sp,16
   40478:	e13ffd15 	stw	r4,-12(fp)
   4047c:	e17ffe15 	stw	r5,-8(fp)
	unsigned char pause;
	pause = IORD(SWITCH_BASE, 0);
   40480:	00800234 	movhi	r2,8
   40484:	10841c04 	addi	r2,r2,4208
   40488:	10800037 	ldwio	r2,0(r2)
   4048c:	e0bffc05 	stb	r2,-16(fp)
	switch(pause) {
   40490:	e0bffc03 	ldbu	r2,-16(fp)
   40494:	e0bfff15 	stw	r2,-4(fp)
   40498:	e0ffff17 	ldw	r3,-4(fp)
   4049c:	1805003a 	cmpeq	r2,r3,zero
   404a0:	1000041e 	bne	r2,zero,404b4 <handle_switch_interrupt+0x4c>
   404a4:	e0ffff17 	ldw	r3,-4(fp)
   404a8:	18800060 	cmpeqi	r2,r3,1
   404ac:	1000041e 	bne	r2,zero,404c0 <handle_switch_interrupt+0x58>
   404b0:	00000506 	br	404c8 <handle_switch_interrupt+0x60>
		case 0 :
			set_led('0');
   404b4:	01000c04 	movi	r4,48
   404b8:	00402000 	call	40200 <set_led>
			break;
   404bc:	00000206 	br	404c8 <handle_switch_interrupt+0x60>
		case 1 :
			set_led('1');
   404c0:	01000c44 	movi	r4,49
   404c4:	00402000 	call	40200 <set_led>
		default :
			//set_led('0');
			break;
	}
	//IOWR(SWITCH_BASE,3,0);
}
   404c8:	e037883a 	mov	sp,fp
   404cc:	dfc00117 	ldw	ra,4(sp)
   404d0:	df000017 	ldw	fp,0(sp)
   404d4:	dec00204 	addi	sp,sp,8
   404d8:	f800283a 	ret

000404dc <main>:

int main()
{
   404dc:	defffd04 	addi	sp,sp,-12
   404e0:	dfc00215 	stw	ra,8(sp)
   404e4:	df000115 	stw	fp,4(sp)
   404e8:	df000104 	addi	fp,sp,4
	printf("Hello from Nios II!\n");
   404ec:	01000134 	movhi	r4,4
   404f0:	2114a504 	addi	r4,r4,21140
   404f4:	00405e80 	call	405e8 <puts>
	unsigned char action = 0;
   404f8:	e03fff05 	stb	zero,-4(fp)

	// init bouttons
	// Reset the edge capture register
	IOWR(BUTTONS_BASE,3,15);
   404fc:	00c00234 	movhi	r3,8
   40500:	18c41b04 	addi	r3,r3,4204
   40504:	008003c4 	movi	r2,15
   40508:	18800035 	stwio	r2,0(r3)

	//Enable interrupt
	IOWR(BUTTONS_BASE,2,15);
   4050c:	00c00234 	movhi	r3,8
   40510:	18c41a04 	addi	r3,r3,4200
   40514:	008003c4 	movi	r2,15
   40518:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,NULL,handle_buttons_interrupt);
   4051c:	0009883a 	mov	r4,zero
   40520:	000b883a 	mov	r5,zero
   40524:	01800134 	movhi	r6,4
   40528:	3180c804 	addi	r6,r6,800
   4052c:	00431140 	call	43114 <alt_irq_register>

	// init switch
	//IOWR(SWITCH_BASE,3,15);
	//Enable interrupt
	//IOWR(SWITCH_BASE,2,15);
	alt_irq_register(SWITCH_IRQ,NULL,handle_switch_interrupt);
   40530:	01000044 	movi	r4,1
   40534:	000b883a 	mov	r5,zero
   40538:	01800134 	movhi	r6,4
   4053c:	31811a04 	addi	r6,r6,1128
   40540:	00431140 	call	43114 <alt_irq_register>


		//buttons = IORD(BUTTONS_BASE,3);
		//IOWR(BUTTONS_BASE,3,15);

	}
   40544:	003fff06 	br	40544 <main+0x68>

00040548 <_puts_r>:
   40548:	defff604 	addi	sp,sp,-40
   4054c:	dc400715 	stw	r17,28(sp)
   40550:	2023883a 	mov	r17,r4
   40554:	2809883a 	mov	r4,r5
   40558:	dfc00915 	stw	ra,36(sp)
   4055c:	dcc00815 	stw	r19,32(sp)
   40560:	2827883a 	mov	r19,r5
   40564:	00405fc0 	call	405fc <strlen>
   40568:	89400217 	ldw	r5,8(r17)
   4056c:	00c00134 	movhi	r3,4
   40570:	18d4aa04 	addi	r3,r3,21160
   40574:	01c00044 	movi	r7,1
   40578:	12000044 	addi	r8,r2,1
   4057c:	d8c00515 	stw	r3,20(sp)
   40580:	d9c00615 	stw	r7,24(sp)
   40584:	d8c00304 	addi	r3,sp,12
   40588:	01c00084 	movi	r7,2
   4058c:	8809883a 	mov	r4,r17
   40590:	d80d883a 	mov	r6,sp
   40594:	d8c00015 	stw	r3,0(sp)
   40598:	dcc00315 	stw	r19,12(sp)
   4059c:	da000215 	stw	r8,8(sp)
   405a0:	d9c00115 	stw	r7,4(sp)
   405a4:	d8800415 	stw	r2,16(sp)
   405a8:	00406700 	call	40670 <__sfvwrite_r>
   405ac:	00ffffc4 	movi	r3,-1
   405b0:	10000626 	beq	r2,zero,405cc <_puts_r+0x84>
   405b4:	1805883a 	mov	r2,r3
   405b8:	dfc00917 	ldw	ra,36(sp)
   405bc:	dcc00817 	ldw	r19,32(sp)
   405c0:	dc400717 	ldw	r17,28(sp)
   405c4:	dec00a04 	addi	sp,sp,40
   405c8:	f800283a 	ret
   405cc:	00c00284 	movi	r3,10
   405d0:	1805883a 	mov	r2,r3
   405d4:	dfc00917 	ldw	ra,36(sp)
   405d8:	dcc00817 	ldw	r19,32(sp)
   405dc:	dc400717 	ldw	r17,28(sp)
   405e0:	dec00a04 	addi	sp,sp,40
   405e4:	f800283a 	ret

000405e8 <puts>:
   405e8:	00800134 	movhi	r2,4
   405ec:	109b3804 	addi	r2,r2,27872
   405f0:	200b883a 	mov	r5,r4
   405f4:	11000017 	ldw	r4,0(r2)
   405f8:	00405481 	jmpi	40548 <_puts_r>

000405fc <strlen>:
   405fc:	208000cc 	andi	r2,r4,3
   40600:	2011883a 	mov	r8,r4
   40604:	1000161e 	bne	r2,zero,40660 <strlen+0x64>
   40608:	20c00017 	ldw	r3,0(r4)
   4060c:	017fbff4 	movhi	r5,65279
   40610:	297fbfc4 	addi	r5,r5,-257
   40614:	01e02074 	movhi	r7,32897
   40618:	39e02004 	addi	r7,r7,-32640
   4061c:	1945883a 	add	r2,r3,r5
   40620:	11c4703a 	and	r2,r2,r7
   40624:	00c6303a 	nor	r3,zero,r3
   40628:	1886703a 	and	r3,r3,r2
   4062c:	18000c1e 	bne	r3,zero,40660 <strlen+0x64>
   40630:	280d883a 	mov	r6,r5
   40634:	380b883a 	mov	r5,r7
   40638:	21000104 	addi	r4,r4,4
   4063c:	20800017 	ldw	r2,0(r4)
   40640:	1187883a 	add	r3,r2,r6
   40644:	1946703a 	and	r3,r3,r5
   40648:	0084303a 	nor	r2,zero,r2
   4064c:	10c4703a 	and	r2,r2,r3
   40650:	103ff926 	beq	r2,zero,40638 <strlen+0x3c>
   40654:	20800007 	ldb	r2,0(r4)
   40658:	10000326 	beq	r2,zero,40668 <strlen+0x6c>
   4065c:	21000044 	addi	r4,r4,1
   40660:	20800007 	ldb	r2,0(r4)
   40664:	103ffd1e 	bne	r2,zero,4065c <strlen+0x60>
   40668:	2205c83a 	sub	r2,r4,r8
   4066c:	f800283a 	ret

00040670 <__sfvwrite_r>:
   40670:	30800217 	ldw	r2,8(r6)
   40674:	defff504 	addi	sp,sp,-44
   40678:	df000915 	stw	fp,36(sp)
   4067c:	dd800715 	stw	r22,28(sp)
   40680:	dc800315 	stw	r18,12(sp)
   40684:	dfc00a15 	stw	ra,40(sp)
   40688:	ddc00815 	stw	r23,32(sp)
   4068c:	dd400615 	stw	r21,24(sp)
   40690:	dd000515 	stw	r20,20(sp)
   40694:	dcc00415 	stw	r19,16(sp)
   40698:	dc400215 	stw	r17,8(sp)
   4069c:	dc000115 	stw	r16,4(sp)
   406a0:	302d883a 	mov	r22,r6
   406a4:	2039883a 	mov	fp,r4
   406a8:	2825883a 	mov	r18,r5
   406ac:	10001c26 	beq	r2,zero,40720 <__sfvwrite_r+0xb0>
   406b0:	29c0030b 	ldhu	r7,12(r5)
   406b4:	3880020c 	andi	r2,r7,8
   406b8:	10002726 	beq	r2,zero,40758 <__sfvwrite_r+0xe8>
   406bc:	28800417 	ldw	r2,16(r5)
   406c0:	10002526 	beq	r2,zero,40758 <__sfvwrite_r+0xe8>
   406c4:	3880008c 	andi	r2,r7,2
   406c8:	b5400017 	ldw	r21,0(r22)
   406cc:	10002826 	beq	r2,zero,40770 <__sfvwrite_r+0x100>
   406d0:	0021883a 	mov	r16,zero
   406d4:	0023883a 	mov	r17,zero
   406d8:	880d883a 	mov	r6,r17
   406dc:	e009883a 	mov	r4,fp
   406e0:	00810004 	movi	r2,1024
   406e4:	80006e26 	beq	r16,zero,408a0 <__sfvwrite_r+0x230>
   406e8:	800f883a 	mov	r7,r16
   406ec:	91400717 	ldw	r5,28(r18)
   406f0:	1400012e 	bgeu	r2,r16,406f8 <__sfvwrite_r+0x88>
   406f4:	100f883a 	mov	r7,r2
   406f8:	90c00917 	ldw	r3,36(r18)
   406fc:	183ee83a 	callr	r3
   40700:	1007883a 	mov	r3,r2
   40704:	80a1c83a 	sub	r16,r16,r2
   40708:	88a3883a 	add	r17,r17,r2
   4070c:	00806d0e 	bge	zero,r2,408c4 <__sfvwrite_r+0x254>
   40710:	b0800217 	ldw	r2,8(r22)
   40714:	10c5c83a 	sub	r2,r2,r3
   40718:	b0800215 	stw	r2,8(r22)
   4071c:	103fee1e 	bne	r2,zero,406d8 <__sfvwrite_r+0x68>
   40720:	0009883a 	mov	r4,zero
   40724:	2005883a 	mov	r2,r4
   40728:	dfc00a17 	ldw	ra,40(sp)
   4072c:	df000917 	ldw	fp,36(sp)
   40730:	ddc00817 	ldw	r23,32(sp)
   40734:	dd800717 	ldw	r22,28(sp)
   40738:	dd400617 	ldw	r21,24(sp)
   4073c:	dd000517 	ldw	r20,20(sp)
   40740:	dcc00417 	ldw	r19,16(sp)
   40744:	dc800317 	ldw	r18,12(sp)
   40748:	dc400217 	ldw	r17,8(sp)
   4074c:	dc000117 	ldw	r16,4(sp)
   40750:	dec00b04 	addi	sp,sp,44
   40754:	f800283a 	ret
   40758:	0041b140 	call	41b14 <__swsetup_r>
   4075c:	1000e41e 	bne	r2,zero,40af0 <__sfvwrite_r+0x480>
   40760:	91c0030b 	ldhu	r7,12(r18)
   40764:	b5400017 	ldw	r21,0(r22)
   40768:	3880008c 	andi	r2,r7,2
   4076c:	103fd81e 	bne	r2,zero,406d0 <__sfvwrite_r+0x60>
   40770:	3880004c 	andi	r2,r7,1
   40774:	1005003a 	cmpeq	r2,r2,zero
   40778:	10005726 	beq	r2,zero,408d8 <__sfvwrite_r+0x268>
   4077c:	0029883a 	mov	r20,zero
   40780:	002f883a 	mov	r23,zero
   40784:	a0004226 	beq	r20,zero,40890 <__sfvwrite_r+0x220>
   40788:	3880800c 	andi	r2,r7,512
   4078c:	94000217 	ldw	r16,8(r18)
   40790:	10008b26 	beq	r2,zero,409c0 <__sfvwrite_r+0x350>
   40794:	800d883a 	mov	r6,r16
   40798:	a400a536 	bltu	r20,r16,40a30 <__sfvwrite_r+0x3c0>
   4079c:	3881200c 	andi	r2,r7,1152
   407a0:	10002726 	beq	r2,zero,40840 <__sfvwrite_r+0x1d0>
   407a4:	90800517 	ldw	r2,20(r18)
   407a8:	92000417 	ldw	r8,16(r18)
   407ac:	91400017 	ldw	r5,0(r18)
   407b0:	1087883a 	add	r3,r2,r2
   407b4:	1887883a 	add	r3,r3,r2
   407b8:	1808d7fa 	srli	r4,r3,31
   407bc:	2a21c83a 	sub	r16,r5,r8
   407c0:	80800044 	addi	r2,r16,1
   407c4:	20c9883a 	add	r4,r4,r3
   407c8:	2027d07a 	srai	r19,r4,1
   407cc:	a085883a 	add	r2,r20,r2
   407d0:	980d883a 	mov	r6,r19
   407d4:	9880022e 	bgeu	r19,r2,407e0 <__sfvwrite_r+0x170>
   407d8:	1027883a 	mov	r19,r2
   407dc:	100d883a 	mov	r6,r2
   407e0:	3881000c 	andi	r2,r7,1024
   407e4:	1000b826 	beq	r2,zero,40ac8 <__sfvwrite_r+0x458>
   407e8:	300b883a 	mov	r5,r6
   407ec:	e009883a 	mov	r4,fp
   407f0:	0040b0c0 	call	40b0c <_malloc_r>
   407f4:	10003126 	beq	r2,zero,408bc <__sfvwrite_r+0x24c>
   407f8:	91400417 	ldw	r5,16(r18)
   407fc:	1009883a 	mov	r4,r2
   40800:	800d883a 	mov	r6,r16
   40804:	1023883a 	mov	r17,r2
   40808:	00413300 	call	41330 <memcpy>
   4080c:	90c0030b 	ldhu	r3,12(r18)
   40810:	00beffc4 	movi	r2,-1025
   40814:	1886703a 	and	r3,r3,r2
   40818:	18c02014 	ori	r3,r3,128
   4081c:	90c0030d 	sth	r3,12(r18)
   40820:	9c07c83a 	sub	r3,r19,r16
   40824:	8c05883a 	add	r2,r17,r16
   40828:	a00d883a 	mov	r6,r20
   4082c:	a021883a 	mov	r16,r20
   40830:	90800015 	stw	r2,0(r18)
   40834:	90c00215 	stw	r3,8(r18)
   40838:	94400415 	stw	r17,16(r18)
   4083c:	94c00515 	stw	r19,20(r18)
   40840:	91000017 	ldw	r4,0(r18)
   40844:	b80b883a 	mov	r5,r23
   40848:	a023883a 	mov	r17,r20
   4084c:	00413d00 	call	413d0 <memmove>
   40850:	90c00217 	ldw	r3,8(r18)
   40854:	90800017 	ldw	r2,0(r18)
   40858:	a027883a 	mov	r19,r20
   4085c:	1c07c83a 	sub	r3,r3,r16
   40860:	1405883a 	add	r2,r2,r16
   40864:	90c00215 	stw	r3,8(r18)
   40868:	a021883a 	mov	r16,r20
   4086c:	90800015 	stw	r2,0(r18)
   40870:	b0800217 	ldw	r2,8(r22)
   40874:	1405c83a 	sub	r2,r2,r16
   40878:	b0800215 	stw	r2,8(r22)
   4087c:	103fa826 	beq	r2,zero,40720 <__sfvwrite_r+0xb0>
   40880:	a469c83a 	sub	r20,r20,r17
   40884:	91c0030b 	ldhu	r7,12(r18)
   40888:	bcef883a 	add	r23,r23,r19
   4088c:	a03fbe1e 	bne	r20,zero,40788 <__sfvwrite_r+0x118>
   40890:	adc00017 	ldw	r23,0(r21)
   40894:	ad000117 	ldw	r20,4(r21)
   40898:	ad400204 	addi	r21,r21,8
   4089c:	003fb906 	br	40784 <__sfvwrite_r+0x114>
   408a0:	ac400017 	ldw	r17,0(r21)
   408a4:	ac000117 	ldw	r16,4(r21)
   408a8:	ad400204 	addi	r21,r21,8
   408ac:	003f8a06 	br	406d8 <__sfvwrite_r+0x68>
   408b0:	91400417 	ldw	r5,16(r18)
   408b4:	e009883a 	mov	r4,fp
   408b8:	004226c0 	call	4226c <_free_r>
   408bc:	00800304 	movi	r2,12
   408c0:	e0800015 	stw	r2,0(fp)
   408c4:	9080030b 	ldhu	r2,12(r18)
   408c8:	013fffc4 	movi	r4,-1
   408cc:	10801014 	ori	r2,r2,64
   408d0:	9080030d 	sth	r2,12(r18)
   408d4:	003f9306 	br	40724 <__sfvwrite_r+0xb4>
   408d8:	0027883a 	mov	r19,zero
   408dc:	002f883a 	mov	r23,zero
   408e0:	d8000015 	stw	zero,0(sp)
   408e4:	0029883a 	mov	r20,zero
   408e8:	98001e26 	beq	r19,zero,40964 <__sfvwrite_r+0x2f4>
   408ec:	d8c00017 	ldw	r3,0(sp)
   408f0:	1804c03a 	cmpne	r2,r3,zero
   408f4:	10005e26 	beq	r2,zero,40a70 <__sfvwrite_r+0x400>
   408f8:	9821883a 	mov	r16,r19
   408fc:	a4c0012e 	bgeu	r20,r19,40904 <__sfvwrite_r+0x294>
   40900:	a021883a 	mov	r16,r20
   40904:	91000017 	ldw	r4,0(r18)
   40908:	90800417 	ldw	r2,16(r18)
   4090c:	91800217 	ldw	r6,8(r18)
   40910:	91c00517 	ldw	r7,20(r18)
   40914:	1100022e 	bgeu	r2,r4,40920 <__sfvwrite_r+0x2b0>
   40918:	31e3883a 	add	r17,r6,r7
   4091c:	8c001616 	blt	r17,r16,40978 <__sfvwrite_r+0x308>
   40920:	81c03816 	blt	r16,r7,40a04 <__sfvwrite_r+0x394>
   40924:	90c00917 	ldw	r3,36(r18)
   40928:	91400717 	ldw	r5,28(r18)
   4092c:	e009883a 	mov	r4,fp
   40930:	b80d883a 	mov	r6,r23
   40934:	183ee83a 	callr	r3
   40938:	1023883a 	mov	r17,r2
   4093c:	00bfe10e 	bge	zero,r2,408c4 <__sfvwrite_r+0x254>
   40940:	a469c83a 	sub	r20,r20,r17
   40944:	a0001826 	beq	r20,zero,409a8 <__sfvwrite_r+0x338>
   40948:	b0800217 	ldw	r2,8(r22)
   4094c:	1445c83a 	sub	r2,r2,r17
   40950:	b0800215 	stw	r2,8(r22)
   40954:	103f7226 	beq	r2,zero,40720 <__sfvwrite_r+0xb0>
   40958:	9c67c83a 	sub	r19,r19,r17
   4095c:	bc6f883a 	add	r23,r23,r17
   40960:	983fe21e 	bne	r19,zero,408ec <__sfvwrite_r+0x27c>
   40964:	adc00017 	ldw	r23,0(r21)
   40968:	acc00117 	ldw	r19,4(r21)
   4096c:	ad400204 	addi	r21,r21,8
   40970:	d8000015 	stw	zero,0(sp)
   40974:	003fdc06 	br	408e8 <__sfvwrite_r+0x278>
   40978:	b80b883a 	mov	r5,r23
   4097c:	880d883a 	mov	r6,r17
   40980:	00413d00 	call	413d0 <memmove>
   40984:	90c00017 	ldw	r3,0(r18)
   40988:	e009883a 	mov	r4,fp
   4098c:	900b883a 	mov	r5,r18
   40990:	1c47883a 	add	r3,r3,r17
   40994:	90c00015 	stw	r3,0(r18)
   40998:	0041c500 	call	41c50 <_fflush_r>
   4099c:	103fc91e 	bne	r2,zero,408c4 <__sfvwrite_r+0x254>
   409a0:	a469c83a 	sub	r20,r20,r17
   409a4:	a03fe81e 	bne	r20,zero,40948 <__sfvwrite_r+0x2d8>
   409a8:	e009883a 	mov	r4,fp
   409ac:	900b883a 	mov	r5,r18
   409b0:	0041c500 	call	41c50 <_fflush_r>
   409b4:	103fc31e 	bne	r2,zero,408c4 <__sfvwrite_r+0x254>
   409b8:	d8000015 	stw	zero,0(sp)
   409bc:	003fe206 	br	40948 <__sfvwrite_r+0x2d8>
   409c0:	91000017 	ldw	r4,0(r18)
   409c4:	90800417 	ldw	r2,16(r18)
   409c8:	1100022e 	bgeu	r2,r4,409d4 <__sfvwrite_r+0x364>
   409cc:	8023883a 	mov	r17,r16
   409d0:	85003136 	bltu	r16,r20,40a98 <__sfvwrite_r+0x428>
   409d4:	91c00517 	ldw	r7,20(r18)
   409d8:	a1c01836 	bltu	r20,r7,40a3c <__sfvwrite_r+0x3cc>
   409dc:	90c00917 	ldw	r3,36(r18)
   409e0:	91400717 	ldw	r5,28(r18)
   409e4:	e009883a 	mov	r4,fp
   409e8:	b80d883a 	mov	r6,r23
   409ec:	183ee83a 	callr	r3
   409f0:	1021883a 	mov	r16,r2
   409f4:	00bfb30e 	bge	zero,r2,408c4 <__sfvwrite_r+0x254>
   409f8:	1023883a 	mov	r17,r2
   409fc:	1027883a 	mov	r19,r2
   40a00:	003f9b06 	br	40870 <__sfvwrite_r+0x200>
   40a04:	b80b883a 	mov	r5,r23
   40a08:	800d883a 	mov	r6,r16
   40a0c:	00413d00 	call	413d0 <memmove>
   40a10:	90c00217 	ldw	r3,8(r18)
   40a14:	90800017 	ldw	r2,0(r18)
   40a18:	8023883a 	mov	r17,r16
   40a1c:	1c07c83a 	sub	r3,r3,r16
   40a20:	1405883a 	add	r2,r2,r16
   40a24:	90c00215 	stw	r3,8(r18)
   40a28:	90800015 	stw	r2,0(r18)
   40a2c:	003fc406 	br	40940 <__sfvwrite_r+0x2d0>
   40a30:	a00d883a 	mov	r6,r20
   40a34:	a021883a 	mov	r16,r20
   40a38:	003f8106 	br	40840 <__sfvwrite_r+0x1d0>
   40a3c:	b80b883a 	mov	r5,r23
   40a40:	a00d883a 	mov	r6,r20
   40a44:	00413d00 	call	413d0 <memmove>
   40a48:	90c00217 	ldw	r3,8(r18)
   40a4c:	90800017 	ldw	r2,0(r18)
   40a50:	a021883a 	mov	r16,r20
   40a54:	1d07c83a 	sub	r3,r3,r20
   40a58:	1505883a 	add	r2,r2,r20
   40a5c:	a023883a 	mov	r17,r20
   40a60:	a027883a 	mov	r19,r20
   40a64:	90c00215 	stw	r3,8(r18)
   40a68:	90800015 	stw	r2,0(r18)
   40a6c:	003f8006 	br	40870 <__sfvwrite_r+0x200>
   40a70:	b809883a 	mov	r4,r23
   40a74:	01400284 	movi	r5,10
   40a78:	980d883a 	mov	r6,r19
   40a7c:	004124c0 	call	4124c <memchr>
   40a80:	10001726 	beq	r2,zero,40ae0 <__sfvwrite_r+0x470>
   40a84:	15c5c83a 	sub	r2,r2,r23
   40a88:	15000044 	addi	r20,r2,1
   40a8c:	00800044 	movi	r2,1
   40a90:	d8800015 	stw	r2,0(sp)
   40a94:	003f9806 	br	408f8 <__sfvwrite_r+0x288>
   40a98:	b80b883a 	mov	r5,r23
   40a9c:	800d883a 	mov	r6,r16
   40aa0:	00413d00 	call	413d0 <memmove>
   40aa4:	90c00017 	ldw	r3,0(r18)
   40aa8:	e009883a 	mov	r4,fp
   40aac:	900b883a 	mov	r5,r18
   40ab0:	1c07883a 	add	r3,r3,r16
   40ab4:	90c00015 	stw	r3,0(r18)
   40ab8:	8027883a 	mov	r19,r16
   40abc:	0041c500 	call	41c50 <_fflush_r>
   40ac0:	103f6b26 	beq	r2,zero,40870 <__sfvwrite_r+0x200>
   40ac4:	003f7f06 	br	408c4 <__sfvwrite_r+0x254>
   40ac8:	400b883a 	mov	r5,r8
   40acc:	e009883a 	mov	r4,fp
   40ad0:	00414b00 	call	414b0 <_realloc_r>
   40ad4:	103f7626 	beq	r2,zero,408b0 <__sfvwrite_r+0x240>
   40ad8:	1023883a 	mov	r17,r2
   40adc:	003f5006 	br	40820 <__sfvwrite_r+0x1b0>
   40ae0:	00c00044 	movi	r3,1
   40ae4:	9d000044 	addi	r20,r19,1
   40ae8:	d8c00015 	stw	r3,0(sp)
   40aec:	003f8206 	br	408f8 <__sfvwrite_r+0x288>
   40af0:	9080030b 	ldhu	r2,12(r18)
   40af4:	00c00244 	movi	r3,9
   40af8:	013fffc4 	movi	r4,-1
   40afc:	10801014 	ori	r2,r2,64
   40b00:	9080030d 	sth	r2,12(r18)
   40b04:	e0c00015 	stw	r3,0(fp)
   40b08:	003f0606 	br	40724 <__sfvwrite_r+0xb4>

00040b0c <_malloc_r>:
   40b0c:	defff604 	addi	sp,sp,-40
   40b10:	28c002c4 	addi	r3,r5,11
   40b14:	00800584 	movi	r2,22
   40b18:	dc800215 	stw	r18,8(sp)
   40b1c:	dfc00915 	stw	ra,36(sp)
   40b20:	df000815 	stw	fp,32(sp)
   40b24:	ddc00715 	stw	r23,28(sp)
   40b28:	dd800615 	stw	r22,24(sp)
   40b2c:	dd400515 	stw	r21,20(sp)
   40b30:	dd000415 	stw	r20,16(sp)
   40b34:	dcc00315 	stw	r19,12(sp)
   40b38:	dc400115 	stw	r17,4(sp)
   40b3c:	dc000015 	stw	r16,0(sp)
   40b40:	2025883a 	mov	r18,r4
   40b44:	10c01236 	bltu	r2,r3,40b90 <_malloc_r+0x84>
   40b48:	04400404 	movi	r17,16
   40b4c:	8940142e 	bgeu	r17,r5,40ba0 <_malloc_r+0x94>
   40b50:	00800304 	movi	r2,12
   40b54:	0007883a 	mov	r3,zero
   40b58:	90800015 	stw	r2,0(r18)
   40b5c:	1805883a 	mov	r2,r3
   40b60:	dfc00917 	ldw	ra,36(sp)
   40b64:	df000817 	ldw	fp,32(sp)
   40b68:	ddc00717 	ldw	r23,28(sp)
   40b6c:	dd800617 	ldw	r22,24(sp)
   40b70:	dd400517 	ldw	r21,20(sp)
   40b74:	dd000417 	ldw	r20,16(sp)
   40b78:	dcc00317 	ldw	r19,12(sp)
   40b7c:	dc800217 	ldw	r18,8(sp)
   40b80:	dc400117 	ldw	r17,4(sp)
   40b84:	dc000017 	ldw	r16,0(sp)
   40b88:	dec00a04 	addi	sp,sp,40
   40b8c:	f800283a 	ret
   40b90:	00bffe04 	movi	r2,-8
   40b94:	18a2703a 	and	r17,r3,r2
   40b98:	883fed16 	blt	r17,zero,40b50 <_malloc_r+0x44>
   40b9c:	897fec36 	bltu	r17,r5,40b50 <_malloc_r+0x44>
   40ba0:	9009883a 	mov	r4,r18
   40ba4:	00436800 	call	43680 <__malloc_lock>
   40ba8:	00807dc4 	movi	r2,503
   40bac:	14402b2e 	bgeu	r2,r17,40c5c <_malloc_r+0x150>
   40bb0:	8806d27a 	srli	r3,r17,9
   40bb4:	18003f1e 	bne	r3,zero,40cb4 <_malloc_r+0x1a8>
   40bb8:	880cd0fa 	srli	r6,r17,3
   40bbc:	300490fa 	slli	r2,r6,3
   40bc0:	02c00134 	movhi	r11,4
   40bc4:	5ad5b404 	addi	r11,r11,22224
   40bc8:	12cb883a 	add	r5,r2,r11
   40bcc:	2c000317 	ldw	r16,12(r5)
   40bd0:	580f883a 	mov	r7,r11
   40bd4:	2c00041e 	bne	r5,r16,40be8 <_malloc_r+0xdc>
   40bd8:	00000a06 	br	40c04 <_malloc_r+0xf8>
   40bdc:	1800860e 	bge	r3,zero,40df8 <_malloc_r+0x2ec>
   40be0:	84000317 	ldw	r16,12(r16)
   40be4:	2c000726 	beq	r5,r16,40c04 <_malloc_r+0xf8>
   40be8:	80800117 	ldw	r2,4(r16)
   40bec:	00ffff04 	movi	r3,-4
   40bf0:	10c8703a 	and	r4,r2,r3
   40bf4:	2447c83a 	sub	r3,r4,r17
   40bf8:	008003c4 	movi	r2,15
   40bfc:	10fff70e 	bge	r2,r3,40bdc <_malloc_r+0xd0>
   40c00:	31bfffc4 	addi	r6,r6,-1
   40c04:	32400044 	addi	r9,r6,1
   40c08:	02800134 	movhi	r10,4
   40c0c:	5295b604 	addi	r10,r10,22232
   40c10:	54000217 	ldw	r16,8(r10)
   40c14:	8280a026 	beq	r16,r10,40e98 <_malloc_r+0x38c>
   40c18:	80800117 	ldw	r2,4(r16)
   40c1c:	00ffff04 	movi	r3,-4
   40c20:	10ca703a 	and	r5,r2,r3
   40c24:	2c4dc83a 	sub	r6,r5,r17
   40c28:	008003c4 	movi	r2,15
   40c2c:	11808316 	blt	r2,r6,40e3c <_malloc_r+0x330>
   40c30:	52800315 	stw	r10,12(r10)
   40c34:	52800215 	stw	r10,8(r10)
   40c38:	30002916 	blt	r6,zero,40ce0 <_malloc_r+0x1d4>
   40c3c:	8147883a 	add	r3,r16,r5
   40c40:	18800117 	ldw	r2,4(r3)
   40c44:	9009883a 	mov	r4,r18
   40c48:	10800054 	ori	r2,r2,1
   40c4c:	18800115 	stw	r2,4(r3)
   40c50:	00436a00 	call	436a0 <__malloc_unlock>
   40c54:	80c00204 	addi	r3,r16,8
   40c58:	003fc006 	br	40b5c <_malloc_r+0x50>
   40c5c:	02c00134 	movhi	r11,4
   40c60:	5ad5b404 	addi	r11,r11,22224
   40c64:	8ac5883a 	add	r2,r17,r11
   40c68:	14000317 	ldw	r16,12(r2)
   40c6c:	580f883a 	mov	r7,r11
   40c70:	8806d0fa 	srli	r3,r17,3
   40c74:	14006c26 	beq	r2,r16,40e28 <_malloc_r+0x31c>
   40c78:	80c00117 	ldw	r3,4(r16)
   40c7c:	00bfff04 	movi	r2,-4
   40c80:	81800317 	ldw	r6,12(r16)
   40c84:	1886703a 	and	r3,r3,r2
   40c88:	80c7883a 	add	r3,r16,r3
   40c8c:	18800117 	ldw	r2,4(r3)
   40c90:	81400217 	ldw	r5,8(r16)
   40c94:	9009883a 	mov	r4,r18
   40c98:	10800054 	ori	r2,r2,1
   40c9c:	18800115 	stw	r2,4(r3)
   40ca0:	31400215 	stw	r5,8(r6)
   40ca4:	29800315 	stw	r6,12(r5)
   40ca8:	00436a00 	call	436a0 <__malloc_unlock>
   40cac:	80c00204 	addi	r3,r16,8
   40cb0:	003faa06 	br	40b5c <_malloc_r+0x50>
   40cb4:	00800104 	movi	r2,4
   40cb8:	10c0052e 	bgeu	r2,r3,40cd0 <_malloc_r+0x1c4>
   40cbc:	00800504 	movi	r2,20
   40cc0:	10c07836 	bltu	r2,r3,40ea4 <_malloc_r+0x398>
   40cc4:	198016c4 	addi	r6,r3,91
   40cc8:	300490fa 	slli	r2,r6,3
   40ccc:	003fbc06 	br	40bc0 <_malloc_r+0xb4>
   40cd0:	8804d1ba 	srli	r2,r17,6
   40cd4:	11800e04 	addi	r6,r2,56
   40cd8:	300490fa 	slli	r2,r6,3
   40cdc:	003fb806 	br	40bc0 <_malloc_r+0xb4>
   40ce0:	00807fc4 	movi	r2,511
   40ce4:	1140bb36 	bltu	r2,r5,40fd4 <_malloc_r+0x4c8>
   40ce8:	2806d0fa 	srli	r3,r5,3
   40cec:	573ffe04 	addi	fp,r10,-8
   40cf0:	00800044 	movi	r2,1
   40cf4:	180890fa 	slli	r4,r3,3
   40cf8:	1807d0ba 	srai	r3,r3,2
   40cfc:	e1c00117 	ldw	r7,4(fp)
   40d00:	5909883a 	add	r4,r11,r4
   40d04:	21400217 	ldw	r5,8(r4)
   40d08:	10c4983a 	sll	r2,r2,r3
   40d0c:	81000315 	stw	r4,12(r16)
   40d10:	81400215 	stw	r5,8(r16)
   40d14:	388eb03a 	or	r7,r7,r2
   40d18:	2c000315 	stw	r16,12(r5)
   40d1c:	24000215 	stw	r16,8(r4)
   40d20:	e1c00115 	stw	r7,4(fp)
   40d24:	4807883a 	mov	r3,r9
   40d28:	4800cd16 	blt	r9,zero,41060 <_malloc_r+0x554>
   40d2c:	1807d0ba 	srai	r3,r3,2
   40d30:	00800044 	movi	r2,1
   40d34:	10c8983a 	sll	r4,r2,r3
   40d38:	39004436 	bltu	r7,r4,40e4c <_malloc_r+0x340>
   40d3c:	21c4703a 	and	r2,r4,r7
   40d40:	10000a1e 	bne	r2,zero,40d6c <_malloc_r+0x260>
   40d44:	2109883a 	add	r4,r4,r4
   40d48:	00bfff04 	movi	r2,-4
   40d4c:	4884703a 	and	r2,r9,r2
   40d50:	3906703a 	and	r3,r7,r4
   40d54:	12400104 	addi	r9,r2,4
   40d58:	1800041e 	bne	r3,zero,40d6c <_malloc_r+0x260>
   40d5c:	2109883a 	add	r4,r4,r4
   40d60:	3904703a 	and	r2,r7,r4
   40d64:	4a400104 	addi	r9,r9,4
   40d68:	103ffc26 	beq	r2,zero,40d5c <_malloc_r+0x250>
   40d6c:	480490fa 	slli	r2,r9,3
   40d70:	4819883a 	mov	r12,r9
   40d74:	023fff04 	movi	r8,-4
   40d78:	589b883a 	add	r13,r11,r2
   40d7c:	6807883a 	mov	r3,r13
   40d80:	014003c4 	movi	r5,15
   40d84:	1c000317 	ldw	r16,12(r3)
   40d88:	1c00041e 	bne	r3,r16,40d9c <_malloc_r+0x290>
   40d8c:	0000a706 	br	4102c <_malloc_r+0x520>
   40d90:	3000ab0e 	bge	r6,zero,41040 <_malloc_r+0x534>
   40d94:	84000317 	ldw	r16,12(r16)
   40d98:	1c00a426 	beq	r3,r16,4102c <_malloc_r+0x520>
   40d9c:	80800117 	ldw	r2,4(r16)
   40da0:	1204703a 	and	r2,r2,r8
   40da4:	144dc83a 	sub	r6,r2,r17
   40da8:	29bff90e 	bge	r5,r6,40d90 <_malloc_r+0x284>
   40dac:	81000317 	ldw	r4,12(r16)
   40db0:	80c00217 	ldw	r3,8(r16)
   40db4:	89400054 	ori	r5,r17,1
   40db8:	8445883a 	add	r2,r16,r17
   40dbc:	20c00215 	stw	r3,8(r4)
   40dc0:	19000315 	stw	r4,12(r3)
   40dc4:	81400115 	stw	r5,4(r16)
   40dc8:	1187883a 	add	r3,r2,r6
   40dcc:	31000054 	ori	r4,r6,1
   40dd0:	50800315 	stw	r2,12(r10)
   40dd4:	50800215 	stw	r2,8(r10)
   40dd8:	19800015 	stw	r6,0(r3)
   40ddc:	11000115 	stw	r4,4(r2)
   40de0:	12800215 	stw	r10,8(r2)
   40de4:	12800315 	stw	r10,12(r2)
   40de8:	9009883a 	mov	r4,r18
   40dec:	00436a00 	call	436a0 <__malloc_unlock>
   40df0:	80c00204 	addi	r3,r16,8
   40df4:	003f5906 	br	40b5c <_malloc_r+0x50>
   40df8:	8109883a 	add	r4,r16,r4
   40dfc:	20800117 	ldw	r2,4(r4)
   40e00:	80c00217 	ldw	r3,8(r16)
   40e04:	81400317 	ldw	r5,12(r16)
   40e08:	10800054 	ori	r2,r2,1
   40e0c:	20800115 	stw	r2,4(r4)
   40e10:	28c00215 	stw	r3,8(r5)
   40e14:	19400315 	stw	r5,12(r3)
   40e18:	9009883a 	mov	r4,r18
   40e1c:	00436a00 	call	436a0 <__malloc_unlock>
   40e20:	80c00204 	addi	r3,r16,8
   40e24:	003f4d06 	br	40b5c <_malloc_r+0x50>
   40e28:	80800204 	addi	r2,r16,8
   40e2c:	14000317 	ldw	r16,12(r2)
   40e30:	143f911e 	bne	r2,r16,40c78 <_malloc_r+0x16c>
   40e34:	1a400084 	addi	r9,r3,2
   40e38:	003f7306 	br	40c08 <_malloc_r+0xfc>
   40e3c:	88c00054 	ori	r3,r17,1
   40e40:	8445883a 	add	r2,r16,r17
   40e44:	80c00115 	stw	r3,4(r16)
   40e48:	003fdf06 	br	40dc8 <_malloc_r+0x2bc>
   40e4c:	e4000217 	ldw	r16,8(fp)
   40e50:	00bfff04 	movi	r2,-4
   40e54:	80c00117 	ldw	r3,4(r16)
   40e58:	802d883a 	mov	r22,r16
   40e5c:	18aa703a 	and	r21,r3,r2
   40e60:	ac401636 	bltu	r21,r17,40ebc <_malloc_r+0x3b0>
   40e64:	ac49c83a 	sub	r4,r21,r17
   40e68:	008003c4 	movi	r2,15
   40e6c:	1100130e 	bge	r2,r4,40ebc <_malloc_r+0x3b0>
   40e70:	88800054 	ori	r2,r17,1
   40e74:	8447883a 	add	r3,r16,r17
   40e78:	80800115 	stw	r2,4(r16)
   40e7c:	20800054 	ori	r2,r4,1
   40e80:	18800115 	stw	r2,4(r3)
   40e84:	e0c00215 	stw	r3,8(fp)
   40e88:	9009883a 	mov	r4,r18
   40e8c:	00436a00 	call	436a0 <__malloc_unlock>
   40e90:	80c00204 	addi	r3,r16,8
   40e94:	003f3106 	br	40b5c <_malloc_r+0x50>
   40e98:	39c00117 	ldw	r7,4(r7)
   40e9c:	573ffe04 	addi	fp,r10,-8
   40ea0:	003fa006 	br	40d24 <_malloc_r+0x218>
   40ea4:	00801504 	movi	r2,84
   40ea8:	10c06736 	bltu	r2,r3,41048 <_malloc_r+0x53c>
   40eac:	8804d33a 	srli	r2,r17,12
   40eb0:	11801b84 	addi	r6,r2,110
   40eb4:	300490fa 	slli	r2,r6,3
   40eb8:	003f4106 	br	40bc0 <_malloc_r+0xb4>
   40ebc:	d0a6a017 	ldw	r2,-25984(gp)
   40ec0:	d0e00317 	ldw	r3,-32756(gp)
   40ec4:	053fffc4 	movi	r20,-1
   40ec8:	10800404 	addi	r2,r2,16
   40ecc:	88a7883a 	add	r19,r17,r2
   40ed0:	1d000326 	beq	r3,r20,40ee0 <_malloc_r+0x3d4>
   40ed4:	98c3ffc4 	addi	r3,r19,4095
   40ed8:	00bc0004 	movi	r2,-4096
   40edc:	18a6703a 	and	r19,r3,r2
   40ee0:	9009883a 	mov	r4,r18
   40ee4:	980b883a 	mov	r5,r19
   40ee8:	0041aa40 	call	41aa4 <_sbrk_r>
   40eec:	1009883a 	mov	r4,r2
   40ef0:	15000426 	beq	r2,r20,40f04 <_malloc_r+0x3f8>
   40ef4:	854b883a 	add	r5,r16,r21
   40ef8:	1029883a 	mov	r20,r2
   40efc:	11405a2e 	bgeu	r2,r5,41068 <_malloc_r+0x55c>
   40f00:	87000c26 	beq	r16,fp,40f34 <_malloc_r+0x428>
   40f04:	e4000217 	ldw	r16,8(fp)
   40f08:	80c00117 	ldw	r3,4(r16)
   40f0c:	00bfff04 	movi	r2,-4
   40f10:	1884703a 	and	r2,r3,r2
   40f14:	14400336 	bltu	r2,r17,40f24 <_malloc_r+0x418>
   40f18:	1449c83a 	sub	r4,r2,r17
   40f1c:	008003c4 	movi	r2,15
   40f20:	113fd316 	blt	r2,r4,40e70 <_malloc_r+0x364>
   40f24:	9009883a 	mov	r4,r18
   40f28:	00436a00 	call	436a0 <__malloc_unlock>
   40f2c:	0007883a 	mov	r3,zero
   40f30:	003f0a06 	br	40b5c <_malloc_r+0x50>
   40f34:	05c00174 	movhi	r23,5
   40f38:	bde1e204 	addi	r23,r23,-30840
   40f3c:	b8800017 	ldw	r2,0(r23)
   40f40:	988d883a 	add	r6,r19,r2
   40f44:	b9800015 	stw	r6,0(r23)
   40f48:	d0e00317 	ldw	r3,-32756(gp)
   40f4c:	00bfffc4 	movi	r2,-1
   40f50:	18808e26 	beq	r3,r2,4118c <_malloc_r+0x680>
   40f54:	2145c83a 	sub	r2,r4,r5
   40f58:	3085883a 	add	r2,r6,r2
   40f5c:	b8800015 	stw	r2,0(r23)
   40f60:	20c001cc 	andi	r3,r4,7
   40f64:	18005f1e 	bne	r3,zero,410e4 <_malloc_r+0x5d8>
   40f68:	000b883a 	mov	r5,zero
   40f6c:	a4c5883a 	add	r2,r20,r19
   40f70:	1083ffcc 	andi	r2,r2,4095
   40f74:	00c40004 	movi	r3,4096
   40f78:	1887c83a 	sub	r3,r3,r2
   40f7c:	28e7883a 	add	r19,r5,r3
   40f80:	9009883a 	mov	r4,r18
   40f84:	980b883a 	mov	r5,r19
   40f88:	0041aa40 	call	41aa4 <_sbrk_r>
   40f8c:	1007883a 	mov	r3,r2
   40f90:	00bfffc4 	movi	r2,-1
   40f94:	18807a26 	beq	r3,r2,41180 <_malloc_r+0x674>
   40f98:	1d05c83a 	sub	r2,r3,r20
   40f9c:	9885883a 	add	r2,r19,r2
   40fa0:	10c00054 	ori	r3,r2,1
   40fa4:	b8800017 	ldw	r2,0(r23)
   40fa8:	a021883a 	mov	r16,r20
   40fac:	a0c00115 	stw	r3,4(r20)
   40fb0:	9885883a 	add	r2,r19,r2
   40fb4:	b8800015 	stw	r2,0(r23)
   40fb8:	e5000215 	stw	r20,8(fp)
   40fbc:	b7003626 	beq	r22,fp,41098 <_malloc_r+0x58c>
   40fc0:	018003c4 	movi	r6,15
   40fc4:	35404b36 	bltu	r6,r21,410f4 <_malloc_r+0x5e8>
   40fc8:	00800044 	movi	r2,1
   40fcc:	a0800115 	stw	r2,4(r20)
   40fd0:	003fcd06 	br	40f08 <_malloc_r+0x3fc>
   40fd4:	2808d27a 	srli	r4,r5,9
   40fd8:	2000371e 	bne	r4,zero,410b8 <_malloc_r+0x5ac>
   40fdc:	2808d0fa 	srli	r4,r5,3
   40fe0:	200690fa 	slli	r3,r4,3
   40fe4:	1ad1883a 	add	r8,r3,r11
   40fe8:	41800217 	ldw	r6,8(r8)
   40fec:	41805b26 	beq	r8,r6,4115c <_malloc_r+0x650>
   40ff0:	30800117 	ldw	r2,4(r6)
   40ff4:	00ffff04 	movi	r3,-4
   40ff8:	10c4703a 	and	r2,r2,r3
   40ffc:	2880022e 	bgeu	r5,r2,41008 <_malloc_r+0x4fc>
   41000:	31800217 	ldw	r6,8(r6)
   41004:	41bffa1e 	bne	r8,r6,40ff0 <_malloc_r+0x4e4>
   41008:	32000317 	ldw	r8,12(r6)
   4100c:	39c00117 	ldw	r7,4(r7)
   41010:	82000315 	stw	r8,12(r16)
   41014:	81800215 	stw	r6,8(r16)
   41018:	07000134 	movhi	fp,4
   4101c:	e715b404 	addi	fp,fp,22224
   41020:	34000315 	stw	r16,12(r6)
   41024:	44000215 	stw	r16,8(r8)
   41028:	003f3e06 	br	40d24 <_malloc_r+0x218>
   4102c:	63000044 	addi	r12,r12,1
   41030:	608000cc 	andi	r2,r12,3
   41034:	10005d26 	beq	r2,zero,411ac <_malloc_r+0x6a0>
   41038:	18c00204 	addi	r3,r3,8
   4103c:	003f5106 	br	40d84 <_malloc_r+0x278>
   41040:	8089883a 	add	r4,r16,r2
   41044:	003f6d06 	br	40dfc <_malloc_r+0x2f0>
   41048:	00805504 	movi	r2,340
   4104c:	10c02036 	bltu	r2,r3,410d0 <_malloc_r+0x5c4>
   41050:	8804d3fa 	srli	r2,r17,15
   41054:	11801dc4 	addi	r6,r2,119
   41058:	300490fa 	slli	r2,r6,3
   4105c:	003ed806 	br	40bc0 <_malloc_r+0xb4>
   41060:	48c000c4 	addi	r3,r9,3
   41064:	003f3106 	br	40d2c <_malloc_r+0x220>
   41068:	05c00174 	movhi	r23,5
   4106c:	bde1e204 	addi	r23,r23,-30840
   41070:	b8800017 	ldw	r2,0(r23)
   41074:	988d883a 	add	r6,r19,r2
   41078:	b9800015 	stw	r6,0(r23)
   4107c:	293fb21e 	bne	r5,r4,40f48 <_malloc_r+0x43c>
   41080:	2083ffcc 	andi	r2,r4,4095
   41084:	103fb01e 	bne	r2,zero,40f48 <_malloc_r+0x43c>
   41088:	e4000217 	ldw	r16,8(fp)
   4108c:	9d45883a 	add	r2,r19,r21
   41090:	10800054 	ori	r2,r2,1
   41094:	80800115 	stw	r2,4(r16)
   41098:	b8c00017 	ldw	r3,0(r23)
   4109c:	d0a6a117 	ldw	r2,-25980(gp)
   410a0:	10c0012e 	bgeu	r2,r3,410a8 <_malloc_r+0x59c>
   410a4:	d0e6a115 	stw	r3,-25980(gp)
   410a8:	d0a6a217 	ldw	r2,-25976(gp)
   410ac:	10ff962e 	bgeu	r2,r3,40f08 <_malloc_r+0x3fc>
   410b0:	d0e6a215 	stw	r3,-25976(gp)
   410b4:	003f9406 	br	40f08 <_malloc_r+0x3fc>
   410b8:	00800104 	movi	r2,4
   410bc:	11001e36 	bltu	r2,r4,41138 <_malloc_r+0x62c>
   410c0:	2804d1ba 	srli	r2,r5,6
   410c4:	11000e04 	addi	r4,r2,56
   410c8:	200690fa 	slli	r3,r4,3
   410cc:	003fc506 	br	40fe4 <_malloc_r+0x4d8>
   410d0:	00815504 	movi	r2,1364
   410d4:	10c01d2e 	bgeu	r2,r3,4114c <_malloc_r+0x640>
   410d8:	01801f84 	movi	r6,126
   410dc:	0080fc04 	movi	r2,1008
   410e0:	003eb706 	br	40bc0 <_malloc_r+0xb4>
   410e4:	00800204 	movi	r2,8
   410e8:	10cbc83a 	sub	r5,r2,r3
   410ec:	2169883a 	add	r20,r4,r5
   410f0:	003f9e06 	br	40f6c <_malloc_r+0x460>
   410f4:	00bffe04 	movi	r2,-8
   410f8:	a93ffd04 	addi	r4,r21,-12
   410fc:	2088703a 	and	r4,r4,r2
   41100:	b10b883a 	add	r5,r22,r4
   41104:	00c00144 	movi	r3,5
   41108:	28c00215 	stw	r3,8(r5)
   4110c:	28c00115 	stw	r3,4(r5)
   41110:	b0800117 	ldw	r2,4(r22)
   41114:	1080004c 	andi	r2,r2,1
   41118:	2084b03a 	or	r2,r4,r2
   4111c:	b0800115 	stw	r2,4(r22)
   41120:	313fdd2e 	bgeu	r6,r4,41098 <_malloc_r+0x58c>
   41124:	b1400204 	addi	r5,r22,8
   41128:	9009883a 	mov	r4,r18
   4112c:	004226c0 	call	4226c <_free_r>
   41130:	e4000217 	ldw	r16,8(fp)
   41134:	003fd806 	br	41098 <_malloc_r+0x58c>
   41138:	00800504 	movi	r2,20
   4113c:	11001536 	bltu	r2,r4,41194 <_malloc_r+0x688>
   41140:	210016c4 	addi	r4,r4,91
   41144:	200690fa 	slli	r3,r4,3
   41148:	003fa606 	br	40fe4 <_malloc_r+0x4d8>
   4114c:	8804d4ba 	srli	r2,r17,18
   41150:	11801f04 	addi	r6,r2,124
   41154:	300490fa 	slli	r2,r6,3
   41158:	003e9906 	br	40bc0 <_malloc_r+0xb4>
   4115c:	2009d0ba 	srai	r4,r4,2
   41160:	01400134 	movhi	r5,4
   41164:	2955b404 	addi	r5,r5,22224
   41168:	00c00044 	movi	r3,1
   4116c:	28800117 	ldw	r2,4(r5)
   41170:	1906983a 	sll	r3,r3,r4
   41174:	10c4b03a 	or	r2,r2,r3
   41178:	28800115 	stw	r2,4(r5)
   4117c:	003fa306 	br	4100c <_malloc_r+0x500>
   41180:	0027883a 	mov	r19,zero
   41184:	00c00044 	movi	r3,1
   41188:	003f8606 	br	40fa4 <_malloc_r+0x498>
   4118c:	d1200315 	stw	r4,-32756(gp)
   41190:	003f7306 	br	40f60 <_malloc_r+0x454>
   41194:	00801504 	movi	r2,84
   41198:	11001936 	bltu	r2,r4,41200 <_malloc_r+0x6f4>
   4119c:	2804d33a 	srli	r2,r5,12
   411a0:	11001b84 	addi	r4,r2,110
   411a4:	200690fa 	slli	r3,r4,3
   411a8:	003f8e06 	br	40fe4 <_malloc_r+0x4d8>
   411ac:	480b883a 	mov	r5,r9
   411b0:	6807883a 	mov	r3,r13
   411b4:	288000cc 	andi	r2,r5,3
   411b8:	18fffe04 	addi	r3,r3,-8
   411bc:	297fffc4 	addi	r5,r5,-1
   411c0:	10001526 	beq	r2,zero,41218 <_malloc_r+0x70c>
   411c4:	18800217 	ldw	r2,8(r3)
   411c8:	10fffa26 	beq	r2,r3,411b4 <_malloc_r+0x6a8>
   411cc:	2109883a 	add	r4,r4,r4
   411d0:	393f1e36 	bltu	r7,r4,40e4c <_malloc_r+0x340>
   411d4:	203f1d26 	beq	r4,zero,40e4c <_malloc_r+0x340>
   411d8:	21c4703a 	and	r2,r4,r7
   411dc:	10000226 	beq	r2,zero,411e8 <_malloc_r+0x6dc>
   411e0:	6013883a 	mov	r9,r12
   411e4:	003ee106 	br	40d6c <_malloc_r+0x260>
   411e8:	2109883a 	add	r4,r4,r4
   411ec:	3904703a 	and	r2,r7,r4
   411f0:	63000104 	addi	r12,r12,4
   411f4:	103ffc26 	beq	r2,zero,411e8 <_malloc_r+0x6dc>
   411f8:	6013883a 	mov	r9,r12
   411fc:	003edb06 	br	40d6c <_malloc_r+0x260>
   41200:	00805504 	movi	r2,340
   41204:	11000836 	bltu	r2,r4,41228 <_malloc_r+0x71c>
   41208:	2804d3fa 	srli	r2,r5,15
   4120c:	11001dc4 	addi	r4,r2,119
   41210:	200690fa 	slli	r3,r4,3
   41214:	003f7306 	br	40fe4 <_malloc_r+0x4d8>
   41218:	0104303a 	nor	r2,zero,r4
   4121c:	388e703a 	and	r7,r7,r2
   41220:	e1c00115 	stw	r7,4(fp)
   41224:	003fe906 	br	411cc <_malloc_r+0x6c0>
   41228:	00815504 	movi	r2,1364
   4122c:	1100032e 	bgeu	r2,r4,4123c <_malloc_r+0x730>
   41230:	01001f84 	movi	r4,126
   41234:	00c0fc04 	movi	r3,1008
   41238:	003f6a06 	br	40fe4 <_malloc_r+0x4d8>
   4123c:	2804d4ba 	srli	r2,r5,18
   41240:	11001f04 	addi	r4,r2,124
   41244:	200690fa 	slli	r3,r4,3
   41248:	003f6606 	br	40fe4 <_malloc_r+0x4d8>

0004124c <memchr>:
   4124c:	008000c4 	movi	r2,3
   41250:	29403fcc 	andi	r5,r5,255
   41254:	2007883a 	mov	r3,r4
   41258:	1180022e 	bgeu	r2,r6,41264 <memchr+0x18>
   4125c:	2084703a 	and	r2,r4,r2
   41260:	10000b26 	beq	r2,zero,41290 <memchr+0x44>
   41264:	313fffc4 	addi	r4,r6,-1
   41268:	3000051e 	bne	r6,zero,41280 <memchr+0x34>
   4126c:	00002c06 	br	41320 <memchr+0xd4>
   41270:	213fffc4 	addi	r4,r4,-1
   41274:	00bfffc4 	movi	r2,-1
   41278:	18c00044 	addi	r3,r3,1
   4127c:	20802826 	beq	r4,r2,41320 <memchr+0xd4>
   41280:	18800003 	ldbu	r2,0(r3)
   41284:	28bffa1e 	bne	r5,r2,41270 <memchr+0x24>
   41288:	1805883a 	mov	r2,r3
   4128c:	f800283a 	ret
   41290:	0011883a 	mov	r8,zero
   41294:	0007883a 	mov	r3,zero
   41298:	01c00104 	movi	r7,4
   4129c:	4004923a 	slli	r2,r8,8
   412a0:	18c00044 	addi	r3,r3,1
   412a4:	1151883a 	add	r8,r2,r5
   412a8:	19fffc1e 	bne	r3,r7,4129c <memchr+0x50>
   412ac:	02bfbff4 	movhi	r10,65279
   412b0:	52bfbfc4 	addi	r10,r10,-257
   412b4:	02602074 	movhi	r9,32897
   412b8:	4a602004 	addi	r9,r9,-32640
   412bc:	02c000c4 	movi	r11,3
   412c0:	20800017 	ldw	r2,0(r4)
   412c4:	31bfff04 	addi	r6,r6,-4
   412c8:	200f883a 	mov	r7,r4
   412cc:	1204f03a 	xor	r2,r2,r8
   412d0:	1287883a 	add	r3,r2,r10
   412d4:	1a46703a 	and	r3,r3,r9
   412d8:	0084303a 	nor	r2,zero,r2
   412dc:	10c4703a 	and	r2,r2,r3
   412e0:	10000b26 	beq	r2,zero,41310 <memchr+0xc4>
   412e4:	20800003 	ldbu	r2,0(r4)
   412e8:	28800f26 	beq	r5,r2,41328 <memchr+0xdc>
   412ec:	20800043 	ldbu	r2,1(r4)
   412f0:	21c00044 	addi	r7,r4,1
   412f4:	28800c26 	beq	r5,r2,41328 <memchr+0xdc>
   412f8:	20800083 	ldbu	r2,2(r4)
   412fc:	21c00084 	addi	r7,r4,2
   41300:	28800926 	beq	r5,r2,41328 <memchr+0xdc>
   41304:	208000c3 	ldbu	r2,3(r4)
   41308:	21c000c4 	addi	r7,r4,3
   4130c:	28800626 	beq	r5,r2,41328 <memchr+0xdc>
   41310:	21000104 	addi	r4,r4,4
   41314:	59bfea36 	bltu	r11,r6,412c0 <memchr+0x74>
   41318:	2007883a 	mov	r3,r4
   4131c:	003fd106 	br	41264 <memchr+0x18>
   41320:	0005883a 	mov	r2,zero
   41324:	f800283a 	ret
   41328:	3805883a 	mov	r2,r7
   4132c:	f800283a 	ret

00041330 <memcpy>:
   41330:	01c003c4 	movi	r7,15
   41334:	2007883a 	mov	r3,r4
   41338:	3980032e 	bgeu	r7,r6,41348 <memcpy+0x18>
   4133c:	2904b03a 	or	r2,r5,r4
   41340:	108000cc 	andi	r2,r2,3
   41344:	10000926 	beq	r2,zero,4136c <memcpy+0x3c>
   41348:	30000626 	beq	r6,zero,41364 <memcpy+0x34>
   4134c:	30cd883a 	add	r6,r6,r3
   41350:	28800003 	ldbu	r2,0(r5)
   41354:	29400044 	addi	r5,r5,1
   41358:	18800005 	stb	r2,0(r3)
   4135c:	18c00044 	addi	r3,r3,1
   41360:	30fffb1e 	bne	r6,r3,41350 <memcpy+0x20>
   41364:	2005883a 	mov	r2,r4
   41368:	f800283a 	ret
   4136c:	3811883a 	mov	r8,r7
   41370:	200f883a 	mov	r7,r4
   41374:	28c00017 	ldw	r3,0(r5)
   41378:	31bffc04 	addi	r6,r6,-16
   4137c:	38c00015 	stw	r3,0(r7)
   41380:	28800117 	ldw	r2,4(r5)
   41384:	38800115 	stw	r2,4(r7)
   41388:	28c00217 	ldw	r3,8(r5)
   4138c:	38c00215 	stw	r3,8(r7)
   41390:	28800317 	ldw	r2,12(r5)
   41394:	29400404 	addi	r5,r5,16
   41398:	38800315 	stw	r2,12(r7)
   4139c:	39c00404 	addi	r7,r7,16
   413a0:	41bff436 	bltu	r8,r6,41374 <memcpy+0x44>
   413a4:	008000c4 	movi	r2,3
   413a8:	1180072e 	bgeu	r2,r6,413c8 <memcpy+0x98>
   413ac:	1007883a 	mov	r3,r2
   413b0:	28800017 	ldw	r2,0(r5)
   413b4:	31bfff04 	addi	r6,r6,-4
   413b8:	29400104 	addi	r5,r5,4
   413bc:	38800015 	stw	r2,0(r7)
   413c0:	39c00104 	addi	r7,r7,4
   413c4:	19bffa36 	bltu	r3,r6,413b0 <memcpy+0x80>
   413c8:	3807883a 	mov	r3,r7
   413cc:	003fde06 	br	41348 <memcpy+0x18>

000413d0 <memmove>:
   413d0:	2807883a 	mov	r3,r5
   413d4:	2011883a 	mov	r8,r4
   413d8:	29000c2e 	bgeu	r5,r4,4140c <memmove+0x3c>
   413dc:	298f883a 	add	r7,r5,r6
   413e0:	21c00a2e 	bgeu	r4,r7,4140c <memmove+0x3c>
   413e4:	30000726 	beq	r6,zero,41404 <memmove+0x34>
   413e8:	2187883a 	add	r3,r4,r6
   413ec:	198dc83a 	sub	r6,r3,r6
   413f0:	39ffffc4 	addi	r7,r7,-1
   413f4:	38800003 	ldbu	r2,0(r7)
   413f8:	18ffffc4 	addi	r3,r3,-1
   413fc:	18800005 	stb	r2,0(r3)
   41400:	19bffb1e 	bne	r3,r6,413f0 <memmove+0x20>
   41404:	2005883a 	mov	r2,r4
   41408:	f800283a 	ret
   4140c:	01c003c4 	movi	r7,15
   41410:	39800a36 	bltu	r7,r6,4143c <memmove+0x6c>
   41414:	303ffb26 	beq	r6,zero,41404 <memmove+0x34>
   41418:	400f883a 	mov	r7,r8
   4141c:	320d883a 	add	r6,r6,r8
   41420:	28800003 	ldbu	r2,0(r5)
   41424:	29400044 	addi	r5,r5,1
   41428:	38800005 	stb	r2,0(r7)
   4142c:	39c00044 	addi	r7,r7,1
   41430:	39bffb1e 	bne	r7,r6,41420 <memmove+0x50>
   41434:	2005883a 	mov	r2,r4
   41438:	f800283a 	ret
   4143c:	1904b03a 	or	r2,r3,r4
   41440:	108000cc 	andi	r2,r2,3
   41444:	103ff31e 	bne	r2,zero,41414 <memmove+0x44>
   41448:	3811883a 	mov	r8,r7
   4144c:	180b883a 	mov	r5,r3
   41450:	200f883a 	mov	r7,r4
   41454:	28c00017 	ldw	r3,0(r5)
   41458:	31bffc04 	addi	r6,r6,-16
   4145c:	38c00015 	stw	r3,0(r7)
   41460:	28800117 	ldw	r2,4(r5)
   41464:	38800115 	stw	r2,4(r7)
   41468:	28c00217 	ldw	r3,8(r5)
   4146c:	38c00215 	stw	r3,8(r7)
   41470:	28800317 	ldw	r2,12(r5)
   41474:	29400404 	addi	r5,r5,16
   41478:	38800315 	stw	r2,12(r7)
   4147c:	39c00404 	addi	r7,r7,16
   41480:	41bff436 	bltu	r8,r6,41454 <memmove+0x84>
   41484:	008000c4 	movi	r2,3
   41488:	1180072e 	bgeu	r2,r6,414a8 <memmove+0xd8>
   4148c:	1007883a 	mov	r3,r2
   41490:	28800017 	ldw	r2,0(r5)
   41494:	31bfff04 	addi	r6,r6,-4
   41498:	29400104 	addi	r5,r5,4
   4149c:	38800015 	stw	r2,0(r7)
   414a0:	39c00104 	addi	r7,r7,4
   414a4:	19bffa36 	bltu	r3,r6,41490 <memmove+0xc0>
   414a8:	3811883a 	mov	r8,r7
   414ac:	003fd906 	br	41414 <memmove+0x44>

000414b0 <_realloc_r>:
   414b0:	defff404 	addi	sp,sp,-48
   414b4:	dd800815 	stw	r22,32(sp)
   414b8:	dc800415 	stw	r18,16(sp)
   414bc:	dc400315 	stw	r17,12(sp)
   414c0:	dfc00b15 	stw	ra,44(sp)
   414c4:	df000a15 	stw	fp,40(sp)
   414c8:	ddc00915 	stw	r23,36(sp)
   414cc:	dd400715 	stw	r21,28(sp)
   414d0:	dd000615 	stw	r20,24(sp)
   414d4:	dcc00515 	stw	r19,20(sp)
   414d8:	dc000215 	stw	r16,8(sp)
   414dc:	2825883a 	mov	r18,r5
   414e0:	3023883a 	mov	r17,r6
   414e4:	202d883a 	mov	r22,r4
   414e8:	2800c926 	beq	r5,zero,41810 <_realloc_r+0x360>
   414ec:	00436800 	call	43680 <__malloc_lock>
   414f0:	943ffe04 	addi	r16,r18,-8
   414f4:	88c002c4 	addi	r3,r17,11
   414f8:	00800584 	movi	r2,22
   414fc:	82000117 	ldw	r8,4(r16)
   41500:	10c01b2e 	bgeu	r2,r3,41570 <_realloc_r+0xc0>
   41504:	00bffe04 	movi	r2,-8
   41508:	188e703a 	and	r7,r3,r2
   4150c:	3839883a 	mov	fp,r7
   41510:	38001a16 	blt	r7,zero,4157c <_realloc_r+0xcc>
   41514:	e4401936 	bltu	fp,r17,4157c <_realloc_r+0xcc>
   41518:	013fff04 	movi	r4,-4
   4151c:	4126703a 	and	r19,r8,r4
   41520:	99c02616 	blt	r19,r7,415bc <_realloc_r+0x10c>
   41524:	802b883a 	mov	r21,r16
   41528:	9829883a 	mov	r20,r19
   4152c:	84000204 	addi	r16,r16,8
   41530:	a80f883a 	mov	r7,r21
   41534:	a70dc83a 	sub	r6,r20,fp
   41538:	008003c4 	movi	r2,15
   4153c:	1180c136 	bltu	r2,r6,41844 <_realloc_r+0x394>
   41540:	38800117 	ldw	r2,4(r7)
   41544:	a549883a 	add	r4,r20,r21
   41548:	1080004c 	andi	r2,r2,1
   4154c:	a084b03a 	or	r2,r20,r2
   41550:	38800115 	stw	r2,4(r7)
   41554:	20c00117 	ldw	r3,4(r4)
   41558:	18c00054 	ori	r3,r3,1
   4155c:	20c00115 	stw	r3,4(r4)
   41560:	b009883a 	mov	r4,r22
   41564:	00436a00 	call	436a0 <__malloc_unlock>
   41568:	8023883a 	mov	r17,r16
   4156c:	00000606 	br	41588 <_realloc_r+0xd8>
   41570:	01c00404 	movi	r7,16
   41574:	3839883a 	mov	fp,r7
   41578:	e47fe72e 	bgeu	fp,r17,41518 <_realloc_r+0x68>
   4157c:	00800304 	movi	r2,12
   41580:	0023883a 	mov	r17,zero
   41584:	b0800015 	stw	r2,0(r22)
   41588:	8805883a 	mov	r2,r17
   4158c:	dfc00b17 	ldw	ra,44(sp)
   41590:	df000a17 	ldw	fp,40(sp)
   41594:	ddc00917 	ldw	r23,36(sp)
   41598:	dd800817 	ldw	r22,32(sp)
   4159c:	dd400717 	ldw	r21,28(sp)
   415a0:	dd000617 	ldw	r20,24(sp)
   415a4:	dcc00517 	ldw	r19,20(sp)
   415a8:	dc800417 	ldw	r18,16(sp)
   415ac:	dc400317 	ldw	r17,12(sp)
   415b0:	dc000217 	ldw	r16,8(sp)
   415b4:	dec00c04 	addi	sp,sp,48
   415b8:	f800283a 	ret
   415bc:	00800134 	movhi	r2,4
   415c0:	1095b404 	addi	r2,r2,22224
   415c4:	12400217 	ldw	r9,8(r2)
   415c8:	84cd883a 	add	r6,r16,r19
   415cc:	802b883a 	mov	r21,r16
   415d0:	3240b926 	beq	r6,r9,418b8 <_realloc_r+0x408>
   415d4:	31400117 	ldw	r5,4(r6)
   415d8:	00bfff84 	movi	r2,-2
   415dc:	2884703a 	and	r2,r5,r2
   415e0:	1185883a 	add	r2,r2,r6
   415e4:	10c00117 	ldw	r3,4(r2)
   415e8:	18c0004c 	andi	r3,r3,1
   415ec:	1807003a 	cmpeq	r3,r3,zero
   415f0:	1800a326 	beq	r3,zero,41880 <_realloc_r+0x3d0>
   415f4:	2908703a 	and	r4,r5,r4
   415f8:	9929883a 	add	r20,r19,r4
   415fc:	a1c0a30e 	bge	r20,r7,4188c <_realloc_r+0x3dc>
   41600:	4080004c 	andi	r2,r8,1
   41604:	1000551e 	bne	r2,zero,4175c <_realloc_r+0x2ac>
   41608:	80800017 	ldw	r2,0(r16)
   4160c:	80afc83a 	sub	r23,r16,r2
   41610:	b8c00117 	ldw	r3,4(r23)
   41614:	00bfff04 	movi	r2,-4
   41618:	1884703a 	and	r2,r3,r2
   4161c:	30002e26 	beq	r6,zero,416d8 <_realloc_r+0x228>
   41620:	3240b926 	beq	r6,r9,41908 <_realloc_r+0x458>
   41624:	98a9883a 	add	r20,r19,r2
   41628:	2509883a 	add	r4,r4,r20
   4162c:	d9000015 	stw	r4,0(sp)
   41630:	21c02a16 	blt	r4,r7,416dc <_realloc_r+0x22c>
   41634:	30800317 	ldw	r2,12(r6)
   41638:	30c00217 	ldw	r3,8(r6)
   4163c:	01400904 	movi	r5,36
   41640:	99bfff04 	addi	r6,r19,-4
   41644:	18800315 	stw	r2,12(r3)
   41648:	10c00215 	stw	r3,8(r2)
   4164c:	b9000317 	ldw	r4,12(r23)
   41650:	b8800217 	ldw	r2,8(r23)
   41654:	b82b883a 	mov	r21,r23
   41658:	bc000204 	addi	r16,r23,8
   4165c:	20800215 	stw	r2,8(r4)
   41660:	11000315 	stw	r4,12(r2)
   41664:	2980e436 	bltu	r5,r6,419f8 <_realloc_r+0x548>
   41668:	008004c4 	movi	r2,19
   4166c:	9009883a 	mov	r4,r18
   41670:	8011883a 	mov	r8,r16
   41674:	11800f2e 	bgeu	r2,r6,416b4 <_realloc_r+0x204>
   41678:	90800017 	ldw	r2,0(r18)
   4167c:	ba000404 	addi	r8,r23,16
   41680:	91000204 	addi	r4,r18,8
   41684:	b8800215 	stw	r2,8(r23)
   41688:	90c00117 	ldw	r3,4(r18)
   4168c:	008006c4 	movi	r2,27
   41690:	b8c00315 	stw	r3,12(r23)
   41694:	1180072e 	bgeu	r2,r6,416b4 <_realloc_r+0x204>
   41698:	90c00217 	ldw	r3,8(r18)
   4169c:	ba000604 	addi	r8,r23,24
   416a0:	91000404 	addi	r4,r18,16
   416a4:	b8c00415 	stw	r3,16(r23)
   416a8:	90800317 	ldw	r2,12(r18)
   416ac:	b8800515 	stw	r2,20(r23)
   416b0:	3140e726 	beq	r6,r5,41a50 <_realloc_r+0x5a0>
   416b4:	20800017 	ldw	r2,0(r4)
   416b8:	dd000017 	ldw	r20,0(sp)
   416bc:	b80f883a 	mov	r7,r23
   416c0:	40800015 	stw	r2,0(r8)
   416c4:	20c00117 	ldw	r3,4(r4)
   416c8:	40c00115 	stw	r3,4(r8)
   416cc:	20800217 	ldw	r2,8(r4)
   416d0:	40800215 	stw	r2,8(r8)
   416d4:	003f9706 	br	41534 <_realloc_r+0x84>
   416d8:	98a9883a 	add	r20,r19,r2
   416dc:	a1c01f16 	blt	r20,r7,4175c <_realloc_r+0x2ac>
   416e0:	b8c00317 	ldw	r3,12(r23)
   416e4:	b8800217 	ldw	r2,8(r23)
   416e8:	99bfff04 	addi	r6,r19,-4
   416ec:	01400904 	movi	r5,36
   416f0:	b82b883a 	mov	r21,r23
   416f4:	18800215 	stw	r2,8(r3)
   416f8:	10c00315 	stw	r3,12(r2)
   416fc:	bc000204 	addi	r16,r23,8
   41700:	2980c336 	bltu	r5,r6,41a10 <_realloc_r+0x560>
   41704:	008004c4 	movi	r2,19
   41708:	9009883a 	mov	r4,r18
   4170c:	8011883a 	mov	r8,r16
   41710:	11800f2e 	bgeu	r2,r6,41750 <_realloc_r+0x2a0>
   41714:	90800017 	ldw	r2,0(r18)
   41718:	ba000404 	addi	r8,r23,16
   4171c:	91000204 	addi	r4,r18,8
   41720:	b8800215 	stw	r2,8(r23)
   41724:	90c00117 	ldw	r3,4(r18)
   41728:	008006c4 	movi	r2,27
   4172c:	b8c00315 	stw	r3,12(r23)
   41730:	1180072e 	bgeu	r2,r6,41750 <_realloc_r+0x2a0>
   41734:	90c00217 	ldw	r3,8(r18)
   41738:	ba000604 	addi	r8,r23,24
   4173c:	91000404 	addi	r4,r18,16
   41740:	b8c00415 	stw	r3,16(r23)
   41744:	90800317 	ldw	r2,12(r18)
   41748:	b8800515 	stw	r2,20(r23)
   4174c:	3140c726 	beq	r6,r5,41a6c <_realloc_r+0x5bc>
   41750:	20800017 	ldw	r2,0(r4)
   41754:	b80f883a 	mov	r7,r23
   41758:	003fd906 	br	416c0 <_realloc_r+0x210>
   4175c:	880b883a 	mov	r5,r17
   41760:	b009883a 	mov	r4,r22
   41764:	0040b0c0 	call	40b0c <_malloc_r>
   41768:	1023883a 	mov	r17,r2
   4176c:	10002526 	beq	r2,zero,41804 <_realloc_r+0x354>
   41770:	80800117 	ldw	r2,4(r16)
   41774:	00ffff84 	movi	r3,-2
   41778:	893ffe04 	addi	r4,r17,-8
   4177c:	10c4703a 	and	r2,r2,r3
   41780:	8085883a 	add	r2,r16,r2
   41784:	20809526 	beq	r4,r2,419dc <_realloc_r+0x52c>
   41788:	99bfff04 	addi	r6,r19,-4
   4178c:	01c00904 	movi	r7,36
   41790:	39804536 	bltu	r7,r6,418a8 <_realloc_r+0x3f8>
   41794:	008004c4 	movi	r2,19
   41798:	9009883a 	mov	r4,r18
   4179c:	880b883a 	mov	r5,r17
   417a0:	11800f2e 	bgeu	r2,r6,417e0 <_realloc_r+0x330>
   417a4:	90800017 	ldw	r2,0(r18)
   417a8:	89400204 	addi	r5,r17,8
   417ac:	91000204 	addi	r4,r18,8
   417b0:	88800015 	stw	r2,0(r17)
   417b4:	90c00117 	ldw	r3,4(r18)
   417b8:	008006c4 	movi	r2,27
   417bc:	88c00115 	stw	r3,4(r17)
   417c0:	1180072e 	bgeu	r2,r6,417e0 <_realloc_r+0x330>
   417c4:	90c00217 	ldw	r3,8(r18)
   417c8:	89400404 	addi	r5,r17,16
   417cc:	91000404 	addi	r4,r18,16
   417d0:	88c00215 	stw	r3,8(r17)
   417d4:	90800317 	ldw	r2,12(r18)
   417d8:	88800315 	stw	r2,12(r17)
   417dc:	31c09126 	beq	r6,r7,41a24 <_realloc_r+0x574>
   417e0:	20800017 	ldw	r2,0(r4)
   417e4:	28800015 	stw	r2,0(r5)
   417e8:	20c00117 	ldw	r3,4(r4)
   417ec:	28c00115 	stw	r3,4(r5)
   417f0:	20800217 	ldw	r2,8(r4)
   417f4:	28800215 	stw	r2,8(r5)
   417f8:	900b883a 	mov	r5,r18
   417fc:	b009883a 	mov	r4,r22
   41800:	004226c0 	call	4226c <_free_r>
   41804:	b009883a 	mov	r4,r22
   41808:	00436a00 	call	436a0 <__malloc_unlock>
   4180c:	003f5e06 	br	41588 <_realloc_r+0xd8>
   41810:	300b883a 	mov	r5,r6
   41814:	dfc00b17 	ldw	ra,44(sp)
   41818:	df000a17 	ldw	fp,40(sp)
   4181c:	ddc00917 	ldw	r23,36(sp)
   41820:	dd800817 	ldw	r22,32(sp)
   41824:	dd400717 	ldw	r21,28(sp)
   41828:	dd000617 	ldw	r20,24(sp)
   4182c:	dcc00517 	ldw	r19,20(sp)
   41830:	dc800417 	ldw	r18,16(sp)
   41834:	dc400317 	ldw	r17,12(sp)
   41838:	dc000217 	ldw	r16,8(sp)
   4183c:	dec00c04 	addi	sp,sp,48
   41840:	0040b0c1 	jmpi	40b0c <_malloc_r>
   41844:	38800117 	ldw	r2,4(r7)
   41848:	e54b883a 	add	r5,fp,r21
   4184c:	31000054 	ori	r4,r6,1
   41850:	1080004c 	andi	r2,r2,1
   41854:	1704b03a 	or	r2,r2,fp
   41858:	38800115 	stw	r2,4(r7)
   4185c:	29000115 	stw	r4,4(r5)
   41860:	2987883a 	add	r3,r5,r6
   41864:	18800117 	ldw	r2,4(r3)
   41868:	29400204 	addi	r5,r5,8
   4186c:	b009883a 	mov	r4,r22
   41870:	10800054 	ori	r2,r2,1
   41874:	18800115 	stw	r2,4(r3)
   41878:	004226c0 	call	4226c <_free_r>
   4187c:	003f3806 	br	41560 <_realloc_r+0xb0>
   41880:	000d883a 	mov	r6,zero
   41884:	0009883a 	mov	r4,zero
   41888:	003f5d06 	br	41600 <_realloc_r+0x150>
   4188c:	30c00217 	ldw	r3,8(r6)
   41890:	30800317 	ldw	r2,12(r6)
   41894:	800f883a 	mov	r7,r16
   41898:	84000204 	addi	r16,r16,8
   4189c:	10c00215 	stw	r3,8(r2)
   418a0:	18800315 	stw	r2,12(r3)
   418a4:	003f2306 	br	41534 <_realloc_r+0x84>
   418a8:	8809883a 	mov	r4,r17
   418ac:	900b883a 	mov	r5,r18
   418b0:	00413d00 	call	413d0 <memmove>
   418b4:	003fd006 	br	417f8 <_realloc_r+0x348>
   418b8:	30800117 	ldw	r2,4(r6)
   418bc:	e0c00404 	addi	r3,fp,16
   418c0:	1108703a 	and	r4,r2,r4
   418c4:	9905883a 	add	r2,r19,r4
   418c8:	10ff4d16 	blt	r2,r3,41600 <_realloc_r+0x150>
   418cc:	1705c83a 	sub	r2,r2,fp
   418d0:	870b883a 	add	r5,r16,fp
   418d4:	10800054 	ori	r2,r2,1
   418d8:	28800115 	stw	r2,4(r5)
   418dc:	80c00117 	ldw	r3,4(r16)
   418e0:	00800134 	movhi	r2,4
   418e4:	1095b404 	addi	r2,r2,22224
   418e8:	b009883a 	mov	r4,r22
   418ec:	18c0004c 	andi	r3,r3,1
   418f0:	e0c6b03a 	or	r3,fp,r3
   418f4:	11400215 	stw	r5,8(r2)
   418f8:	80c00115 	stw	r3,4(r16)
   418fc:	00436a00 	call	436a0 <__malloc_unlock>
   41900:	84400204 	addi	r17,r16,8
   41904:	003f2006 	br	41588 <_realloc_r+0xd8>
   41908:	98a9883a 	add	r20,r19,r2
   4190c:	2509883a 	add	r4,r4,r20
   41910:	e0800404 	addi	r2,fp,16
   41914:	d9000115 	stw	r4,4(sp)
   41918:	20bf7016 	blt	r4,r2,416dc <_realloc_r+0x22c>
   4191c:	b8c00317 	ldw	r3,12(r23)
   41920:	b8800217 	ldw	r2,8(r23)
   41924:	99bfff04 	addi	r6,r19,-4
   41928:	01400904 	movi	r5,36
   4192c:	18800215 	stw	r2,8(r3)
   41930:	10c00315 	stw	r3,12(r2)
   41934:	bc400204 	addi	r17,r23,8
   41938:	29804136 	bltu	r5,r6,41a40 <_realloc_r+0x590>
   4193c:	008004c4 	movi	r2,19
   41940:	9009883a 	mov	r4,r18
   41944:	880f883a 	mov	r7,r17
   41948:	11800f2e 	bgeu	r2,r6,41988 <_realloc_r+0x4d8>
   4194c:	90800017 	ldw	r2,0(r18)
   41950:	b9c00404 	addi	r7,r23,16
   41954:	91000204 	addi	r4,r18,8
   41958:	b8800215 	stw	r2,8(r23)
   4195c:	90c00117 	ldw	r3,4(r18)
   41960:	008006c4 	movi	r2,27
   41964:	b8c00315 	stw	r3,12(r23)
   41968:	1180072e 	bgeu	r2,r6,41988 <_realloc_r+0x4d8>
   4196c:	90c00217 	ldw	r3,8(r18)
   41970:	b9c00604 	addi	r7,r23,24
   41974:	91000404 	addi	r4,r18,16
   41978:	b8c00415 	stw	r3,16(r23)
   4197c:	90800317 	ldw	r2,12(r18)
   41980:	b8800515 	stw	r2,20(r23)
   41984:	31404026 	beq	r6,r5,41a88 <_realloc_r+0x5d8>
   41988:	20800017 	ldw	r2,0(r4)
   4198c:	38800015 	stw	r2,0(r7)
   41990:	20c00117 	ldw	r3,4(r4)
   41994:	38c00115 	stw	r3,4(r7)
   41998:	20800217 	ldw	r2,8(r4)
   4199c:	38800215 	stw	r2,8(r7)
   419a0:	d8c00117 	ldw	r3,4(sp)
   419a4:	bf0b883a 	add	r5,r23,fp
   419a8:	b009883a 	mov	r4,r22
   419ac:	1f05c83a 	sub	r2,r3,fp
   419b0:	10800054 	ori	r2,r2,1
   419b4:	28800115 	stw	r2,4(r5)
   419b8:	b8c00117 	ldw	r3,4(r23)
   419bc:	00800134 	movhi	r2,4
   419c0:	1095b404 	addi	r2,r2,22224
   419c4:	11400215 	stw	r5,8(r2)
   419c8:	18c0004c 	andi	r3,r3,1
   419cc:	e0c6b03a 	or	r3,fp,r3
   419d0:	b8c00115 	stw	r3,4(r23)
   419d4:	00436a00 	call	436a0 <__malloc_unlock>
   419d8:	003eeb06 	br	41588 <_realloc_r+0xd8>
   419dc:	20800117 	ldw	r2,4(r4)
   419e0:	00ffff04 	movi	r3,-4
   419e4:	800f883a 	mov	r7,r16
   419e8:	10c4703a 	and	r2,r2,r3
   419ec:	98a9883a 	add	r20,r19,r2
   419f0:	84000204 	addi	r16,r16,8
   419f4:	003ecf06 	br	41534 <_realloc_r+0x84>
   419f8:	900b883a 	mov	r5,r18
   419fc:	8009883a 	mov	r4,r16
   41a00:	00413d00 	call	413d0 <memmove>
   41a04:	dd000017 	ldw	r20,0(sp)
   41a08:	b80f883a 	mov	r7,r23
   41a0c:	003ec906 	br	41534 <_realloc_r+0x84>
   41a10:	900b883a 	mov	r5,r18
   41a14:	8009883a 	mov	r4,r16
   41a18:	00413d00 	call	413d0 <memmove>
   41a1c:	b80f883a 	mov	r7,r23
   41a20:	003ec406 	br	41534 <_realloc_r+0x84>
   41a24:	90c00417 	ldw	r3,16(r18)
   41a28:	89400604 	addi	r5,r17,24
   41a2c:	91000604 	addi	r4,r18,24
   41a30:	88c00415 	stw	r3,16(r17)
   41a34:	90800517 	ldw	r2,20(r18)
   41a38:	88800515 	stw	r2,20(r17)
   41a3c:	003f6806 	br	417e0 <_realloc_r+0x330>
   41a40:	900b883a 	mov	r5,r18
   41a44:	8809883a 	mov	r4,r17
   41a48:	00413d00 	call	413d0 <memmove>
   41a4c:	003fd406 	br	419a0 <_realloc_r+0x4f0>
   41a50:	90c00417 	ldw	r3,16(r18)
   41a54:	91000604 	addi	r4,r18,24
   41a58:	ba000804 	addi	r8,r23,32
   41a5c:	b8c00615 	stw	r3,24(r23)
   41a60:	90800517 	ldw	r2,20(r18)
   41a64:	b8800715 	stw	r2,28(r23)
   41a68:	003f1206 	br	416b4 <_realloc_r+0x204>
   41a6c:	90c00417 	ldw	r3,16(r18)
   41a70:	91000604 	addi	r4,r18,24
   41a74:	ba000804 	addi	r8,r23,32
   41a78:	b8c00615 	stw	r3,24(r23)
   41a7c:	90800517 	ldw	r2,20(r18)
   41a80:	b8800715 	stw	r2,28(r23)
   41a84:	003f3206 	br	41750 <_realloc_r+0x2a0>
   41a88:	90c00417 	ldw	r3,16(r18)
   41a8c:	91000604 	addi	r4,r18,24
   41a90:	b9c00804 	addi	r7,r23,32
   41a94:	b8c00615 	stw	r3,24(r23)
   41a98:	90800517 	ldw	r2,20(r18)
   41a9c:	b8800715 	stw	r2,28(r23)
   41aa0:	003fb906 	br	41988 <_realloc_r+0x4d8>

00041aa4 <_sbrk_r>:
   41aa4:	defffd04 	addi	sp,sp,-12
   41aa8:	dc000015 	stw	r16,0(sp)
   41aac:	04000174 	movhi	r16,5
   41ab0:	8421db04 	addi	r16,r16,-30868
   41ab4:	dc400115 	stw	r17,4(sp)
   41ab8:	80000015 	stw	zero,0(r16)
   41abc:	2023883a 	mov	r17,r4
   41ac0:	2809883a 	mov	r4,r5
   41ac4:	dfc00215 	stw	ra,8(sp)
   41ac8:	00438a00 	call	438a0 <sbrk>
   41acc:	1007883a 	mov	r3,r2
   41ad0:	00bfffc4 	movi	r2,-1
   41ad4:	18800626 	beq	r3,r2,41af0 <_sbrk_r+0x4c>
   41ad8:	1805883a 	mov	r2,r3
   41adc:	dfc00217 	ldw	ra,8(sp)
   41ae0:	dc400117 	ldw	r17,4(sp)
   41ae4:	dc000017 	ldw	r16,0(sp)
   41ae8:	dec00304 	addi	sp,sp,12
   41aec:	f800283a 	ret
   41af0:	80800017 	ldw	r2,0(r16)
   41af4:	103ff826 	beq	r2,zero,41ad8 <_sbrk_r+0x34>
   41af8:	88800015 	stw	r2,0(r17)
   41afc:	1805883a 	mov	r2,r3
   41b00:	dfc00217 	ldw	ra,8(sp)
   41b04:	dc400117 	ldw	r17,4(sp)
   41b08:	dc000017 	ldw	r16,0(sp)
   41b0c:	dec00304 	addi	sp,sp,12
   41b10:	f800283a 	ret

00041b14 <__swsetup_r>:
   41b14:	00800134 	movhi	r2,4
   41b18:	109b3804 	addi	r2,r2,27872
   41b1c:	10c00017 	ldw	r3,0(r2)
   41b20:	defffd04 	addi	sp,sp,-12
   41b24:	dc400115 	stw	r17,4(sp)
   41b28:	dc000015 	stw	r16,0(sp)
   41b2c:	dfc00215 	stw	ra,8(sp)
   41b30:	2023883a 	mov	r17,r4
   41b34:	2821883a 	mov	r16,r5
   41b38:	18000226 	beq	r3,zero,41b44 <__swsetup_r+0x30>
   41b3c:	18800e17 	ldw	r2,56(r3)
   41b40:	10001f26 	beq	r2,zero,41bc0 <__swsetup_r+0xac>
   41b44:	8100030b 	ldhu	r4,12(r16)
   41b48:	2080020c 	andi	r2,r4,8
   41b4c:	10002826 	beq	r2,zero,41bf0 <__swsetup_r+0xdc>
   41b50:	81400417 	ldw	r5,16(r16)
   41b54:	28001d26 	beq	r5,zero,41bcc <__swsetup_r+0xb8>
   41b58:	2080004c 	andi	r2,r4,1
   41b5c:	1005003a 	cmpeq	r2,r2,zero
   41b60:	10000b26 	beq	r2,zero,41b90 <__swsetup_r+0x7c>
   41b64:	2080008c 	andi	r2,r4,2
   41b68:	10001226 	beq	r2,zero,41bb4 <__swsetup_r+0xa0>
   41b6c:	0005883a 	mov	r2,zero
   41b70:	80800215 	stw	r2,8(r16)
   41b74:	28000b26 	beq	r5,zero,41ba4 <__swsetup_r+0x90>
   41b78:	0005883a 	mov	r2,zero
   41b7c:	dfc00217 	ldw	ra,8(sp)
   41b80:	dc400117 	ldw	r17,4(sp)
   41b84:	dc000017 	ldw	r16,0(sp)
   41b88:	dec00304 	addi	sp,sp,12
   41b8c:	f800283a 	ret
   41b90:	80800517 	ldw	r2,20(r16)
   41b94:	80000215 	stw	zero,8(r16)
   41b98:	0085c83a 	sub	r2,zero,r2
   41b9c:	80800615 	stw	r2,24(r16)
   41ba0:	283ff51e 	bne	r5,zero,41b78 <__swsetup_r+0x64>
   41ba4:	2080200c 	andi	r2,r4,128
   41ba8:	103ff326 	beq	r2,zero,41b78 <__swsetup_r+0x64>
   41bac:	00bfffc4 	movi	r2,-1
   41bb0:	003ff206 	br	41b7c <__swsetup_r+0x68>
   41bb4:	80800517 	ldw	r2,20(r16)
   41bb8:	80800215 	stw	r2,8(r16)
   41bbc:	003fed06 	br	41b74 <__swsetup_r+0x60>
   41bc0:	1809883a 	mov	r4,r3
   41bc4:	0041ee80 	call	41ee8 <__sinit>
   41bc8:	003fde06 	br	41b44 <__swsetup_r+0x30>
   41bcc:	20c0a00c 	andi	r3,r4,640
   41bd0:	00808004 	movi	r2,512
   41bd4:	18bfe026 	beq	r3,r2,41b58 <__swsetup_r+0x44>
   41bd8:	8809883a 	mov	r4,r17
   41bdc:	800b883a 	mov	r5,r16
   41be0:	00427000 	call	42700 <__smakebuf_r>
   41be4:	8100030b 	ldhu	r4,12(r16)
   41be8:	81400417 	ldw	r5,16(r16)
   41bec:	003fda06 	br	41b58 <__swsetup_r+0x44>
   41bf0:	2080040c 	andi	r2,r4,16
   41bf4:	103fed26 	beq	r2,zero,41bac <__swsetup_r+0x98>
   41bf8:	2080010c 	andi	r2,r4,4
   41bfc:	10001226 	beq	r2,zero,41c48 <__swsetup_r+0x134>
   41c00:	81400c17 	ldw	r5,48(r16)
   41c04:	28000526 	beq	r5,zero,41c1c <__swsetup_r+0x108>
   41c08:	80801004 	addi	r2,r16,64
   41c0c:	28800226 	beq	r5,r2,41c18 <__swsetup_r+0x104>
   41c10:	8809883a 	mov	r4,r17
   41c14:	004226c0 	call	4226c <_free_r>
   41c18:	80000c15 	stw	zero,48(r16)
   41c1c:	8080030b 	ldhu	r2,12(r16)
   41c20:	81400417 	ldw	r5,16(r16)
   41c24:	80000115 	stw	zero,4(r16)
   41c28:	10bff6cc 	andi	r2,r2,65499
   41c2c:	8080030d 	sth	r2,12(r16)
   41c30:	81400015 	stw	r5,0(r16)
   41c34:	8080030b 	ldhu	r2,12(r16)
   41c38:	10800214 	ori	r2,r2,8
   41c3c:	113fffcc 	andi	r4,r2,65535
   41c40:	8080030d 	sth	r2,12(r16)
   41c44:	003fc306 	br	41b54 <__swsetup_r+0x40>
   41c48:	81400417 	ldw	r5,16(r16)
   41c4c:	003ff906 	br	41c34 <__swsetup_r+0x120>

00041c50 <_fflush_r>:
   41c50:	defffb04 	addi	sp,sp,-20
   41c54:	dcc00315 	stw	r19,12(sp)
   41c58:	dc800215 	stw	r18,8(sp)
   41c5c:	dfc00415 	stw	ra,16(sp)
   41c60:	dc400115 	stw	r17,4(sp)
   41c64:	dc000015 	stw	r16,0(sp)
   41c68:	2027883a 	mov	r19,r4
   41c6c:	2825883a 	mov	r18,r5
   41c70:	20000226 	beq	r4,zero,41c7c <_fflush_r+0x2c>
   41c74:	20800e17 	ldw	r2,56(r4)
   41c78:	10005626 	beq	r2,zero,41dd4 <_fflush_r+0x184>
   41c7c:	9100030b 	ldhu	r4,12(r18)
   41c80:	20ffffcc 	andi	r3,r4,65535
   41c84:	18e0001c 	xori	r3,r3,32768
   41c88:	18e00004 	addi	r3,r3,-32768
   41c8c:	1880020c 	andi	r2,r3,8
   41c90:	1000261e 	bne	r2,zero,41d2c <_fflush_r+0xdc>
   41c94:	90c00117 	ldw	r3,4(r18)
   41c98:	20820014 	ori	r2,r4,2048
   41c9c:	9080030d 	sth	r2,12(r18)
   41ca0:	1009883a 	mov	r4,r2
   41ca4:	00c0400e 	bge	zero,r3,41da8 <_fflush_r+0x158>
   41ca8:	92000a17 	ldw	r8,40(r18)
   41cac:	40004026 	beq	r8,zero,41db0 <_fflush_r+0x160>
   41cb0:	2084000c 	andi	r2,r4,4096
   41cb4:	10005326 	beq	r2,zero,41e04 <_fflush_r+0x1b4>
   41cb8:	94001417 	ldw	r16,80(r18)
   41cbc:	9080030b 	ldhu	r2,12(r18)
   41cc0:	1080010c 	andi	r2,r2,4
   41cc4:	1000481e 	bne	r2,zero,41de8 <_fflush_r+0x198>
   41cc8:	91400717 	ldw	r5,28(r18)
   41ccc:	9809883a 	mov	r4,r19
   41cd0:	800d883a 	mov	r6,r16
   41cd4:	000f883a 	mov	r7,zero
   41cd8:	403ee83a 	callr	r8
   41cdc:	8080261e 	bne	r16,r2,41d78 <_fflush_r+0x128>
   41ce0:	9080030b 	ldhu	r2,12(r18)
   41ce4:	91000417 	ldw	r4,16(r18)
   41ce8:	90000115 	stw	zero,4(r18)
   41cec:	10bdffcc 	andi	r2,r2,63487
   41cf0:	10ffffcc 	andi	r3,r2,65535
   41cf4:	18c4000c 	andi	r3,r3,4096
   41cf8:	9080030d 	sth	r2,12(r18)
   41cfc:	91000015 	stw	r4,0(r18)
   41d00:	18002b26 	beq	r3,zero,41db0 <_fflush_r+0x160>
   41d04:	0007883a 	mov	r3,zero
   41d08:	1805883a 	mov	r2,r3
   41d0c:	94001415 	stw	r16,80(r18)
   41d10:	dfc00417 	ldw	ra,16(sp)
   41d14:	dcc00317 	ldw	r19,12(sp)
   41d18:	dc800217 	ldw	r18,8(sp)
   41d1c:	dc400117 	ldw	r17,4(sp)
   41d20:	dc000017 	ldw	r16,0(sp)
   41d24:	dec00504 	addi	sp,sp,20
   41d28:	f800283a 	ret
   41d2c:	94400417 	ldw	r17,16(r18)
   41d30:	88001f26 	beq	r17,zero,41db0 <_fflush_r+0x160>
   41d34:	90800017 	ldw	r2,0(r18)
   41d38:	18c000cc 	andi	r3,r3,3
   41d3c:	94400015 	stw	r17,0(r18)
   41d40:	1461c83a 	sub	r16,r2,r17
   41d44:	18002526 	beq	r3,zero,41ddc <_fflush_r+0x18c>
   41d48:	0005883a 	mov	r2,zero
   41d4c:	90800215 	stw	r2,8(r18)
   41d50:	0400170e 	bge	zero,r16,41db0 <_fflush_r+0x160>
   41d54:	90c00917 	ldw	r3,36(r18)
   41d58:	91400717 	ldw	r5,28(r18)
   41d5c:	880d883a 	mov	r6,r17
   41d60:	800f883a 	mov	r7,r16
   41d64:	9809883a 	mov	r4,r19
   41d68:	183ee83a 	callr	r3
   41d6c:	88a3883a 	add	r17,r17,r2
   41d70:	80a1c83a 	sub	r16,r16,r2
   41d74:	00bff616 	blt	zero,r2,41d50 <_fflush_r+0x100>
   41d78:	9080030b 	ldhu	r2,12(r18)
   41d7c:	00ffffc4 	movi	r3,-1
   41d80:	10801014 	ori	r2,r2,64
   41d84:	9080030d 	sth	r2,12(r18)
   41d88:	1805883a 	mov	r2,r3
   41d8c:	dfc00417 	ldw	ra,16(sp)
   41d90:	dcc00317 	ldw	r19,12(sp)
   41d94:	dc800217 	ldw	r18,8(sp)
   41d98:	dc400117 	ldw	r17,4(sp)
   41d9c:	dc000017 	ldw	r16,0(sp)
   41da0:	dec00504 	addi	sp,sp,20
   41da4:	f800283a 	ret
   41da8:	90800f17 	ldw	r2,60(r18)
   41dac:	00bfbe16 	blt	zero,r2,41ca8 <_fflush_r+0x58>
   41db0:	0007883a 	mov	r3,zero
   41db4:	1805883a 	mov	r2,r3
   41db8:	dfc00417 	ldw	ra,16(sp)
   41dbc:	dcc00317 	ldw	r19,12(sp)
   41dc0:	dc800217 	ldw	r18,8(sp)
   41dc4:	dc400117 	ldw	r17,4(sp)
   41dc8:	dc000017 	ldw	r16,0(sp)
   41dcc:	dec00504 	addi	sp,sp,20
   41dd0:	f800283a 	ret
   41dd4:	0041ee80 	call	41ee8 <__sinit>
   41dd8:	003fa806 	br	41c7c <_fflush_r+0x2c>
   41ddc:	90800517 	ldw	r2,20(r18)
   41de0:	90800215 	stw	r2,8(r18)
   41de4:	003fda06 	br	41d50 <_fflush_r+0x100>
   41de8:	90800117 	ldw	r2,4(r18)
   41dec:	90c00c17 	ldw	r3,48(r18)
   41df0:	80a1c83a 	sub	r16,r16,r2
   41df4:	183fb426 	beq	r3,zero,41cc8 <_fflush_r+0x78>
   41df8:	90800f17 	ldw	r2,60(r18)
   41dfc:	80a1c83a 	sub	r16,r16,r2
   41e00:	003fb106 	br	41cc8 <_fflush_r+0x78>
   41e04:	91400717 	ldw	r5,28(r18)
   41e08:	9809883a 	mov	r4,r19
   41e0c:	000d883a 	mov	r6,zero
   41e10:	01c00044 	movi	r7,1
   41e14:	403ee83a 	callr	r8
   41e18:	1021883a 	mov	r16,r2
   41e1c:	00bfffc4 	movi	r2,-1
   41e20:	80800226 	beq	r16,r2,41e2c <_fflush_r+0x1dc>
   41e24:	92000a17 	ldw	r8,40(r18)
   41e28:	003fa406 	br	41cbc <_fflush_r+0x6c>
   41e2c:	98c00017 	ldw	r3,0(r19)
   41e30:	00800744 	movi	r2,29
   41e34:	18bfde26 	beq	r3,r2,41db0 <_fflush_r+0x160>
   41e38:	9080030b 	ldhu	r2,12(r18)
   41e3c:	8007883a 	mov	r3,r16
   41e40:	10801014 	ori	r2,r2,64
   41e44:	9080030d 	sth	r2,12(r18)
   41e48:	003fcf06 	br	41d88 <_fflush_r+0x138>

00041e4c <fflush>:
   41e4c:	01400134 	movhi	r5,4
   41e50:	29471404 	addi	r5,r5,7248
   41e54:	2007883a 	mov	r3,r4
   41e58:	20000526 	beq	r4,zero,41e70 <fflush+0x24>
   41e5c:	00800134 	movhi	r2,4
   41e60:	109b3804 	addi	r2,r2,27872
   41e64:	11000017 	ldw	r4,0(r2)
   41e68:	180b883a 	mov	r5,r3
   41e6c:	0041c501 	jmpi	41c50 <_fflush_r>
   41e70:	00800134 	movhi	r2,4
   41e74:	109b3904 	addi	r2,r2,27876
   41e78:	11000017 	ldw	r4,0(r2)
   41e7c:	00425801 	jmpi	42580 <_fwalk_reent>

00041e80 <std>:
   41e80:	00800134 	movhi	r2,4
   41e84:	108a4b04 	addi	r2,r2,10540
   41e88:	20800b15 	stw	r2,44(r4)
   41e8c:	00800134 	movhi	r2,4
   41e90:	108a8604 	addi	r2,r2,10776
   41e94:	20800815 	stw	r2,32(r4)
   41e98:	00c00134 	movhi	r3,4
   41e9c:	18ca6704 	addi	r3,r3,10652
   41ea0:	00800134 	movhi	r2,4
   41ea4:	108a4d04 	addi	r2,r2,10548
   41ea8:	2140030d 	sth	r5,12(r4)
   41eac:	2180038d 	sth	r6,14(r4)
   41eb0:	20c00915 	stw	r3,36(r4)
   41eb4:	20800a15 	stw	r2,40(r4)
   41eb8:	20000015 	stw	zero,0(r4)
   41ebc:	20000115 	stw	zero,4(r4)
   41ec0:	20000215 	stw	zero,8(r4)
   41ec4:	20000415 	stw	zero,16(r4)
   41ec8:	20000515 	stw	zero,20(r4)
   41ecc:	20000615 	stw	zero,24(r4)
   41ed0:	21000715 	stw	r4,28(r4)
   41ed4:	f800283a 	ret

00041ed8 <__sfp_lock_acquire>:
   41ed8:	f800283a 	ret

00041edc <__sfp_lock_release>:
   41edc:	f800283a 	ret

00041ee0 <__sinit_lock_acquire>:
   41ee0:	f800283a 	ret

00041ee4 <__sinit_lock_release>:
   41ee4:	f800283a 	ret

00041ee8 <__sinit>:
   41ee8:	20800e17 	ldw	r2,56(r4)
   41eec:	defffd04 	addi	sp,sp,-12
   41ef0:	dc400115 	stw	r17,4(sp)
   41ef4:	dc000015 	stw	r16,0(sp)
   41ef8:	dfc00215 	stw	ra,8(sp)
   41efc:	04400044 	movi	r17,1
   41f00:	01400104 	movi	r5,4
   41f04:	000d883a 	mov	r6,zero
   41f08:	2021883a 	mov	r16,r4
   41f0c:	2200bb04 	addi	r8,r4,748
   41f10:	200f883a 	mov	r7,r4
   41f14:	10000526 	beq	r2,zero,41f2c <__sinit+0x44>
   41f18:	dfc00217 	ldw	ra,8(sp)
   41f1c:	dc400117 	ldw	r17,4(sp)
   41f20:	dc000017 	ldw	r16,0(sp)
   41f24:	dec00304 	addi	sp,sp,12
   41f28:	f800283a 	ret
   41f2c:	21000117 	ldw	r4,4(r4)
   41f30:	00800134 	movhi	r2,4
   41f34:	1087f304 	addi	r2,r2,8140
   41f38:	00c000c4 	movi	r3,3
   41f3c:	80800f15 	stw	r2,60(r16)
   41f40:	80c0b915 	stw	r3,740(r16)
   41f44:	8200ba15 	stw	r8,744(r16)
   41f48:	84400e15 	stw	r17,56(r16)
   41f4c:	8000b815 	stw	zero,736(r16)
   41f50:	0041e800 	call	41e80 <std>
   41f54:	81000217 	ldw	r4,8(r16)
   41f58:	880d883a 	mov	r6,r17
   41f5c:	800f883a 	mov	r7,r16
   41f60:	01400284 	movi	r5,10
   41f64:	0041e800 	call	41e80 <std>
   41f68:	81000317 	ldw	r4,12(r16)
   41f6c:	800f883a 	mov	r7,r16
   41f70:	01400484 	movi	r5,18
   41f74:	01800084 	movi	r6,2
   41f78:	dfc00217 	ldw	ra,8(sp)
   41f7c:	dc400117 	ldw	r17,4(sp)
   41f80:	dc000017 	ldw	r16,0(sp)
   41f84:	dec00304 	addi	sp,sp,12
   41f88:	0041e801 	jmpi	41e80 <std>

00041f8c <__fp_lock>:
   41f8c:	0005883a 	mov	r2,zero
   41f90:	f800283a 	ret

00041f94 <__fp_unlock>:
   41f94:	0005883a 	mov	r2,zero
   41f98:	f800283a 	ret

00041f9c <__fp_unlock_all>:
   41f9c:	00800134 	movhi	r2,4
   41fa0:	109b3804 	addi	r2,r2,27872
   41fa4:	11000017 	ldw	r4,0(r2)
   41fa8:	01400134 	movhi	r5,4
   41fac:	2947e504 	addi	r5,r5,8084
   41fb0:	00426481 	jmpi	42648 <_fwalk>

00041fb4 <__fp_lock_all>:
   41fb4:	00800134 	movhi	r2,4
   41fb8:	109b3804 	addi	r2,r2,27872
   41fbc:	11000017 	ldw	r4,0(r2)
   41fc0:	01400134 	movhi	r5,4
   41fc4:	2947e304 	addi	r5,r5,8076
   41fc8:	00426481 	jmpi	42648 <_fwalk>

00041fcc <_cleanup_r>:
   41fcc:	01400134 	movhi	r5,4
   41fd0:	294b1c04 	addi	r5,r5,11376
   41fd4:	00426481 	jmpi	42648 <_fwalk>

00041fd8 <_cleanup>:
   41fd8:	00800134 	movhi	r2,4
   41fdc:	109b3904 	addi	r2,r2,27876
   41fe0:	11000017 	ldw	r4,0(r2)
   41fe4:	0041fcc1 	jmpi	41fcc <_cleanup_r>

00041fe8 <__sfmoreglue>:
   41fe8:	defffc04 	addi	sp,sp,-16
   41fec:	dc400115 	stw	r17,4(sp)
   41ff0:	2c401724 	muli	r17,r5,92
   41ff4:	dc800215 	stw	r18,8(sp)
   41ff8:	2825883a 	mov	r18,r5
   41ffc:	89400304 	addi	r5,r17,12
   42000:	dc000015 	stw	r16,0(sp)
   42004:	dfc00315 	stw	ra,12(sp)
   42008:	0040b0c0 	call	40b0c <_malloc_r>
   4200c:	0021883a 	mov	r16,zero
   42010:	880d883a 	mov	r6,r17
   42014:	000b883a 	mov	r5,zero
   42018:	10000626 	beq	r2,zero,42034 <__sfmoreglue+0x4c>
   4201c:	11000304 	addi	r4,r2,12
   42020:	14800115 	stw	r18,4(r2)
   42024:	10000015 	stw	zero,0(r2)
   42028:	11000215 	stw	r4,8(r2)
   4202c:	1021883a 	mov	r16,r2
   42030:	00428940 	call	42894 <memset>
   42034:	8005883a 	mov	r2,r16
   42038:	dfc00317 	ldw	ra,12(sp)
   4203c:	dc800217 	ldw	r18,8(sp)
   42040:	dc400117 	ldw	r17,4(sp)
   42044:	dc000017 	ldw	r16,0(sp)
   42048:	dec00404 	addi	sp,sp,16
   4204c:	f800283a 	ret

00042050 <__sfp>:
   42050:	defffd04 	addi	sp,sp,-12
   42054:	00800134 	movhi	r2,4
   42058:	109b3904 	addi	r2,r2,27876
   4205c:	dc000015 	stw	r16,0(sp)
   42060:	14000017 	ldw	r16,0(r2)
   42064:	dc400115 	stw	r17,4(sp)
   42068:	dfc00215 	stw	ra,8(sp)
   4206c:	80800e17 	ldw	r2,56(r16)
   42070:	2023883a 	mov	r17,r4
   42074:	10002626 	beq	r2,zero,42110 <__sfp+0xc0>
   42078:	8400b804 	addi	r16,r16,736
   4207c:	80800117 	ldw	r2,4(r16)
   42080:	81000217 	ldw	r4,8(r16)
   42084:	10ffffc4 	addi	r3,r2,-1
   42088:	18000916 	blt	r3,zero,420b0 <__sfp+0x60>
   4208c:	2080030f 	ldh	r2,12(r4)
   42090:	10000b26 	beq	r2,zero,420c0 <__sfp+0x70>
   42094:	017fffc4 	movi	r5,-1
   42098:	00000206 	br	420a4 <__sfp+0x54>
   4209c:	2080030f 	ldh	r2,12(r4)
   420a0:	10000726 	beq	r2,zero,420c0 <__sfp+0x70>
   420a4:	18ffffc4 	addi	r3,r3,-1
   420a8:	21001704 	addi	r4,r4,92
   420ac:	197ffb1e 	bne	r3,r5,4209c <__sfp+0x4c>
   420b0:	80800017 	ldw	r2,0(r16)
   420b4:	10001926 	beq	r2,zero,4211c <__sfp+0xcc>
   420b8:	1021883a 	mov	r16,r2
   420bc:	003fef06 	br	4207c <__sfp+0x2c>
   420c0:	00bfffc4 	movi	r2,-1
   420c4:	00c00044 	movi	r3,1
   420c8:	2080038d 	sth	r2,14(r4)
   420cc:	20c0030d 	sth	r3,12(r4)
   420d0:	20000015 	stw	zero,0(r4)
   420d4:	20000215 	stw	zero,8(r4)
   420d8:	20000115 	stw	zero,4(r4)
   420dc:	20000415 	stw	zero,16(r4)
   420e0:	20000515 	stw	zero,20(r4)
   420e4:	20000615 	stw	zero,24(r4)
   420e8:	20000c15 	stw	zero,48(r4)
   420ec:	20000d15 	stw	zero,52(r4)
   420f0:	20001115 	stw	zero,68(r4)
   420f4:	20001215 	stw	zero,72(r4)
   420f8:	2005883a 	mov	r2,r4
   420fc:	dfc00217 	ldw	ra,8(sp)
   42100:	dc400117 	ldw	r17,4(sp)
   42104:	dc000017 	ldw	r16,0(sp)
   42108:	dec00304 	addi	sp,sp,12
   4210c:	f800283a 	ret
   42110:	8009883a 	mov	r4,r16
   42114:	0041ee80 	call	41ee8 <__sinit>
   42118:	003fd706 	br	42078 <__sfp+0x28>
   4211c:	8809883a 	mov	r4,r17
   42120:	01400104 	movi	r5,4
   42124:	0041fe80 	call	41fe8 <__sfmoreglue>
   42128:	80800015 	stw	r2,0(r16)
   4212c:	103fe21e 	bne	r2,zero,420b8 <__sfp+0x68>
   42130:	00800304 	movi	r2,12
   42134:	0009883a 	mov	r4,zero
   42138:	88800015 	stw	r2,0(r17)
   4213c:	003fee06 	br	420f8 <__sfp+0xa8>

00042140 <_malloc_trim_r>:
   42140:	defffb04 	addi	sp,sp,-20
   42144:	dcc00315 	stw	r19,12(sp)
   42148:	04c00134 	movhi	r19,4
   4214c:	9cd5b404 	addi	r19,r19,22224
   42150:	dc800215 	stw	r18,8(sp)
   42154:	dc400115 	stw	r17,4(sp)
   42158:	dc000015 	stw	r16,0(sp)
   4215c:	2823883a 	mov	r17,r5
   42160:	2025883a 	mov	r18,r4
   42164:	dfc00415 	stw	ra,16(sp)
   42168:	00436800 	call	43680 <__malloc_lock>
   4216c:	98800217 	ldw	r2,8(r19)
   42170:	9009883a 	mov	r4,r18
   42174:	000b883a 	mov	r5,zero
   42178:	10c00117 	ldw	r3,4(r2)
   4217c:	00bfff04 	movi	r2,-4
   42180:	18a0703a 	and	r16,r3,r2
   42184:	8463c83a 	sub	r17,r16,r17
   42188:	8c43fbc4 	addi	r17,r17,4079
   4218c:	8822d33a 	srli	r17,r17,12
   42190:	0083ffc4 	movi	r2,4095
   42194:	8c7fffc4 	addi	r17,r17,-1
   42198:	8822933a 	slli	r17,r17,12
   4219c:	1440060e 	bge	r2,r17,421b8 <_malloc_trim_r+0x78>
   421a0:	0041aa40 	call	41aa4 <_sbrk_r>
   421a4:	98c00217 	ldw	r3,8(r19)
   421a8:	9009883a 	mov	r4,r18
   421ac:	044bc83a 	sub	r5,zero,r17
   421b0:	80c7883a 	add	r3,r16,r3
   421b4:	10c00926 	beq	r2,r3,421dc <_malloc_trim_r+0x9c>
   421b8:	00436a00 	call	436a0 <__malloc_unlock>
   421bc:	0005883a 	mov	r2,zero
   421c0:	dfc00417 	ldw	ra,16(sp)
   421c4:	dcc00317 	ldw	r19,12(sp)
   421c8:	dc800217 	ldw	r18,8(sp)
   421cc:	dc400117 	ldw	r17,4(sp)
   421d0:	dc000017 	ldw	r16,0(sp)
   421d4:	dec00504 	addi	sp,sp,20
   421d8:	f800283a 	ret
   421dc:	9009883a 	mov	r4,r18
   421e0:	0041aa40 	call	41aa4 <_sbrk_r>
   421e4:	844dc83a 	sub	r6,r16,r17
   421e8:	00ffffc4 	movi	r3,-1
   421ec:	9009883a 	mov	r4,r18
   421f0:	000b883a 	mov	r5,zero
   421f4:	01c00174 	movhi	r7,5
   421f8:	39e1e204 	addi	r7,r7,-30840
   421fc:	31800054 	ori	r6,r6,1
   42200:	10c00926 	beq	r2,r3,42228 <_malloc_trim_r+0xe8>
   42204:	38800017 	ldw	r2,0(r7)
   42208:	98c00217 	ldw	r3,8(r19)
   4220c:	9009883a 	mov	r4,r18
   42210:	1445c83a 	sub	r2,r2,r17
   42214:	38800015 	stw	r2,0(r7)
   42218:	19800115 	stw	r6,4(r3)
   4221c:	00436a00 	call	436a0 <__malloc_unlock>
   42220:	00800044 	movi	r2,1
   42224:	003fe606 	br	421c0 <_malloc_trim_r+0x80>
   42228:	0041aa40 	call	41aa4 <_sbrk_r>
   4222c:	99800217 	ldw	r6,8(r19)
   42230:	100f883a 	mov	r7,r2
   42234:	9009883a 	mov	r4,r18
   42238:	1187c83a 	sub	r3,r2,r6
   4223c:	008003c4 	movi	r2,15
   42240:	19400054 	ori	r5,r3,1
   42244:	10ffdc0e 	bge	r2,r3,421b8 <_malloc_trim_r+0x78>
   42248:	00800134 	movhi	r2,4
   4224c:	109b3b04 	addi	r2,r2,27884
   42250:	10c00017 	ldw	r3,0(r2)
   42254:	00800174 	movhi	r2,5
   42258:	10a1e204 	addi	r2,r2,-30840
   4225c:	31400115 	stw	r5,4(r6)
   42260:	38c7c83a 	sub	r3,r7,r3
   42264:	10c00015 	stw	r3,0(r2)
   42268:	003fd306 	br	421b8 <_malloc_trim_r+0x78>

0004226c <_free_r>:
   4226c:	defffd04 	addi	sp,sp,-12
   42270:	dc400115 	stw	r17,4(sp)
   42274:	dc000015 	stw	r16,0(sp)
   42278:	dfc00215 	stw	ra,8(sp)
   4227c:	2821883a 	mov	r16,r5
   42280:	2023883a 	mov	r17,r4
   42284:	28005a26 	beq	r5,zero,423f0 <_free_r+0x184>
   42288:	00436800 	call	43680 <__malloc_lock>
   4228c:	823ffe04 	addi	r8,r16,-8
   42290:	41400117 	ldw	r5,4(r8)
   42294:	00bfff84 	movi	r2,-2
   42298:	02800134 	movhi	r10,4
   4229c:	5295b404 	addi	r10,r10,22224
   422a0:	288e703a 	and	r7,r5,r2
   422a4:	41cd883a 	add	r6,r8,r7
   422a8:	30c00117 	ldw	r3,4(r6)
   422ac:	51000217 	ldw	r4,8(r10)
   422b0:	00bfff04 	movi	r2,-4
   422b4:	1892703a 	and	r9,r3,r2
   422b8:	5017883a 	mov	r11,r10
   422bc:	31006726 	beq	r6,r4,4245c <_free_r+0x1f0>
   422c0:	2880004c 	andi	r2,r5,1
   422c4:	1005003a 	cmpeq	r2,r2,zero
   422c8:	32400115 	stw	r9,4(r6)
   422cc:	10001a1e 	bne	r2,zero,42338 <_free_r+0xcc>
   422d0:	000b883a 	mov	r5,zero
   422d4:	3247883a 	add	r3,r6,r9
   422d8:	18800117 	ldw	r2,4(r3)
   422dc:	1080004c 	andi	r2,r2,1
   422e0:	1000231e 	bne	r2,zero,42370 <_free_r+0x104>
   422e4:	280ac03a 	cmpne	r5,r5,zero
   422e8:	3a4f883a 	add	r7,r7,r9
   422ec:	2800451e 	bne	r5,zero,42404 <_free_r+0x198>
   422f0:	31000217 	ldw	r4,8(r6)
   422f4:	00800134 	movhi	r2,4
   422f8:	1095b604 	addi	r2,r2,22232
   422fc:	20807b26 	beq	r4,r2,424ec <_free_r+0x280>
   42300:	30800317 	ldw	r2,12(r6)
   42304:	3a07883a 	add	r3,r7,r8
   42308:	19c00015 	stw	r7,0(r3)
   4230c:	11000215 	stw	r4,8(r2)
   42310:	20800315 	stw	r2,12(r4)
   42314:	38800054 	ori	r2,r7,1
   42318:	40800115 	stw	r2,4(r8)
   4231c:	28001a26 	beq	r5,zero,42388 <_free_r+0x11c>
   42320:	8809883a 	mov	r4,r17
   42324:	dfc00217 	ldw	ra,8(sp)
   42328:	dc400117 	ldw	r17,4(sp)
   4232c:	dc000017 	ldw	r16,0(sp)
   42330:	dec00304 	addi	sp,sp,12
   42334:	00436a01 	jmpi	436a0 <__malloc_unlock>
   42338:	80bffe17 	ldw	r2,-8(r16)
   4233c:	50c00204 	addi	r3,r10,8
   42340:	4091c83a 	sub	r8,r8,r2
   42344:	41000217 	ldw	r4,8(r8)
   42348:	388f883a 	add	r7,r7,r2
   4234c:	20c06126 	beq	r4,r3,424d4 <_free_r+0x268>
   42350:	40800317 	ldw	r2,12(r8)
   42354:	3247883a 	add	r3,r6,r9
   42358:	000b883a 	mov	r5,zero
   4235c:	11000215 	stw	r4,8(r2)
   42360:	20800315 	stw	r2,12(r4)
   42364:	18800117 	ldw	r2,4(r3)
   42368:	1080004c 	andi	r2,r2,1
   4236c:	103fdd26 	beq	r2,zero,422e4 <_free_r+0x78>
   42370:	38800054 	ori	r2,r7,1
   42374:	3a07883a 	add	r3,r7,r8
   42378:	280ac03a 	cmpne	r5,r5,zero
   4237c:	40800115 	stw	r2,4(r8)
   42380:	19c00015 	stw	r7,0(r3)
   42384:	283fe61e 	bne	r5,zero,42320 <_free_r+0xb4>
   42388:	00807fc4 	movi	r2,511
   4238c:	11c01f2e 	bgeu	r2,r7,4240c <_free_r+0x1a0>
   42390:	3806d27a 	srli	r3,r7,9
   42394:	1800481e 	bne	r3,zero,424b8 <_free_r+0x24c>
   42398:	3804d0fa 	srli	r2,r7,3
   4239c:	100690fa 	slli	r3,r2,3
   423a0:	1acd883a 	add	r6,r3,r11
   423a4:	31400217 	ldw	r5,8(r6)
   423a8:	31405926 	beq	r6,r5,42510 <_free_r+0x2a4>
   423ac:	28800117 	ldw	r2,4(r5)
   423b0:	00ffff04 	movi	r3,-4
   423b4:	10c4703a 	and	r2,r2,r3
   423b8:	3880022e 	bgeu	r7,r2,423c4 <_free_r+0x158>
   423bc:	29400217 	ldw	r5,8(r5)
   423c0:	317ffa1e 	bne	r6,r5,423ac <_free_r+0x140>
   423c4:	29800317 	ldw	r6,12(r5)
   423c8:	41800315 	stw	r6,12(r8)
   423cc:	41400215 	stw	r5,8(r8)
   423d0:	8809883a 	mov	r4,r17
   423d4:	2a000315 	stw	r8,12(r5)
   423d8:	32000215 	stw	r8,8(r6)
   423dc:	dfc00217 	ldw	ra,8(sp)
   423e0:	dc400117 	ldw	r17,4(sp)
   423e4:	dc000017 	ldw	r16,0(sp)
   423e8:	dec00304 	addi	sp,sp,12
   423ec:	00436a01 	jmpi	436a0 <__malloc_unlock>
   423f0:	dfc00217 	ldw	ra,8(sp)
   423f4:	dc400117 	ldw	r17,4(sp)
   423f8:	dc000017 	ldw	r16,0(sp)
   423fc:	dec00304 	addi	sp,sp,12
   42400:	f800283a 	ret
   42404:	31000217 	ldw	r4,8(r6)
   42408:	003fbd06 	br	42300 <_free_r+0x94>
   4240c:	3806d0fa 	srli	r3,r7,3
   42410:	00800044 	movi	r2,1
   42414:	51400117 	ldw	r5,4(r10)
   42418:	180890fa 	slli	r4,r3,3
   4241c:	1807d0ba 	srai	r3,r3,2
   42420:	22c9883a 	add	r4,r4,r11
   42424:	21800217 	ldw	r6,8(r4)
   42428:	10c4983a 	sll	r2,r2,r3
   4242c:	41000315 	stw	r4,12(r8)
   42430:	41800215 	stw	r6,8(r8)
   42434:	288ab03a 	or	r5,r5,r2
   42438:	22000215 	stw	r8,8(r4)
   4243c:	8809883a 	mov	r4,r17
   42440:	51400115 	stw	r5,4(r10)
   42444:	32000315 	stw	r8,12(r6)
   42448:	dfc00217 	ldw	ra,8(sp)
   4244c:	dc400117 	ldw	r17,4(sp)
   42450:	dc000017 	ldw	r16,0(sp)
   42454:	dec00304 	addi	sp,sp,12
   42458:	00436a01 	jmpi	436a0 <__malloc_unlock>
   4245c:	2880004c 	andi	r2,r5,1
   42460:	3a4d883a 	add	r6,r7,r9
   42464:	1000071e 	bne	r2,zero,42484 <_free_r+0x218>
   42468:	80bffe17 	ldw	r2,-8(r16)
   4246c:	4091c83a 	sub	r8,r8,r2
   42470:	41000317 	ldw	r4,12(r8)
   42474:	40c00217 	ldw	r3,8(r8)
   42478:	308d883a 	add	r6,r6,r2
   4247c:	20c00215 	stw	r3,8(r4)
   42480:	19000315 	stw	r4,12(r3)
   42484:	00800134 	movhi	r2,4
   42488:	109b3a04 	addi	r2,r2,27880
   4248c:	11000017 	ldw	r4,0(r2)
   42490:	30c00054 	ori	r3,r6,1
   42494:	52000215 	stw	r8,8(r10)
   42498:	40c00115 	stw	r3,4(r8)
   4249c:	313fa036 	bltu	r6,r4,42320 <_free_r+0xb4>
   424a0:	00800174 	movhi	r2,5
   424a4:	10a1d804 	addi	r2,r2,-30880
   424a8:	11400017 	ldw	r5,0(r2)
   424ac:	8809883a 	mov	r4,r17
   424b0:	00421400 	call	42140 <_malloc_trim_r>
   424b4:	003f9a06 	br	42320 <_free_r+0xb4>
   424b8:	00800104 	movi	r2,4
   424bc:	10c0072e 	bgeu	r2,r3,424dc <_free_r+0x270>
   424c0:	00800504 	movi	r2,20
   424c4:	10c01936 	bltu	r2,r3,4252c <_free_r+0x2c0>
   424c8:	188016c4 	addi	r2,r3,91
   424cc:	100690fa 	slli	r3,r2,3
   424d0:	003fb306 	br	423a0 <_free_r+0x134>
   424d4:	01400044 	movi	r5,1
   424d8:	003f7e06 	br	422d4 <_free_r+0x68>
   424dc:	3804d1ba 	srli	r2,r7,6
   424e0:	10800e04 	addi	r2,r2,56
   424e4:	100690fa 	slli	r3,r2,3
   424e8:	003fad06 	br	423a0 <_free_r+0x134>
   424ec:	22000315 	stw	r8,12(r4)
   424f0:	22000215 	stw	r8,8(r4)
   424f4:	3a05883a 	add	r2,r7,r8
   424f8:	38c00054 	ori	r3,r7,1
   424fc:	11c00015 	stw	r7,0(r2)
   42500:	41000215 	stw	r4,8(r8)
   42504:	40c00115 	stw	r3,4(r8)
   42508:	41000315 	stw	r4,12(r8)
   4250c:	003f8406 	br	42320 <_free_r+0xb4>
   42510:	1005d0ba 	srai	r2,r2,2
   42514:	00c00044 	movi	r3,1
   42518:	51000117 	ldw	r4,4(r10)
   4251c:	1886983a 	sll	r3,r3,r2
   42520:	20c8b03a 	or	r4,r4,r3
   42524:	51000115 	stw	r4,4(r10)
   42528:	003fa706 	br	423c8 <_free_r+0x15c>
   4252c:	00801504 	movi	r2,84
   42530:	10c00436 	bltu	r2,r3,42544 <_free_r+0x2d8>
   42534:	3804d33a 	srli	r2,r7,12
   42538:	10801b84 	addi	r2,r2,110
   4253c:	100690fa 	slli	r3,r2,3
   42540:	003f9706 	br	423a0 <_free_r+0x134>
   42544:	00805504 	movi	r2,340
   42548:	10c00436 	bltu	r2,r3,4255c <_free_r+0x2f0>
   4254c:	3804d3fa 	srli	r2,r7,15
   42550:	10801dc4 	addi	r2,r2,119
   42554:	100690fa 	slli	r3,r2,3
   42558:	003f9106 	br	423a0 <_free_r+0x134>
   4255c:	00815504 	movi	r2,1364
   42560:	10c0032e 	bgeu	r2,r3,42570 <_free_r+0x304>
   42564:	00801f84 	movi	r2,126
   42568:	00c0fc04 	movi	r3,1008
   4256c:	003f8c06 	br	423a0 <_free_r+0x134>
   42570:	3804d4ba 	srli	r2,r7,18
   42574:	10801f04 	addi	r2,r2,124
   42578:	100690fa 	slli	r3,r2,3
   4257c:	003f8806 	br	423a0 <_free_r+0x134>

00042580 <_fwalk_reent>:
   42580:	defff704 	addi	sp,sp,-36
   42584:	dcc00315 	stw	r19,12(sp)
   42588:	24c0b804 	addi	r19,r4,736
   4258c:	dd800615 	stw	r22,24(sp)
   42590:	dd400515 	stw	r21,20(sp)
   42594:	dfc00815 	stw	ra,32(sp)
   42598:	ddc00715 	stw	r23,28(sp)
   4259c:	dd000415 	stw	r20,16(sp)
   425a0:	dc800215 	stw	r18,8(sp)
   425a4:	dc400115 	stw	r17,4(sp)
   425a8:	dc000015 	stw	r16,0(sp)
   425ac:	202b883a 	mov	r21,r4
   425b0:	282d883a 	mov	r22,r5
   425b4:	0041ed80 	call	41ed8 <__sfp_lock_acquire>
   425b8:	98002126 	beq	r19,zero,42640 <_fwalk_reent+0xc0>
   425bc:	002f883a 	mov	r23,zero
   425c0:	9c800117 	ldw	r18,4(r19)
   425c4:	9c000217 	ldw	r16,8(r19)
   425c8:	90bfffc4 	addi	r2,r18,-1
   425cc:	10000d16 	blt	r2,zero,42604 <_fwalk_reent+0x84>
   425d0:	0023883a 	mov	r17,zero
   425d4:	053fffc4 	movi	r20,-1
   425d8:	8080030f 	ldh	r2,12(r16)
   425dc:	8c400044 	addi	r17,r17,1
   425e0:	10000626 	beq	r2,zero,425fc <_fwalk_reent+0x7c>
   425e4:	8080038f 	ldh	r2,14(r16)
   425e8:	800b883a 	mov	r5,r16
   425ec:	a809883a 	mov	r4,r21
   425f0:	15000226 	beq	r2,r20,425fc <_fwalk_reent+0x7c>
   425f4:	b03ee83a 	callr	r22
   425f8:	b8aeb03a 	or	r23,r23,r2
   425fc:	84001704 	addi	r16,r16,92
   42600:	947ff51e 	bne	r18,r17,425d8 <_fwalk_reent+0x58>
   42604:	9cc00017 	ldw	r19,0(r19)
   42608:	983fed1e 	bne	r19,zero,425c0 <_fwalk_reent+0x40>
   4260c:	0041edc0 	call	41edc <__sfp_lock_release>
   42610:	b805883a 	mov	r2,r23
   42614:	dfc00817 	ldw	ra,32(sp)
   42618:	ddc00717 	ldw	r23,28(sp)
   4261c:	dd800617 	ldw	r22,24(sp)
   42620:	dd400517 	ldw	r21,20(sp)
   42624:	dd000417 	ldw	r20,16(sp)
   42628:	dcc00317 	ldw	r19,12(sp)
   4262c:	dc800217 	ldw	r18,8(sp)
   42630:	dc400117 	ldw	r17,4(sp)
   42634:	dc000017 	ldw	r16,0(sp)
   42638:	dec00904 	addi	sp,sp,36
   4263c:	f800283a 	ret
   42640:	002f883a 	mov	r23,zero
   42644:	003ff106 	br	4260c <_fwalk_reent+0x8c>

00042648 <_fwalk>:
   42648:	defff804 	addi	sp,sp,-32
   4264c:	dcc00315 	stw	r19,12(sp)
   42650:	24c0b804 	addi	r19,r4,736
   42654:	dd400515 	stw	r21,20(sp)
   42658:	dfc00715 	stw	ra,28(sp)
   4265c:	dd800615 	stw	r22,24(sp)
   42660:	dd000415 	stw	r20,16(sp)
   42664:	dc800215 	stw	r18,8(sp)
   42668:	dc400115 	stw	r17,4(sp)
   4266c:	dc000015 	stw	r16,0(sp)
   42670:	282b883a 	mov	r21,r5
   42674:	0041ed80 	call	41ed8 <__sfp_lock_acquire>
   42678:	98001f26 	beq	r19,zero,426f8 <_fwalk+0xb0>
   4267c:	002d883a 	mov	r22,zero
   42680:	9c800117 	ldw	r18,4(r19)
   42684:	9c000217 	ldw	r16,8(r19)
   42688:	90bfffc4 	addi	r2,r18,-1
   4268c:	10000c16 	blt	r2,zero,426c0 <_fwalk+0x78>
   42690:	0023883a 	mov	r17,zero
   42694:	053fffc4 	movi	r20,-1
   42698:	8080030f 	ldh	r2,12(r16)
   4269c:	8c400044 	addi	r17,r17,1
   426a0:	10000526 	beq	r2,zero,426b8 <_fwalk+0x70>
   426a4:	8080038f 	ldh	r2,14(r16)
   426a8:	8009883a 	mov	r4,r16
   426ac:	15000226 	beq	r2,r20,426b8 <_fwalk+0x70>
   426b0:	a83ee83a 	callr	r21
   426b4:	b0acb03a 	or	r22,r22,r2
   426b8:	84001704 	addi	r16,r16,92
   426bc:	947ff61e 	bne	r18,r17,42698 <_fwalk+0x50>
   426c0:	9cc00017 	ldw	r19,0(r19)
   426c4:	983fee1e 	bne	r19,zero,42680 <_fwalk+0x38>
   426c8:	0041edc0 	call	41edc <__sfp_lock_release>
   426cc:	b005883a 	mov	r2,r22
   426d0:	dfc00717 	ldw	ra,28(sp)
   426d4:	dd800617 	ldw	r22,24(sp)
   426d8:	dd400517 	ldw	r21,20(sp)
   426dc:	dd000417 	ldw	r20,16(sp)
   426e0:	dcc00317 	ldw	r19,12(sp)
   426e4:	dc800217 	ldw	r18,8(sp)
   426e8:	dc400117 	ldw	r17,4(sp)
   426ec:	dc000017 	ldw	r16,0(sp)
   426f0:	dec00804 	addi	sp,sp,32
   426f4:	f800283a 	ret
   426f8:	002d883a 	mov	r22,zero
   426fc:	003ff206 	br	426c8 <_fwalk+0x80>

00042700 <__smakebuf_r>:
   42700:	2880030b 	ldhu	r2,12(r5)
   42704:	deffed04 	addi	sp,sp,-76
   42708:	dc401015 	stw	r17,64(sp)
   4270c:	1080008c 	andi	r2,r2,2
   42710:	dc000f15 	stw	r16,60(sp)
   42714:	dfc01215 	stw	ra,72(sp)
   42718:	dc801115 	stw	r18,68(sp)
   4271c:	2821883a 	mov	r16,r5
   42720:	2023883a 	mov	r17,r4
   42724:	10000b26 	beq	r2,zero,42754 <__smakebuf_r+0x54>
   42728:	28c010c4 	addi	r3,r5,67
   4272c:	00800044 	movi	r2,1
   42730:	28800515 	stw	r2,20(r5)
   42734:	28c00415 	stw	r3,16(r5)
   42738:	28c00015 	stw	r3,0(r5)
   4273c:	dfc01217 	ldw	ra,72(sp)
   42740:	dc801117 	ldw	r18,68(sp)
   42744:	dc401017 	ldw	r17,64(sp)
   42748:	dc000f17 	ldw	r16,60(sp)
   4274c:	dec01304 	addi	sp,sp,76
   42750:	f800283a 	ret
   42754:	2940038f 	ldh	r5,14(r5)
   42758:	28002116 	blt	r5,zero,427e0 <__smakebuf_r+0xe0>
   4275c:	d80d883a 	mov	r6,sp
   42760:	0042c840 	call	42c84 <_fstat_r>
   42764:	10001e16 	blt	r2,zero,427e0 <__smakebuf_r+0xe0>
   42768:	d8800117 	ldw	r2,4(sp)
   4276c:	00e00014 	movui	r3,32768
   42770:	113c000c 	andi	r4,r2,61440
   42774:	20c03126 	beq	r4,r3,4283c <__smakebuf_r+0x13c>
   42778:	8080030b 	ldhu	r2,12(r16)
   4277c:	00c80004 	movi	r3,8192
   42780:	10820014 	ori	r2,r2,2048
   42784:	8080030d 	sth	r2,12(r16)
   42788:	20c01e26 	beq	r4,r3,42804 <__smakebuf_r+0x104>
   4278c:	04810004 	movi	r18,1024
   42790:	8809883a 	mov	r4,r17
   42794:	900b883a 	mov	r5,r18
   42798:	0040b0c0 	call	40b0c <_malloc_r>
   4279c:	1009883a 	mov	r4,r2
   427a0:	10003126 	beq	r2,zero,42868 <__smakebuf_r+0x168>
   427a4:	80c0030b 	ldhu	r3,12(r16)
   427a8:	00800134 	movhi	r2,4
   427ac:	1087f304 	addi	r2,r2,8140
   427b0:	88800f15 	stw	r2,60(r17)
   427b4:	18c02014 	ori	r3,r3,128
   427b8:	84800515 	stw	r18,20(r16)
   427bc:	80c0030d 	sth	r3,12(r16)
   427c0:	81000415 	stw	r4,16(r16)
   427c4:	81000015 	stw	r4,0(r16)
   427c8:	dfc01217 	ldw	ra,72(sp)
   427cc:	dc801117 	ldw	r18,68(sp)
   427d0:	dc401017 	ldw	r17,64(sp)
   427d4:	dc000f17 	ldw	r16,60(sp)
   427d8:	dec01304 	addi	sp,sp,76
   427dc:	f800283a 	ret
   427e0:	80c0030b 	ldhu	r3,12(r16)
   427e4:	1880200c 	andi	r2,r3,128
   427e8:	10000426 	beq	r2,zero,427fc <__smakebuf_r+0xfc>
   427ec:	04801004 	movi	r18,64
   427f0:	18820014 	ori	r2,r3,2048
   427f4:	8080030d 	sth	r2,12(r16)
   427f8:	003fe506 	br	42790 <__smakebuf_r+0x90>
   427fc:	04810004 	movi	r18,1024
   42800:	003ffb06 	br	427f0 <__smakebuf_r+0xf0>
   42804:	8140038f 	ldh	r5,14(r16)
   42808:	8809883a 	mov	r4,r17
   4280c:	0042cf80 	call	42cf8 <_isatty_r>
   42810:	103fde26 	beq	r2,zero,4278c <__smakebuf_r+0x8c>
   42814:	8080030b 	ldhu	r2,12(r16)
   42818:	80c010c4 	addi	r3,r16,67
   4281c:	04810004 	movi	r18,1024
   42820:	10800054 	ori	r2,r2,1
   42824:	8080030d 	sth	r2,12(r16)
   42828:	00800044 	movi	r2,1
   4282c:	80c00415 	stw	r3,16(r16)
   42830:	80800515 	stw	r2,20(r16)
   42834:	80c00015 	stw	r3,0(r16)
   42838:	003fd506 	br	42790 <__smakebuf_r+0x90>
   4283c:	80c00a17 	ldw	r3,40(r16)
   42840:	00800134 	movhi	r2,4
   42844:	108a4d04 	addi	r2,r2,10548
   42848:	18bfcb1e 	bne	r3,r2,42778 <__smakebuf_r+0x78>
   4284c:	8080030b 	ldhu	r2,12(r16)
   42850:	00c10004 	movi	r3,1024
   42854:	1825883a 	mov	r18,r3
   42858:	10c4b03a 	or	r2,r2,r3
   4285c:	8080030d 	sth	r2,12(r16)
   42860:	80c01315 	stw	r3,76(r16)
   42864:	003fca06 	br	42790 <__smakebuf_r+0x90>
   42868:	8100030b 	ldhu	r4,12(r16)
   4286c:	2080800c 	andi	r2,r4,512
   42870:	103fb21e 	bne	r2,zero,4273c <__smakebuf_r+0x3c>
   42874:	80c010c4 	addi	r3,r16,67
   42878:	21000094 	ori	r4,r4,2
   4287c:	00800044 	movi	r2,1
   42880:	80800515 	stw	r2,20(r16)
   42884:	8100030d 	sth	r4,12(r16)
   42888:	80c00415 	stw	r3,16(r16)
   4288c:	80c00015 	stw	r3,0(r16)
   42890:	003faa06 	br	4273c <__smakebuf_r+0x3c>

00042894 <memset>:
   42894:	008000c4 	movi	r2,3
   42898:	29403fcc 	andi	r5,r5,255
   4289c:	2007883a 	mov	r3,r4
   428a0:	1180022e 	bgeu	r2,r6,428ac <memset+0x18>
   428a4:	2084703a 	and	r2,r4,r2
   428a8:	10000826 	beq	r2,zero,428cc <memset+0x38>
   428ac:	30000526 	beq	r6,zero,428c4 <memset+0x30>
   428b0:	2805883a 	mov	r2,r5
   428b4:	30cd883a 	add	r6,r6,r3
   428b8:	18800005 	stb	r2,0(r3)
   428bc:	18c00044 	addi	r3,r3,1
   428c0:	19bffd1e 	bne	r3,r6,428b8 <memset+0x24>
   428c4:	2005883a 	mov	r2,r4
   428c8:	f800283a 	ret
   428cc:	2804923a 	slli	r2,r5,8
   428d0:	020003c4 	movi	r8,15
   428d4:	200f883a 	mov	r7,r4
   428d8:	2884b03a 	or	r2,r5,r2
   428dc:	1006943a 	slli	r3,r2,16
   428e0:	10c6b03a 	or	r3,r2,r3
   428e4:	41800a2e 	bgeu	r8,r6,42910 <memset+0x7c>
   428e8:	4005883a 	mov	r2,r8
   428ec:	31bffc04 	addi	r6,r6,-16
   428f0:	38c00015 	stw	r3,0(r7)
   428f4:	38c00115 	stw	r3,4(r7)
   428f8:	38c00215 	stw	r3,8(r7)
   428fc:	38c00315 	stw	r3,12(r7)
   42900:	39c00404 	addi	r7,r7,16
   42904:	11bff936 	bltu	r2,r6,428ec <memset+0x58>
   42908:	008000c4 	movi	r2,3
   4290c:	1180052e 	bgeu	r2,r6,42924 <memset+0x90>
   42910:	31bfff04 	addi	r6,r6,-4
   42914:	008000c4 	movi	r2,3
   42918:	38c00015 	stw	r3,0(r7)
   4291c:	39c00104 	addi	r7,r7,4
   42920:	11bffb36 	bltu	r2,r6,42910 <memset+0x7c>
   42924:	3807883a 	mov	r3,r7
   42928:	003fe006 	br	428ac <memset+0x18>

0004292c <__sclose>:
   4292c:	2940038f 	ldh	r5,14(r5)
   42930:	0042af01 	jmpi	42af0 <_close_r>

00042934 <__sseek>:
   42934:	defffe04 	addi	sp,sp,-8
   42938:	dc000015 	stw	r16,0(sp)
   4293c:	2821883a 	mov	r16,r5
   42940:	2940038f 	ldh	r5,14(r5)
   42944:	dfc00115 	stw	ra,4(sp)
   42948:	0042d680 	call	42d68 <_lseek_r>
   4294c:	1007883a 	mov	r3,r2
   42950:	00bfffc4 	movi	r2,-1
   42954:	18800926 	beq	r3,r2,4297c <__sseek+0x48>
   42958:	8080030b 	ldhu	r2,12(r16)
   4295c:	80c01415 	stw	r3,80(r16)
   42960:	10840014 	ori	r2,r2,4096
   42964:	8080030d 	sth	r2,12(r16)
   42968:	1805883a 	mov	r2,r3
   4296c:	dfc00117 	ldw	ra,4(sp)
   42970:	dc000017 	ldw	r16,0(sp)
   42974:	dec00204 	addi	sp,sp,8
   42978:	f800283a 	ret
   4297c:	8080030b 	ldhu	r2,12(r16)
   42980:	10bbffcc 	andi	r2,r2,61439
   42984:	8080030d 	sth	r2,12(r16)
   42988:	1805883a 	mov	r2,r3
   4298c:	dfc00117 	ldw	ra,4(sp)
   42990:	dc000017 	ldw	r16,0(sp)
   42994:	dec00204 	addi	sp,sp,8
   42998:	f800283a 	ret

0004299c <__swrite>:
   4299c:	2880030b 	ldhu	r2,12(r5)
   429a0:	defffb04 	addi	sp,sp,-20
   429a4:	dcc00315 	stw	r19,12(sp)
   429a8:	1080400c 	andi	r2,r2,256
   429ac:	dc800215 	stw	r18,8(sp)
   429b0:	dc400115 	stw	r17,4(sp)
   429b4:	dc000015 	stw	r16,0(sp)
   429b8:	3027883a 	mov	r19,r6
   429bc:	3825883a 	mov	r18,r7
   429c0:	dfc00415 	stw	ra,16(sp)
   429c4:	2821883a 	mov	r16,r5
   429c8:	000d883a 	mov	r6,zero
   429cc:	01c00084 	movi	r7,2
   429d0:	2023883a 	mov	r17,r4
   429d4:	10000226 	beq	r2,zero,429e0 <__swrite+0x44>
   429d8:	2940038f 	ldh	r5,14(r5)
   429dc:	0042d680 	call	42d68 <_lseek_r>
   429e0:	8080030b 	ldhu	r2,12(r16)
   429e4:	8140038f 	ldh	r5,14(r16)
   429e8:	8809883a 	mov	r4,r17
   429ec:	10bbffcc 	andi	r2,r2,61439
   429f0:	980d883a 	mov	r6,r19
   429f4:	900f883a 	mov	r7,r18
   429f8:	8080030d 	sth	r2,12(r16)
   429fc:	dfc00417 	ldw	ra,16(sp)
   42a00:	dcc00317 	ldw	r19,12(sp)
   42a04:	dc800217 	ldw	r18,8(sp)
   42a08:	dc400117 	ldw	r17,4(sp)
   42a0c:	dc000017 	ldw	r16,0(sp)
   42a10:	dec00504 	addi	sp,sp,20
   42a14:	0042a781 	jmpi	42a78 <_write_r>

00042a18 <__sread>:
   42a18:	defffe04 	addi	sp,sp,-8
   42a1c:	dc000015 	stw	r16,0(sp)
   42a20:	2821883a 	mov	r16,r5
   42a24:	2940038f 	ldh	r5,14(r5)
   42a28:	dfc00115 	stw	ra,4(sp)
   42a2c:	0042de00 	call	42de0 <_read_r>
   42a30:	1007883a 	mov	r3,r2
   42a34:	10000816 	blt	r2,zero,42a58 <__sread+0x40>
   42a38:	80801417 	ldw	r2,80(r16)
   42a3c:	10c5883a 	add	r2,r2,r3
   42a40:	80801415 	stw	r2,80(r16)
   42a44:	1805883a 	mov	r2,r3
   42a48:	dfc00117 	ldw	ra,4(sp)
   42a4c:	dc000017 	ldw	r16,0(sp)
   42a50:	dec00204 	addi	sp,sp,8
   42a54:	f800283a 	ret
   42a58:	8080030b 	ldhu	r2,12(r16)
   42a5c:	10bbffcc 	andi	r2,r2,61439
   42a60:	8080030d 	sth	r2,12(r16)
   42a64:	1805883a 	mov	r2,r3
   42a68:	dfc00117 	ldw	ra,4(sp)
   42a6c:	dc000017 	ldw	r16,0(sp)
   42a70:	dec00204 	addi	sp,sp,8
   42a74:	f800283a 	ret

00042a78 <_write_r>:
   42a78:	defffd04 	addi	sp,sp,-12
   42a7c:	dc000015 	stw	r16,0(sp)
   42a80:	04000174 	movhi	r16,5
   42a84:	8421db04 	addi	r16,r16,-30868
   42a88:	dc400115 	stw	r17,4(sp)
   42a8c:	80000015 	stw	zero,0(r16)
   42a90:	2023883a 	mov	r17,r4
   42a94:	2809883a 	mov	r4,r5
   42a98:	300b883a 	mov	r5,r6
   42a9c:	380d883a 	mov	r6,r7
   42aa0:	dfc00215 	stw	ra,8(sp)
   42aa4:	004395c0 	call	4395c <write>
   42aa8:	1007883a 	mov	r3,r2
   42aac:	00bfffc4 	movi	r2,-1
   42ab0:	18800626 	beq	r3,r2,42acc <_write_r+0x54>
   42ab4:	1805883a 	mov	r2,r3
   42ab8:	dfc00217 	ldw	ra,8(sp)
   42abc:	dc400117 	ldw	r17,4(sp)
   42ac0:	dc000017 	ldw	r16,0(sp)
   42ac4:	dec00304 	addi	sp,sp,12
   42ac8:	f800283a 	ret
   42acc:	80800017 	ldw	r2,0(r16)
   42ad0:	103ff826 	beq	r2,zero,42ab4 <_write_r+0x3c>
   42ad4:	88800015 	stw	r2,0(r17)
   42ad8:	1805883a 	mov	r2,r3
   42adc:	dfc00217 	ldw	ra,8(sp)
   42ae0:	dc400117 	ldw	r17,4(sp)
   42ae4:	dc000017 	ldw	r16,0(sp)
   42ae8:	dec00304 	addi	sp,sp,12
   42aec:	f800283a 	ret

00042af0 <_close_r>:
   42af0:	defffd04 	addi	sp,sp,-12
   42af4:	dc000015 	stw	r16,0(sp)
   42af8:	04000174 	movhi	r16,5
   42afc:	8421db04 	addi	r16,r16,-30868
   42b00:	dc400115 	stw	r17,4(sp)
   42b04:	80000015 	stw	zero,0(r16)
   42b08:	2023883a 	mov	r17,r4
   42b0c:	2809883a 	mov	r4,r5
   42b10:	dfc00215 	stw	ra,8(sp)
   42b14:	0042e580 	call	42e58 <close>
   42b18:	1007883a 	mov	r3,r2
   42b1c:	00bfffc4 	movi	r2,-1
   42b20:	18800626 	beq	r3,r2,42b3c <_close_r+0x4c>
   42b24:	1805883a 	mov	r2,r3
   42b28:	dfc00217 	ldw	ra,8(sp)
   42b2c:	dc400117 	ldw	r17,4(sp)
   42b30:	dc000017 	ldw	r16,0(sp)
   42b34:	dec00304 	addi	sp,sp,12
   42b38:	f800283a 	ret
   42b3c:	80800017 	ldw	r2,0(r16)
   42b40:	103ff826 	beq	r2,zero,42b24 <_close_r+0x34>
   42b44:	88800015 	stw	r2,0(r17)
   42b48:	1805883a 	mov	r2,r3
   42b4c:	dfc00217 	ldw	ra,8(sp)
   42b50:	dc400117 	ldw	r17,4(sp)
   42b54:	dc000017 	ldw	r16,0(sp)
   42b58:	dec00304 	addi	sp,sp,12
   42b5c:	f800283a 	ret

00042b60 <_fclose_r>:
   42b60:	defffc04 	addi	sp,sp,-16
   42b64:	dc400115 	stw	r17,4(sp)
   42b68:	dc000015 	stw	r16,0(sp)
   42b6c:	dfc00315 	stw	ra,12(sp)
   42b70:	dc800215 	stw	r18,8(sp)
   42b74:	2821883a 	mov	r16,r5
   42b78:	2023883a 	mov	r17,r4
   42b7c:	28002926 	beq	r5,zero,42c24 <_fclose_r+0xc4>
   42b80:	0041ed80 	call	41ed8 <__sfp_lock_acquire>
   42b84:	88000226 	beq	r17,zero,42b90 <_fclose_r+0x30>
   42b88:	88800e17 	ldw	r2,56(r17)
   42b8c:	10002d26 	beq	r2,zero,42c44 <_fclose_r+0xe4>
   42b90:	8080030f 	ldh	r2,12(r16)
   42b94:	10002226 	beq	r2,zero,42c20 <_fclose_r+0xc0>
   42b98:	8809883a 	mov	r4,r17
   42b9c:	800b883a 	mov	r5,r16
   42ba0:	0041c500 	call	41c50 <_fflush_r>
   42ba4:	1025883a 	mov	r18,r2
   42ba8:	80800b17 	ldw	r2,44(r16)
   42bac:	10000426 	beq	r2,zero,42bc0 <_fclose_r+0x60>
   42bb0:	81400717 	ldw	r5,28(r16)
   42bb4:	8809883a 	mov	r4,r17
   42bb8:	103ee83a 	callr	r2
   42bbc:	10002a16 	blt	r2,zero,42c68 <_fclose_r+0x108>
   42bc0:	8080030b 	ldhu	r2,12(r16)
   42bc4:	1080200c 	andi	r2,r2,128
   42bc8:	1000231e 	bne	r2,zero,42c58 <_fclose_r+0xf8>
   42bcc:	81400c17 	ldw	r5,48(r16)
   42bd0:	28000526 	beq	r5,zero,42be8 <_fclose_r+0x88>
   42bd4:	80801004 	addi	r2,r16,64
   42bd8:	28800226 	beq	r5,r2,42be4 <_fclose_r+0x84>
   42bdc:	8809883a 	mov	r4,r17
   42be0:	004226c0 	call	4226c <_free_r>
   42be4:	80000c15 	stw	zero,48(r16)
   42be8:	81401117 	ldw	r5,68(r16)
   42bec:	28000326 	beq	r5,zero,42bfc <_fclose_r+0x9c>
   42bf0:	8809883a 	mov	r4,r17
   42bf4:	004226c0 	call	4226c <_free_r>
   42bf8:	80001115 	stw	zero,68(r16)
   42bfc:	8000030d 	sth	zero,12(r16)
   42c00:	0041edc0 	call	41edc <__sfp_lock_release>
   42c04:	9005883a 	mov	r2,r18
   42c08:	dfc00317 	ldw	ra,12(sp)
   42c0c:	dc800217 	ldw	r18,8(sp)
   42c10:	dc400117 	ldw	r17,4(sp)
   42c14:	dc000017 	ldw	r16,0(sp)
   42c18:	dec00404 	addi	sp,sp,16
   42c1c:	f800283a 	ret
   42c20:	0041edc0 	call	41edc <__sfp_lock_release>
   42c24:	0025883a 	mov	r18,zero
   42c28:	9005883a 	mov	r2,r18
   42c2c:	dfc00317 	ldw	ra,12(sp)
   42c30:	dc800217 	ldw	r18,8(sp)
   42c34:	dc400117 	ldw	r17,4(sp)
   42c38:	dc000017 	ldw	r16,0(sp)
   42c3c:	dec00404 	addi	sp,sp,16
   42c40:	f800283a 	ret
   42c44:	8809883a 	mov	r4,r17
   42c48:	0041ee80 	call	41ee8 <__sinit>
   42c4c:	8080030f 	ldh	r2,12(r16)
   42c50:	103fd11e 	bne	r2,zero,42b98 <_fclose_r+0x38>
   42c54:	003ff206 	br	42c20 <_fclose_r+0xc0>
   42c58:	81400417 	ldw	r5,16(r16)
   42c5c:	8809883a 	mov	r4,r17
   42c60:	004226c0 	call	4226c <_free_r>
   42c64:	003fd906 	br	42bcc <_fclose_r+0x6c>
   42c68:	04bfffc4 	movi	r18,-1
   42c6c:	003fd406 	br	42bc0 <_fclose_r+0x60>

00042c70 <fclose>:
   42c70:	00800134 	movhi	r2,4
   42c74:	109b3804 	addi	r2,r2,27872
   42c78:	200b883a 	mov	r5,r4
   42c7c:	11000017 	ldw	r4,0(r2)
   42c80:	0042b601 	jmpi	42b60 <_fclose_r>

00042c84 <_fstat_r>:
   42c84:	defffd04 	addi	sp,sp,-12
   42c88:	dc000015 	stw	r16,0(sp)
   42c8c:	04000174 	movhi	r16,5
   42c90:	8421db04 	addi	r16,r16,-30868
   42c94:	dc400115 	stw	r17,4(sp)
   42c98:	80000015 	stw	zero,0(r16)
   42c9c:	2023883a 	mov	r17,r4
   42ca0:	2809883a 	mov	r4,r5
   42ca4:	300b883a 	mov	r5,r6
   42ca8:	dfc00215 	stw	ra,8(sp)
   42cac:	0042fe00 	call	42fe0 <fstat>
   42cb0:	1007883a 	mov	r3,r2
   42cb4:	00bfffc4 	movi	r2,-1
   42cb8:	18800626 	beq	r3,r2,42cd4 <_fstat_r+0x50>
   42cbc:	1805883a 	mov	r2,r3
   42cc0:	dfc00217 	ldw	ra,8(sp)
   42cc4:	dc400117 	ldw	r17,4(sp)
   42cc8:	dc000017 	ldw	r16,0(sp)
   42ccc:	dec00304 	addi	sp,sp,12
   42cd0:	f800283a 	ret
   42cd4:	80800017 	ldw	r2,0(r16)
   42cd8:	103ff826 	beq	r2,zero,42cbc <_fstat_r+0x38>
   42cdc:	88800015 	stw	r2,0(r17)
   42ce0:	1805883a 	mov	r2,r3
   42ce4:	dfc00217 	ldw	ra,8(sp)
   42ce8:	dc400117 	ldw	r17,4(sp)
   42cec:	dc000017 	ldw	r16,0(sp)
   42cf0:	dec00304 	addi	sp,sp,12
   42cf4:	f800283a 	ret

00042cf8 <_isatty_r>:
   42cf8:	defffd04 	addi	sp,sp,-12
   42cfc:	dc000015 	stw	r16,0(sp)
   42d00:	04000174 	movhi	r16,5
   42d04:	8421db04 	addi	r16,r16,-30868
   42d08:	dc400115 	stw	r17,4(sp)
   42d0c:	80000015 	stw	zero,0(r16)
   42d10:	2023883a 	mov	r17,r4
   42d14:	2809883a 	mov	r4,r5
   42d18:	dfc00215 	stw	ra,8(sp)
   42d1c:	00432d40 	call	432d4 <isatty>
   42d20:	1007883a 	mov	r3,r2
   42d24:	00bfffc4 	movi	r2,-1
   42d28:	18800626 	beq	r3,r2,42d44 <_isatty_r+0x4c>
   42d2c:	1805883a 	mov	r2,r3
   42d30:	dfc00217 	ldw	ra,8(sp)
   42d34:	dc400117 	ldw	r17,4(sp)
   42d38:	dc000017 	ldw	r16,0(sp)
   42d3c:	dec00304 	addi	sp,sp,12
   42d40:	f800283a 	ret
   42d44:	80800017 	ldw	r2,0(r16)
   42d48:	103ff826 	beq	r2,zero,42d2c <_isatty_r+0x34>
   42d4c:	88800015 	stw	r2,0(r17)
   42d50:	1805883a 	mov	r2,r3
   42d54:	dfc00217 	ldw	ra,8(sp)
   42d58:	dc400117 	ldw	r17,4(sp)
   42d5c:	dc000017 	ldw	r16,0(sp)
   42d60:	dec00304 	addi	sp,sp,12
   42d64:	f800283a 	ret

00042d68 <_lseek_r>:
   42d68:	defffd04 	addi	sp,sp,-12
   42d6c:	dc000015 	stw	r16,0(sp)
   42d70:	04000174 	movhi	r16,5
   42d74:	8421db04 	addi	r16,r16,-30868
   42d78:	dc400115 	stw	r17,4(sp)
   42d7c:	80000015 	stw	zero,0(r16)
   42d80:	2023883a 	mov	r17,r4
   42d84:	2809883a 	mov	r4,r5
   42d88:	300b883a 	mov	r5,r6
   42d8c:	380d883a 	mov	r6,r7
   42d90:	dfc00215 	stw	ra,8(sp)
   42d94:	00434e00 	call	434e0 <lseek>
   42d98:	1007883a 	mov	r3,r2
   42d9c:	00bfffc4 	movi	r2,-1
   42da0:	18800626 	beq	r3,r2,42dbc <_lseek_r+0x54>
   42da4:	1805883a 	mov	r2,r3
   42da8:	dfc00217 	ldw	ra,8(sp)
   42dac:	dc400117 	ldw	r17,4(sp)
   42db0:	dc000017 	ldw	r16,0(sp)
   42db4:	dec00304 	addi	sp,sp,12
   42db8:	f800283a 	ret
   42dbc:	80800017 	ldw	r2,0(r16)
   42dc0:	103ff826 	beq	r2,zero,42da4 <_lseek_r+0x3c>
   42dc4:	88800015 	stw	r2,0(r17)
   42dc8:	1805883a 	mov	r2,r3
   42dcc:	dfc00217 	ldw	ra,8(sp)
   42dd0:	dc400117 	ldw	r17,4(sp)
   42dd4:	dc000017 	ldw	r16,0(sp)
   42dd8:	dec00304 	addi	sp,sp,12
   42ddc:	f800283a 	ret

00042de0 <_read_r>:
   42de0:	defffd04 	addi	sp,sp,-12
   42de4:	dc000015 	stw	r16,0(sp)
   42de8:	04000174 	movhi	r16,5
   42dec:	8421db04 	addi	r16,r16,-30868
   42df0:	dc400115 	stw	r17,4(sp)
   42df4:	80000015 	stw	zero,0(r16)
   42df8:	2023883a 	mov	r17,r4
   42dfc:	2809883a 	mov	r4,r5
   42e00:	300b883a 	mov	r5,r6
   42e04:	380d883a 	mov	r6,r7
   42e08:	dfc00215 	stw	ra,8(sp)
   42e0c:	00436c00 	call	436c0 <read>
   42e10:	1007883a 	mov	r3,r2
   42e14:	00bfffc4 	movi	r2,-1
   42e18:	18800626 	beq	r3,r2,42e34 <_read_r+0x54>
   42e1c:	1805883a 	mov	r2,r3
   42e20:	dfc00217 	ldw	ra,8(sp)
   42e24:	dc400117 	ldw	r17,4(sp)
   42e28:	dc000017 	ldw	r16,0(sp)
   42e2c:	dec00304 	addi	sp,sp,12
   42e30:	f800283a 	ret
   42e34:	80800017 	ldw	r2,0(r16)
   42e38:	103ff826 	beq	r2,zero,42e1c <_read_r+0x3c>
   42e3c:	88800015 	stw	r2,0(r17)
   42e40:	1805883a 	mov	r2,r3
   42e44:	dfc00217 	ldw	ra,8(sp)
   42e48:	dc400117 	ldw	r17,4(sp)
   42e4c:	dc000017 	ldw	r16,0(sp)
   42e50:	dec00304 	addi	sp,sp,12
   42e54:	f800283a 	ret

00042e58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42e58:	defff804 	addi	sp,sp,-32
   42e5c:	dfc00715 	stw	ra,28(sp)
   42e60:	df000615 	stw	fp,24(sp)
   42e64:	df000604 	addi	fp,sp,24
   42e68:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42e6c:	e0bffc17 	ldw	r2,-16(fp)
   42e70:	1004803a 	cmplt	r2,r2,zero
   42e74:	1000081e 	bne	r2,zero,42e98 <close+0x40>
   42e78:	e0bffc17 	ldw	r2,-16(fp)
   42e7c:	10800324 	muli	r2,r2,12
   42e80:	1007883a 	mov	r3,r2
   42e84:	00800134 	movhi	r2,4
   42e88:	1096c004 	addi	r2,r2,23296
   42e8c:	1887883a 	add	r3,r3,r2
   42e90:	e0ffff15 	stw	r3,-4(fp)
   42e94:	00000106 	br	42e9c <close+0x44>
   42e98:	e03fff15 	stw	zero,-4(fp)
   42e9c:	e0bfff17 	ldw	r2,-4(fp)
   42ea0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   42ea4:	e0bffb17 	ldw	r2,-20(fp)
   42ea8:	1005003a 	cmpeq	r2,r2,zero
   42eac:	10001d1e 	bne	r2,zero,42f24 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42eb0:	e0bffb17 	ldw	r2,-20(fp)
   42eb4:	10800017 	ldw	r2,0(r2)
   42eb8:	10800417 	ldw	r2,16(r2)
   42ebc:	1005003a 	cmpeq	r2,r2,zero
   42ec0:	1000071e 	bne	r2,zero,42ee0 <close+0x88>
   42ec4:	e0bffb17 	ldw	r2,-20(fp)
   42ec8:	10800017 	ldw	r2,0(r2)
   42ecc:	10800417 	ldw	r2,16(r2)
   42ed0:	e13ffb17 	ldw	r4,-20(fp)
   42ed4:	103ee83a 	callr	r2
   42ed8:	e0bffe15 	stw	r2,-8(fp)
   42edc:	00000106 	br	42ee4 <close+0x8c>
   42ee0:	e03ffe15 	stw	zero,-8(fp)
   42ee4:	e0bffe17 	ldw	r2,-8(fp)
   42ee8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42eec:	e13ffc17 	ldw	r4,-16(fp)
   42ef0:	00438400 	call	43840 <alt_release_fd>
    if (rval < 0)
   42ef4:	e0bffa17 	ldw	r2,-24(fp)
   42ef8:	1004403a 	cmpge	r2,r2,zero
   42efc:	1000071e 	bne	r2,zero,42f1c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   42f00:	0042f540 	call	42f54 <alt_get_errno>
   42f04:	e0fffa17 	ldw	r3,-24(fp)
   42f08:	00c7c83a 	sub	r3,zero,r3
   42f0c:	10c00015 	stw	r3,0(r2)
      return -1;
   42f10:	00bfffc4 	movi	r2,-1
   42f14:	e0bffd15 	stw	r2,-12(fp)
   42f18:	00000806 	br	42f3c <close+0xe4>
    }
    return 0;
   42f1c:	e03ffd15 	stw	zero,-12(fp)
   42f20:	00000606 	br	42f3c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42f24:	0042f540 	call	42f54 <alt_get_errno>
   42f28:	1007883a 	mov	r3,r2
   42f2c:	00801444 	movi	r2,81
   42f30:	18800015 	stw	r2,0(r3)
    return -1;
   42f34:	00bfffc4 	movi	r2,-1
   42f38:	e0bffd15 	stw	r2,-12(fp)
   42f3c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   42f40:	e037883a 	mov	sp,fp
   42f44:	dfc00117 	ldw	ra,4(sp)
   42f48:	df000017 	ldw	fp,0(sp)
   42f4c:	dec00204 	addi	sp,sp,8
   42f50:	f800283a 	ret

00042f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42f54:	defffd04 	addi	sp,sp,-12
   42f58:	dfc00215 	stw	ra,8(sp)
   42f5c:	df000115 	stw	fp,4(sp)
   42f60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   42f64:	00800134 	movhi	r2,4
   42f68:	109b4104 	addi	r2,r2,27908
   42f6c:	10800017 	ldw	r2,0(r2)
   42f70:	1005003a 	cmpeq	r2,r2,zero
   42f74:	1000061e 	bne	r2,zero,42f90 <alt_get_errno+0x3c>
   42f78:	00800134 	movhi	r2,4
   42f7c:	109b4104 	addi	r2,r2,27908
   42f80:	10800017 	ldw	r2,0(r2)
   42f84:	103ee83a 	callr	r2
   42f88:	e0bfff15 	stw	r2,-4(fp)
   42f8c:	00000306 	br	42f9c <alt_get_errno+0x48>
   42f90:	00800174 	movhi	r2,5
   42f94:	10a1db04 	addi	r2,r2,-30868
   42f98:	e0bfff15 	stw	r2,-4(fp)
   42f9c:	e0bfff17 	ldw	r2,-4(fp)
}
   42fa0:	e037883a 	mov	sp,fp
   42fa4:	dfc00117 	ldw	ra,4(sp)
   42fa8:	df000017 	ldw	fp,0(sp)
   42fac:	dec00204 	addi	sp,sp,8
   42fb0:	f800283a 	ret

00042fb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42fb4:	defffc04 	addi	sp,sp,-16
   42fb8:	df000315 	stw	fp,12(sp)
   42fbc:	df000304 	addi	fp,sp,12
   42fc0:	e13ffd15 	stw	r4,-12(fp)
   42fc4:	e17ffe15 	stw	r5,-8(fp)
   42fc8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42fcc:	e0bfff17 	ldw	r2,-4(fp)
}
   42fd0:	e037883a 	mov	sp,fp
   42fd4:	df000017 	ldw	fp,0(sp)
   42fd8:	dec00104 	addi	sp,sp,4
   42fdc:	f800283a 	ret

00042fe0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   42fe0:	defff904 	addi	sp,sp,-28
   42fe4:	dfc00615 	stw	ra,24(sp)
   42fe8:	df000515 	stw	fp,20(sp)
   42fec:	df000504 	addi	fp,sp,20
   42ff0:	e13ffc15 	stw	r4,-16(fp)
   42ff4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42ff8:	e0bffc17 	ldw	r2,-16(fp)
   42ffc:	1004803a 	cmplt	r2,r2,zero
   43000:	1000081e 	bne	r2,zero,43024 <fstat+0x44>
   43004:	e0bffc17 	ldw	r2,-16(fp)
   43008:	10800324 	muli	r2,r2,12
   4300c:	1007883a 	mov	r3,r2
   43010:	00800134 	movhi	r2,4
   43014:	1096c004 	addi	r2,r2,23296
   43018:	1887883a 	add	r3,r3,r2
   4301c:	e0ffff15 	stw	r3,-4(fp)
   43020:	00000106 	br	43028 <fstat+0x48>
   43024:	e03fff15 	stw	zero,-4(fp)
   43028:	e0bfff17 	ldw	r2,-4(fp)
   4302c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43030:	e0bffb17 	ldw	r2,-20(fp)
   43034:	1005003a 	cmpeq	r2,r2,zero
   43038:	1000121e 	bne	r2,zero,43084 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4303c:	e0bffb17 	ldw	r2,-20(fp)
   43040:	10800017 	ldw	r2,0(r2)
   43044:	10800817 	ldw	r2,32(r2)
   43048:	1005003a 	cmpeq	r2,r2,zero
   4304c:	1000081e 	bne	r2,zero,43070 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   43050:	e0bffb17 	ldw	r2,-20(fp)
   43054:	10800017 	ldw	r2,0(r2)
   43058:	10800817 	ldw	r2,32(r2)
   4305c:	e13ffb17 	ldw	r4,-20(fp)
   43060:	e17ffd17 	ldw	r5,-12(fp)
   43064:	103ee83a 	callr	r2
   43068:	e0bffe15 	stw	r2,-8(fp)
   4306c:	00000b06 	br	4309c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43070:	e0fffd17 	ldw	r3,-12(fp)
   43074:	00880004 	movi	r2,8192
   43078:	18800115 	stw	r2,4(r3)
      return 0;
   4307c:	e03ffe15 	stw	zero,-8(fp)
   43080:	00000606 	br	4309c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43084:	00430b40 	call	430b4 <alt_get_errno>
   43088:	1007883a 	mov	r3,r2
   4308c:	00801444 	movi	r2,81
   43090:	18800015 	stw	r2,0(r3)
    return -1;
   43094:	00bfffc4 	movi	r2,-1
   43098:	e0bffe15 	stw	r2,-8(fp)
   4309c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   430a0:	e037883a 	mov	sp,fp
   430a4:	dfc00117 	ldw	ra,4(sp)
   430a8:	df000017 	ldw	fp,0(sp)
   430ac:	dec00204 	addi	sp,sp,8
   430b0:	f800283a 	ret

000430b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   430b4:	defffd04 	addi	sp,sp,-12
   430b8:	dfc00215 	stw	ra,8(sp)
   430bc:	df000115 	stw	fp,4(sp)
   430c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   430c4:	00800134 	movhi	r2,4
   430c8:	109b4104 	addi	r2,r2,27908
   430cc:	10800017 	ldw	r2,0(r2)
   430d0:	1005003a 	cmpeq	r2,r2,zero
   430d4:	1000061e 	bne	r2,zero,430f0 <alt_get_errno+0x3c>
   430d8:	00800134 	movhi	r2,4
   430dc:	109b4104 	addi	r2,r2,27908
   430e0:	10800017 	ldw	r2,0(r2)
   430e4:	103ee83a 	callr	r2
   430e8:	e0bfff15 	stw	r2,-4(fp)
   430ec:	00000306 	br	430fc <alt_get_errno+0x48>
   430f0:	00800174 	movhi	r2,5
   430f4:	10a1db04 	addi	r2,r2,-30868
   430f8:	e0bfff15 	stw	r2,-4(fp)
   430fc:	e0bfff17 	ldw	r2,-4(fp)
}
   43100:	e037883a 	mov	sp,fp
   43104:	dfc00117 	ldw	ra,4(sp)
   43108:	df000017 	ldw	fp,0(sp)
   4310c:	dec00204 	addi	sp,sp,8
   43110:	f800283a 	ret

00043114 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   43114:	deffef04 	addi	sp,sp,-68
   43118:	df001015 	stw	fp,64(sp)
   4311c:	df001004 	addi	fp,sp,64
   43120:	e13ffc15 	stw	r4,-16(fp)
   43124:	e17ffd15 	stw	r5,-12(fp)
   43128:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   4312c:	00bffa84 	movi	r2,-22
   43130:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   43134:	e0bffc17 	ldw	r2,-16(fp)
   43138:	10800828 	cmpgeui	r2,r2,32
   4313c:	1000601e 	bne	r2,zero,432c0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43140:	0005303a 	rdctl	r2,status
   43144:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43148:	e0fff917 	ldw	r3,-28(fp)
   4314c:	00bfff84 	movi	r2,-2
   43150:	1884703a 	and	r2,r3,r2
   43154:	1001703a 	wrctl	status,r2
  
  return context;
   43158:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   4315c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   43160:	e0bffc17 	ldw	r2,-16(fp)
   43164:	00c00174 	movhi	r3,5
   43168:	18e1ec04 	addi	r3,r3,-30800
   4316c:	100490fa 	slli	r2,r2,3
   43170:	10c7883a 	add	r3,r2,r3
   43174:	e0bffe17 	ldw	r2,-8(fp)
   43178:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   4317c:	e0bffc17 	ldw	r2,-16(fp)
   43180:	00c00174 	movhi	r3,5
   43184:	18e1ec04 	addi	r3,r3,-30800
   43188:	100490fa 	slli	r2,r2,3
   4318c:	10c5883a 	add	r2,r2,r3
   43190:	10c00104 	addi	r3,r2,4
   43194:	e0bffd17 	ldw	r2,-12(fp)
   43198:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   4319c:	e0bffe17 	ldw	r2,-8(fp)
   431a0:	1005003a 	cmpeq	r2,r2,zero
   431a4:	1000201e 	bne	r2,zero,43228 <alt_irq_register+0x114>
   431a8:	e0bffc17 	ldw	r2,-16(fp)
   431ac:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   431b0:	0005303a 	rdctl	r2,status
   431b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   431b8:	e0fff617 	ldw	r3,-40(fp)
   431bc:	00bfff84 	movi	r2,-2
   431c0:	1884703a 	and	r2,r3,r2
   431c4:	1001703a 	wrctl	status,r2
  
  return context;
   431c8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   431cc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   431d0:	e0fff717 	ldw	r3,-36(fp)
   431d4:	00800044 	movi	r2,1
   431d8:	10c4983a 	sll	r2,r2,r3
   431dc:	1007883a 	mov	r3,r2
   431e0:	00800174 	movhi	r2,5
   431e4:	10a1dc04 	addi	r2,r2,-30864
   431e8:	10800017 	ldw	r2,0(r2)
   431ec:	1886b03a 	or	r3,r3,r2
   431f0:	00800174 	movhi	r2,5
   431f4:	10a1dc04 	addi	r2,r2,-30864
   431f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   431fc:	00800174 	movhi	r2,5
   43200:	10a1dc04 	addi	r2,r2,-30864
   43204:	10800017 	ldw	r2,0(r2)
   43208:	100170fa 	wrctl	ienable,r2
   4320c:	e0bff817 	ldw	r2,-32(fp)
   43210:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43214:	e0bff517 	ldw	r2,-44(fp)
   43218:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4321c:	0005883a 	mov	r2,zero
   43220:	e0bfff15 	stw	r2,-4(fp)
   43224:	00002006 	br	432a8 <alt_irq_register+0x194>
   43228:	e0bffc17 	ldw	r2,-16(fp)
   4322c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43230:	0005303a 	rdctl	r2,status
   43234:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43238:	e0fff217 	ldw	r3,-56(fp)
   4323c:	00bfff84 	movi	r2,-2
   43240:	1884703a 	and	r2,r3,r2
   43244:	1001703a 	wrctl	status,r2
  
  return context;
   43248:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4324c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   43250:	e0fff317 	ldw	r3,-52(fp)
   43254:	00800044 	movi	r2,1
   43258:	10c4983a 	sll	r2,r2,r3
   4325c:	0084303a 	nor	r2,zero,r2
   43260:	1007883a 	mov	r3,r2
   43264:	00800174 	movhi	r2,5
   43268:	10a1dc04 	addi	r2,r2,-30864
   4326c:	10800017 	ldw	r2,0(r2)
   43270:	1886703a 	and	r3,r3,r2
   43274:	00800174 	movhi	r2,5
   43278:	10a1dc04 	addi	r2,r2,-30864
   4327c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   43280:	00800174 	movhi	r2,5
   43284:	10a1dc04 	addi	r2,r2,-30864
   43288:	10800017 	ldw	r2,0(r2)
   4328c:	100170fa 	wrctl	ienable,r2
   43290:	e0bff417 	ldw	r2,-48(fp)
   43294:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43298:	e0bff117 	ldw	r2,-60(fp)
   4329c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   432a0:	0005883a 	mov	r2,zero
   432a4:	e0bfff15 	stw	r2,-4(fp)
   432a8:	e0bfff17 	ldw	r2,-4(fp)
   432ac:	e0bffb15 	stw	r2,-20(fp)
   432b0:	e0bffa17 	ldw	r2,-24(fp)
   432b4:	e0bff015 	stw	r2,-64(fp)
   432b8:	e0bff017 	ldw	r2,-64(fp)
   432bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   432c0:	e0bffb17 	ldw	r2,-20(fp)
}
   432c4:	e037883a 	mov	sp,fp
   432c8:	df000017 	ldw	fp,0(sp)
   432cc:	dec00104 	addi	sp,sp,4
   432d0:	f800283a 	ret

000432d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   432d4:	deffeb04 	addi	sp,sp,-84
   432d8:	dfc01415 	stw	ra,80(sp)
   432dc:	df001315 	stw	fp,76(sp)
   432e0:	df001304 	addi	fp,sp,76
   432e4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   432e8:	e0bffd17 	ldw	r2,-12(fp)
   432ec:	1004803a 	cmplt	r2,r2,zero
   432f0:	1000081e 	bne	r2,zero,43314 <isatty+0x40>
   432f4:	e0bffd17 	ldw	r2,-12(fp)
   432f8:	10800324 	muli	r2,r2,12
   432fc:	1007883a 	mov	r3,r2
   43300:	00800134 	movhi	r2,4
   43304:	1096c004 	addi	r2,r2,23296
   43308:	1887883a 	add	r3,r3,r2
   4330c:	e0ffff15 	stw	r3,-4(fp)
   43310:	00000106 	br	43318 <isatty+0x44>
   43314:	e03fff15 	stw	zero,-4(fp)
   43318:	e0bfff17 	ldw	r2,-4(fp)
   4331c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   43320:	e0bfed17 	ldw	r2,-76(fp)
   43324:	1005003a 	cmpeq	r2,r2,zero
   43328:	10000f1e 	bne	r2,zero,43368 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4332c:	e0bfed17 	ldw	r2,-76(fp)
   43330:	10800017 	ldw	r2,0(r2)
   43334:	10800817 	ldw	r2,32(r2)
   43338:	1004c03a 	cmpne	r2,r2,zero
   4333c:	1000031e 	bne	r2,zero,4334c <isatty+0x78>
    {
      return 1;
   43340:	00800044 	movi	r2,1
   43344:	e0bffe15 	stw	r2,-8(fp)
   43348:	00000c06 	br	4337c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4334c:	e17fee04 	addi	r5,fp,-72
   43350:	e13ffd17 	ldw	r4,-12(fp)
   43354:	0042fe00 	call	42fe0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43358:	e0bfef17 	ldw	r2,-68(fp)
   4335c:	10880020 	cmpeqi	r2,r2,8192
   43360:	e0bffe15 	stw	r2,-8(fp)
   43364:	00000506 	br	4337c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43368:	00433940 	call	43394 <alt_get_errno>
   4336c:	1007883a 	mov	r3,r2
   43370:	00801444 	movi	r2,81
   43374:	18800015 	stw	r2,0(r3)
    return 0;
   43378:	e03ffe15 	stw	zero,-8(fp)
   4337c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   43380:	e037883a 	mov	sp,fp
   43384:	dfc00117 	ldw	ra,4(sp)
   43388:	df000017 	ldw	fp,0(sp)
   4338c:	dec00204 	addi	sp,sp,8
   43390:	f800283a 	ret

00043394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43394:	defffd04 	addi	sp,sp,-12
   43398:	dfc00215 	stw	ra,8(sp)
   4339c:	df000115 	stw	fp,4(sp)
   433a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   433a4:	00800134 	movhi	r2,4
   433a8:	109b4104 	addi	r2,r2,27908
   433ac:	10800017 	ldw	r2,0(r2)
   433b0:	1005003a 	cmpeq	r2,r2,zero
   433b4:	1000061e 	bne	r2,zero,433d0 <alt_get_errno+0x3c>
   433b8:	00800134 	movhi	r2,4
   433bc:	109b4104 	addi	r2,r2,27908
   433c0:	10800017 	ldw	r2,0(r2)
   433c4:	103ee83a 	callr	r2
   433c8:	e0bfff15 	stw	r2,-4(fp)
   433cc:	00000306 	br	433dc <alt_get_errno+0x48>
   433d0:	00800174 	movhi	r2,5
   433d4:	10a1db04 	addi	r2,r2,-30868
   433d8:	e0bfff15 	stw	r2,-4(fp)
   433dc:	e0bfff17 	ldw	r2,-4(fp)
}
   433e0:	e037883a 	mov	sp,fp
   433e4:	dfc00117 	ldw	ra,4(sp)
   433e8:	df000017 	ldw	fp,0(sp)
   433ec:	dec00204 	addi	sp,sp,8
   433f0:	f800283a 	ret

000433f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   433f4:	defffe04 	addi	sp,sp,-8
   433f8:	dfc00115 	stw	ra,4(sp)
   433fc:	df000015 	stw	fp,0(sp)
   43400:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43404:	01000134 	movhi	r4,4
   43408:	211b4604 	addi	r4,r4,27928
   4340c:	01400134 	movhi	r5,4
   43410:	2954b404 	addi	r5,r5,21200
   43414:	01800134 	movhi	r6,4
   43418:	319b4604 	addi	r6,r6,27928
   4341c:	00434740 	call	43474 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43420:	01000134 	movhi	r4,4
   43424:	21000804 	addi	r4,r4,32
   43428:	01400134 	movhi	r5,4
   4342c:	29400804 	addi	r5,r5,32
   43430:	01800134 	movhi	r6,4
   43434:	31806d04 	addi	r6,r6,436
   43438:	00434740 	call	43474 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4343c:	01000134 	movhi	r4,4
   43440:	2114a504 	addi	r4,r4,21140
   43444:	01400134 	movhi	r5,4
   43448:	2954a504 	addi	r5,r5,21140
   4344c:	01800134 	movhi	r6,4
   43450:	3194b404 	addi	r6,r6,21200
   43454:	00434740 	call	43474 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43458:	004478c0 	call	4478c <alt_dcache_flush_all>
  alt_icache_flush_all();
   4345c:	00449ac0 	call	449ac <alt_icache_flush_all>
}
   43460:	e037883a 	mov	sp,fp
   43464:	dfc00117 	ldw	ra,4(sp)
   43468:	df000017 	ldw	fp,0(sp)
   4346c:	dec00204 	addi	sp,sp,8
   43470:	f800283a 	ret

00043474 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43474:	defffc04 	addi	sp,sp,-16
   43478:	df000315 	stw	fp,12(sp)
   4347c:	df000304 	addi	fp,sp,12
   43480:	e13ffd15 	stw	r4,-12(fp)
   43484:	e17ffe15 	stw	r5,-8(fp)
   43488:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4348c:	e0fffe17 	ldw	r3,-8(fp)
   43490:	e0bffd17 	ldw	r2,-12(fp)
   43494:	18800e26 	beq	r3,r2,434d0 <alt_load_section+0x5c>
  {
    while( to != end )
   43498:	00000a06 	br	434c4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4349c:	e0bffd17 	ldw	r2,-12(fp)
   434a0:	10c00017 	ldw	r3,0(r2)
   434a4:	e0bffe17 	ldw	r2,-8(fp)
   434a8:	10c00015 	stw	r3,0(r2)
   434ac:	e0bffe17 	ldw	r2,-8(fp)
   434b0:	10800104 	addi	r2,r2,4
   434b4:	e0bffe15 	stw	r2,-8(fp)
   434b8:	e0bffd17 	ldw	r2,-12(fp)
   434bc:	10800104 	addi	r2,r2,4
   434c0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   434c4:	e0fffe17 	ldw	r3,-8(fp)
   434c8:	e0bfff17 	ldw	r2,-4(fp)
   434cc:	18bff31e 	bne	r3,r2,4349c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   434d0:	e037883a 	mov	sp,fp
   434d4:	df000017 	ldw	fp,0(sp)
   434d8:	dec00104 	addi	sp,sp,4
   434dc:	f800283a 	ret

000434e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   434e0:	defff804 	addi	sp,sp,-32
   434e4:	dfc00715 	stw	ra,28(sp)
   434e8:	df000615 	stw	fp,24(sp)
   434ec:	df000604 	addi	fp,sp,24
   434f0:	e13ffc15 	stw	r4,-16(fp)
   434f4:	e17ffd15 	stw	r5,-12(fp)
   434f8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   434fc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43500:	e0bffc17 	ldw	r2,-16(fp)
   43504:	1004803a 	cmplt	r2,r2,zero
   43508:	1000081e 	bne	r2,zero,4352c <lseek+0x4c>
   4350c:	e0bffc17 	ldw	r2,-16(fp)
   43510:	10800324 	muli	r2,r2,12
   43514:	1007883a 	mov	r3,r2
   43518:	00800134 	movhi	r2,4
   4351c:	1096c004 	addi	r2,r2,23296
   43520:	1887883a 	add	r3,r3,r2
   43524:	e0ffff15 	stw	r3,-4(fp)
   43528:	00000106 	br	43530 <lseek+0x50>
   4352c:	e03fff15 	stw	zero,-4(fp)
   43530:	e0bfff17 	ldw	r2,-4(fp)
   43534:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   43538:	e0bffb17 	ldw	r2,-20(fp)
   4353c:	1005003a 	cmpeq	r2,r2,zero
   43540:	1000111e 	bne	r2,zero,43588 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43544:	e0bffb17 	ldw	r2,-20(fp)
   43548:	10800017 	ldw	r2,0(r2)
   4354c:	10800717 	ldw	r2,28(r2)
   43550:	1005003a 	cmpeq	r2,r2,zero
   43554:	1000091e 	bne	r2,zero,4357c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43558:	e0bffb17 	ldw	r2,-20(fp)
   4355c:	10800017 	ldw	r2,0(r2)
   43560:	10800717 	ldw	r2,28(r2)
   43564:	e13ffb17 	ldw	r4,-20(fp)
   43568:	e17ffd17 	ldw	r5,-12(fp)
   4356c:	e1bffe17 	ldw	r6,-8(fp)
   43570:	103ee83a 	callr	r2
   43574:	e0bffa15 	stw	r2,-24(fp)
   43578:	00000506 	br	43590 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4357c:	00bfde84 	movi	r2,-134
   43580:	e0bffa15 	stw	r2,-24(fp)
   43584:	00000206 	br	43590 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43588:	00bfebc4 	movi	r2,-81
   4358c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   43590:	e0bffa17 	ldw	r2,-24(fp)
   43594:	1004403a 	cmpge	r2,r2,zero
   43598:	1000071e 	bne	r2,zero,435b8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4359c:	00435d00 	call	435d0 <alt_get_errno>
   435a0:	1007883a 	mov	r3,r2
   435a4:	e0bffa17 	ldw	r2,-24(fp)
   435a8:	0085c83a 	sub	r2,zero,r2
   435ac:	18800015 	stw	r2,0(r3)
    rc = -1;
   435b0:	00bfffc4 	movi	r2,-1
   435b4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   435b8:	e0bffa17 	ldw	r2,-24(fp)
}
   435bc:	e037883a 	mov	sp,fp
   435c0:	dfc00117 	ldw	ra,4(sp)
   435c4:	df000017 	ldw	fp,0(sp)
   435c8:	dec00204 	addi	sp,sp,8
   435cc:	f800283a 	ret

000435d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   435d0:	defffd04 	addi	sp,sp,-12
   435d4:	dfc00215 	stw	ra,8(sp)
   435d8:	df000115 	stw	fp,4(sp)
   435dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   435e0:	00800134 	movhi	r2,4
   435e4:	109b4104 	addi	r2,r2,27908
   435e8:	10800017 	ldw	r2,0(r2)
   435ec:	1005003a 	cmpeq	r2,r2,zero
   435f0:	1000061e 	bne	r2,zero,4360c <alt_get_errno+0x3c>
   435f4:	00800134 	movhi	r2,4
   435f8:	109b4104 	addi	r2,r2,27908
   435fc:	10800017 	ldw	r2,0(r2)
   43600:	103ee83a 	callr	r2
   43604:	e0bfff15 	stw	r2,-4(fp)
   43608:	00000306 	br	43618 <alt_get_errno+0x48>
   4360c:	00800174 	movhi	r2,5
   43610:	10a1db04 	addi	r2,r2,-30868
   43614:	e0bfff15 	stw	r2,-4(fp)
   43618:	e0bfff17 	ldw	r2,-4(fp)
}
   4361c:	e037883a 	mov	sp,fp
   43620:	dfc00117 	ldw	ra,4(sp)
   43624:	df000017 	ldw	fp,0(sp)
   43628:	dec00204 	addi	sp,sp,8
   4362c:	f800283a 	ret

00043630 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43630:	defffd04 	addi	sp,sp,-12
   43634:	dfc00215 	stw	ra,8(sp)
   43638:	df000115 	stw	fp,4(sp)
   4363c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43640:	0009883a 	mov	r4,zero
   43644:	0043adc0 	call	43adc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43648:	0043b100 	call	43b10 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4364c:	00448e40 	call	448e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43650:	01000134 	movhi	r4,4
   43654:	21125204 	addi	r4,r4,18760
   43658:	0044efc0 	call	44efc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4365c:	d126a517 	ldw	r4,-25964(gp)
   43660:	d166a617 	ldw	r5,-25960(gp)
   43664:	d1a6a717 	ldw	r6,-25956(gp)
   43668:	00404dc0 	call	404dc <main>
   4366c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43670:	01000044 	movi	r4,1
   43674:	0042e580 	call	42e58 <close>
  exit (result);
   43678:	e13fff17 	ldw	r4,-4(fp)
   4367c:	0044f100 	call	44f10 <exit>

00043680 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43680:	defffe04 	addi	sp,sp,-8
   43684:	df000115 	stw	fp,4(sp)
   43688:	df000104 	addi	fp,sp,4
   4368c:	e13fff15 	stw	r4,-4(fp)
}
   43690:	e037883a 	mov	sp,fp
   43694:	df000017 	ldw	fp,0(sp)
   43698:	dec00104 	addi	sp,sp,4
   4369c:	f800283a 	ret

000436a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   436a0:	defffe04 	addi	sp,sp,-8
   436a4:	df000115 	stw	fp,4(sp)
   436a8:	df000104 	addi	fp,sp,4
   436ac:	e13fff15 	stw	r4,-4(fp)
}
   436b0:	e037883a 	mov	sp,fp
   436b4:	df000017 	ldw	fp,0(sp)
   436b8:	dec00104 	addi	sp,sp,4
   436bc:	f800283a 	ret

000436c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   436c0:	defff704 	addi	sp,sp,-36
   436c4:	dfc00815 	stw	ra,32(sp)
   436c8:	df000715 	stw	fp,28(sp)
   436cc:	df000704 	addi	fp,sp,28
   436d0:	e13ffb15 	stw	r4,-20(fp)
   436d4:	e17ffc15 	stw	r5,-16(fp)
   436d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   436dc:	e0bffb17 	ldw	r2,-20(fp)
   436e0:	1004803a 	cmplt	r2,r2,zero
   436e4:	1000081e 	bne	r2,zero,43708 <read+0x48>
   436e8:	e0bffb17 	ldw	r2,-20(fp)
   436ec:	10800324 	muli	r2,r2,12
   436f0:	1007883a 	mov	r3,r2
   436f4:	00800134 	movhi	r2,4
   436f8:	1096c004 	addi	r2,r2,23296
   436fc:	1887883a 	add	r3,r3,r2
   43700:	e0ffff15 	stw	r3,-4(fp)
   43704:	00000106 	br	4370c <read+0x4c>
   43708:	e03fff15 	stw	zero,-4(fp)
   4370c:	e0bfff17 	ldw	r2,-4(fp)
   43710:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   43714:	e0bffa17 	ldw	r2,-24(fp)
   43718:	1005003a 	cmpeq	r2,r2,zero
   4371c:	1000241e 	bne	r2,zero,437b0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43720:	e0bffa17 	ldw	r2,-24(fp)
   43724:	10800217 	ldw	r2,8(r2)
   43728:	108000cc 	andi	r2,r2,3
   4372c:	10800060 	cmpeqi	r2,r2,1
   43730:	10001a1e 	bne	r2,zero,4379c <read+0xdc>
   43734:	e0bffa17 	ldw	r2,-24(fp)
   43738:	10800017 	ldw	r2,0(r2)
   4373c:	10800517 	ldw	r2,20(r2)
   43740:	1005003a 	cmpeq	r2,r2,zero
   43744:	1000151e 	bne	r2,zero,4379c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43748:	e0bffa17 	ldw	r2,-24(fp)
   4374c:	10800017 	ldw	r2,0(r2)
   43750:	10800517 	ldw	r2,20(r2)
   43754:	e17ffc17 	ldw	r5,-16(fp)
   43758:	e1bffd17 	ldw	r6,-12(fp)
   4375c:	e13ffa17 	ldw	r4,-24(fp)
   43760:	103ee83a 	callr	r2
   43764:	e0bff915 	stw	r2,-28(fp)
   43768:	e0bff917 	ldw	r2,-28(fp)
   4376c:	1004403a 	cmpge	r2,r2,zero
   43770:	1000071e 	bne	r2,zero,43790 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   43774:	00437e00 	call	437e0 <alt_get_errno>
   43778:	e0fff917 	ldw	r3,-28(fp)
   4377c:	00c7c83a 	sub	r3,zero,r3
   43780:	10c00015 	stw	r3,0(r2)
          return -1;
   43784:	00bfffc4 	movi	r2,-1
   43788:	e0bffe15 	stw	r2,-8(fp)
   4378c:	00000e06 	br	437c8 <read+0x108>
        }
        return rval;
   43790:	e0bff917 	ldw	r2,-28(fp)
   43794:	e0bffe15 	stw	r2,-8(fp)
   43798:	00000b06 	br	437c8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4379c:	00437e00 	call	437e0 <alt_get_errno>
   437a0:	1007883a 	mov	r3,r2
   437a4:	00800344 	movi	r2,13
   437a8:	18800015 	stw	r2,0(r3)
   437ac:	00000406 	br	437c0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   437b0:	00437e00 	call	437e0 <alt_get_errno>
   437b4:	1007883a 	mov	r3,r2
   437b8:	00801444 	movi	r2,81
   437bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   437c0:	00bfffc4 	movi	r2,-1
   437c4:	e0bffe15 	stw	r2,-8(fp)
   437c8:	e0bffe17 	ldw	r2,-8(fp)
}
   437cc:	e037883a 	mov	sp,fp
   437d0:	dfc00117 	ldw	ra,4(sp)
   437d4:	df000017 	ldw	fp,0(sp)
   437d8:	dec00204 	addi	sp,sp,8
   437dc:	f800283a 	ret

000437e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   437e0:	defffd04 	addi	sp,sp,-12
   437e4:	dfc00215 	stw	ra,8(sp)
   437e8:	df000115 	stw	fp,4(sp)
   437ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   437f0:	00800134 	movhi	r2,4
   437f4:	109b4104 	addi	r2,r2,27908
   437f8:	10800017 	ldw	r2,0(r2)
   437fc:	1005003a 	cmpeq	r2,r2,zero
   43800:	1000061e 	bne	r2,zero,4381c <alt_get_errno+0x3c>
   43804:	00800134 	movhi	r2,4
   43808:	109b4104 	addi	r2,r2,27908
   4380c:	10800017 	ldw	r2,0(r2)
   43810:	103ee83a 	callr	r2
   43814:	e0bfff15 	stw	r2,-4(fp)
   43818:	00000306 	br	43828 <alt_get_errno+0x48>
   4381c:	00800174 	movhi	r2,5
   43820:	10a1db04 	addi	r2,r2,-30868
   43824:	e0bfff15 	stw	r2,-4(fp)
   43828:	e0bfff17 	ldw	r2,-4(fp)
}
   4382c:	e037883a 	mov	sp,fp
   43830:	dfc00117 	ldw	ra,4(sp)
   43834:	df000017 	ldw	fp,0(sp)
   43838:	dec00204 	addi	sp,sp,8
   4383c:	f800283a 	ret

00043840 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43840:	defffe04 	addi	sp,sp,-8
   43844:	df000115 	stw	fp,4(sp)
   43848:	df000104 	addi	fp,sp,4
   4384c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   43850:	e0bfff17 	ldw	r2,-4(fp)
   43854:	108000d0 	cmplti	r2,r2,3
   43858:	10000d1e 	bne	r2,zero,43890 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4385c:	e0bfff17 	ldw	r2,-4(fp)
   43860:	00c00134 	movhi	r3,4
   43864:	18d6c004 	addi	r3,r3,23296
   43868:	10800324 	muli	r2,r2,12
   4386c:	10c5883a 	add	r2,r2,r3
   43870:	10800204 	addi	r2,r2,8
   43874:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43878:	e0bfff17 	ldw	r2,-4(fp)
   4387c:	00c00134 	movhi	r3,4
   43880:	18d6c004 	addi	r3,r3,23296
   43884:	10800324 	muli	r2,r2,12
   43888:	10c5883a 	add	r2,r2,r3
   4388c:	10000015 	stw	zero,0(r2)
  }
}
   43890:	e037883a 	mov	sp,fp
   43894:	df000017 	ldw	fp,0(sp)
   43898:	dec00104 	addi	sp,sp,4
   4389c:	f800283a 	ret

000438a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   438a0:	defff804 	addi	sp,sp,-32
   438a4:	df000715 	stw	fp,28(sp)
   438a8:	df000704 	addi	fp,sp,28
   438ac:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   438b0:	0005303a 	rdctl	r2,status
   438b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   438b8:	e0fffb17 	ldw	r3,-20(fp)
   438bc:	00bfff84 	movi	r2,-2
   438c0:	1884703a 	and	r2,r3,r2
   438c4:	1001703a 	wrctl	status,r2
  
  return context;
   438c8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   438cc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   438d0:	d0a00b17 	ldw	r2,-32724(gp)
   438d4:	10c000c4 	addi	r3,r2,3
   438d8:	00bfff04 	movi	r2,-4
   438dc:	1884703a 	and	r2,r3,r2
   438e0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   438e4:	d0e00b17 	ldw	r3,-32724(gp)
   438e8:	e0bffe17 	ldw	r2,-8(fp)
   438ec:	1887883a 	add	r3,r3,r2
   438f0:	00800234 	movhi	r2,8
   438f4:	10800004 	addi	r2,r2,0
   438f8:	10c0072e 	bgeu	r2,r3,43918 <sbrk+0x78>
   438fc:	e0bffd17 	ldw	r2,-12(fp)
   43900:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43904:	e0bffa17 	ldw	r2,-24(fp)
   43908:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4390c:	00bfffc4 	movi	r2,-1
   43910:	e0bfff15 	stw	r2,-4(fp)
   43914:	00000c06 	br	43948 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   43918:	d0a00b17 	ldw	r2,-32724(gp)
   4391c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   43920:	d0e00b17 	ldw	r3,-32724(gp)
   43924:	e0bffe17 	ldw	r2,-8(fp)
   43928:	1885883a 	add	r2,r3,r2
   4392c:	d0a00b15 	stw	r2,-32724(gp)
   43930:	e0bffd17 	ldw	r2,-12(fp)
   43934:	e0bff915 	stw	r2,-28(fp)
   43938:	e0bff917 	ldw	r2,-28(fp)
   4393c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43940:	e0bffc17 	ldw	r2,-16(fp)
   43944:	e0bfff15 	stw	r2,-4(fp)
   43948:	e0bfff17 	ldw	r2,-4(fp)
} 
   4394c:	e037883a 	mov	sp,fp
   43950:	df000017 	ldw	fp,0(sp)
   43954:	dec00104 	addi	sp,sp,4
   43958:	f800283a 	ret

0004395c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4395c:	defff704 	addi	sp,sp,-36
   43960:	dfc00815 	stw	ra,32(sp)
   43964:	df000715 	stw	fp,28(sp)
   43968:	df000704 	addi	fp,sp,28
   4396c:	e13ffb15 	stw	r4,-20(fp)
   43970:	e17ffc15 	stw	r5,-16(fp)
   43974:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43978:	e0bffb17 	ldw	r2,-20(fp)
   4397c:	1004803a 	cmplt	r2,r2,zero
   43980:	1000081e 	bne	r2,zero,439a4 <write+0x48>
   43984:	e0bffb17 	ldw	r2,-20(fp)
   43988:	10800324 	muli	r2,r2,12
   4398c:	1007883a 	mov	r3,r2
   43990:	00800134 	movhi	r2,4
   43994:	1096c004 	addi	r2,r2,23296
   43998:	1887883a 	add	r3,r3,r2
   4399c:	e0ffff15 	stw	r3,-4(fp)
   439a0:	00000106 	br	439a8 <write+0x4c>
   439a4:	e03fff15 	stw	zero,-4(fp)
   439a8:	e0bfff17 	ldw	r2,-4(fp)
   439ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   439b0:	e0bffa17 	ldw	r2,-24(fp)
   439b4:	1005003a 	cmpeq	r2,r2,zero
   439b8:	1000241e 	bne	r2,zero,43a4c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   439bc:	e0bffa17 	ldw	r2,-24(fp)
   439c0:	10800217 	ldw	r2,8(r2)
   439c4:	108000cc 	andi	r2,r2,3
   439c8:	1005003a 	cmpeq	r2,r2,zero
   439cc:	10001a1e 	bne	r2,zero,43a38 <write+0xdc>
   439d0:	e0bffa17 	ldw	r2,-24(fp)
   439d4:	10800017 	ldw	r2,0(r2)
   439d8:	10800617 	ldw	r2,24(r2)
   439dc:	1005003a 	cmpeq	r2,r2,zero
   439e0:	1000151e 	bne	r2,zero,43a38 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   439e4:	e0bffa17 	ldw	r2,-24(fp)
   439e8:	10800017 	ldw	r2,0(r2)
   439ec:	10800617 	ldw	r2,24(r2)
   439f0:	e17ffc17 	ldw	r5,-16(fp)
   439f4:	e1bffd17 	ldw	r6,-12(fp)
   439f8:	e13ffa17 	ldw	r4,-24(fp)
   439fc:	103ee83a 	callr	r2
   43a00:	e0bff915 	stw	r2,-28(fp)
   43a04:	e0bff917 	ldw	r2,-28(fp)
   43a08:	1004403a 	cmpge	r2,r2,zero
   43a0c:	1000071e 	bne	r2,zero,43a2c <write+0xd0>
      {
        ALT_ERRNO = -rval;
   43a10:	0043a7c0 	call	43a7c <alt_get_errno>
   43a14:	e0fff917 	ldw	r3,-28(fp)
   43a18:	00c7c83a 	sub	r3,zero,r3
   43a1c:	10c00015 	stw	r3,0(r2)
        return -1;
   43a20:	00bfffc4 	movi	r2,-1
   43a24:	e0bffe15 	stw	r2,-8(fp)
   43a28:	00000e06 	br	43a64 <write+0x108>
      }
      return rval;
   43a2c:	e0bff917 	ldw	r2,-28(fp)
   43a30:	e0bffe15 	stw	r2,-8(fp)
   43a34:	00000b06 	br	43a64 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43a38:	0043a7c0 	call	43a7c <alt_get_errno>
   43a3c:	1007883a 	mov	r3,r2
   43a40:	00800344 	movi	r2,13
   43a44:	18800015 	stw	r2,0(r3)
   43a48:	00000406 	br	43a5c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43a4c:	0043a7c0 	call	43a7c <alt_get_errno>
   43a50:	1007883a 	mov	r3,r2
   43a54:	00801444 	movi	r2,81
   43a58:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43a5c:	00bfffc4 	movi	r2,-1
   43a60:	e0bffe15 	stw	r2,-8(fp)
   43a64:	e0bffe17 	ldw	r2,-8(fp)
}
   43a68:	e037883a 	mov	sp,fp
   43a6c:	dfc00117 	ldw	ra,4(sp)
   43a70:	df000017 	ldw	fp,0(sp)
   43a74:	dec00204 	addi	sp,sp,8
   43a78:	f800283a 	ret

00043a7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43a7c:	defffd04 	addi	sp,sp,-12
   43a80:	dfc00215 	stw	ra,8(sp)
   43a84:	df000115 	stw	fp,4(sp)
   43a88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   43a8c:	00800134 	movhi	r2,4
   43a90:	109b4104 	addi	r2,r2,27908
   43a94:	10800017 	ldw	r2,0(r2)
   43a98:	1005003a 	cmpeq	r2,r2,zero
   43a9c:	1000061e 	bne	r2,zero,43ab8 <alt_get_errno+0x3c>
   43aa0:	00800134 	movhi	r2,4
   43aa4:	109b4104 	addi	r2,r2,27908
   43aa8:	10800017 	ldw	r2,0(r2)
   43aac:	103ee83a 	callr	r2
   43ab0:	e0bfff15 	stw	r2,-4(fp)
   43ab4:	00000306 	br	43ac4 <alt_get_errno+0x48>
   43ab8:	00800174 	movhi	r2,5
   43abc:	10a1db04 	addi	r2,r2,-30868
   43ac0:	e0bfff15 	stw	r2,-4(fp)
   43ac4:	e0bfff17 	ldw	r2,-4(fp)
}
   43ac8:	e037883a 	mov	sp,fp
   43acc:	dfc00117 	ldw	ra,4(sp)
   43ad0:	df000017 	ldw	fp,0(sp)
   43ad4:	dec00204 	addi	sp,sp,8
   43ad8:	f800283a 	ret

00043adc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43adc:	defffd04 	addi	sp,sp,-12
   43ae0:	dfc00215 	stw	ra,8(sp)
   43ae4:	df000115 	stw	fp,4(sp)
   43ae8:	df000104 	addi	fp,sp,4
   43aec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   43af0:	0044e4c0 	call	44e4c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43af4:	00800044 	movi	r2,1
   43af8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43afc:	e037883a 	mov	sp,fp
   43b00:	dfc00117 	ldw	ra,4(sp)
   43b04:	df000017 	ldw	fp,0(sp)
   43b08:	dec00204 	addi	sp,sp,8
   43b0c:	f800283a 	ret

00043b10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43b10:	defffe04 	addi	sp,sp,-8
   43b14:	dfc00115 	stw	ra,4(sp)
   43b18:	df000015 	stw	fp,0(sp)
   43b1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43b20:	01000134 	movhi	r4,4
   43b24:	21172a04 	addi	r4,r4,23720
   43b28:	000b883a 	mov	r5,zero
   43b2c:	01800084 	movi	r6,2
   43b30:	0043cd40 	call	43cd4 <altera_avalon_jtag_uart_init>
   43b34:	01000134 	movhi	r4,4
   43b38:	21172004 	addi	r4,r4,23680
   43b3c:	0043b540 	call	43b54 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   43b40:	e037883a 	mov	sp,fp
   43b44:	dfc00117 	ldw	ra,4(sp)
   43b48:	df000017 	ldw	fp,0(sp)
   43b4c:	dec00204 	addi	sp,sp,8
   43b50:	f800283a 	ret

00043b54 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43b54:	defffd04 	addi	sp,sp,-12
   43b58:	dfc00215 	stw	ra,8(sp)
   43b5c:	df000115 	stw	fp,4(sp)
   43b60:	df000104 	addi	fp,sp,4
   43b64:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43b68:	e13fff17 	ldw	r4,-4(fp)
   43b6c:	01400134 	movhi	r5,4
   43b70:	295b3e04 	addi	r5,r5,27896
   43b74:	00447d00 	call	447d0 <alt_dev_llist_insert>
}
   43b78:	e037883a 	mov	sp,fp
   43b7c:	dfc00117 	ldw	ra,4(sp)
   43b80:	df000017 	ldw	fp,0(sp)
   43b84:	dec00204 	addi	sp,sp,8
   43b88:	f800283a 	ret

00043b8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43b8c:	defffa04 	addi	sp,sp,-24
   43b90:	dfc00515 	stw	ra,20(sp)
   43b94:	df000415 	stw	fp,16(sp)
   43b98:	df000404 	addi	fp,sp,16
   43b9c:	e13ffd15 	stw	r4,-12(fp)
   43ba0:	e17ffe15 	stw	r5,-8(fp)
   43ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43ba8:	e0bffd17 	ldw	r2,-12(fp)
   43bac:	10800017 	ldw	r2,0(r2)
   43bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43bb4:	e0bffc17 	ldw	r2,-16(fp)
   43bb8:	11000a04 	addi	r4,r2,40
   43bbc:	e0bffd17 	ldw	r2,-12(fp)
   43bc0:	11c00217 	ldw	r7,8(r2)
   43bc4:	e17ffe17 	ldw	r5,-8(fp)
   43bc8:	e1bfff17 	ldw	r6,-4(fp)
   43bcc:	00441d40 	call	441d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43bd0:	e037883a 	mov	sp,fp
   43bd4:	dfc00117 	ldw	ra,4(sp)
   43bd8:	df000017 	ldw	fp,0(sp)
   43bdc:	dec00204 	addi	sp,sp,8
   43be0:	f800283a 	ret

00043be4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43be4:	defffa04 	addi	sp,sp,-24
   43be8:	dfc00515 	stw	ra,20(sp)
   43bec:	df000415 	stw	fp,16(sp)
   43bf0:	df000404 	addi	fp,sp,16
   43bf4:	e13ffd15 	stw	r4,-12(fp)
   43bf8:	e17ffe15 	stw	r5,-8(fp)
   43bfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c00:	e0bffd17 	ldw	r2,-12(fp)
   43c04:	10800017 	ldw	r2,0(r2)
   43c08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43c0c:	e0bffc17 	ldw	r2,-16(fp)
   43c10:	11000a04 	addi	r4,r2,40
   43c14:	e0bffd17 	ldw	r2,-12(fp)
   43c18:	11c00217 	ldw	r7,8(r2)
   43c1c:	e17ffe17 	ldw	r5,-8(fp)
   43c20:	e1bfff17 	ldw	r6,-4(fp)
   43c24:	00443f80 	call	443f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43c28:	e037883a 	mov	sp,fp
   43c2c:	dfc00117 	ldw	ra,4(sp)
   43c30:	df000017 	ldw	fp,0(sp)
   43c34:	dec00204 	addi	sp,sp,8
   43c38:	f800283a 	ret

00043c3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43c3c:	defffc04 	addi	sp,sp,-16
   43c40:	dfc00315 	stw	ra,12(sp)
   43c44:	df000215 	stw	fp,8(sp)
   43c48:	df000204 	addi	fp,sp,8
   43c4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c50:	e0bfff17 	ldw	r2,-4(fp)
   43c54:	10800017 	ldw	r2,0(r2)
   43c58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43c5c:	e0bffe17 	ldw	r2,-8(fp)
   43c60:	11000a04 	addi	r4,r2,40
   43c64:	e0bfff17 	ldw	r2,-4(fp)
   43c68:	11400217 	ldw	r5,8(r2)
   43c6c:	004406c0 	call	4406c <altera_avalon_jtag_uart_close>
}
   43c70:	e037883a 	mov	sp,fp
   43c74:	dfc00117 	ldw	ra,4(sp)
   43c78:	df000017 	ldw	fp,0(sp)
   43c7c:	dec00204 	addi	sp,sp,8
   43c80:	f800283a 	ret

00043c84 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43c84:	defffa04 	addi	sp,sp,-24
   43c88:	dfc00515 	stw	ra,20(sp)
   43c8c:	df000415 	stw	fp,16(sp)
   43c90:	df000404 	addi	fp,sp,16
   43c94:	e13ffd15 	stw	r4,-12(fp)
   43c98:	e17ffe15 	stw	r5,-8(fp)
   43c9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43ca0:	e0bffd17 	ldw	r2,-12(fp)
   43ca4:	10800017 	ldw	r2,0(r2)
   43ca8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43cac:	e0bffc17 	ldw	r2,-16(fp)
   43cb0:	11000a04 	addi	r4,r2,40
   43cb4:	e17ffe17 	ldw	r5,-8(fp)
   43cb8:	e1bfff17 	ldw	r6,-4(fp)
   43cbc:	00440e00 	call	440e0 <altera_avalon_jtag_uart_ioctl>
}
   43cc0:	e037883a 	mov	sp,fp
   43cc4:	dfc00117 	ldw	ra,4(sp)
   43cc8:	df000017 	ldw	fp,0(sp)
   43ccc:	dec00204 	addi	sp,sp,8
   43cd0:	f800283a 	ret

00043cd4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43cd4:	defffa04 	addi	sp,sp,-24
   43cd8:	dfc00515 	stw	ra,20(sp)
   43cdc:	df000415 	stw	fp,16(sp)
   43ce0:	df000404 	addi	fp,sp,16
   43ce4:	e13ffd15 	stw	r4,-12(fp)
   43ce8:	e17ffe15 	stw	r5,-8(fp)
   43cec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43cf0:	e0fffd17 	ldw	r3,-12(fp)
   43cf4:	00800044 	movi	r2,1
   43cf8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43cfc:	e0bffd17 	ldw	r2,-12(fp)
   43d00:	10800017 	ldw	r2,0(r2)
   43d04:	11000104 	addi	r4,r2,4
   43d08:	e0bffd17 	ldw	r2,-12(fp)
   43d0c:	10800817 	ldw	r2,32(r2)
   43d10:	1007883a 	mov	r3,r2
   43d14:	2005883a 	mov	r2,r4
   43d18:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43d1c:	e13ffe17 	ldw	r4,-8(fp)
   43d20:	e17fff17 	ldw	r5,-4(fp)
   43d24:	d8000015 	stw	zero,0(sp)
   43d28:	01800134 	movhi	r6,4
   43d2c:	318f6504 	addi	r6,r6,15764
   43d30:	e1fffd17 	ldw	r7,-12(fp)
   43d34:	00449dc0 	call	449dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43d38:	e0bffd17 	ldw	r2,-12(fp)
   43d3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43d40:	e0bffd17 	ldw	r2,-12(fp)
   43d44:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43d48:	00800174 	movhi	r2,5
   43d4c:	10a1e004 	addi	r2,r2,-30848
   43d50:	10800017 	ldw	r2,0(r2)
   43d54:	100b883a 	mov	r5,r2
   43d58:	01800134 	movhi	r6,4
   43d5c:	318fef04 	addi	r6,r6,16316
   43d60:	e1fffd17 	ldw	r7,-12(fp)
   43d64:	00446380 	call	44638 <alt_alarm_start>
   43d68:	1004403a 	cmpge	r2,r2,zero
   43d6c:	1000041e 	bne	r2,zero,43d80 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43d70:	e0fffd17 	ldw	r3,-12(fp)
   43d74:	00a00034 	movhi	r2,32768
   43d78:	10bfffc4 	addi	r2,r2,-1
   43d7c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43d80:	e037883a 	mov	sp,fp
   43d84:	dfc00117 	ldw	ra,4(sp)
   43d88:	df000017 	ldw	fp,0(sp)
   43d8c:	dec00204 	addi	sp,sp,8
   43d90:	f800283a 	ret

00043d94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43d94:	defff804 	addi	sp,sp,-32
   43d98:	df000715 	stw	fp,28(sp)
   43d9c:	df000704 	addi	fp,sp,28
   43da0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43da4:	e0bfff17 	ldw	r2,-4(fp)
   43da8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   43dac:	e0bffe17 	ldw	r2,-8(fp)
   43db0:	10800017 	ldw	r2,0(r2)
   43db4:	e0bffd15 	stw	r2,-12(fp)
   43db8:	00000006 	br	43dbc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43dbc:	e0bffd17 	ldw	r2,-12(fp)
   43dc0:	10800104 	addi	r2,r2,4
   43dc4:	10800037 	ldwio	r2,0(r2)
   43dc8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43dcc:	e0bffc17 	ldw	r2,-16(fp)
   43dd0:	1080c00c 	andi	r2,r2,768
   43dd4:	1005003a 	cmpeq	r2,r2,zero
   43dd8:	1000741e 	bne	r2,zero,43fac <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43ddc:	e0bffc17 	ldw	r2,-16(fp)
   43de0:	1080400c 	andi	r2,r2,256
   43de4:	1005003a 	cmpeq	r2,r2,zero
   43de8:	1000351e 	bne	r2,zero,43ec0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43dec:	00800074 	movhi	r2,1
   43df0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43df4:	e0bffe17 	ldw	r2,-8(fp)
   43df8:	10800a17 	ldw	r2,40(r2)
   43dfc:	10800044 	addi	r2,r2,1
   43e00:	1081ffcc 	andi	r2,r2,2047
   43e04:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   43e08:	e0bffe17 	ldw	r2,-8(fp)
   43e0c:	10c00b17 	ldw	r3,44(r2)
   43e10:	e0bffa17 	ldw	r2,-24(fp)
   43e14:	18801626 	beq	r3,r2,43e70 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43e18:	e0bffd17 	ldw	r2,-12(fp)
   43e1c:	10800037 	ldwio	r2,0(r2)
   43e20:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43e24:	e0bffb17 	ldw	r2,-20(fp)
   43e28:	10a0000c 	andi	r2,r2,32768
   43e2c:	1005003a 	cmpeq	r2,r2,zero
   43e30:	10000f1e 	bne	r2,zero,43e70 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43e34:	e0bffe17 	ldw	r2,-8(fp)
   43e38:	10c00a17 	ldw	r3,40(r2)
   43e3c:	e0bffb17 	ldw	r2,-20(fp)
   43e40:	1009883a 	mov	r4,r2
   43e44:	e0bffe17 	ldw	r2,-8(fp)
   43e48:	1885883a 	add	r2,r3,r2
   43e4c:	10800e04 	addi	r2,r2,56
   43e50:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43e54:	e0bffe17 	ldw	r2,-8(fp)
   43e58:	10800a17 	ldw	r2,40(r2)
   43e5c:	10800044 	addi	r2,r2,1
   43e60:	10c1ffcc 	andi	r3,r2,2047
   43e64:	e0bffe17 	ldw	r2,-8(fp)
   43e68:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43e6c:	003fe106 	br	43df4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43e70:	e0bffb17 	ldw	r2,-20(fp)
   43e74:	10bfffec 	andhi	r2,r2,65535
   43e78:	1005003a 	cmpeq	r2,r2,zero
   43e7c:	1000101e 	bne	r2,zero,43ec0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43e80:	e0bffe17 	ldw	r2,-8(fp)
   43e84:	10c00817 	ldw	r3,32(r2)
   43e88:	00bfff84 	movi	r2,-2
   43e8c:	1886703a 	and	r3,r3,r2
   43e90:	e0bffe17 	ldw	r2,-8(fp)
   43e94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43e98:	e0bffd17 	ldw	r2,-12(fp)
   43e9c:	11000104 	addi	r4,r2,4
   43ea0:	e0bffe17 	ldw	r2,-8(fp)
   43ea4:	10800817 	ldw	r2,32(r2)
   43ea8:	1007883a 	mov	r3,r2
   43eac:	2005883a 	mov	r2,r4
   43eb0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43eb4:	e0bffd17 	ldw	r2,-12(fp)
   43eb8:	10800104 	addi	r2,r2,4
   43ebc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43ec0:	e0bffc17 	ldw	r2,-16(fp)
   43ec4:	1080800c 	andi	r2,r2,512
   43ec8:	1005003a 	cmpeq	r2,r2,zero
   43ecc:	103fbb1e 	bne	r2,zero,43dbc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43ed0:	e0bffc17 	ldw	r2,-16(fp)
   43ed4:	10bfffec 	andhi	r2,r2,65535
   43ed8:	1004d43a 	srli	r2,r2,16
   43edc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43ee0:	00001506 	br	43f38 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43ee4:	e13ffd17 	ldw	r4,-12(fp)
   43ee8:	e0bffe17 	ldw	r2,-8(fp)
   43eec:	10c00d17 	ldw	r3,52(r2)
   43ef0:	e0bffe17 	ldw	r2,-8(fp)
   43ef4:	1885883a 	add	r2,r3,r2
   43ef8:	10820e04 	addi	r2,r2,2104
   43efc:	10800003 	ldbu	r2,0(r2)
   43f00:	10c03fcc 	andi	r3,r2,255
   43f04:	18c0201c 	xori	r3,r3,128
   43f08:	18ffe004 	addi	r3,r3,-128
   43f0c:	2005883a 	mov	r2,r4
   43f10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43f14:	e0bffe17 	ldw	r2,-8(fp)
   43f18:	10800d17 	ldw	r2,52(r2)
   43f1c:	10800044 	addi	r2,r2,1
   43f20:	10c1ffcc 	andi	r3,r2,2047
   43f24:	e0bffe17 	ldw	r2,-8(fp)
   43f28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43f2c:	e0bff917 	ldw	r2,-28(fp)
   43f30:	10bfffc4 	addi	r2,r2,-1
   43f34:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43f38:	e0bff917 	ldw	r2,-28(fp)
   43f3c:	1005003a 	cmpeq	r2,r2,zero
   43f40:	1000051e 	bne	r2,zero,43f58 <altera_avalon_jtag_uart_irq+0x1c4>
   43f44:	e0bffe17 	ldw	r2,-8(fp)
   43f48:	10c00d17 	ldw	r3,52(r2)
   43f4c:	e0bffe17 	ldw	r2,-8(fp)
   43f50:	10800c17 	ldw	r2,48(r2)
   43f54:	18bfe31e 	bne	r3,r2,43ee4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43f58:	e0bff917 	ldw	r2,-28(fp)
   43f5c:	1005003a 	cmpeq	r2,r2,zero
   43f60:	103f961e 	bne	r2,zero,43dbc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43f64:	e0bffe17 	ldw	r2,-8(fp)
   43f68:	10c00817 	ldw	r3,32(r2)
   43f6c:	00bfff44 	movi	r2,-3
   43f70:	1886703a 	and	r3,r3,r2
   43f74:	e0bffe17 	ldw	r2,-8(fp)
   43f78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43f7c:	e0bffe17 	ldw	r2,-8(fp)
   43f80:	10800017 	ldw	r2,0(r2)
   43f84:	11000104 	addi	r4,r2,4
   43f88:	e0bffe17 	ldw	r2,-8(fp)
   43f8c:	10800817 	ldw	r2,32(r2)
   43f90:	1007883a 	mov	r3,r2
   43f94:	2005883a 	mov	r2,r4
   43f98:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43f9c:	e0bffd17 	ldw	r2,-12(fp)
   43fa0:	10800104 	addi	r2,r2,4
   43fa4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   43fa8:	003f8406 	br	43dbc <altera_avalon_jtag_uart_irq+0x28>
}
   43fac:	e037883a 	mov	sp,fp
   43fb0:	df000017 	ldw	fp,0(sp)
   43fb4:	dec00104 	addi	sp,sp,4
   43fb8:	f800283a 	ret

00043fbc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   43fbc:	defffc04 	addi	sp,sp,-16
   43fc0:	df000315 	stw	fp,12(sp)
   43fc4:	df000304 	addi	fp,sp,12
   43fc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   43fcc:	e0bfff17 	ldw	r2,-4(fp)
   43fd0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   43fd4:	e0bffe17 	ldw	r2,-8(fp)
   43fd8:	10800017 	ldw	r2,0(r2)
   43fdc:	10800104 	addi	r2,r2,4
   43fe0:	10800037 	ldwio	r2,0(r2)
   43fe4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   43fe8:	e0bffd17 	ldw	r2,-12(fp)
   43fec:	1081000c 	andi	r2,r2,1024
   43ff0:	1005003a 	cmpeq	r2,r2,zero
   43ff4:	10000c1e 	bne	r2,zero,44028 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   43ff8:	e0bffe17 	ldw	r2,-8(fp)
   43ffc:	10800017 	ldw	r2,0(r2)
   44000:	11000104 	addi	r4,r2,4
   44004:	e0bffe17 	ldw	r2,-8(fp)
   44008:	10800817 	ldw	r2,32(r2)
   4400c:	10810014 	ori	r2,r2,1024
   44010:	1007883a 	mov	r3,r2
   44014:	2005883a 	mov	r2,r4
   44018:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4401c:	e0bffe17 	ldw	r2,-8(fp)
   44020:	10000915 	stw	zero,36(r2)
   44024:	00000a06 	br	44050 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44028:	e0bffe17 	ldw	r2,-8(fp)
   4402c:	10c00917 	ldw	r3,36(r2)
   44030:	00a00034 	movhi	r2,32768
   44034:	10bfff04 	addi	r2,r2,-4
   44038:	10c00536 	bltu	r2,r3,44050 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4403c:	e0bffe17 	ldw	r2,-8(fp)
   44040:	10800917 	ldw	r2,36(r2)
   44044:	10c00044 	addi	r3,r2,1
   44048:	e0bffe17 	ldw	r2,-8(fp)
   4404c:	10c00915 	stw	r3,36(r2)
   44050:	00800174 	movhi	r2,5
   44054:	10a1e004 	addi	r2,r2,-30848
   44058:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4405c:	e037883a 	mov	sp,fp
   44060:	df000017 	ldw	fp,0(sp)
   44064:	dec00104 	addi	sp,sp,4
   44068:	f800283a 	ret

0004406c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4406c:	defffc04 	addi	sp,sp,-16
   44070:	df000315 	stw	fp,12(sp)
   44074:	df000304 	addi	fp,sp,12
   44078:	e13ffd15 	stw	r4,-12(fp)
   4407c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44080:	00000706 	br	440a0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   44084:	e0bffe17 	ldw	r2,-8(fp)
   44088:	1090000c 	andi	r2,r2,16384
   4408c:	1005003a 	cmpeq	r2,r2,zero
   44090:	1000031e 	bne	r2,zero,440a0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   44094:	00bffd44 	movi	r2,-11
   44098:	e0bfff15 	stw	r2,-4(fp)
   4409c:	00000b06 	br	440cc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   440a0:	e0bffd17 	ldw	r2,-12(fp)
   440a4:	10c00d17 	ldw	r3,52(r2)
   440a8:	e0bffd17 	ldw	r2,-12(fp)
   440ac:	10800c17 	ldw	r2,48(r2)
   440b0:	18800526 	beq	r3,r2,440c8 <altera_avalon_jtag_uart_close+0x5c>
   440b4:	e0bffd17 	ldw	r2,-12(fp)
   440b8:	10c00917 	ldw	r3,36(r2)
   440bc:	e0bffd17 	ldw	r2,-12(fp)
   440c0:	10800117 	ldw	r2,4(r2)
   440c4:	18bfef36 	bltu	r3,r2,44084 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   440c8:	e03fff15 	stw	zero,-4(fp)
   440cc:	e0bfff17 	ldw	r2,-4(fp)
}
   440d0:	e037883a 	mov	sp,fp
   440d4:	df000017 	ldw	fp,0(sp)
   440d8:	dec00104 	addi	sp,sp,4
   440dc:	f800283a 	ret

000440e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   440e0:	defff804 	addi	sp,sp,-32
   440e4:	df000715 	stw	fp,28(sp)
   440e8:	df000704 	addi	fp,sp,28
   440ec:	e13ffb15 	stw	r4,-20(fp)
   440f0:	e17ffc15 	stw	r5,-16(fp)
   440f4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   440f8:	00bff9c4 	movi	r2,-25
   440fc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   44100:	e0bffc17 	ldw	r2,-16(fp)
   44104:	e0bfff15 	stw	r2,-4(fp)
   44108:	e0ffff17 	ldw	r3,-4(fp)
   4410c:	189a8060 	cmpeqi	r2,r3,27137
   44110:	1000041e 	bne	r2,zero,44124 <altera_avalon_jtag_uart_ioctl+0x44>
   44114:	e0ffff17 	ldw	r3,-4(fp)
   44118:	189a80a0 	cmpeqi	r2,r3,27138
   4411c:	10001b1e 	bne	r2,zero,4418c <altera_avalon_jtag_uart_ioctl+0xac>
   44120:	00002706 	br	441c0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44124:	e0bffb17 	ldw	r2,-20(fp)
   44128:	10c00117 	ldw	r3,4(r2)
   4412c:	00a00034 	movhi	r2,32768
   44130:	10bfffc4 	addi	r2,r2,-1
   44134:	18802226 	beq	r3,r2,441c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   44138:	e0bffd17 	ldw	r2,-12(fp)
   4413c:	10800017 	ldw	r2,0(r2)
   44140:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44144:	e0bff917 	ldw	r2,-28(fp)
   44148:	10800090 	cmplti	r2,r2,2
   4414c:	1000071e 	bne	r2,zero,4416c <altera_avalon_jtag_uart_ioctl+0x8c>
   44150:	e0fff917 	ldw	r3,-28(fp)
   44154:	00a00034 	movhi	r2,32768
   44158:	10bfffc4 	addi	r2,r2,-1
   4415c:	18800326 	beq	r3,r2,4416c <altera_avalon_jtag_uart_ioctl+0x8c>
   44160:	e0bff917 	ldw	r2,-28(fp)
   44164:	e0bffe15 	stw	r2,-8(fp)
   44168:	00000306 	br	44178 <altera_avalon_jtag_uart_ioctl+0x98>
   4416c:	00e00034 	movhi	r3,32768
   44170:	18ffff84 	addi	r3,r3,-2
   44174:	e0fffe15 	stw	r3,-8(fp)
   44178:	e0bffb17 	ldw	r2,-20(fp)
   4417c:	e0fffe17 	ldw	r3,-8(fp)
   44180:	10c00115 	stw	r3,4(r2)
      rc = 0;
   44184:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   44188:	00000d06 	br	441c0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4418c:	e0bffb17 	ldw	r2,-20(fp)
   44190:	10c00117 	ldw	r3,4(r2)
   44194:	00a00034 	movhi	r2,32768
   44198:	10bfffc4 	addi	r2,r2,-1
   4419c:	18800826 	beq	r3,r2,441c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   441a0:	e13ffd17 	ldw	r4,-12(fp)
   441a4:	e0bffb17 	ldw	r2,-20(fp)
   441a8:	10c00917 	ldw	r3,36(r2)
   441ac:	e0bffb17 	ldw	r2,-20(fp)
   441b0:	10800117 	ldw	r2,4(r2)
   441b4:	1885803a 	cmpltu	r2,r3,r2
   441b8:	20800015 	stw	r2,0(r4)
      rc = 0;
   441bc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   441c0:	e0bffa17 	ldw	r2,-24(fp)
}
   441c4:	e037883a 	mov	sp,fp
   441c8:	df000017 	ldw	fp,0(sp)
   441cc:	dec00104 	addi	sp,sp,4
   441d0:	f800283a 	ret

000441d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   441d4:	defff204 	addi	sp,sp,-56
   441d8:	dfc00d15 	stw	ra,52(sp)
   441dc:	df000c15 	stw	fp,48(sp)
   441e0:	df000c04 	addi	fp,sp,48
   441e4:	e13ffb15 	stw	r4,-20(fp)
   441e8:	e17ffc15 	stw	r5,-16(fp)
   441ec:	e1bffd15 	stw	r6,-12(fp)
   441f0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   441f4:	e0bffc17 	ldw	r2,-16(fp)
   441f8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   441fc:	00004806 	br	44320 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44200:	e0bffb17 	ldw	r2,-20(fp)
   44204:	10800a17 	ldw	r2,40(r2)
   44208:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4420c:	e0bffb17 	ldw	r2,-20(fp)
   44210:	10800b17 	ldw	r2,44(r2)
   44214:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   44218:	e0fff717 	ldw	r3,-36(fp)
   4421c:	e0bff617 	ldw	r2,-40(fp)
   44220:	18800536 	bltu	r3,r2,44238 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44224:	e0bff717 	ldw	r2,-36(fp)
   44228:	e0fff617 	ldw	r3,-40(fp)
   4422c:	10c5c83a 	sub	r2,r2,r3
   44230:	e0bff815 	stw	r2,-32(fp)
   44234:	00000406 	br	44248 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44238:	00820004 	movi	r2,2048
   4423c:	e0fff617 	ldw	r3,-40(fp)
   44240:	10c5c83a 	sub	r2,r2,r3
   44244:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   44248:	e0bff817 	ldw	r2,-32(fp)
   4424c:	1005003a 	cmpeq	r2,r2,zero
   44250:	10001f1e 	bne	r2,zero,442d0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   44254:	e0fffd17 	ldw	r3,-12(fp)
   44258:	e0bff817 	ldw	r2,-32(fp)
   4425c:	1880022e 	bgeu	r3,r2,44268 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   44260:	e0bffd17 	ldw	r2,-12(fp)
   44264:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44268:	e0bffb17 	ldw	r2,-20(fp)
   4426c:	10c00e04 	addi	r3,r2,56
   44270:	e0bff617 	ldw	r2,-40(fp)
   44274:	1887883a 	add	r3,r3,r2
   44278:	e0bffa17 	ldw	r2,-24(fp)
   4427c:	1009883a 	mov	r4,r2
   44280:	180b883a 	mov	r5,r3
   44284:	e1bff817 	ldw	r6,-32(fp)
   44288:	00413300 	call	41330 <memcpy>
      ptr   += n;
   4428c:	e0fff817 	ldw	r3,-32(fp)
   44290:	e0bffa17 	ldw	r2,-24(fp)
   44294:	10c5883a 	add	r2,r2,r3
   44298:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4429c:	e0fffd17 	ldw	r3,-12(fp)
   442a0:	e0bff817 	ldw	r2,-32(fp)
   442a4:	1885c83a 	sub	r2,r3,r2
   442a8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   442ac:	e0fff617 	ldw	r3,-40(fp)
   442b0:	e0bff817 	ldw	r2,-32(fp)
   442b4:	1885883a 	add	r2,r3,r2
   442b8:	10c1ffcc 	andi	r3,r2,2047
   442bc:	e0bffb17 	ldw	r2,-20(fp)
   442c0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   442c4:	e0bffd17 	ldw	r2,-12(fp)
   442c8:	10800048 	cmpgei	r2,r2,1
   442cc:	103fcc1e 	bne	r2,zero,44200 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   442d0:	e0fffa17 	ldw	r3,-24(fp)
   442d4:	e0bffc17 	ldw	r2,-16(fp)
   442d8:	1880141e 	bne	r3,r2,4432c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   442dc:	e0bffe17 	ldw	r2,-8(fp)
   442e0:	1090000c 	andi	r2,r2,16384
   442e4:	1004c03a 	cmpne	r2,r2,zero
   442e8:	1000101e 	bne	r2,zero,4432c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   442ec:	e0bffb17 	ldw	r2,-20(fp)
   442f0:	10c00a17 	ldw	r3,40(r2)
   442f4:	e0bff717 	ldw	r2,-36(fp)
   442f8:	1880051e 	bne	r3,r2,44310 <altera_avalon_jtag_uart_read+0x13c>
   442fc:	e0bffb17 	ldw	r2,-20(fp)
   44300:	10c00917 	ldw	r3,36(r2)
   44304:	e0bffb17 	ldw	r2,-20(fp)
   44308:	10800117 	ldw	r2,4(r2)
   4430c:	18bff736 	bltu	r3,r2,442ec <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44310:	e0bffb17 	ldw	r2,-20(fp)
   44314:	10c00a17 	ldw	r3,40(r2)
   44318:	e0bff717 	ldw	r2,-36(fp)
   4431c:	18800326 	beq	r3,r2,4432c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44320:	e0bffd17 	ldw	r2,-12(fp)
   44324:	10800048 	cmpgei	r2,r2,1
   44328:	103fb51e 	bne	r2,zero,44200 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4432c:	e0fffa17 	ldw	r3,-24(fp)
   44330:	e0bffc17 	ldw	r2,-16(fp)
   44334:	18801926 	beq	r3,r2,4439c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44338:	0005303a 	rdctl	r2,status
   4433c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44340:	e0fff517 	ldw	r3,-44(fp)
   44344:	00bfff84 	movi	r2,-2
   44348:	1884703a 	and	r2,r3,r2
   4434c:	1001703a 	wrctl	status,r2
  
  return context;
   44350:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44354:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44358:	e0bffb17 	ldw	r2,-20(fp)
   4435c:	10800817 	ldw	r2,32(r2)
   44360:	10c00054 	ori	r3,r2,1
   44364:	e0bffb17 	ldw	r2,-20(fp)
   44368:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4436c:	e0bffb17 	ldw	r2,-20(fp)
   44370:	10800017 	ldw	r2,0(r2)
   44374:	11000104 	addi	r4,r2,4
   44378:	e0bffb17 	ldw	r2,-20(fp)
   4437c:	10800817 	ldw	r2,32(r2)
   44380:	1007883a 	mov	r3,r2
   44384:	2005883a 	mov	r2,r4
   44388:	10c00035 	stwio	r3,0(r2)
   4438c:	e0bff917 	ldw	r2,-28(fp)
   44390:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44394:	e0bff417 	ldw	r2,-48(fp)
   44398:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4439c:	e0fffa17 	ldw	r3,-24(fp)
   443a0:	e0bffc17 	ldw	r2,-16(fp)
   443a4:	18800526 	beq	r3,r2,443bc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   443a8:	e0fffa17 	ldw	r3,-24(fp)
   443ac:	e0bffc17 	ldw	r2,-16(fp)
   443b0:	1887c83a 	sub	r3,r3,r2
   443b4:	e0ffff15 	stw	r3,-4(fp)
   443b8:	00000906 	br	443e0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   443bc:	e0bffe17 	ldw	r2,-8(fp)
   443c0:	1090000c 	andi	r2,r2,16384
   443c4:	1005003a 	cmpeq	r2,r2,zero
   443c8:	1000031e 	bne	r2,zero,443d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   443cc:	00bffd44 	movi	r2,-11
   443d0:	e0bfff15 	stw	r2,-4(fp)
   443d4:	00000206 	br	443e0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   443d8:	00bffec4 	movi	r2,-5
   443dc:	e0bfff15 	stw	r2,-4(fp)
   443e0:	e0bfff17 	ldw	r2,-4(fp)
}
   443e4:	e037883a 	mov	sp,fp
   443e8:	dfc00117 	ldw	ra,4(sp)
   443ec:	df000017 	ldw	fp,0(sp)
   443f0:	dec00204 	addi	sp,sp,8
   443f4:	f800283a 	ret

000443f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   443f8:	defff204 	addi	sp,sp,-56
   443fc:	dfc00d15 	stw	ra,52(sp)
   44400:	df000c15 	stw	fp,48(sp)
   44404:	df000c04 	addi	fp,sp,48
   44408:	e13ffb15 	stw	r4,-20(fp)
   4440c:	e17ffc15 	stw	r5,-16(fp)
   44410:	e1bffd15 	stw	r6,-12(fp)
   44414:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   44418:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4441c:	e0bffc17 	ldw	r2,-16(fp)
   44420:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44424:	00003a06 	br	44510 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   44428:	e0bffb17 	ldw	r2,-20(fp)
   4442c:	10800c17 	ldw	r2,48(r2)
   44430:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   44434:	e0bffb17 	ldw	r2,-20(fp)
   44438:	10800d17 	ldw	r2,52(r2)
   4443c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   44440:	e0fffa17 	ldw	r3,-24(fp)
   44444:	e0bff917 	ldw	r2,-28(fp)
   44448:	1880062e 	bgeu	r3,r2,44464 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4444c:	e0fff917 	ldw	r3,-28(fp)
   44450:	e0bffa17 	ldw	r2,-24(fp)
   44454:	1885c83a 	sub	r2,r3,r2
   44458:	10bfffc4 	addi	r2,r2,-1
   4445c:	e0bff815 	stw	r2,-32(fp)
   44460:	00000c06 	br	44494 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   44464:	e0bff917 	ldw	r2,-28(fp)
   44468:	1005003a 	cmpeq	r2,r2,zero
   4446c:	1000051e 	bne	r2,zero,44484 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44470:	00820004 	movi	r2,2048
   44474:	e0fffa17 	ldw	r3,-24(fp)
   44478:	10c5c83a 	sub	r2,r2,r3
   4447c:	e0bff815 	stw	r2,-32(fp)
   44480:	00000406 	br	44494 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   44484:	0081ffc4 	movi	r2,2047
   44488:	e0fffa17 	ldw	r3,-24(fp)
   4448c:	10c5c83a 	sub	r2,r2,r3
   44490:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   44494:	e0bff817 	ldw	r2,-32(fp)
   44498:	1005003a 	cmpeq	r2,r2,zero
   4449c:	10001f1e 	bne	r2,zero,4451c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   444a0:	e0fffd17 	ldw	r3,-12(fp)
   444a4:	e0bff817 	ldw	r2,-32(fp)
   444a8:	1880022e 	bgeu	r3,r2,444b4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   444ac:	e0bffd17 	ldw	r2,-12(fp)
   444b0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   444b4:	e0bffb17 	ldw	r2,-20(fp)
   444b8:	10c20e04 	addi	r3,r2,2104
   444bc:	e0bffa17 	ldw	r2,-24(fp)
   444c0:	1885883a 	add	r2,r3,r2
   444c4:	e0fffc17 	ldw	r3,-16(fp)
   444c8:	1009883a 	mov	r4,r2
   444cc:	180b883a 	mov	r5,r3
   444d0:	e1bff817 	ldw	r6,-32(fp)
   444d4:	00413300 	call	41330 <memcpy>
      ptr   += n;
   444d8:	e0fff817 	ldw	r3,-32(fp)
   444dc:	e0bffc17 	ldw	r2,-16(fp)
   444e0:	10c5883a 	add	r2,r2,r3
   444e4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   444e8:	e0fffd17 	ldw	r3,-12(fp)
   444ec:	e0bff817 	ldw	r2,-32(fp)
   444f0:	1885c83a 	sub	r2,r3,r2
   444f4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   444f8:	e0fffa17 	ldw	r3,-24(fp)
   444fc:	e0bff817 	ldw	r2,-32(fp)
   44500:	1885883a 	add	r2,r3,r2
   44504:	10c1ffcc 	andi	r3,r2,2047
   44508:	e0bffb17 	ldw	r2,-20(fp)
   4450c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44510:	e0bffd17 	ldw	r2,-12(fp)
   44514:	10800048 	cmpgei	r2,r2,1
   44518:	103fc31e 	bne	r2,zero,44428 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4451c:	0005303a 	rdctl	r2,status
   44520:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44524:	e0fff517 	ldw	r3,-44(fp)
   44528:	00bfff84 	movi	r2,-2
   4452c:	1884703a 	and	r2,r3,r2
   44530:	1001703a 	wrctl	status,r2
  
  return context;
   44534:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44538:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4453c:	e0bffb17 	ldw	r2,-20(fp)
   44540:	10800817 	ldw	r2,32(r2)
   44544:	10c00094 	ori	r3,r2,2
   44548:	e0bffb17 	ldw	r2,-20(fp)
   4454c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44550:	e0bffb17 	ldw	r2,-20(fp)
   44554:	10800017 	ldw	r2,0(r2)
   44558:	11000104 	addi	r4,r2,4
   4455c:	e0bffb17 	ldw	r2,-20(fp)
   44560:	10800817 	ldw	r2,32(r2)
   44564:	1007883a 	mov	r3,r2
   44568:	2005883a 	mov	r2,r4
   4456c:	10c00035 	stwio	r3,0(r2)
   44570:	e0bff717 	ldw	r2,-36(fp)
   44574:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44578:	e0bff417 	ldw	r2,-48(fp)
   4457c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44580:	e0bffd17 	ldw	r2,-12(fp)
   44584:	10800050 	cmplti	r2,r2,1
   44588:	1000111e 	bne	r2,zero,445d0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4458c:	e0bffe17 	ldw	r2,-8(fp)
   44590:	1090000c 	andi	r2,r2,16384
   44594:	1004c03a 	cmpne	r2,r2,zero
   44598:	1000101e 	bne	r2,zero,445dc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4459c:	e0bffb17 	ldw	r2,-20(fp)
   445a0:	10c00d17 	ldw	r3,52(r2)
   445a4:	e0bff917 	ldw	r2,-28(fp)
   445a8:	1880051e 	bne	r3,r2,445c0 <altera_avalon_jtag_uart_write+0x1c8>
   445ac:	e0bffb17 	ldw	r2,-20(fp)
   445b0:	10c00917 	ldw	r3,36(r2)
   445b4:	e0bffb17 	ldw	r2,-20(fp)
   445b8:	10800117 	ldw	r2,4(r2)
   445bc:	18bff736 	bltu	r3,r2,4459c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   445c0:	e0bffb17 	ldw	r2,-20(fp)
   445c4:	10c00d17 	ldw	r3,52(r2)
   445c8:	e0bff917 	ldw	r2,-28(fp)
   445cc:	18800326 	beq	r3,r2,445dc <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   445d0:	e0bffd17 	ldw	r2,-12(fp)
   445d4:	10800048 	cmpgei	r2,r2,1
   445d8:	103fcd1e 	bne	r2,zero,44510 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   445dc:	e0fffc17 	ldw	r3,-16(fp)
   445e0:	e0bff617 	ldw	r2,-40(fp)
   445e4:	18800526 	beq	r3,r2,445fc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   445e8:	e0fffc17 	ldw	r3,-16(fp)
   445ec:	e0bff617 	ldw	r2,-40(fp)
   445f0:	1887c83a 	sub	r3,r3,r2
   445f4:	e0ffff15 	stw	r3,-4(fp)
   445f8:	00000906 	br	44620 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   445fc:	e0bffe17 	ldw	r2,-8(fp)
   44600:	1090000c 	andi	r2,r2,16384
   44604:	1005003a 	cmpeq	r2,r2,zero
   44608:	1000031e 	bne	r2,zero,44618 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4460c:	00bffd44 	movi	r2,-11
   44610:	e0bfff15 	stw	r2,-4(fp)
   44614:	00000206 	br	44620 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44618:	00bffec4 	movi	r2,-5
   4461c:	e0bfff15 	stw	r2,-4(fp)
   44620:	e0bfff17 	ldw	r2,-4(fp)
}
   44624:	e037883a 	mov	sp,fp
   44628:	dfc00117 	ldw	ra,4(sp)
   4462c:	df000017 	ldw	fp,0(sp)
   44630:	dec00204 	addi	sp,sp,8
   44634:	f800283a 	ret

00044638 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44638:	defff404 	addi	sp,sp,-48
   4463c:	df000b15 	stw	fp,44(sp)
   44640:	df000b04 	addi	fp,sp,44
   44644:	e13ffb15 	stw	r4,-20(fp)
   44648:	e17ffc15 	stw	r5,-16(fp)
   4464c:	e1bffd15 	stw	r6,-12(fp)
   44650:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44654:	e03ff915 	stw	zero,-28(fp)
   44658:	00800174 	movhi	r2,5
   4465c:	10a1e004 	addi	r2,r2,-30848
   44660:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   44664:	1005003a 	cmpeq	r2,r2,zero
   44668:	1000411e 	bne	r2,zero,44770 <alt_alarm_start+0x138>
  {
    if (alarm)
   4466c:	e0bffb17 	ldw	r2,-20(fp)
   44670:	1005003a 	cmpeq	r2,r2,zero
   44674:	10003b1e 	bne	r2,zero,44764 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   44678:	e0fffb17 	ldw	r3,-20(fp)
   4467c:	e0bffd17 	ldw	r2,-12(fp)
   44680:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   44684:	e0fffb17 	ldw	r3,-20(fp)
   44688:	e0bffe17 	ldw	r2,-8(fp)
   4468c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44690:	0005303a 	rdctl	r2,status
   44694:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44698:	e0fff817 	ldw	r3,-32(fp)
   4469c:	00bfff84 	movi	r2,-2
   446a0:	1884703a 	and	r2,r3,r2
   446a4:	1001703a 	wrctl	status,r2
  
  return context;
   446a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   446ac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   446b0:	00800174 	movhi	r2,5
   446b4:	10a1e104 	addi	r2,r2,-30844
   446b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   446bc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   446c0:	e0fffc17 	ldw	r3,-16(fp)
   446c4:	e0bff917 	ldw	r2,-28(fp)
   446c8:	1885883a 	add	r2,r3,r2
   446cc:	10c00044 	addi	r3,r2,1
   446d0:	e0bffb17 	ldw	r2,-20(fp)
   446d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   446d8:	e0bffb17 	ldw	r2,-20(fp)
   446dc:	10c00217 	ldw	r3,8(r2)
   446e0:	e0bff917 	ldw	r2,-28(fp)
   446e4:	1880042e 	bgeu	r3,r2,446f8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   446e8:	e0fffb17 	ldw	r3,-20(fp)
   446ec:	00800044 	movi	r2,1
   446f0:	18800405 	stb	r2,16(r3)
   446f4:	00000206 	br	44700 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   446f8:	e0bffb17 	ldw	r2,-20(fp)
   446fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44700:	e0fffb17 	ldw	r3,-20(fp)
   44704:	00800134 	movhi	r2,4
   44708:	109b4404 	addi	r2,r2,27920
   4470c:	e0bff615 	stw	r2,-40(fp)
   44710:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44714:	e0fff717 	ldw	r3,-36(fp)
   44718:	e0bff617 	ldw	r2,-40(fp)
   4471c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   44720:	e0bff617 	ldw	r2,-40(fp)
   44724:	10c00017 	ldw	r3,0(r2)
   44728:	e0bff717 	ldw	r2,-36(fp)
   4472c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44730:	e0bff617 	ldw	r2,-40(fp)
   44734:	10c00017 	ldw	r3,0(r2)
   44738:	e0bff717 	ldw	r2,-36(fp)
   4473c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   44740:	e0fff617 	ldw	r3,-40(fp)
   44744:	e0bff717 	ldw	r2,-36(fp)
   44748:	18800015 	stw	r2,0(r3)
   4474c:	e0bffa17 	ldw	r2,-24(fp)
   44750:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44754:	e0bff517 	ldw	r2,-44(fp)
   44758:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4475c:	e03fff15 	stw	zero,-4(fp)
   44760:	00000506 	br	44778 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   44764:	00bffa84 	movi	r2,-22
   44768:	e0bfff15 	stw	r2,-4(fp)
   4476c:	00000206 	br	44778 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   44770:	00bfde84 	movi	r2,-134
   44774:	e0bfff15 	stw	r2,-4(fp)
   44778:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4477c:	e037883a 	mov	sp,fp
   44780:	df000017 	ldw	fp,0(sp)
   44784:	dec00104 	addi	sp,sp,4
   44788:	f800283a 	ret

0004478c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4478c:	defffe04 	addi	sp,sp,-8
   44790:	df000115 	stw	fp,4(sp)
   44794:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44798:	e03fff15 	stw	zero,-4(fp)
   4479c:	00000506 	br	447b4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   447a0:	e0bfff17 	ldw	r2,-4(fp)
   447a4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   447a8:	e0bfff17 	ldw	r2,-4(fp)
   447ac:	10800804 	addi	r2,r2,32
   447b0:	e0bfff15 	stw	r2,-4(fp)
   447b4:	e0bfff17 	ldw	r2,-4(fp)
   447b8:	10820030 	cmpltui	r2,r2,2048
   447bc:	103ff81e 	bne	r2,zero,447a0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   447c0:	e037883a 	mov	sp,fp
   447c4:	df000017 	ldw	fp,0(sp)
   447c8:	dec00104 	addi	sp,sp,4
   447cc:	f800283a 	ret

000447d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   447d0:	defff904 	addi	sp,sp,-28
   447d4:	dfc00615 	stw	ra,24(sp)
   447d8:	df000515 	stw	fp,20(sp)
   447dc:	df000504 	addi	fp,sp,20
   447e0:	e13ffd15 	stw	r4,-12(fp)
   447e4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   447e8:	e0bffd17 	ldw	r2,-12(fp)
   447ec:	1005003a 	cmpeq	r2,r2,zero
   447f0:	1000041e 	bne	r2,zero,44804 <alt_dev_llist_insert+0x34>
   447f4:	e0bffd17 	ldw	r2,-12(fp)
   447f8:	10800217 	ldw	r2,8(r2)
   447fc:	1004c03a 	cmpne	r2,r2,zero
   44800:	1000071e 	bne	r2,zero,44820 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   44804:	00448840 	call	44884 <alt_get_errno>
   44808:	1007883a 	mov	r3,r2
   4480c:	00800584 	movi	r2,22
   44810:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44814:	00bffa84 	movi	r2,-22
   44818:	e0bfff15 	stw	r2,-4(fp)
   4481c:	00001306 	br	4486c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44820:	e0fffd17 	ldw	r3,-12(fp)
   44824:	e0bffe17 	ldw	r2,-8(fp)
   44828:	e0bffb15 	stw	r2,-20(fp)
   4482c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44830:	e0fffc17 	ldw	r3,-16(fp)
   44834:	e0bffb17 	ldw	r2,-20(fp)
   44838:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4483c:	e0bffb17 	ldw	r2,-20(fp)
   44840:	10c00017 	ldw	r3,0(r2)
   44844:	e0bffc17 	ldw	r2,-16(fp)
   44848:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4484c:	e0bffb17 	ldw	r2,-20(fp)
   44850:	10c00017 	ldw	r3,0(r2)
   44854:	e0bffc17 	ldw	r2,-16(fp)
   44858:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4485c:	e0fffb17 	ldw	r3,-20(fp)
   44860:	e0bffc17 	ldw	r2,-16(fp)
   44864:	18800015 	stw	r2,0(r3)

  return 0;  
   44868:	e03fff15 	stw	zero,-4(fp)
   4486c:	e0bfff17 	ldw	r2,-4(fp)
}
   44870:	e037883a 	mov	sp,fp
   44874:	dfc00117 	ldw	ra,4(sp)
   44878:	df000017 	ldw	fp,0(sp)
   4487c:	dec00204 	addi	sp,sp,8
   44880:	f800283a 	ret

00044884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44884:	defffd04 	addi	sp,sp,-12
   44888:	dfc00215 	stw	ra,8(sp)
   4488c:	df000115 	stw	fp,4(sp)
   44890:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   44894:	00800134 	movhi	r2,4
   44898:	109b4104 	addi	r2,r2,27908
   4489c:	10800017 	ldw	r2,0(r2)
   448a0:	1005003a 	cmpeq	r2,r2,zero
   448a4:	1000061e 	bne	r2,zero,448c0 <alt_get_errno+0x3c>
   448a8:	00800134 	movhi	r2,4
   448ac:	109b4104 	addi	r2,r2,27908
   448b0:	10800017 	ldw	r2,0(r2)
   448b4:	103ee83a 	callr	r2
   448b8:	e0bfff15 	stw	r2,-4(fp)
   448bc:	00000306 	br	448cc <alt_get_errno+0x48>
   448c0:	00800174 	movhi	r2,5
   448c4:	10a1db04 	addi	r2,r2,-30868
   448c8:	e0bfff15 	stw	r2,-4(fp)
   448cc:	e0bfff17 	ldw	r2,-4(fp)
}
   448d0:	e037883a 	mov	sp,fp
   448d4:	dfc00117 	ldw	ra,4(sp)
   448d8:	df000017 	ldw	fp,0(sp)
   448dc:	dec00204 	addi	sp,sp,8
   448e0:	f800283a 	ret

000448e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   448e4:	defffd04 	addi	sp,sp,-12
   448e8:	dfc00215 	stw	ra,8(sp)
   448ec:	df000115 	stw	fp,4(sp)
   448f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   448f4:	00bfff04 	movi	r2,-4
   448f8:	00c00134 	movhi	r3,4
   448fc:	18d4a504 	addi	r3,r3,21140
   44900:	1885883a 	add	r2,r3,r2
   44904:	e0bfff15 	stw	r2,-4(fp)
   44908:	00000606 	br	44924 <_do_ctors+0x40>
        (*ctor) (); 
   4490c:	e0bfff17 	ldw	r2,-4(fp)
   44910:	10800017 	ldw	r2,0(r2)
   44914:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44918:	e0bfff17 	ldw	r2,-4(fp)
   4491c:	10bfff04 	addi	r2,r2,-4
   44920:	e0bfff15 	stw	r2,-4(fp)
   44924:	e0ffff17 	ldw	r3,-4(fp)
   44928:	00800134 	movhi	r2,4
   4492c:	1094a404 	addi	r2,r2,21136
   44930:	18bff62e 	bgeu	r3,r2,4490c <_do_ctors+0x28>
        (*ctor) (); 
}
   44934:	e037883a 	mov	sp,fp
   44938:	dfc00117 	ldw	ra,4(sp)
   4493c:	df000017 	ldw	fp,0(sp)
   44940:	dec00204 	addi	sp,sp,8
   44944:	f800283a 	ret

00044948 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44948:	defffd04 	addi	sp,sp,-12
   4494c:	dfc00215 	stw	ra,8(sp)
   44950:	df000115 	stw	fp,4(sp)
   44954:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44958:	00bfff04 	movi	r2,-4
   4495c:	00c00134 	movhi	r3,4
   44960:	18d4a504 	addi	r3,r3,21140
   44964:	1885883a 	add	r2,r3,r2
   44968:	e0bfff15 	stw	r2,-4(fp)
   4496c:	00000606 	br	44988 <_do_dtors+0x40>
        (*dtor) (); 
   44970:	e0bfff17 	ldw	r2,-4(fp)
   44974:	10800017 	ldw	r2,0(r2)
   44978:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4497c:	e0bfff17 	ldw	r2,-4(fp)
   44980:	10bfff04 	addi	r2,r2,-4
   44984:	e0bfff15 	stw	r2,-4(fp)
   44988:	e0ffff17 	ldw	r3,-4(fp)
   4498c:	00800134 	movhi	r2,4
   44990:	1094a504 	addi	r2,r2,21140
   44994:	18bff62e 	bgeu	r3,r2,44970 <_do_dtors+0x28>
        (*dtor) (); 
}
   44998:	e037883a 	mov	sp,fp
   4499c:	dfc00117 	ldw	ra,4(sp)
   449a0:	df000017 	ldw	fp,0(sp)
   449a4:	dec00204 	addi	sp,sp,8
   449a8:	f800283a 	ret

000449ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   449ac:	defffe04 	addi	sp,sp,-8
   449b0:	dfc00115 	stw	ra,4(sp)
   449b4:	df000015 	stw	fp,0(sp)
   449b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   449bc:	0009883a 	mov	r4,zero
   449c0:	01440004 	movi	r5,4096
   449c4:	0044e6c0 	call	44e6c <alt_icache_flush>
#endif
}
   449c8:	e037883a 	mov	sp,fp
   449cc:	dfc00117 	ldw	ra,4(sp)
   449d0:	df000017 	ldw	fp,0(sp)
   449d4:	dec00204 	addi	sp,sp,8
   449d8:	f800283a 	ret

000449dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   449dc:	defff904 	addi	sp,sp,-28
   449e0:	dfc00615 	stw	ra,24(sp)
   449e4:	df000515 	stw	fp,20(sp)
   449e8:	df000504 	addi	fp,sp,20
   449ec:	e13ffc15 	stw	r4,-16(fp)
   449f0:	e17ffd15 	stw	r5,-12(fp)
   449f4:	e1bffe15 	stw	r6,-8(fp)
   449f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   449fc:	e0800217 	ldw	r2,8(fp)
   44a00:	d8800015 	stw	r2,0(sp)
   44a04:	e13ffc17 	ldw	r4,-16(fp)
   44a08:	e17ffd17 	ldw	r5,-12(fp)
   44a0c:	e1bffe17 	ldw	r6,-8(fp)
   44a10:	e1ffff17 	ldw	r7,-4(fp)
   44a14:	0044bb00 	call	44bb0 <alt_iic_isr_register>
}  
   44a18:	e037883a 	mov	sp,fp
   44a1c:	dfc00117 	ldw	ra,4(sp)
   44a20:	df000017 	ldw	fp,0(sp)
   44a24:	dec00204 	addi	sp,sp,8
   44a28:	f800283a 	ret

00044a2c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   44a2c:	defff904 	addi	sp,sp,-28
   44a30:	df000615 	stw	fp,24(sp)
   44a34:	df000604 	addi	fp,sp,24
   44a38:	e13ffe15 	stw	r4,-8(fp)
   44a3c:	e17fff15 	stw	r5,-4(fp)
   44a40:	e0bfff17 	ldw	r2,-4(fp)
   44a44:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44a48:	0005303a 	rdctl	r2,status
   44a4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a50:	e0fffb17 	ldw	r3,-20(fp)
   44a54:	00bfff84 	movi	r2,-2
   44a58:	1884703a 	and	r2,r3,r2
   44a5c:	1001703a 	wrctl	status,r2
  
  return context;
   44a60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44a64:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   44a68:	e0fffc17 	ldw	r3,-16(fp)
   44a6c:	00800044 	movi	r2,1
   44a70:	10c4983a 	sll	r2,r2,r3
   44a74:	1007883a 	mov	r3,r2
   44a78:	00800174 	movhi	r2,5
   44a7c:	10a1dc04 	addi	r2,r2,-30864
   44a80:	10800017 	ldw	r2,0(r2)
   44a84:	1886b03a 	or	r3,r3,r2
   44a88:	00800174 	movhi	r2,5
   44a8c:	10a1dc04 	addi	r2,r2,-30864
   44a90:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44a94:	00800174 	movhi	r2,5
   44a98:	10a1dc04 	addi	r2,r2,-30864
   44a9c:	10800017 	ldw	r2,0(r2)
   44aa0:	100170fa 	wrctl	ienable,r2
   44aa4:	e0bffd17 	ldw	r2,-12(fp)
   44aa8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44aac:	e0bffa17 	ldw	r2,-24(fp)
   44ab0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44ab4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   44ab8:	e037883a 	mov	sp,fp
   44abc:	df000017 	ldw	fp,0(sp)
   44ac0:	dec00104 	addi	sp,sp,4
   44ac4:	f800283a 	ret

00044ac8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44ac8:	defff904 	addi	sp,sp,-28
   44acc:	df000615 	stw	fp,24(sp)
   44ad0:	df000604 	addi	fp,sp,24
   44ad4:	e13ffe15 	stw	r4,-8(fp)
   44ad8:	e17fff15 	stw	r5,-4(fp)
   44adc:	e0bfff17 	ldw	r2,-4(fp)
   44ae0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44ae4:	0005303a 	rdctl	r2,status
   44ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44aec:	e0fffb17 	ldw	r3,-20(fp)
   44af0:	00bfff84 	movi	r2,-2
   44af4:	1884703a 	and	r2,r3,r2
   44af8:	1001703a 	wrctl	status,r2
  
  return context;
   44afc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44b00:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   44b04:	e0fffc17 	ldw	r3,-16(fp)
   44b08:	00800044 	movi	r2,1
   44b0c:	10c4983a 	sll	r2,r2,r3
   44b10:	0084303a 	nor	r2,zero,r2
   44b14:	1007883a 	mov	r3,r2
   44b18:	00800174 	movhi	r2,5
   44b1c:	10a1dc04 	addi	r2,r2,-30864
   44b20:	10800017 	ldw	r2,0(r2)
   44b24:	1886703a 	and	r3,r3,r2
   44b28:	00800174 	movhi	r2,5
   44b2c:	10a1dc04 	addi	r2,r2,-30864
   44b30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44b34:	00800174 	movhi	r2,5
   44b38:	10a1dc04 	addi	r2,r2,-30864
   44b3c:	10800017 	ldw	r2,0(r2)
   44b40:	100170fa 	wrctl	ienable,r2
   44b44:	e0bffd17 	ldw	r2,-12(fp)
   44b48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b4c:	e0bffa17 	ldw	r2,-24(fp)
   44b50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44b54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   44b58:	e037883a 	mov	sp,fp
   44b5c:	df000017 	ldw	fp,0(sp)
   44b60:	dec00104 	addi	sp,sp,4
   44b64:	f800283a 	ret

00044b68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   44b68:	defffc04 	addi	sp,sp,-16
   44b6c:	df000315 	stw	fp,12(sp)
   44b70:	df000304 	addi	fp,sp,12
   44b74:	e13ffe15 	stw	r4,-8(fp)
   44b78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   44b7c:	000530fa 	rdctl	r2,ienable
   44b80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44b84:	e0ffff17 	ldw	r3,-4(fp)
   44b88:	00800044 	movi	r2,1
   44b8c:	10c4983a 	sll	r2,r2,r3
   44b90:	1007883a 	mov	r3,r2
   44b94:	e0bffd17 	ldw	r2,-12(fp)
   44b98:	1884703a 	and	r2,r3,r2
   44b9c:	1004c03a 	cmpne	r2,r2,zero
}
   44ba0:	e037883a 	mov	sp,fp
   44ba4:	df000017 	ldw	fp,0(sp)
   44ba8:	dec00104 	addi	sp,sp,4
   44bac:	f800283a 	ret

00044bb0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44bb0:	defff404 	addi	sp,sp,-48
   44bb4:	dfc00b15 	stw	ra,44(sp)
   44bb8:	df000a15 	stw	fp,40(sp)
   44bbc:	df000a04 	addi	fp,sp,40
   44bc0:	e13ffb15 	stw	r4,-20(fp)
   44bc4:	e17ffc15 	stw	r5,-16(fp)
   44bc8:	e1bffd15 	stw	r6,-12(fp)
   44bcc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   44bd0:	00bffa84 	movi	r2,-22
   44bd4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44bd8:	e0bffc17 	ldw	r2,-16(fp)
   44bdc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44be0:	e0bff917 	ldw	r2,-28(fp)
   44be4:	10800808 	cmpgei	r2,r2,32
   44be8:	1000291e 	bne	r2,zero,44c90 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44bec:	0005303a 	rdctl	r2,status
   44bf0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44bf4:	e0fff717 	ldw	r3,-36(fp)
   44bf8:	00bfff84 	movi	r2,-2
   44bfc:	1884703a 	and	r2,r3,r2
   44c00:	1001703a 	wrctl	status,r2
  
  return context;
   44c04:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44c08:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   44c0c:	e0bff917 	ldw	r2,-28(fp)
   44c10:	00c00174 	movhi	r3,5
   44c14:	18e1ec04 	addi	r3,r3,-30800
   44c18:	100490fa 	slli	r2,r2,3
   44c1c:	10c7883a 	add	r3,r2,r3
   44c20:	e0bffd17 	ldw	r2,-12(fp)
   44c24:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   44c28:	e0bff917 	ldw	r2,-28(fp)
   44c2c:	00c00174 	movhi	r3,5
   44c30:	18e1ec04 	addi	r3,r3,-30800
   44c34:	100490fa 	slli	r2,r2,3
   44c38:	10c5883a 	add	r2,r2,r3
   44c3c:	10c00104 	addi	r3,r2,4
   44c40:	e0bffe17 	ldw	r2,-8(fp)
   44c44:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44c48:	e0bffd17 	ldw	r2,-12(fp)
   44c4c:	1005003a 	cmpeq	r2,r2,zero
   44c50:	1000051e 	bne	r2,zero,44c68 <alt_iic_isr_register+0xb8>
   44c54:	e17ff917 	ldw	r5,-28(fp)
   44c58:	e13ffb17 	ldw	r4,-20(fp)
   44c5c:	0044a2c0 	call	44a2c <alt_ic_irq_enable>
   44c60:	e0bfff15 	stw	r2,-4(fp)
   44c64:	00000406 	br	44c78 <alt_iic_isr_register+0xc8>
   44c68:	e17ff917 	ldw	r5,-28(fp)
   44c6c:	e13ffb17 	ldw	r4,-20(fp)
   44c70:	0044ac80 	call	44ac8 <alt_ic_irq_disable>
   44c74:	e0bfff15 	stw	r2,-4(fp)
   44c78:	e0bfff17 	ldw	r2,-4(fp)
   44c7c:	e0bffa15 	stw	r2,-24(fp)
   44c80:	e0bff817 	ldw	r2,-32(fp)
   44c84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44c88:	e0bff617 	ldw	r2,-40(fp)
   44c8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   44c90:	e0bffa17 	ldw	r2,-24(fp)
}
   44c94:	e037883a 	mov	sp,fp
   44c98:	dfc00117 	ldw	ra,4(sp)
   44c9c:	df000017 	ldw	fp,0(sp)
   44ca0:	dec00204 	addi	sp,sp,8
   44ca4:	f800283a 	ret

00044ca8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   44ca8:	defffa04 	addi	sp,sp,-24
   44cac:	df000515 	stw	fp,20(sp)
   44cb0:	df000504 	addi	fp,sp,20
   44cb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44cb8:	0005303a 	rdctl	r2,status
   44cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44cc0:	e0fffd17 	ldw	r3,-12(fp)
   44cc4:	00bfff84 	movi	r2,-2
   44cc8:	1884703a 	and	r2,r3,r2
   44ccc:	1001703a 	wrctl	status,r2
  
  return context;
   44cd0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   44cd4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   44cd8:	e0bfff17 	ldw	r2,-4(fp)
   44cdc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   44ce0:	e0bffc17 	ldw	r2,-16(fp)
   44ce4:	10c00017 	ldw	r3,0(r2)
   44ce8:	e0bffc17 	ldw	r2,-16(fp)
   44cec:	10800117 	ldw	r2,4(r2)
   44cf0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   44cf4:	e0bffc17 	ldw	r2,-16(fp)
   44cf8:	10c00117 	ldw	r3,4(r2)
   44cfc:	e0bffc17 	ldw	r2,-16(fp)
   44d00:	10800017 	ldw	r2,0(r2)
   44d04:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   44d08:	e0fffc17 	ldw	r3,-16(fp)
   44d0c:	e0bffc17 	ldw	r2,-16(fp)
   44d10:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   44d14:	e0fffc17 	ldw	r3,-16(fp)
   44d18:	e0bffc17 	ldw	r2,-16(fp)
   44d1c:	18800015 	stw	r2,0(r3)
   44d20:	e0bffe17 	ldw	r2,-8(fp)
   44d24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44d28:	e0bffb17 	ldw	r2,-20(fp)
   44d2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   44d30:	e037883a 	mov	sp,fp
   44d34:	df000017 	ldw	fp,0(sp)
   44d38:	dec00104 	addi	sp,sp,4
   44d3c:	f800283a 	ret

00044d40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   44d40:	defffb04 	addi	sp,sp,-20
   44d44:	dfc00415 	stw	ra,16(sp)
   44d48:	df000315 	stw	fp,12(sp)
   44d4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   44d50:	d0a00c17 	ldw	r2,-32720(gp)
   44d54:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   44d58:	d0a6a917 	ldw	r2,-25948(gp)
   44d5c:	10800044 	addi	r2,r2,1
   44d60:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44d64:	00003106 	br	44e2c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   44d68:	e0bffe17 	ldw	r2,-8(fp)
   44d6c:	10800017 	ldw	r2,0(r2)
   44d70:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   44d74:	e0bffe17 	ldw	r2,-8(fp)
   44d78:	10800403 	ldbu	r2,16(r2)
   44d7c:	10803fcc 	andi	r2,r2,255
   44d80:	1005003a 	cmpeq	r2,r2,zero
   44d84:	1000051e 	bne	r2,zero,44d9c <alt_tick+0x5c>
   44d88:	d0a6a917 	ldw	r2,-25948(gp)
   44d8c:	1004c03a 	cmpne	r2,r2,zero
   44d90:	1000021e 	bne	r2,zero,44d9c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   44d94:	e0bffe17 	ldw	r2,-8(fp)
   44d98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   44d9c:	e0bffe17 	ldw	r2,-8(fp)
   44da0:	10c00217 	ldw	r3,8(r2)
   44da4:	d0a6a917 	ldw	r2,-25948(gp)
   44da8:	10c01e36 	bltu	r2,r3,44e24 <alt_tick+0xe4>
   44dac:	e0bffe17 	ldw	r2,-8(fp)
   44db0:	10800403 	ldbu	r2,16(r2)
   44db4:	10803fcc 	andi	r2,r2,255
   44db8:	1004c03a 	cmpne	r2,r2,zero
   44dbc:	1000191e 	bne	r2,zero,44e24 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   44dc0:	e0bffe17 	ldw	r2,-8(fp)
   44dc4:	10c00317 	ldw	r3,12(r2)
   44dc8:	e0bffe17 	ldw	r2,-8(fp)
   44dcc:	11000517 	ldw	r4,20(r2)
   44dd0:	183ee83a 	callr	r3
   44dd4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   44dd8:	e0bffd17 	ldw	r2,-12(fp)
   44ddc:	1004c03a 	cmpne	r2,r2,zero
   44de0:	1000031e 	bne	r2,zero,44df0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   44de4:	e13ffe17 	ldw	r4,-8(fp)
   44de8:	0044ca80 	call	44ca8 <alt_alarm_stop>
   44dec:	00000d06 	br	44e24 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   44df0:	e0bffe17 	ldw	r2,-8(fp)
   44df4:	10c00217 	ldw	r3,8(r2)
   44df8:	e0bffd17 	ldw	r2,-12(fp)
   44dfc:	1887883a 	add	r3,r3,r2
   44e00:	e0bffe17 	ldw	r2,-8(fp)
   44e04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   44e08:	e0bffe17 	ldw	r2,-8(fp)
   44e0c:	10c00217 	ldw	r3,8(r2)
   44e10:	d0a6a917 	ldw	r2,-25948(gp)
   44e14:	1880032e 	bgeu	r3,r2,44e24 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   44e18:	e0fffe17 	ldw	r3,-8(fp)
   44e1c:	00800044 	movi	r2,1
   44e20:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   44e24:	e0bfff17 	ldw	r2,-4(fp)
   44e28:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44e2c:	d0e00c04 	addi	r3,gp,-32720
   44e30:	e0bffe17 	ldw	r2,-8(fp)
   44e34:	10ffcc1e 	bne	r2,r3,44d68 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   44e38:	e037883a 	mov	sp,fp
   44e3c:	dfc00117 	ldw	ra,4(sp)
   44e40:	df000017 	ldw	fp,0(sp)
   44e44:	dec00204 	addi	sp,sp,8
   44e48:	f800283a 	ret

00044e4c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   44e4c:	deffff04 	addi	sp,sp,-4
   44e50:	df000015 	stw	fp,0(sp)
   44e54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   44e58:	000170fa 	wrctl	ienable,zero
}
   44e5c:	e037883a 	mov	sp,fp
   44e60:	df000017 	ldw	fp,0(sp)
   44e64:	dec00104 	addi	sp,sp,4
   44e68:	f800283a 	ret

00044e6c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   44e6c:	defffb04 	addi	sp,sp,-20
   44e70:	df000415 	stw	fp,16(sp)
   44e74:	df000404 	addi	fp,sp,16
   44e78:	e13ffe15 	stw	r4,-8(fp)
   44e7c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   44e80:	e0bfff17 	ldw	r2,-4(fp)
   44e84:	10840070 	cmpltui	r2,r2,4097
   44e88:	1000021e 	bne	r2,zero,44e94 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   44e8c:	00840004 	movi	r2,4096
   44e90:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   44e94:	e0fffe17 	ldw	r3,-8(fp)
   44e98:	e0bfff17 	ldw	r2,-4(fp)
   44e9c:	1885883a 	add	r2,r3,r2
   44ea0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44ea4:	e0bffe17 	ldw	r2,-8(fp)
   44ea8:	e0bffd15 	stw	r2,-12(fp)
   44eac:	00000506 	br	44ec4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   44eb0:	e0bffd17 	ldw	r2,-12(fp)
   44eb4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44eb8:	e0bffd17 	ldw	r2,-12(fp)
   44ebc:	10800804 	addi	r2,r2,32
   44ec0:	e0bffd15 	stw	r2,-12(fp)
   44ec4:	e0fffd17 	ldw	r3,-12(fp)
   44ec8:	e0bffc17 	ldw	r2,-16(fp)
   44ecc:	18bff836 	bltu	r3,r2,44eb0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   44ed0:	e0bffe17 	ldw	r2,-8(fp)
   44ed4:	108007cc 	andi	r2,r2,31
   44ed8:	1005003a 	cmpeq	r2,r2,zero
   44edc:	1000021e 	bne	r2,zero,44ee8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   44ee0:	e0bffd17 	ldw	r2,-12(fp)
   44ee4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   44ee8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   44eec:	e037883a 	mov	sp,fp
   44ef0:	df000017 	ldw	fp,0(sp)
   44ef4:	dec00104 	addi	sp,sp,4
   44ef8:	f800283a 	ret

00044efc <atexit>:
   44efc:	200b883a 	mov	r5,r4
   44f00:	000d883a 	mov	r6,zero
   44f04:	0009883a 	mov	r4,zero
   44f08:	000f883a 	mov	r7,zero
   44f0c:	0044f481 	jmpi	44f48 <__register_exitproc>

00044f10 <exit>:
   44f10:	defffe04 	addi	sp,sp,-8
   44f14:	000b883a 	mov	r5,zero
   44f18:	dc000015 	stw	r16,0(sp)
   44f1c:	dfc00115 	stw	ra,4(sp)
   44f20:	2021883a 	mov	r16,r4
   44f24:	00450800 	call	45080 <__call_exitprocs>
   44f28:	00800134 	movhi	r2,4
   44f2c:	109b3904 	addi	r2,r2,27876
   44f30:	11000017 	ldw	r4,0(r2)
   44f34:	20800f17 	ldw	r2,60(r4)
   44f38:	10000126 	beq	r2,zero,44f40 <exit+0x30>
   44f3c:	103ee83a 	callr	r2
   44f40:	8009883a 	mov	r4,r16
   44f44:	00452700 	call	45270 <_exit>

00044f48 <__register_exitproc>:
   44f48:	defffa04 	addi	sp,sp,-24
   44f4c:	00800134 	movhi	r2,4
   44f50:	109b3904 	addi	r2,r2,27876
   44f54:	dc000015 	stw	r16,0(sp)
   44f58:	14000017 	ldw	r16,0(r2)
   44f5c:	dd000415 	stw	r20,16(sp)
   44f60:	2829883a 	mov	r20,r5
   44f64:	81405217 	ldw	r5,328(r16)
   44f68:	dcc00315 	stw	r19,12(sp)
   44f6c:	dc800215 	stw	r18,8(sp)
   44f70:	dc400115 	stw	r17,4(sp)
   44f74:	dfc00515 	stw	ra,20(sp)
   44f78:	2023883a 	mov	r17,r4
   44f7c:	3027883a 	mov	r19,r6
   44f80:	3825883a 	mov	r18,r7
   44f84:	28002526 	beq	r5,zero,4501c <__register_exitproc+0xd4>
   44f88:	29000117 	ldw	r4,4(r5)
   44f8c:	008007c4 	movi	r2,31
   44f90:	11002716 	blt	r2,r4,45030 <__register_exitproc+0xe8>
   44f94:	8800101e 	bne	r17,zero,44fd8 <__register_exitproc+0x90>
   44f98:	2105883a 	add	r2,r4,r4
   44f9c:	1085883a 	add	r2,r2,r2
   44fa0:	20c00044 	addi	r3,r4,1
   44fa4:	1145883a 	add	r2,r2,r5
   44fa8:	0009883a 	mov	r4,zero
   44fac:	15000215 	stw	r20,8(r2)
   44fb0:	28c00115 	stw	r3,4(r5)
   44fb4:	2005883a 	mov	r2,r4
   44fb8:	dfc00517 	ldw	ra,20(sp)
   44fbc:	dd000417 	ldw	r20,16(sp)
   44fc0:	dcc00317 	ldw	r19,12(sp)
   44fc4:	dc800217 	ldw	r18,8(sp)
   44fc8:	dc400117 	ldw	r17,4(sp)
   44fcc:	dc000017 	ldw	r16,0(sp)
   44fd0:	dec00604 	addi	sp,sp,24
   44fd4:	f800283a 	ret
   44fd8:	29802204 	addi	r6,r5,136
   44fdc:	00800044 	movi	r2,1
   44fe0:	110e983a 	sll	r7,r2,r4
   44fe4:	30c04017 	ldw	r3,256(r6)
   44fe8:	2105883a 	add	r2,r4,r4
   44fec:	1085883a 	add	r2,r2,r2
   44ff0:	1185883a 	add	r2,r2,r6
   44ff4:	19c6b03a 	or	r3,r3,r7
   44ff8:	14802015 	stw	r18,128(r2)
   44ffc:	14c00015 	stw	r19,0(r2)
   45000:	00800084 	movi	r2,2
   45004:	30c04015 	stw	r3,256(r6)
   45008:	88bfe31e 	bne	r17,r2,44f98 <__register_exitproc+0x50>
   4500c:	30804117 	ldw	r2,260(r6)
   45010:	11c4b03a 	or	r2,r2,r7
   45014:	30804115 	stw	r2,260(r6)
   45018:	003fdf06 	br	44f98 <__register_exitproc+0x50>
   4501c:	00800174 	movhi	r2,5
   45020:	10a22c04 	addi	r2,r2,-30544
   45024:	100b883a 	mov	r5,r2
   45028:	80805215 	stw	r2,328(r16)
   4502c:	003fd606 	br	44f88 <__register_exitproc+0x40>
   45030:	00800034 	movhi	r2,0
   45034:	10800004 	addi	r2,r2,0
   45038:	1000021e 	bne	r2,zero,45044 <__register_exitproc+0xfc>
   4503c:	013fffc4 	movi	r4,-1
   45040:	003fdc06 	br	44fb4 <__register_exitproc+0x6c>
   45044:	01006404 	movi	r4,400
   45048:	103ee83a 	callr	r2
   4504c:	1007883a 	mov	r3,r2
   45050:	103ffa26 	beq	r2,zero,4503c <__register_exitproc+0xf4>
   45054:	80805217 	ldw	r2,328(r16)
   45058:	180b883a 	mov	r5,r3
   4505c:	18000115 	stw	zero,4(r3)
   45060:	18800015 	stw	r2,0(r3)
   45064:	80c05215 	stw	r3,328(r16)
   45068:	18006215 	stw	zero,392(r3)
   4506c:	18006315 	stw	zero,396(r3)
   45070:	0009883a 	mov	r4,zero
   45074:	883fc826 	beq	r17,zero,44f98 <__register_exitproc+0x50>
   45078:	003fd706 	br	44fd8 <__register_exitproc+0x90>

0004507c <register_fini>:
   4507c:	f800283a 	ret

00045080 <__call_exitprocs>:
   45080:	00800134 	movhi	r2,4
   45084:	109b3904 	addi	r2,r2,27876
   45088:	10800017 	ldw	r2,0(r2)
   4508c:	defff304 	addi	sp,sp,-52
   45090:	df000b15 	stw	fp,44(sp)
   45094:	d8800115 	stw	r2,4(sp)
   45098:	00800034 	movhi	r2,0
   4509c:	10800004 	addi	r2,r2,0
   450a0:	1005003a 	cmpeq	r2,r2,zero
   450a4:	d8800215 	stw	r2,8(sp)
   450a8:	d8800117 	ldw	r2,4(sp)
   450ac:	dd400815 	stw	r21,32(sp)
   450b0:	dd000715 	stw	r20,28(sp)
   450b4:	10805204 	addi	r2,r2,328
   450b8:	dfc00c15 	stw	ra,48(sp)
   450bc:	ddc00a15 	stw	r23,40(sp)
   450c0:	dd800915 	stw	r22,36(sp)
   450c4:	dcc00615 	stw	r19,24(sp)
   450c8:	dc800515 	stw	r18,20(sp)
   450cc:	dc400415 	stw	r17,16(sp)
   450d0:	dc000315 	stw	r16,12(sp)
   450d4:	282b883a 	mov	r21,r5
   450d8:	2039883a 	mov	fp,r4
   450dc:	d8800015 	stw	r2,0(sp)
   450e0:	2829003a 	cmpeq	r20,r5,zero
   450e4:	d8800117 	ldw	r2,4(sp)
   450e8:	14405217 	ldw	r17,328(r2)
   450ec:	88001026 	beq	r17,zero,45130 <__call_exitprocs+0xb0>
   450f0:	ddc00017 	ldw	r23,0(sp)
   450f4:	88800117 	ldw	r2,4(r17)
   450f8:	8c802204 	addi	r18,r17,136
   450fc:	143fffc4 	addi	r16,r2,-1
   45100:	80000916 	blt	r16,zero,45128 <__call_exitprocs+0xa8>
   45104:	05bfffc4 	movi	r22,-1
   45108:	a000151e 	bne	r20,zero,45160 <__call_exitprocs+0xe0>
   4510c:	8409883a 	add	r4,r16,r16
   45110:	2105883a 	add	r2,r4,r4
   45114:	1485883a 	add	r2,r2,r18
   45118:	10c02017 	ldw	r3,128(r2)
   4511c:	a8c01126 	beq	r21,r3,45164 <__call_exitprocs+0xe4>
   45120:	843fffc4 	addi	r16,r16,-1
   45124:	85bff81e 	bne	r16,r22,45108 <__call_exitprocs+0x88>
   45128:	d8800217 	ldw	r2,8(sp)
   4512c:	10003126 	beq	r2,zero,451f4 <__call_exitprocs+0x174>
   45130:	dfc00c17 	ldw	ra,48(sp)
   45134:	df000b17 	ldw	fp,44(sp)
   45138:	ddc00a17 	ldw	r23,40(sp)
   4513c:	dd800917 	ldw	r22,36(sp)
   45140:	dd400817 	ldw	r21,32(sp)
   45144:	dd000717 	ldw	r20,28(sp)
   45148:	dcc00617 	ldw	r19,24(sp)
   4514c:	dc800517 	ldw	r18,20(sp)
   45150:	dc400417 	ldw	r17,16(sp)
   45154:	dc000317 	ldw	r16,12(sp)
   45158:	dec00d04 	addi	sp,sp,52
   4515c:	f800283a 	ret
   45160:	8409883a 	add	r4,r16,r16
   45164:	88c00117 	ldw	r3,4(r17)
   45168:	2105883a 	add	r2,r4,r4
   4516c:	1445883a 	add	r2,r2,r17
   45170:	18ffffc4 	addi	r3,r3,-1
   45174:	11800217 	ldw	r6,8(r2)
   45178:	1c001526 	beq	r3,r16,451d0 <__call_exitprocs+0x150>
   4517c:	10000215 	stw	zero,8(r2)
   45180:	303fe726 	beq	r6,zero,45120 <__call_exitprocs+0xa0>
   45184:	00c00044 	movi	r3,1
   45188:	1c06983a 	sll	r3,r3,r16
   4518c:	90804017 	ldw	r2,256(r18)
   45190:	8cc00117 	ldw	r19,4(r17)
   45194:	1884703a 	and	r2,r3,r2
   45198:	10001426 	beq	r2,zero,451ec <__call_exitprocs+0x16c>
   4519c:	90804117 	ldw	r2,260(r18)
   451a0:	1884703a 	and	r2,r3,r2
   451a4:	10000c1e 	bne	r2,zero,451d8 <__call_exitprocs+0x158>
   451a8:	2105883a 	add	r2,r4,r4
   451ac:	1485883a 	add	r2,r2,r18
   451b0:	11400017 	ldw	r5,0(r2)
   451b4:	e009883a 	mov	r4,fp
   451b8:	303ee83a 	callr	r6
   451bc:	88800117 	ldw	r2,4(r17)
   451c0:	98bfc81e 	bne	r19,r2,450e4 <__call_exitprocs+0x64>
   451c4:	b8800017 	ldw	r2,0(r23)
   451c8:	147fd526 	beq	r2,r17,45120 <__call_exitprocs+0xa0>
   451cc:	003fc506 	br	450e4 <__call_exitprocs+0x64>
   451d0:	8c000115 	stw	r16,4(r17)
   451d4:	003fea06 	br	45180 <__call_exitprocs+0x100>
   451d8:	2105883a 	add	r2,r4,r4
   451dc:	1485883a 	add	r2,r2,r18
   451e0:	11000017 	ldw	r4,0(r2)
   451e4:	303ee83a 	callr	r6
   451e8:	003ff406 	br	451bc <__call_exitprocs+0x13c>
   451ec:	303ee83a 	callr	r6
   451f0:	003ff206 	br	451bc <__call_exitprocs+0x13c>
   451f4:	88800117 	ldw	r2,4(r17)
   451f8:	1000081e 	bne	r2,zero,4521c <__call_exitprocs+0x19c>
   451fc:	89000017 	ldw	r4,0(r17)
   45200:	20000726 	beq	r4,zero,45220 <__call_exitprocs+0x1a0>
   45204:	b9000015 	stw	r4,0(r23)
   45208:	8809883a 	mov	r4,r17
   4520c:	00000000 	call	0 <__reset-0x40000>
   45210:	bc400017 	ldw	r17,0(r23)
   45214:	883fb71e 	bne	r17,zero,450f4 <__call_exitprocs+0x74>
   45218:	003fc506 	br	45130 <__call_exitprocs+0xb0>
   4521c:	89000017 	ldw	r4,0(r17)
   45220:	882f883a 	mov	r23,r17
   45224:	2023883a 	mov	r17,r4
   45228:	883fb21e 	bne	r17,zero,450f4 <__call_exitprocs+0x74>
   4522c:	003fc006 	br	45130 <__call_exitprocs+0xb0>

00045230 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   45230:	defffd04 	addi	sp,sp,-12
   45234:	df000215 	stw	fp,8(sp)
   45238:	df000204 	addi	fp,sp,8
   4523c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   45240:	e0bfff17 	ldw	r2,-4(fp)
   45244:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45248:	e0bffe17 	ldw	r2,-8(fp)
   4524c:	1005003a 	cmpeq	r2,r2,zero
   45250:	1000021e 	bne	r2,zero,4525c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   45254:	002af070 	cmpltui	zero,zero,43969
   45258:	00000106 	br	45260 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4525c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   45260:	e037883a 	mov	sp,fp
   45264:	df000017 	ldw	fp,0(sp)
   45268:	dec00104 	addi	sp,sp,4
   4526c:	f800283a 	ret

00045270 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45270:	defffd04 	addi	sp,sp,-12
   45274:	dfc00215 	stw	ra,8(sp)
   45278:	df000115 	stw	fp,4(sp)
   4527c:	df000104 	addi	fp,sp,4
   45280:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   45284:	e13fff17 	ldw	r4,-4(fp)
   45288:	00452300 	call	45230 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4528c:	003fff06 	br	4528c <_exit+0x1c>
   45290:	0004507c 	xorhi	zero,zero,4417
