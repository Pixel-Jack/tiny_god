
chip1.elf:     file format elf32-littlenios2
chip1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00000fe4 memsz 0x00000fe4 flags r-x
    LOAD off    0x00002004 vaddr 0x00041004 paddr 0x000415d0 align 2**12
         filesz 0x000005cc memsz 0x000005cc flags rw-
    LOAD off    0x00002b9c vaddr 0x00041b9c paddr 0x00041b9c align 2**12
         filesz 0x00000000 memsz 0x000002a4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000e40  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00040ff4  00040ff4  00001ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005cc  00041004  000415d0  00002004  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002a4  00041b9c  00041b9c  00002b9c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000318  00000000  00000000  000025f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000044f  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005174  00000000  00000000  00002d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001251  00000000  00000000  00007ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000031f1  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004d8  00000000  00000000  0000c318  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007f3  00000000  00000000  0000c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007fb  00000000  00000000  0000cfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000d7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0000d810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000ecb7  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000ecba  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000ecc6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000ecc7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000ecc8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000eccc  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000ecd0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0000ecd4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000ecd8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000ecdc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0000ece0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000d  00000000  00000000  0000ece4  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000536af  00000000  00000000  0000ecf1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
00040ff4 l    d  .rodata	00000000 .rodata
00041004 l    d  .rwdata	00000000 .rwdata
00041b9c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00040320 l     F .text	00000148 handle_buttons_interrupt
00040468 l     F .text	00000074 handle_switch_interrupt
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0004077c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
00040984 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00040a28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000411ac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00040ddc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00040f90 l     F .text	00000040 alt_sim_halt
000407e8 g     F .text	00000050 alt_main
00041bb0 g     O .bss	00000100 alt_irq
000415d0 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041bac g     O .bss	00000004 errno
00041ba4 g     O .bss	00000004 alt_argv
000495ac g       *ABS*	00000000 _gp
0004102c g     O .rwdata	00000180 alt_fd_list
00040ff4 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00040bcc g     F .text	00000090 alt_icache_flush
000415c0 g     O .rwdata	00000004 alt_max_fd
000402c0 g     F .text	00000030 set_left
0004053c g     F .text	000001c0 alt_irq_register
000415cc g     O .rwdata	00000004 _global_impure_ptr
00040200 g     F .text	00000030 set_led
00041e40 g       *ABS*	00000000 __bss_end
00041b9c g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
00041004 g     O .rwdata	00000028 alt_dev_null
000409e4 g     F .text	00000044 alt_dcache_flush_all
000415d0 g       *ABS*	00000000 __ram_rwdata_end
000415b8 g     O .rwdata	00000008 alt_dev_list
00041004 g       *ABS*	00000000 __ram_rodata_end
00041e40 g       *ABS*	00000000 end
00040ff0 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
00040de0 g     F .text	000001b0 __call_exitprocs
000401b4 g     F .text	0000004c _start
0004086c g     F .text	0000001c alt_sys_init
00040ca8 g     F .text	00000134 __register_exitproc
00041004 g       *ABS*	00000000 __ram_rwdata_start
00040ff4 g       *ABS*	00000000 __ram_rodata_start
00041e40 g       *ABS*	00000000 __alt_stack_base
00040290 g     F .text	00000030 set_down
00041b9c g       *ABS*	00000000 __bss_start
000404dc g     F .text	00000060 main
00041ba8 g     O .bss	00000004 alt_envp
00041cb0 g     O .bss	00000190 _atexit0
000415c4 g     O .rwdata	00000004 alt_errno
00040ff4 g       *ABS*	00000000 __CTOR_END__
00040ff4 g       *ABS*	00000000 __flash_rodata_start
00040ff4 g       *ABS*	00000000 __DTOR_LIST__
00040838 g     F .text	00000034 alt_irq_init
00040b4c g     F .text	00000060 alt_release_fd
00040230 g     F .text	00000030 set_action
000402f0 g     F .text	00000030 set_right
00040c5c g     F .text	00000014 atexit
000415c8 g     O .rwdata	00000004 _impure_ptr
00041ba0 g     O .bss	00000004 alt_argc
00040260 g     F .text	00000030 set_up
00040ab8 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000415b0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000415d0 g       *ABS*	00000000 _edata
00041e40 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
00040bac g     F .text	00000020 altera_nios2_qsys_irq_init
00040c70 g     F .text	00000038 exit
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040fd0 g     F .text	00000020 _exit
00040b1c g     F .text	00000030 alt_icache_flush_all
000415ac g     O .rwdata	00000004 alt_priority_mask
00040a54 g     F .text	00000064 _do_ctors
00040888 g     F .text	000000fc close
000406fc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00134 	movhi	r3,4
   40134:	18c6ec04 	addi	r3,r3,7088
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00134 	movhi	r3,4
   4014c:	18c6ec04 	addi	r3,r3,7088
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   401c0:	00bffd16 	blt	zero,r2,401b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401c4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401cc:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401d0:	d6a56b14 	ori	gp,gp,38316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401d4:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401d8:	1086e714 	ori	r2,r2,7068

    movhi r3, %hi(__bss_end)
   401dc:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401e0:	18c79014 	ori	r3,r3,7744

    beq r2, r3, 1f
   401e4:	10c00326 	beq	r2,r3,401f4 <_start+0x40>

0:
    stw zero, (r2)
   401e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f0:	10fffd36 	bltu	r2,r3,401e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401f4:	00406fc0 	call	406fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f8:	00407e80 	call	407e8 <alt_main>

000401fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401fc:	003fff06 	br	401fc <alt_after_alt_main>

00040200 <set_led>:
#include "io.h"
#include "system.h"
#include <stdio.h>
#include "sys/alt_irq.h"

void set_led(unsigned char pattern) {
   40200:	defffe04 	addi	sp,sp,-8
   40204:	df000115 	stw	fp,4(sp)
   40208:	df000104 	addi	fp,sp,4
   4020c:	e13fff05 	stb	r4,-4(fp)
	IOWR(PAUSE_BASE, 0, pattern);
   40210:	e0ffff03 	ldbu	r3,-4(fp)
   40214:	00800234 	movhi	r2,8
   40218:	10841404 	addi	r2,r2,4176
   4021c:	10c00035 	stwio	r3,0(r2)
}
   40220:	e037883a 	mov	sp,fp
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00104 	addi	sp,sp,4
   4022c:	f800283a 	ret

00040230 <set_action>:

void set_action(unsigned char pattern) {
   40230:	defffe04 	addi	sp,sp,-8
   40234:	df000115 	stw	fp,4(sp)
   40238:	df000104 	addi	fp,sp,4
   4023c:	e13fff05 	stb	r4,-4(fp)
	IOWR(ACTION_BASE, 0, pattern);
   40240:	e0ffff03 	ldbu	r3,-4(fp)
   40244:	00800234 	movhi	r2,8
   40248:	10841004 	addi	r2,r2,4160
   4024c:	10c00035 	stwio	r3,0(r2)
}
   40250:	e037883a 	mov	sp,fp
   40254:	df000017 	ldw	fp,0(sp)
   40258:	dec00104 	addi	sp,sp,4
   4025c:	f800283a 	ret

00040260 <set_up>:

void set_up(unsigned char pattern) {
   40260:	defffe04 	addi	sp,sp,-8
   40264:	df000115 	stw	fp,4(sp)
   40268:	df000104 	addi	fp,sp,4
   4026c:	e13fff05 	stb	r4,-4(fp)
	IOWR(UP_BASE, 0, pattern);
   40270:	e0ffff03 	ldbu	r3,-4(fp)
   40274:	00800234 	movhi	r2,8
   40278:	10840c04 	addi	r2,r2,4144
   4027c:	10c00035 	stwio	r3,0(r2)
}
   40280:	e037883a 	mov	sp,fp
   40284:	df000017 	ldw	fp,0(sp)
   40288:	dec00104 	addi	sp,sp,4
   4028c:	f800283a 	ret

00040290 <set_down>:

void set_down(unsigned char pattern) {
   40290:	defffe04 	addi	sp,sp,-8
   40294:	df000115 	stw	fp,4(sp)
   40298:	df000104 	addi	fp,sp,4
   4029c:	e13fff05 	stb	r4,-4(fp)
	IOWR(DOWN_BASE, 0, pattern);
   402a0:	e0ffff03 	ldbu	r3,-4(fp)
   402a4:	00800234 	movhi	r2,8
   402a8:	10840804 	addi	r2,r2,4128
   402ac:	10c00035 	stwio	r3,0(r2)
}
   402b0:	e037883a 	mov	sp,fp
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00104 	addi	sp,sp,4
   402bc:	f800283a 	ret

000402c0 <set_left>:

void set_left(unsigned char pattern) {
   402c0:	defffe04 	addi	sp,sp,-8
   402c4:	df000115 	stw	fp,4(sp)
   402c8:	df000104 	addi	fp,sp,4
   402cc:	e13fff05 	stb	r4,-4(fp)
	IOWR(LEFT_BASE, 0, pattern);
   402d0:	e0ffff03 	ldbu	r3,-4(fp)
   402d4:	00800234 	movhi	r2,8
   402d8:	10840404 	addi	r2,r2,4112
   402dc:	10c00035 	stwio	r3,0(r2)
}
   402e0:	e037883a 	mov	sp,fp
   402e4:	df000017 	ldw	fp,0(sp)
   402e8:	dec00104 	addi	sp,sp,4
   402ec:	f800283a 	ret

000402f0 <set_right>:

void set_right(unsigned char pattern) {
   402f0:	defffe04 	addi	sp,sp,-8
   402f4:	df000115 	stw	fp,4(sp)
   402f8:	df000104 	addi	fp,sp,4
   402fc:	e13fff05 	stb	r4,-4(fp)
	IOWR(RIGHT_BASE, 0, pattern);
   40300:	e0ffff03 	ldbu	r3,-4(fp)
   40304:	00800234 	movhi	r2,8
   40308:	10840004 	addi	r2,r2,4096
   4030c:	10c00035 	stwio	r3,0(r2)
}
   40310:	e037883a 	mov	sp,fp
   40314:	df000017 	ldw	fp,0(sp)
   40318:	dec00104 	addi	sp,sp,4
   4031c:	f800283a 	ret

00040320 <handle_buttons_interrupt>:

static void handle_buttons_interrupt(void* context, alt_u32 id){
   40320:	defffa04 	addi	sp,sp,-24
   40324:	dfc00515 	stw	ra,20(sp)
   40328:	df000415 	stw	fp,16(sp)
   4032c:	df000404 	addi	fp,sp,16
   40330:	e13ffd15 	stw	r4,-12(fp)
   40334:	e17ffe15 	stw	r5,-8(fp)
	int code;
	code = IORD(BUTTONS_BASE,0);
   40338:	00800234 	movhi	r2,8
   4033c:	10841804 	addi	r2,r2,4192
   40340:	10800037 	ldwio	r2,0(r2)
   40344:	e0bffc15 	stw	r2,-16(fp)
	//printf("%x\n",code);
	switch(code) {
   40348:	e0bffc17 	ldw	r2,-16(fp)
   4034c:	e0bfff15 	stw	r2,-4(fp)
   40350:	e0ffff17 	ldw	r3,-4(fp)
   40354:	188002e0 	cmpeqi	r2,r3,11
   40358:	1000171e 	bne	r2,zero,403b8 <handle_buttons_interrupt+0x98>
   4035c:	e0ffff17 	ldw	r3,-4(fp)
   40360:	18800308 	cmpgei	r2,r3,12
   40364:	1000041e 	bne	r2,zero,40378 <handle_buttons_interrupt+0x58>
   40368:	e0ffff17 	ldw	r3,-4(fp)
   4036c:	188001e0 	cmpeqi	r2,r3,7
   40370:	1000081e 	bne	r2,zero,40394 <handle_buttons_interrupt+0x74>
   40374:	00002b06 	br	40424 <handle_buttons_interrupt+0x104>
   40378:	e0ffff17 	ldw	r3,-4(fp)
   4037c:	18800360 	cmpeqi	r2,r3,13
   40380:	1000161e 	bne	r2,zero,403dc <handle_buttons_interrupt+0xbc>
   40384:	e0ffff17 	ldw	r3,-4(fp)
   40388:	188003a0 	cmpeqi	r2,r3,14
   4038c:	10001c1e 	bne	r2,zero,40400 <handle_buttons_interrupt+0xe0>
   40390:	00002406 	br	40424 <handle_buttons_interrupt+0x104>
	case 7 :
		set_up('1');
   40394:	01000c44 	movi	r4,49
   40398:	00402600 	call	40260 <set_up>
		set_down('0');
   4039c:	01000c04 	movi	r4,48
   403a0:	00402900 	call	40290 <set_down>
		set_left('0');
   403a4:	01000c04 	movi	r4,48
   403a8:	00402c00 	call	402c0 <set_left>
		set_right('0');
   403ac:	01000c04 	movi	r4,48
   403b0:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   403b4:	00002306 	br	40444 <handle_buttons_interrupt+0x124>
	case 11 :
		set_up('0');
   403b8:	01000c04 	movi	r4,48
   403bc:	00402600 	call	40260 <set_up>
		set_down('1');
   403c0:	01000c44 	movi	r4,49
   403c4:	00402900 	call	40290 <set_down>
		set_left('0');
   403c8:	01000c04 	movi	r4,48
   403cc:	00402c00 	call	402c0 <set_left>
		set_right('0');
   403d0:	01000c04 	movi	r4,48
   403d4:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   403d8:	00001a06 	br	40444 <handle_buttons_interrupt+0x124>
	case 13 :
		set_up('0');
   403dc:	01000c04 	movi	r4,48
   403e0:	00402600 	call	40260 <set_up>
		set_down('0');
   403e4:	01000c04 	movi	r4,48
   403e8:	00402900 	call	40290 <set_down>
		set_left('1');
   403ec:	01000c44 	movi	r4,49
   403f0:	00402c00 	call	402c0 <set_left>
		set_right('0');
   403f4:	01000c04 	movi	r4,48
   403f8:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   403fc:	00001106 	br	40444 <handle_buttons_interrupt+0x124>
	case 14 :
		set_up('0');
   40400:	01000c04 	movi	r4,48
   40404:	00402600 	call	40260 <set_up>
		set_down('0');
   40408:	01000c04 	movi	r4,48
   4040c:	00402900 	call	40290 <set_down>
		set_left('0');
   40410:	01000c04 	movi	r4,48
   40414:	00402c00 	call	402c0 <set_left>
		set_right('1');
   40418:	01000c44 	movi	r4,49
   4041c:	00402f00 	call	402f0 <set_right>
		//set_led('0');
		break;
   40420:	00000806 	br	40444 <handle_buttons_interrupt+0x124>
	default :
		set_up('0');
   40424:	01000c04 	movi	r4,48
   40428:	00402600 	call	40260 <set_up>
		set_down('0');
   4042c:	01000c04 	movi	r4,48
   40430:	00402900 	call	40290 <set_down>
		set_left('0');
   40434:	01000c04 	movi	r4,48
   40438:	00402c00 	call	402c0 <set_left>
		set_right('0');
   4043c:	01000c04 	movi	r4,48
   40440:	00402f00 	call	402f0 <set_right>
		//set_led('1');
		break;
	}
	IOWR(BUTTONS_BASE,3,15);
   40444:	00c00234 	movhi	r3,8
   40448:	18c41b04 	addi	r3,r3,4204
   4044c:	008003c4 	movi	r2,15
   40450:	18800035 	stwio	r2,0(r3)
}
   40454:	e037883a 	mov	sp,fp
   40458:	dfc00117 	ldw	ra,4(sp)
   4045c:	df000017 	ldw	fp,0(sp)
   40460:	dec00204 	addi	sp,sp,8
   40464:	f800283a 	ret

00040468 <handle_switch_interrupt>:

static void handle_switch_interrupt(void* context, alt_u32 id){
   40468:	defffa04 	addi	sp,sp,-24
   4046c:	dfc00515 	stw	ra,20(sp)
   40470:	df000415 	stw	fp,16(sp)
   40474:	df000404 	addi	fp,sp,16
   40478:	e13ffd15 	stw	r4,-12(fp)
   4047c:	e17ffe15 	stw	r5,-8(fp)
	unsigned char pause;
	pause = IORD(SWITCH_BASE, 0);
   40480:	00800234 	movhi	r2,8
   40484:	10841c04 	addi	r2,r2,4208
   40488:	10800037 	ldwio	r2,0(r2)
   4048c:	e0bffc05 	stb	r2,-16(fp)
	switch(pause) {
   40490:	e0bffc03 	ldbu	r2,-16(fp)
   40494:	e0bfff15 	stw	r2,-4(fp)
   40498:	e0ffff17 	ldw	r3,-4(fp)
   4049c:	1805003a 	cmpeq	r2,r3,zero
   404a0:	1000041e 	bne	r2,zero,404b4 <handle_switch_interrupt+0x4c>
   404a4:	e0ffff17 	ldw	r3,-4(fp)
   404a8:	18800060 	cmpeqi	r2,r3,1
   404ac:	1000041e 	bne	r2,zero,404c0 <handle_switch_interrupt+0x58>
   404b0:	00000506 	br	404c8 <handle_switch_interrupt+0x60>
		case 0 :
			set_led('0');
   404b4:	01000c04 	movi	r4,48
   404b8:	00402000 	call	40200 <set_led>
			break;
   404bc:	00000206 	br	404c8 <handle_switch_interrupt+0x60>
		case 1 :
			set_led('1');
   404c0:	01000c44 	movi	r4,49
   404c4:	00402000 	call	40200 <set_led>
		default :
			//set_led('0');
			break;
	}
	//IOWR(SWITCH_BASE,3,0);
}
   404c8:	e037883a 	mov	sp,fp
   404cc:	dfc00117 	ldw	ra,4(sp)
   404d0:	df000017 	ldw	fp,0(sp)
   404d4:	dec00204 	addi	sp,sp,8
   404d8:	f800283a 	ret

000404dc <main>:

int main()
{
   404dc:	defffd04 	addi	sp,sp,-12
   404e0:	dfc00215 	stw	ra,8(sp)
   404e4:	df000115 	stw	fp,4(sp)
   404e8:	df000104 	addi	fp,sp,4

	unsigned char action = 0;
   404ec:	e03fff05 	stb	zero,-4(fp)

	// init bouttons
	// Reset the edge capture register
	IOWR(BUTTONS_BASE,3,15);
   404f0:	00c00234 	movhi	r3,8
   404f4:	18c41b04 	addi	r3,r3,4204
   404f8:	008003c4 	movi	r2,15
   404fc:	18800035 	stwio	r2,0(r3)

	//Enable interrupt
	IOWR(BUTTONS_BASE,2,15);
   40500:	00c00234 	movhi	r3,8
   40504:	18c41a04 	addi	r3,r3,4200
   40508:	008003c4 	movi	r2,15
   4050c:	18800035 	stwio	r2,0(r3)
	alt_irq_register(BUTTONS_IRQ,NULL,handle_buttons_interrupt);
   40510:	01000044 	movi	r4,1
   40514:	000b883a 	mov	r5,zero
   40518:	01800134 	movhi	r6,4
   4051c:	3180c804 	addi	r6,r6,800
   40520:	004053c0 	call	4053c <alt_irq_register>

	// init switch
	//IOWR(SWITCH_BASE,3,15);
	//Enable interrupt
	//IOWR(SWITCH_BASE,2,15);
	alt_irq_register(SWITCH_IRQ,NULL,handle_switch_interrupt);
   40524:	0009883a 	mov	r4,zero
   40528:	000b883a 	mov	r5,zero
   4052c:	01800134 	movhi	r6,4
   40530:	31811a04 	addi	r6,r6,1128
   40534:	004053c0 	call	4053c <alt_irq_register>


		//buttons = IORD(BUTTONS_BASE,3);
		//IOWR(BUTTONS_BASE,3,15);

	}
   40538:	003fff06 	br	40538 <main+0x5c>

0004053c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   4053c:	deffef04 	addi	sp,sp,-68
   40540:	df001015 	stw	fp,64(sp)
   40544:	df001004 	addi	fp,sp,64
   40548:	e13ffc15 	stw	r4,-16(fp)
   4054c:	e17ffd15 	stw	r5,-12(fp)
   40550:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   40554:	00bffa84 	movi	r2,-22
   40558:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4055c:	e0bffc17 	ldw	r2,-16(fp)
   40560:	10800828 	cmpgeui	r2,r2,32
   40564:	1000601e 	bne	r2,zero,406e8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40568:	0005303a 	rdctl	r2,status
   4056c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40570:	e0fff917 	ldw	r3,-28(fp)
   40574:	00bfff84 	movi	r2,-2
   40578:	1884703a 	and	r2,r3,r2
   4057c:	1001703a 	wrctl	status,r2
  
  return context;
   40580:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   40584:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   40588:	e0bffc17 	ldw	r2,-16(fp)
   4058c:	00c00134 	movhi	r3,4
   40590:	18c6ec04 	addi	r3,r3,7088
   40594:	100490fa 	slli	r2,r2,3
   40598:	10c7883a 	add	r3,r2,r3
   4059c:	e0bffe17 	ldw	r2,-8(fp)
   405a0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   405a4:	e0bffc17 	ldw	r2,-16(fp)
   405a8:	00c00134 	movhi	r3,4
   405ac:	18c6ec04 	addi	r3,r3,7088
   405b0:	100490fa 	slli	r2,r2,3
   405b4:	10c5883a 	add	r2,r2,r3
   405b8:	10c00104 	addi	r3,r2,4
   405bc:	e0bffd17 	ldw	r2,-12(fp)
   405c0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   405c4:	e0bffe17 	ldw	r2,-8(fp)
   405c8:	1005003a 	cmpeq	r2,r2,zero
   405cc:	1000201e 	bne	r2,zero,40650 <alt_irq_register+0x114>
   405d0:	e0bffc17 	ldw	r2,-16(fp)
   405d4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   405d8:	0005303a 	rdctl	r2,status
   405dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   405e0:	e0fff617 	ldw	r3,-40(fp)
   405e4:	00bfff84 	movi	r2,-2
   405e8:	1884703a 	and	r2,r3,r2
   405ec:	1001703a 	wrctl	status,r2
  
  return context;
   405f0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   405f4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   405f8:	e0fff717 	ldw	r3,-36(fp)
   405fc:	00800044 	movi	r2,1
   40600:	10c4983a 	sll	r2,r2,r3
   40604:	1007883a 	mov	r3,r2
   40608:	00800134 	movhi	r2,4
   4060c:	1086e704 	addi	r2,r2,7068
   40610:	10800017 	ldw	r2,0(r2)
   40614:	1886b03a 	or	r3,r3,r2
   40618:	00800134 	movhi	r2,4
   4061c:	1086e704 	addi	r2,r2,7068
   40620:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   40624:	00800134 	movhi	r2,4
   40628:	1086e704 	addi	r2,r2,7068
   4062c:	10800017 	ldw	r2,0(r2)
   40630:	100170fa 	wrctl	ienable,r2
   40634:	e0bff817 	ldw	r2,-32(fp)
   40638:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4063c:	e0bff517 	ldw	r2,-44(fp)
   40640:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   40644:	0005883a 	mov	r2,zero
   40648:	e0bfff15 	stw	r2,-4(fp)
   4064c:	00002006 	br	406d0 <alt_irq_register+0x194>
   40650:	e0bffc17 	ldw	r2,-16(fp)
   40654:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40658:	0005303a 	rdctl	r2,status
   4065c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40660:	e0fff217 	ldw	r3,-56(fp)
   40664:	00bfff84 	movi	r2,-2
   40668:	1884703a 	and	r2,r3,r2
   4066c:	1001703a 	wrctl	status,r2
  
  return context;
   40670:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   40674:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   40678:	e0fff317 	ldw	r3,-52(fp)
   4067c:	00800044 	movi	r2,1
   40680:	10c4983a 	sll	r2,r2,r3
   40684:	0084303a 	nor	r2,zero,r2
   40688:	1007883a 	mov	r3,r2
   4068c:	00800134 	movhi	r2,4
   40690:	1086e704 	addi	r2,r2,7068
   40694:	10800017 	ldw	r2,0(r2)
   40698:	1886703a 	and	r3,r3,r2
   4069c:	00800134 	movhi	r2,4
   406a0:	1086e704 	addi	r2,r2,7068
   406a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   406a8:	00800134 	movhi	r2,4
   406ac:	1086e704 	addi	r2,r2,7068
   406b0:	10800017 	ldw	r2,0(r2)
   406b4:	100170fa 	wrctl	ienable,r2
   406b8:	e0bff417 	ldw	r2,-48(fp)
   406bc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   406c0:	e0bff117 	ldw	r2,-60(fp)
   406c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   406c8:	0005883a 	mov	r2,zero
   406cc:	e0bfff15 	stw	r2,-4(fp)
   406d0:	e0bfff17 	ldw	r2,-4(fp)
   406d4:	e0bffb15 	stw	r2,-20(fp)
   406d8:	e0bffa17 	ldw	r2,-24(fp)
   406dc:	e0bff015 	stw	r2,-64(fp)
   406e0:	e0bff017 	ldw	r2,-64(fp)
   406e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   406e8:	e0bffb17 	ldw	r2,-20(fp)
}
   406ec:	e037883a 	mov	sp,fp
   406f0:	df000017 	ldw	fp,0(sp)
   406f4:	dec00104 	addi	sp,sp,4
   406f8:	f800283a 	ret

000406fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   406fc:	defffe04 	addi	sp,sp,-8
   40700:	dfc00115 	stw	ra,4(sp)
   40704:	df000015 	stw	fp,0(sp)
   40708:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4070c:	01000134 	movhi	r4,4
   40710:	21057404 	addi	r4,r4,5584
   40714:	01400134 	movhi	r5,4
   40718:	29440104 	addi	r5,r5,4100
   4071c:	01800134 	movhi	r6,4
   40720:	31857404 	addi	r6,r6,5584
   40724:	004077c0 	call	4077c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   40728:	01000134 	movhi	r4,4
   4072c:	21000804 	addi	r4,r4,32
   40730:	01400134 	movhi	r5,4
   40734:	29400804 	addi	r5,r5,32
   40738:	01800134 	movhi	r6,4
   4073c:	31806d04 	addi	r6,r6,436
   40740:	004077c0 	call	4077c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   40744:	01000134 	movhi	r4,4
   40748:	2103fd04 	addi	r4,r4,4084
   4074c:	01400134 	movhi	r5,4
   40750:	2943fd04 	addi	r5,r5,4084
   40754:	01800134 	movhi	r6,4
   40758:	31840104 	addi	r6,r6,4100
   4075c:	004077c0 	call	4077c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   40760:	00409e40 	call	409e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   40764:	0040b1c0 	call	40b1c <alt_icache_flush_all>
}
   40768:	e037883a 	mov	sp,fp
   4076c:	dfc00117 	ldw	ra,4(sp)
   40770:	df000017 	ldw	fp,0(sp)
   40774:	dec00204 	addi	sp,sp,8
   40778:	f800283a 	ret

0004077c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4077c:	defffc04 	addi	sp,sp,-16
   40780:	df000315 	stw	fp,12(sp)
   40784:	df000304 	addi	fp,sp,12
   40788:	e13ffd15 	stw	r4,-12(fp)
   4078c:	e17ffe15 	stw	r5,-8(fp)
   40790:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   40794:	e0fffe17 	ldw	r3,-8(fp)
   40798:	e0bffd17 	ldw	r2,-12(fp)
   4079c:	18800e26 	beq	r3,r2,407d8 <alt_load_section+0x5c>
  {
    while( to != end )
   407a0:	00000a06 	br	407cc <alt_load_section+0x50>
    {
      *to++ = *from++;
   407a4:	e0bffd17 	ldw	r2,-12(fp)
   407a8:	10c00017 	ldw	r3,0(r2)
   407ac:	e0bffe17 	ldw	r2,-8(fp)
   407b0:	10c00015 	stw	r3,0(r2)
   407b4:	e0bffe17 	ldw	r2,-8(fp)
   407b8:	10800104 	addi	r2,r2,4
   407bc:	e0bffe15 	stw	r2,-8(fp)
   407c0:	e0bffd17 	ldw	r2,-12(fp)
   407c4:	10800104 	addi	r2,r2,4
   407c8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   407cc:	e0fffe17 	ldw	r3,-8(fp)
   407d0:	e0bfff17 	ldw	r2,-4(fp)
   407d4:	18bff31e 	bne	r3,r2,407a4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   407d8:	e037883a 	mov	sp,fp
   407dc:	df000017 	ldw	fp,0(sp)
   407e0:	dec00104 	addi	sp,sp,4
   407e4:	f800283a 	ret

000407e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   407e8:	defffd04 	addi	sp,sp,-12
   407ec:	dfc00215 	stw	ra,8(sp)
   407f0:	df000115 	stw	fp,4(sp)
   407f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   407f8:	0009883a 	mov	r4,zero
   407fc:	00408380 	call	40838 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   40800:	004086c0 	call	4086c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   40804:	0040a540 	call	40a54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   40808:	01000134 	movhi	r4,4
   4080c:	2102ae04 	addi	r4,r4,2744
   40810:	0040c5c0 	call	40c5c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   40814:	d1217d17 	ldw	r4,-31244(gp)
   40818:	d1617e17 	ldw	r5,-31240(gp)
   4081c:	d1a17f17 	ldw	r6,-31236(gp)
   40820:	00404dc0 	call	404dc <main>
   40824:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   40828:	01000044 	movi	r4,1
   4082c:	00408880 	call	40888 <close>
  exit (result);
   40830:	e13fff17 	ldw	r4,-4(fp)
   40834:	0040c700 	call	40c70 <exit>

00040838 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   40838:	defffd04 	addi	sp,sp,-12
   4083c:	dfc00215 	stw	ra,8(sp)
   40840:	df000115 	stw	fp,4(sp)
   40844:	df000104 	addi	fp,sp,4
   40848:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   4084c:	0040bac0 	call	40bac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   40850:	00800044 	movi	r2,1
   40854:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   40858:	e037883a 	mov	sp,fp
   4085c:	dfc00117 	ldw	ra,4(sp)
   40860:	df000017 	ldw	fp,0(sp)
   40864:	dec00204 	addi	sp,sp,8
   40868:	f800283a 	ret

0004086c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4086c:	deffff04 	addi	sp,sp,-4
   40870:	df000015 	stw	fp,0(sp)
   40874:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   40878:	e037883a 	mov	sp,fp
   4087c:	df000017 	ldw	fp,0(sp)
   40880:	dec00104 	addi	sp,sp,4
   40884:	f800283a 	ret

00040888 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   40888:	defff804 	addi	sp,sp,-32
   4088c:	dfc00715 	stw	ra,28(sp)
   40890:	df000615 	stw	fp,24(sp)
   40894:	df000604 	addi	fp,sp,24
   40898:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4089c:	e0bffc17 	ldw	r2,-16(fp)
   408a0:	1004803a 	cmplt	r2,r2,zero
   408a4:	1000081e 	bne	r2,zero,408c8 <close+0x40>
   408a8:	e0bffc17 	ldw	r2,-16(fp)
   408ac:	10800324 	muli	r2,r2,12
   408b0:	1007883a 	mov	r3,r2
   408b4:	00800134 	movhi	r2,4
   408b8:	10840b04 	addi	r2,r2,4140
   408bc:	1887883a 	add	r3,r3,r2
   408c0:	e0ffff15 	stw	r3,-4(fp)
   408c4:	00000106 	br	408cc <close+0x44>
   408c8:	e03fff15 	stw	zero,-4(fp)
   408cc:	e0bfff17 	ldw	r2,-4(fp)
   408d0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   408d4:	e0bffb17 	ldw	r2,-20(fp)
   408d8:	1005003a 	cmpeq	r2,r2,zero
   408dc:	10001d1e 	bne	r2,zero,40954 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   408e0:	e0bffb17 	ldw	r2,-20(fp)
   408e4:	10800017 	ldw	r2,0(r2)
   408e8:	10800417 	ldw	r2,16(r2)
   408ec:	1005003a 	cmpeq	r2,r2,zero
   408f0:	1000071e 	bne	r2,zero,40910 <close+0x88>
   408f4:	e0bffb17 	ldw	r2,-20(fp)
   408f8:	10800017 	ldw	r2,0(r2)
   408fc:	10800417 	ldw	r2,16(r2)
   40900:	e13ffb17 	ldw	r4,-20(fp)
   40904:	103ee83a 	callr	r2
   40908:	e0bffe15 	stw	r2,-8(fp)
   4090c:	00000106 	br	40914 <close+0x8c>
   40910:	e03ffe15 	stw	zero,-8(fp)
   40914:	e0bffe17 	ldw	r2,-8(fp)
   40918:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4091c:	e13ffc17 	ldw	r4,-16(fp)
   40920:	0040b4c0 	call	40b4c <alt_release_fd>
    if (rval < 0)
   40924:	e0bffa17 	ldw	r2,-24(fp)
   40928:	1004403a 	cmpge	r2,r2,zero
   4092c:	1000071e 	bne	r2,zero,4094c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   40930:	00409840 	call	40984 <alt_get_errno>
   40934:	e0fffa17 	ldw	r3,-24(fp)
   40938:	00c7c83a 	sub	r3,zero,r3
   4093c:	10c00015 	stw	r3,0(r2)
      return -1;
   40940:	00bfffc4 	movi	r2,-1
   40944:	e0bffd15 	stw	r2,-12(fp)
   40948:	00000806 	br	4096c <close+0xe4>
    }
    return 0;
   4094c:	e03ffd15 	stw	zero,-12(fp)
   40950:	00000606 	br	4096c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   40954:	00409840 	call	40984 <alt_get_errno>
   40958:	1007883a 	mov	r3,r2
   4095c:	00801444 	movi	r2,81
   40960:	18800015 	stw	r2,0(r3)
    return -1;
   40964:	00bfffc4 	movi	r2,-1
   40968:	e0bffd15 	stw	r2,-12(fp)
   4096c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   40970:	e037883a 	mov	sp,fp
   40974:	dfc00117 	ldw	ra,4(sp)
   40978:	df000017 	ldw	fp,0(sp)
   4097c:	dec00204 	addi	sp,sp,8
   40980:	f800283a 	ret

00040984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   40984:	defffd04 	addi	sp,sp,-12
   40988:	dfc00215 	stw	ra,8(sp)
   4098c:	df000115 	stw	fp,4(sp)
   40990:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   40994:	00800134 	movhi	r2,4
   40998:	10857104 	addi	r2,r2,5572
   4099c:	10800017 	ldw	r2,0(r2)
   409a0:	1005003a 	cmpeq	r2,r2,zero
   409a4:	1000061e 	bne	r2,zero,409c0 <alt_get_errno+0x3c>
   409a8:	00800134 	movhi	r2,4
   409ac:	10857104 	addi	r2,r2,5572
   409b0:	10800017 	ldw	r2,0(r2)
   409b4:	103ee83a 	callr	r2
   409b8:	e0bfff15 	stw	r2,-4(fp)
   409bc:	00000306 	br	409cc <alt_get_errno+0x48>
   409c0:	00800134 	movhi	r2,4
   409c4:	1086eb04 	addi	r2,r2,7084
   409c8:	e0bfff15 	stw	r2,-4(fp)
   409cc:	e0bfff17 	ldw	r2,-4(fp)
}
   409d0:	e037883a 	mov	sp,fp
   409d4:	dfc00117 	ldw	ra,4(sp)
   409d8:	df000017 	ldw	fp,0(sp)
   409dc:	dec00204 	addi	sp,sp,8
   409e0:	f800283a 	ret

000409e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   409e4:	defffe04 	addi	sp,sp,-8
   409e8:	df000115 	stw	fp,4(sp)
   409ec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   409f0:	e03fff15 	stw	zero,-4(fp)
   409f4:	00000506 	br	40a0c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   409f8:	e0bfff17 	ldw	r2,-4(fp)
   409fc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   40a00:	e0bfff17 	ldw	r2,-4(fp)
   40a04:	10800804 	addi	r2,r2,32
   40a08:	e0bfff15 	stw	r2,-4(fp)
   40a0c:	e0bfff17 	ldw	r2,-4(fp)
   40a10:	10820030 	cmpltui	r2,r2,2048
   40a14:	103ff81e 	bne	r2,zero,409f8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   40a18:	e037883a 	mov	sp,fp
   40a1c:	df000017 	ldw	fp,0(sp)
   40a20:	dec00104 	addi	sp,sp,4
   40a24:	f800283a 	ret

00040a28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   40a28:	defffc04 	addi	sp,sp,-16
   40a2c:	df000315 	stw	fp,12(sp)
   40a30:	df000304 	addi	fp,sp,12
   40a34:	e13ffd15 	stw	r4,-12(fp)
   40a38:	e17ffe15 	stw	r5,-8(fp)
   40a3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   40a40:	e0bfff17 	ldw	r2,-4(fp)
}
   40a44:	e037883a 	mov	sp,fp
   40a48:	df000017 	ldw	fp,0(sp)
   40a4c:	dec00104 	addi	sp,sp,4
   40a50:	f800283a 	ret

00040a54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   40a54:	defffd04 	addi	sp,sp,-12
   40a58:	dfc00215 	stw	ra,8(sp)
   40a5c:	df000115 	stw	fp,4(sp)
   40a60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   40a64:	00bfff04 	movi	r2,-4
   40a68:	00c00134 	movhi	r3,4
   40a6c:	18c3fd04 	addi	r3,r3,4084
   40a70:	1885883a 	add	r2,r3,r2
   40a74:	e0bfff15 	stw	r2,-4(fp)
   40a78:	00000606 	br	40a94 <_do_ctors+0x40>
        (*ctor) (); 
   40a7c:	e0bfff17 	ldw	r2,-4(fp)
   40a80:	10800017 	ldw	r2,0(r2)
   40a84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   40a88:	e0bfff17 	ldw	r2,-4(fp)
   40a8c:	10bfff04 	addi	r2,r2,-4
   40a90:	e0bfff15 	stw	r2,-4(fp)
   40a94:	e0ffff17 	ldw	r3,-4(fp)
   40a98:	00800134 	movhi	r2,4
   40a9c:	1083fc04 	addi	r2,r2,4080
   40aa0:	18bff62e 	bgeu	r3,r2,40a7c <_do_ctors+0x28>
        (*ctor) (); 
}
   40aa4:	e037883a 	mov	sp,fp
   40aa8:	dfc00117 	ldw	ra,4(sp)
   40aac:	df000017 	ldw	fp,0(sp)
   40ab0:	dec00204 	addi	sp,sp,8
   40ab4:	f800283a 	ret

00040ab8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   40ab8:	defffd04 	addi	sp,sp,-12
   40abc:	dfc00215 	stw	ra,8(sp)
   40ac0:	df000115 	stw	fp,4(sp)
   40ac4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   40ac8:	00bfff04 	movi	r2,-4
   40acc:	00c00134 	movhi	r3,4
   40ad0:	18c3fd04 	addi	r3,r3,4084
   40ad4:	1885883a 	add	r2,r3,r2
   40ad8:	e0bfff15 	stw	r2,-4(fp)
   40adc:	00000606 	br	40af8 <_do_dtors+0x40>
        (*dtor) (); 
   40ae0:	e0bfff17 	ldw	r2,-4(fp)
   40ae4:	10800017 	ldw	r2,0(r2)
   40ae8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   40aec:	e0bfff17 	ldw	r2,-4(fp)
   40af0:	10bfff04 	addi	r2,r2,-4
   40af4:	e0bfff15 	stw	r2,-4(fp)
   40af8:	e0ffff17 	ldw	r3,-4(fp)
   40afc:	00800134 	movhi	r2,4
   40b00:	1083fd04 	addi	r2,r2,4084
   40b04:	18bff62e 	bgeu	r3,r2,40ae0 <_do_dtors+0x28>
        (*dtor) (); 
}
   40b08:	e037883a 	mov	sp,fp
   40b0c:	dfc00117 	ldw	ra,4(sp)
   40b10:	df000017 	ldw	fp,0(sp)
   40b14:	dec00204 	addi	sp,sp,8
   40b18:	f800283a 	ret

00040b1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   40b1c:	defffe04 	addi	sp,sp,-8
   40b20:	dfc00115 	stw	ra,4(sp)
   40b24:	df000015 	stw	fp,0(sp)
   40b28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   40b2c:	0009883a 	mov	r4,zero
   40b30:	01440004 	movi	r5,4096
   40b34:	0040bcc0 	call	40bcc <alt_icache_flush>
#endif
}
   40b38:	e037883a 	mov	sp,fp
   40b3c:	dfc00117 	ldw	ra,4(sp)
   40b40:	df000017 	ldw	fp,0(sp)
   40b44:	dec00204 	addi	sp,sp,8
   40b48:	f800283a 	ret

00040b4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   40b4c:	defffe04 	addi	sp,sp,-8
   40b50:	df000115 	stw	fp,4(sp)
   40b54:	df000104 	addi	fp,sp,4
   40b58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   40b5c:	e0bfff17 	ldw	r2,-4(fp)
   40b60:	108000d0 	cmplti	r2,r2,3
   40b64:	10000d1e 	bne	r2,zero,40b9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   40b68:	e0bfff17 	ldw	r2,-4(fp)
   40b6c:	00c00134 	movhi	r3,4
   40b70:	18c40b04 	addi	r3,r3,4140
   40b74:	10800324 	muli	r2,r2,12
   40b78:	10c5883a 	add	r2,r2,r3
   40b7c:	10800204 	addi	r2,r2,8
   40b80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   40b84:	e0bfff17 	ldw	r2,-4(fp)
   40b88:	00c00134 	movhi	r3,4
   40b8c:	18c40b04 	addi	r3,r3,4140
   40b90:	10800324 	muli	r2,r2,12
   40b94:	10c5883a 	add	r2,r2,r3
   40b98:	10000015 	stw	zero,0(r2)
  }
}
   40b9c:	e037883a 	mov	sp,fp
   40ba0:	df000017 	ldw	fp,0(sp)
   40ba4:	dec00104 	addi	sp,sp,4
   40ba8:	f800283a 	ret

00040bac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   40bac:	deffff04 	addi	sp,sp,-4
   40bb0:	df000015 	stw	fp,0(sp)
   40bb4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   40bb8:	000170fa 	wrctl	ienable,zero
}
   40bbc:	e037883a 	mov	sp,fp
   40bc0:	df000017 	ldw	fp,0(sp)
   40bc4:	dec00104 	addi	sp,sp,4
   40bc8:	f800283a 	ret

00040bcc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   40bcc:	defffb04 	addi	sp,sp,-20
   40bd0:	df000415 	stw	fp,16(sp)
   40bd4:	df000404 	addi	fp,sp,16
   40bd8:	e13ffe15 	stw	r4,-8(fp)
   40bdc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   40be0:	e0bfff17 	ldw	r2,-4(fp)
   40be4:	10840070 	cmpltui	r2,r2,4097
   40be8:	1000021e 	bne	r2,zero,40bf4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   40bec:	00840004 	movi	r2,4096
   40bf0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   40bf4:	e0fffe17 	ldw	r3,-8(fp)
   40bf8:	e0bfff17 	ldw	r2,-4(fp)
   40bfc:	1885883a 	add	r2,r3,r2
   40c00:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   40c04:	e0bffe17 	ldw	r2,-8(fp)
   40c08:	e0bffd15 	stw	r2,-12(fp)
   40c0c:	00000506 	br	40c24 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   40c10:	e0bffd17 	ldw	r2,-12(fp)
   40c14:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   40c18:	e0bffd17 	ldw	r2,-12(fp)
   40c1c:	10800804 	addi	r2,r2,32
   40c20:	e0bffd15 	stw	r2,-12(fp)
   40c24:	e0fffd17 	ldw	r3,-12(fp)
   40c28:	e0bffc17 	ldw	r2,-16(fp)
   40c2c:	18bff836 	bltu	r3,r2,40c10 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   40c30:	e0bffe17 	ldw	r2,-8(fp)
   40c34:	108007cc 	andi	r2,r2,31
   40c38:	1005003a 	cmpeq	r2,r2,zero
   40c3c:	1000021e 	bne	r2,zero,40c48 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   40c40:	e0bffd17 	ldw	r2,-12(fp)
   40c44:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   40c48:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   40c4c:	e037883a 	mov	sp,fp
   40c50:	df000017 	ldw	fp,0(sp)
   40c54:	dec00104 	addi	sp,sp,4
   40c58:	f800283a 	ret

00040c5c <atexit>:
   40c5c:	200b883a 	mov	r5,r4
   40c60:	000d883a 	mov	r6,zero
   40c64:	0009883a 	mov	r4,zero
   40c68:	000f883a 	mov	r7,zero
   40c6c:	0040ca81 	jmpi	40ca8 <__register_exitproc>

00040c70 <exit>:
   40c70:	defffe04 	addi	sp,sp,-8
   40c74:	000b883a 	mov	r5,zero
   40c78:	dc000015 	stw	r16,0(sp)
   40c7c:	dfc00115 	stw	ra,4(sp)
   40c80:	2021883a 	mov	r16,r4
   40c84:	0040de00 	call	40de0 <__call_exitprocs>
   40c88:	00800134 	movhi	r2,4
   40c8c:	10857304 	addi	r2,r2,5580
   40c90:	11000017 	ldw	r4,0(r2)
   40c94:	20800f17 	ldw	r2,60(r4)
   40c98:	10000126 	beq	r2,zero,40ca0 <exit+0x30>
   40c9c:	103ee83a 	callr	r2
   40ca0:	8009883a 	mov	r4,r16
   40ca4:	0040fd00 	call	40fd0 <_exit>

00040ca8 <__register_exitproc>:
   40ca8:	defffa04 	addi	sp,sp,-24
   40cac:	00800134 	movhi	r2,4
   40cb0:	10857304 	addi	r2,r2,5580
   40cb4:	dc000015 	stw	r16,0(sp)
   40cb8:	14000017 	ldw	r16,0(r2)
   40cbc:	dd000415 	stw	r20,16(sp)
   40cc0:	2829883a 	mov	r20,r5
   40cc4:	81405217 	ldw	r5,328(r16)
   40cc8:	dcc00315 	stw	r19,12(sp)
   40ccc:	dc800215 	stw	r18,8(sp)
   40cd0:	dc400115 	stw	r17,4(sp)
   40cd4:	dfc00515 	stw	ra,20(sp)
   40cd8:	2023883a 	mov	r17,r4
   40cdc:	3027883a 	mov	r19,r6
   40ce0:	3825883a 	mov	r18,r7
   40ce4:	28002526 	beq	r5,zero,40d7c <__register_exitproc+0xd4>
   40ce8:	29000117 	ldw	r4,4(r5)
   40cec:	008007c4 	movi	r2,31
   40cf0:	11002716 	blt	r2,r4,40d90 <__register_exitproc+0xe8>
   40cf4:	8800101e 	bne	r17,zero,40d38 <__register_exitproc+0x90>
   40cf8:	2105883a 	add	r2,r4,r4
   40cfc:	1085883a 	add	r2,r2,r2
   40d00:	20c00044 	addi	r3,r4,1
   40d04:	1145883a 	add	r2,r2,r5
   40d08:	0009883a 	mov	r4,zero
   40d0c:	15000215 	stw	r20,8(r2)
   40d10:	28c00115 	stw	r3,4(r5)
   40d14:	2005883a 	mov	r2,r4
   40d18:	dfc00517 	ldw	ra,20(sp)
   40d1c:	dd000417 	ldw	r20,16(sp)
   40d20:	dcc00317 	ldw	r19,12(sp)
   40d24:	dc800217 	ldw	r18,8(sp)
   40d28:	dc400117 	ldw	r17,4(sp)
   40d2c:	dc000017 	ldw	r16,0(sp)
   40d30:	dec00604 	addi	sp,sp,24
   40d34:	f800283a 	ret
   40d38:	29802204 	addi	r6,r5,136
   40d3c:	00800044 	movi	r2,1
   40d40:	110e983a 	sll	r7,r2,r4
   40d44:	30c04017 	ldw	r3,256(r6)
   40d48:	2105883a 	add	r2,r4,r4
   40d4c:	1085883a 	add	r2,r2,r2
   40d50:	1185883a 	add	r2,r2,r6
   40d54:	19c6b03a 	or	r3,r3,r7
   40d58:	14802015 	stw	r18,128(r2)
   40d5c:	14c00015 	stw	r19,0(r2)
   40d60:	00800084 	movi	r2,2
   40d64:	30c04015 	stw	r3,256(r6)
   40d68:	88bfe31e 	bne	r17,r2,40cf8 <__register_exitproc+0x50>
   40d6c:	30804117 	ldw	r2,260(r6)
   40d70:	11c4b03a 	or	r2,r2,r7
   40d74:	30804115 	stw	r2,260(r6)
   40d78:	003fdf06 	br	40cf8 <__register_exitproc+0x50>
   40d7c:	00800134 	movhi	r2,4
   40d80:	10872c04 	addi	r2,r2,7344
   40d84:	100b883a 	mov	r5,r2
   40d88:	80805215 	stw	r2,328(r16)
   40d8c:	003fd606 	br	40ce8 <__register_exitproc+0x40>
   40d90:	00800034 	movhi	r2,0
   40d94:	10800004 	addi	r2,r2,0
   40d98:	1000021e 	bne	r2,zero,40da4 <__register_exitproc+0xfc>
   40d9c:	013fffc4 	movi	r4,-1
   40da0:	003fdc06 	br	40d14 <__register_exitproc+0x6c>
   40da4:	01006404 	movi	r4,400
   40da8:	103ee83a 	callr	r2
   40dac:	1007883a 	mov	r3,r2
   40db0:	103ffa26 	beq	r2,zero,40d9c <__register_exitproc+0xf4>
   40db4:	80805217 	ldw	r2,328(r16)
   40db8:	180b883a 	mov	r5,r3
   40dbc:	18000115 	stw	zero,4(r3)
   40dc0:	18800015 	stw	r2,0(r3)
   40dc4:	80c05215 	stw	r3,328(r16)
   40dc8:	18006215 	stw	zero,392(r3)
   40dcc:	18006315 	stw	zero,396(r3)
   40dd0:	0009883a 	mov	r4,zero
   40dd4:	883fc826 	beq	r17,zero,40cf8 <__register_exitproc+0x50>
   40dd8:	003fd706 	br	40d38 <__register_exitproc+0x90>

00040ddc <register_fini>:
   40ddc:	f800283a 	ret

00040de0 <__call_exitprocs>:
   40de0:	00800134 	movhi	r2,4
   40de4:	10857304 	addi	r2,r2,5580
   40de8:	10800017 	ldw	r2,0(r2)
   40dec:	defff304 	addi	sp,sp,-52
   40df0:	df000b15 	stw	fp,44(sp)
   40df4:	d8800115 	stw	r2,4(sp)
   40df8:	00800034 	movhi	r2,0
   40dfc:	10800004 	addi	r2,r2,0
   40e00:	1005003a 	cmpeq	r2,r2,zero
   40e04:	d8800215 	stw	r2,8(sp)
   40e08:	d8800117 	ldw	r2,4(sp)
   40e0c:	dd400815 	stw	r21,32(sp)
   40e10:	dd000715 	stw	r20,28(sp)
   40e14:	10805204 	addi	r2,r2,328
   40e18:	dfc00c15 	stw	ra,48(sp)
   40e1c:	ddc00a15 	stw	r23,40(sp)
   40e20:	dd800915 	stw	r22,36(sp)
   40e24:	dcc00615 	stw	r19,24(sp)
   40e28:	dc800515 	stw	r18,20(sp)
   40e2c:	dc400415 	stw	r17,16(sp)
   40e30:	dc000315 	stw	r16,12(sp)
   40e34:	282b883a 	mov	r21,r5
   40e38:	2039883a 	mov	fp,r4
   40e3c:	d8800015 	stw	r2,0(sp)
   40e40:	2829003a 	cmpeq	r20,r5,zero
   40e44:	d8800117 	ldw	r2,4(sp)
   40e48:	14405217 	ldw	r17,328(r2)
   40e4c:	88001026 	beq	r17,zero,40e90 <__call_exitprocs+0xb0>
   40e50:	ddc00017 	ldw	r23,0(sp)
   40e54:	88800117 	ldw	r2,4(r17)
   40e58:	8c802204 	addi	r18,r17,136
   40e5c:	143fffc4 	addi	r16,r2,-1
   40e60:	80000916 	blt	r16,zero,40e88 <__call_exitprocs+0xa8>
   40e64:	05bfffc4 	movi	r22,-1
   40e68:	a000151e 	bne	r20,zero,40ec0 <__call_exitprocs+0xe0>
   40e6c:	8409883a 	add	r4,r16,r16
   40e70:	2105883a 	add	r2,r4,r4
   40e74:	1485883a 	add	r2,r2,r18
   40e78:	10c02017 	ldw	r3,128(r2)
   40e7c:	a8c01126 	beq	r21,r3,40ec4 <__call_exitprocs+0xe4>
   40e80:	843fffc4 	addi	r16,r16,-1
   40e84:	85bff81e 	bne	r16,r22,40e68 <__call_exitprocs+0x88>
   40e88:	d8800217 	ldw	r2,8(sp)
   40e8c:	10003126 	beq	r2,zero,40f54 <__call_exitprocs+0x174>
   40e90:	dfc00c17 	ldw	ra,48(sp)
   40e94:	df000b17 	ldw	fp,44(sp)
   40e98:	ddc00a17 	ldw	r23,40(sp)
   40e9c:	dd800917 	ldw	r22,36(sp)
   40ea0:	dd400817 	ldw	r21,32(sp)
   40ea4:	dd000717 	ldw	r20,28(sp)
   40ea8:	dcc00617 	ldw	r19,24(sp)
   40eac:	dc800517 	ldw	r18,20(sp)
   40eb0:	dc400417 	ldw	r17,16(sp)
   40eb4:	dc000317 	ldw	r16,12(sp)
   40eb8:	dec00d04 	addi	sp,sp,52
   40ebc:	f800283a 	ret
   40ec0:	8409883a 	add	r4,r16,r16
   40ec4:	88c00117 	ldw	r3,4(r17)
   40ec8:	2105883a 	add	r2,r4,r4
   40ecc:	1445883a 	add	r2,r2,r17
   40ed0:	18ffffc4 	addi	r3,r3,-1
   40ed4:	11800217 	ldw	r6,8(r2)
   40ed8:	1c001526 	beq	r3,r16,40f30 <__call_exitprocs+0x150>
   40edc:	10000215 	stw	zero,8(r2)
   40ee0:	303fe726 	beq	r6,zero,40e80 <__call_exitprocs+0xa0>
   40ee4:	00c00044 	movi	r3,1
   40ee8:	1c06983a 	sll	r3,r3,r16
   40eec:	90804017 	ldw	r2,256(r18)
   40ef0:	8cc00117 	ldw	r19,4(r17)
   40ef4:	1884703a 	and	r2,r3,r2
   40ef8:	10001426 	beq	r2,zero,40f4c <__call_exitprocs+0x16c>
   40efc:	90804117 	ldw	r2,260(r18)
   40f00:	1884703a 	and	r2,r3,r2
   40f04:	10000c1e 	bne	r2,zero,40f38 <__call_exitprocs+0x158>
   40f08:	2105883a 	add	r2,r4,r4
   40f0c:	1485883a 	add	r2,r2,r18
   40f10:	11400017 	ldw	r5,0(r2)
   40f14:	e009883a 	mov	r4,fp
   40f18:	303ee83a 	callr	r6
   40f1c:	88800117 	ldw	r2,4(r17)
   40f20:	98bfc81e 	bne	r19,r2,40e44 <__call_exitprocs+0x64>
   40f24:	b8800017 	ldw	r2,0(r23)
   40f28:	147fd526 	beq	r2,r17,40e80 <__call_exitprocs+0xa0>
   40f2c:	003fc506 	br	40e44 <__call_exitprocs+0x64>
   40f30:	8c000115 	stw	r16,4(r17)
   40f34:	003fea06 	br	40ee0 <__call_exitprocs+0x100>
   40f38:	2105883a 	add	r2,r4,r4
   40f3c:	1485883a 	add	r2,r2,r18
   40f40:	11000017 	ldw	r4,0(r2)
   40f44:	303ee83a 	callr	r6
   40f48:	003ff406 	br	40f1c <__call_exitprocs+0x13c>
   40f4c:	303ee83a 	callr	r6
   40f50:	003ff206 	br	40f1c <__call_exitprocs+0x13c>
   40f54:	88800117 	ldw	r2,4(r17)
   40f58:	1000081e 	bne	r2,zero,40f7c <__call_exitprocs+0x19c>
   40f5c:	89000017 	ldw	r4,0(r17)
   40f60:	20000726 	beq	r4,zero,40f80 <__call_exitprocs+0x1a0>
   40f64:	b9000015 	stw	r4,0(r23)
   40f68:	8809883a 	mov	r4,r17
   40f6c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   40f70:	bc400017 	ldw	r17,0(r23)
   40f74:	883fb71e 	bne	r17,zero,40e54 <__call_exitprocs+0x74>
   40f78:	003fc506 	br	40e90 <__call_exitprocs+0xb0>
   40f7c:	89000017 	ldw	r4,0(r17)
   40f80:	882f883a 	mov	r23,r17
   40f84:	2023883a 	mov	r17,r4
   40f88:	883fb21e 	bne	r17,zero,40e54 <__call_exitprocs+0x74>
   40f8c:	003fc006 	br	40e90 <__call_exitprocs+0xb0>

00040f90 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   40f90:	defffd04 	addi	sp,sp,-12
   40f94:	df000215 	stw	fp,8(sp)
   40f98:	df000204 	addi	fp,sp,8
   40f9c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   40fa0:	e0bfff17 	ldw	r2,-4(fp)
   40fa4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   40fa8:	e0bffe17 	ldw	r2,-8(fp)
   40fac:	1005003a 	cmpeq	r2,r2,zero
   40fb0:	1000021e 	bne	r2,zero,40fbc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   40fb4:	002af070 	cmpltui	zero,zero,43969
   40fb8:	00000106 	br	40fc0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   40fbc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   40fc0:	e037883a 	mov	sp,fp
   40fc4:	df000017 	ldw	fp,0(sp)
   40fc8:	dec00104 	addi	sp,sp,4
   40fcc:	f800283a 	ret

00040fd0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   40fd0:	defffd04 	addi	sp,sp,-12
   40fd4:	dfc00215 	stw	ra,8(sp)
   40fd8:	df000115 	stw	fp,4(sp)
   40fdc:	df000104 	addi	fp,sp,4
   40fe0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   40fe4:	e13fff17 	ldw	r4,-4(fp)
   40fe8:	0040f900 	call	40f90 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   40fec:	003fff06 	br	40fec <_exit+0x1c>
   40ff0:	00040ddc 	xori	zero,zero,4151
